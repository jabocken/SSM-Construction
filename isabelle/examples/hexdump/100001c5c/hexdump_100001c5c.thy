theory hexdump_100001c5c
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100001c5c, blockId == 0 ##
#####################################
*)

htriple "ht_100001c5c"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004028,8); ((RSP_0 -64 8),8) SEP (0x100004030,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x1000081f0,8); ((RSP_0 -64 8),8) SEP (0x1000081f8,4); ((RSP_0 -64 8),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c5c: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c5d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c5d: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c60"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004028,8); ((RSP_0 -64 16),8) SEP (0x100004030,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x1000081f0,8); ((RSP_0 -64 16),8) SEP (0x1000081f8,4); ((RSP_0 -64 16),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c60: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c62"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004028,8); ((RSP_0 -64 24),8) SEP (0x100004030,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x1000081f0,8); ((RSP_0 -64 24),8) SEP (0x1000081f8,4); ((RSP_0 -64 24),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c62: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c64"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004028,8); ((RSP_0 -64 32),8) SEP (0x100004030,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x1000081f0,8); ((RSP_0 -64 32),8) SEP (0x1000081f8,4); ((RSP_0 -64 32),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c64: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c66"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004028,8); ((RSP_0 -64 40),8) SEP (0x100004030,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x1000081f0,8); ((RSP_0 -64 40),8) SEP (0x1000081f8,4); ((RSP_0 -64 40),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c66: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c68"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP (0x100004028,8); ((RSP_0 -64 48),8) SEP (0x100004030,8); ((RSP_0 -64 48),8) SEP (0x100008180,4); ((RSP_0 -64 48),8) SEP (0x100008184,4); ((RSP_0 -64 48),8) SEP (0x1000081f0,8); ((RSP_0 -64 48),8) SEP (0x1000081f8,4); ((RSP_0 -64 48),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c68: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c69"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c69: SUB RSP, 24 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c6d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c6d: MOV RBX, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c70"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c70: MOV R15D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c73"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c73: LEA RDI, [RIP + 8240] 7"
 Post  "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100003caa ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c7a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100003caa ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [0x1000081f8,4] = [0x1000081f8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c7a: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c7f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c7f: LEA RDI, [RIP + 8240] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RDI = 0x100003cb6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c86"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RDI = 0x100003cb6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c86: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c8b"
 Separations "(0x1000081f8,4) SEP (bot(fun____error),4); (0x1000081f8,4) SEP (RSI_0,8); (0x1000081f8,4) SEP (RSP_0,8); (0x1000081f8,4) SEP ([0x100004028,8]_0,8); (0x1000081f8,4) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f8,4) SEP ((RSP_0 -64 8),8); (0x1000081f8,4) SEP ((RSP_0 -64 16),8); (0x1000081f8,4) SEP ((RSP_0 -64 24),8); (0x1000081f8,4) SEP ((RSP_0 -64 32),8); (0x1000081f8,4) SEP ((RSP_0 -64 40),8); (0x1000081f8,4) SEP ((RSP_0 -64 48),8); (0x1000081f8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c8b: MOV DWORD PTR [RIP + 25955], 1 10"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c95"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004028,8); ((RSP_0 -64 56),8) SEP (0x100004030,8); ((RSP_0 -64 56),8) SEP (0x100008180,4); ((RSP_0 -64 56),8) SEP (0x100008184,4); ((RSP_0 -64 56),8) SEP (0x1000081f0,8); ((RSP_0 -64 56),8) SEP (0x1000081f8,4); ((RSP_0 -64 56),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001c95: MOV QWORD PTR [RBP - 48], RBX 4"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c99"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP (0x100004000,8); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081e0,8); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP (0x1000081f8,4); (RSI_0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001c99: MOV R14, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001c9c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001c9c: LEA R12, [RIP + 8224] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ca3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ca3: LEA R13, [RIP + 1202] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 1 ##
#####################################
*)

htriple "ht_100001cc4"
 Separations "((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (RSI_0,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (RSP_0,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x100004000,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x100004028,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x100004030,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x100008180,4); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x100008184,4); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x1000081f0,8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP (0x1000081f8,4); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cc4: MOVSXD RAX, DWORD PTR [R13 + RCX * 4] 5"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cc9"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cc9: ADD RAX, R13 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ccc"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ccc: JMP RAX 2"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 2 ##
#####################################
*)

htriple "ht_100001f48"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f48: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f4b: JNE 4294975793 6"
 Post  "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 3 ##
#####################################
*)

htriple "ht_100001cce"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cce: LEA RDI, [RIP + 8257] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cd5"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cd5: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cda: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 4 ##
#####################################
*)

htriple "ht_100001cdc"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cdc: LEA RDI, [RIP + 8240] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d13 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ce3"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d13 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ce3: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ce8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ce8: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 5 ##
#####################################
*)

htriple "ht_100001cea"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cea: LEA RDI, [RIP + 8203] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cfc ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cf1"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cfc ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cf1: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cf6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cf6: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 6 ##
#####################################
*)

htriple "ht_100001cf8"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cf8: LEA RDI, [RIP + 8203] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d0a ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cff"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d0a ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cff: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d04: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 7 ##
#####################################
*)

htriple "ht_100001d06"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d06: LEA RDI, [RIP + 8195] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d10 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d0d"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d10 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d0d: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d12"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d12: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 8 ##
#####################################
*)

htriple "ht_100001d14"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d14: LEA RDI, [RIP + 8236] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d47 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d1b"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d47 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d1b: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d20"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d20: JMP 4294974634 2"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100001c5c, blockId == 9 ##
#####################################
*)

htriple "ht_100001d22"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d22: LEA RAX, [RIP + 25687] 7"
 Post  "RAX = 0x100008180 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d29"
 Separations "(0x100008180,4) SEP (bot(fun____error),4); (0x100008180,4) SEP (RSI_0,8); (0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004028,8]_0,8); (0x100008180,4) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x100008180 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d29: MOV DWORD PTR [RAX], 0 6"
 Post  "RAX = 0x100008180 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100008180 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d2f: JMP 4294974634 5"
 Post  "RAX = 0x100008180 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 10 ##
######################################
*)

htriple "ht_100001d34"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d34: LEA RDI, [RIP + 8135] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d02 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d3b"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d02 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d3b: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d40"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d40: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 11 ##
######################################
*)

htriple "ht_100001d45"
 Separations "(0x100004028,8) SEP (bot(fun____error),4); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d45: MOV RAX, QWORD PTR [RIP + 8924] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d4c"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d4c: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d4f"
 Separations ""
 Assertions  "(RDX,1) SEP (RSP_0,8); (RDX,1) SEP ((RSP_0 -64 8),8); (RDX,1) SEP ((RSP_0 -64 16),8); (RDX,1) SEP ((RSP_0 -64 24),8); (RDX,1) SEP ((RSP_0 -64 32),8); (RDX,1) SEP ((RSP_0 -64 40),8); (RDX,1) SEP ((RSP_0 -64 48),8); (RDX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d4f: MOV AL, BYTE PTR [RDX] 2"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d51"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d51: MOVSX ECX, AL 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d54"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d54: CMP ECX, 110 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d57"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d57: JG 4294975158 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 12 ##
######################################
*)

htriple "ht_100001d9f"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d9f: LEA RDI, [RIP + 8020] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cfa ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001da6"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cfa ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001da6: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dab: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 13 ##
######################################
*)

htriple "ht_100001db0"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001db0: LEA RDI, [RIP + 8016] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d07 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001db7"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d07 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001db7: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dbc: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 14 ##
######################################
*)

htriple "ht_100001dc1"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dc1: LEA RDI, [RIP + 8005] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d0d ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dc8"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d0d ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dc8: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dcd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dcd: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 15 ##
######################################
*)

htriple "ht_100001dd2"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dd2: LEA RDI, [RIP + 8000] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d19 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dd9"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d19 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dd9: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dde"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dde: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 16 ##
######################################
*)

htriple "ht_100001de3"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001de3: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001de8"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004028,8]_0,8); (bot(fun____error),4) SEP (0x100004000,8); (bot(fun____error),4) SEP (0x100004028,8); (bot(fun____error),4) SEP (0x100004030,8); (bot(fun____error),4) SEP (0x100008180,4); (bot(fun____error),4) SEP (0x100008184,4); (bot(fun____error),4) SEP (0x1000081f0,8); (bot(fun____error),4) SEP (0x1000081f8,4); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001de8: MOV DWORD PTR [RAX], 0 6"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dee"
 Separations "(0x100004028,8) SEP (bot(fun____error),4); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dee: MOV RAX, QWORD PTR [RIP + 8755] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001df5"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001df5: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001df8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001df8: LEA RSI, [RBP - 56] 4"
 Post  "RSI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dfc"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dfc: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001dfe"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001dfe: ExternalCall fun__strtoll 5"
 Post  "RAX = bot(fun__strtoll) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__strtoll {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e03"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e03: LEA RSI, [RIP + 25574] 7"
 Post  "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e0a"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e0a: MOV QWORD PTR [RSI], RAX 3"
 Post  "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e0d"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e0d: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e11"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e11: MOV DL, BYTE PTR [RBX] 2"
 Post  "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e13"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e13: MOV RCX, 18446744073709551615 7"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e1a: CMP DL, 102 3"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e1d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e1d: JLE 4294975227 6"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 17 ##
######################################
*)

htriple "ht_100001e47"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e47: LEA RDI, [RIP + 7932] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d4a ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e4e"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d4a ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e4e: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e53: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 18 ##
######################################
*)

htriple "ht_100001e58"
 Separations "(0x100004028,8) SEP (bot(fun____error),4); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e58: MOV RAX, QWORD PTR [RIP + 8649] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e5f"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e5f: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e62"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e62: MOV RDI, RBX 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e65"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e65: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e6a: LEA RCX, [RIP + 25363] 7"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e71"
 Separations "(0x100008184,4) SEP (bot(fun____error),4); (0x100008184,4) SEP (RSI_0,8); (0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004028,8]_0,8); (0x100008184,4) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e71: MOV DWORD PTR [RCX], EAX 2"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e73"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e73: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e75"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e75: JG 4294974634 6"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 19 ##
######################################
*)

htriple "ht_100001e80"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e80: LEA RDI, [RIP + 7800] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cff ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e87"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003cff ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e87: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e8c: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 20 ##
######################################
*)

htriple "ht_100001e91"
 Separations "(0x100004028,8) SEP (bot(fun____error),4); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e91: MOV RAX, QWORD PTR [RIP + 8592] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e98"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e98: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e9b"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e9b: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ea0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ea0: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 21 ##
######################################
*)

htriple "ht_100001ea5"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ea5: LEA RDI, [RIP + 7768] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d04 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001eac"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d04 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eac: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001eb1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eb1: JMP 4294974634 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 22 ##
######################################
*)

htriple "ht_100002131"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002131: ExternalCall fun_0x1000025b0 5"
 Post  "RAX = bot(fun_0x1000025b0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x1000025b0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 23 ##
######################################
*)

htriple "ht_100001caa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001caa: MOV EDI, R15D 3"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cad"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cad: MOV RSI, R14 3"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cb0"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cb0: MOV RDX, R12 3"
 Post  "RDX = 0x100003cc3 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cb3"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x100003cc3 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cb3: ExternalCall fun__getopt 5"
 Post  "RAX = bot(fun__getopt) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__getopt {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cb8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cb8: LEA ECX, [RAX - 65] 3"
 Post  "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cbb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cbb: CMP ECX, 55 3"
 Post  "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001cbe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001cbe: JA 4294975304 6"
 Post  "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 24 ##
######################################
*)

htriple "ht_100001d5d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d5d: CMP ECX, 100 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d60"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d60: JE 4294975172 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 25 ##
######################################
*)

htriple "ht_100001eb6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eb6: CMP ECX, 120 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001eb9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eb9: JE 4294975172 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 26 ##
######################################
*)

htriple "ht_100001d66"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d66: CMP ECX, 110 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d69"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d69: JNE 4294975815 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 27 ##
######################################
*)

htriple "ht_100001ec4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ec4: LEA RDX, [RIP + 25365] 7"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ecb"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ecb: MOV RCX, QWORD PTR [RDX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ece"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ece: MOV RCX, QWORD PTR [RCX + 8] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ed2"
 Separations ""
 Assertions  "((RCX +64 32),8) SEP (RSP_0,8); ((RCX +64 32),8) SEP ((RSP_0 -64 8),8); ((RCX +64 32),8) SEP ((RSP_0 -64 16),8); ((RCX +64 32),8) SEP ((RSP_0 -64 24),8); ((RCX +64 32),8) SEP ((RSP_0 -64 32),8); ((RCX +64 32),8) SEP ((RSP_0 -64 40),8); ((RCX +64 32),8) SEP ((RSP_0 -64 48),8); ((RCX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ed2: MOV RCX, QWORD PTR [RCX + 32] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ed6"
 Separations ""
 Assertions  "((RCX +64 7),1) SEP (RSP_0,8); ((RCX +64 7),1) SEP ((RSP_0 -64 8),8); ((RCX +64 7),1) SEP ((RSP_0 -64 16),8); ((RCX +64 7),1) SEP ((RSP_0 -64 24),8); ((RCX +64 7),1) SEP ((RSP_0 -64 32),8); ((RCX +64 7),1) SEP ((RSP_0 -64 40),8); ((RCX +64 7),1) SEP ((RSP_0 -64 48),8); ((RCX +64 7),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ed6: MOV BYTE PTR [RCX + 7], AL 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ed9"
 Separations "(0x100004028,8) SEP (bot(fun____error),4); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ed9: MOV RAX, QWORD PTR [RIP + 8520] 7"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ee0"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ee0: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ee3"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ee3: MOV AL, BYTE PTR [RAX] 2"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ee5"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ee5: MOV RCX, QWORD PTR [RDX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ee8"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ee8: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001eeb"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eeb: MOV RCX, QWORD PTR [RCX + 8] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001eef"
 Separations ""
 Assertions  "((RCX +64 32),8) SEP (RSP_0,8); ((RCX +64 32),8) SEP ((RSP_0 -64 8),8); ((RCX +64 32),8) SEP ((RSP_0 -64 16),8); ((RCX +64 32),8) SEP ((RSP_0 -64 24),8); ((RCX +64 32),8) SEP ((RSP_0 -64 32),8); ((RCX +64 32),8) SEP ((RSP_0 -64 40),8); ((RCX +64 32),8) SEP ((RSP_0 -64 48),8); ((RCX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eef: MOV RCX, QWORD PTR [RCX + 32] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ef3"
 Separations ""
 Assertions  "((RCX +64 7),1) SEP (RSP_0,8); ((RCX +64 7),1) SEP ((RSP_0 -64 8),8); ((RCX +64 7),1) SEP ((RSP_0 -64 16),8); ((RCX +64 7),1) SEP ((RSP_0 -64 24),8); ((RCX +64 7),1) SEP ((RSP_0 -64 32),8); ((RCX +64 7),1) SEP ((RSP_0 -64 40),8); ((RCX +64 7),1) SEP ((RSP_0 -64 48),8); ((RCX +64 7),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ef3: MOV BYTE PTR [RCX + 7], AL 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ef6"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ef6: JMP 4294974634 5"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 28 ##
######################################
*)

htriple "ht_100001d6f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d6f: LEA RAX, [RIP + 25706] 7"
 Post  "RAX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d76"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d76: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d79"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d79: MOV RCX, QWORD PTR [RAX + 8] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d7d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d7d: LEA RDX, [RIP + 25604] 7"
 Post  "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d84"
 Separations ""
 Assertions  "((RCX +64 32),8) SEP (RSP_0,8); ((RCX +64 32),8) SEP ((RSP_0 -64 8),8); ((RCX +64 32),8) SEP ((RSP_0 -64 16),8); ((RCX +64 32),8) SEP ((RSP_0 -64 24),8); ((RCX +64 32),8) SEP ((RSP_0 -64 32),8); ((RCX +64 32),8) SEP ((RSP_0 -64 40),8); ((RCX +64 32),8) SEP ((RSP_0 -64 48),8); ((RCX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d84: MOV QWORD PTR [RCX + 32], RDX 4"
 Post  "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d88"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d88: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d8b"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d8b: MOV RAX, QWORD PTR [RAX + 8] 4"
 Post  "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d8f"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d8f: LEA RCX, [RIP + 25590] 7"
 Post  "RCX = 0x10000818c ; RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d96"
 Separations ""
 Assertions  "((RAX +64 32),8) SEP (RSP_0,8); ((RAX +64 32),8) SEP ((RSP_0 -64 8),8); ((RAX +64 32),8) SEP ((RSP_0 -64 16),8); ((RAX +64 32),8) SEP ((RSP_0 -64 24),8); ((RAX +64 32),8) SEP ((RSP_0 -64 32),8); ((RAX +64 32),8) SEP ((RSP_0 -64 40),8); ((RAX +64 32),8) SEP ((RSP_0 -64 48),8); ((RAX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = 0x10000818c ; RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d96: MOV QWORD PTR [RAX + 32], RCX 4"
 Post  "RCX = 0x10000818c ; RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001d9a"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000818c ; RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001d9a: JMP 4294974634 5"
 Post  "RCX = 0x10000818c ; RDX = 0x100008188 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 29 ##
######################################
*)

htriple "ht_100002147"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002147: LEA RSI, [RIP + 7059] 7"
 Post  "RSI = 0x100003ce1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000214e"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x100003ce1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000214e: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSI = 0x100003ce1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 30 ##
######################################
*)

htriple "ht_100001e23"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e23: CMP DL, 103 3"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e26"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e26: JE 4294975242 6"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 31 ##
######################################
*)

htriple "ht_100001efb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001efb: TEST DL, DL 2"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001efd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001efd: JE 4294975258 2"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 32 ##
######################################
*)

htriple "ht_100001e2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e2c: CMP DL, 107 3"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e2f: JE 4294975248 6"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 33 ##
######################################
*)

htriple "ht_100001f0a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f0a: SHL RAX, 30 4"
 Post  "RAX = (bot(fun__strtoll) *64 0x40000000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x40000000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f0e: JMP 4294975252 2"
 Post  "RAX = (bot(fun__strtoll) *64 0x40000000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 34 ##
######################################
*)

htriple "ht_100001e35"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e35: CMP DL, 109 3"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e38"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e38: JNE 4294975255 6"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 35 ##
######################################
*)

htriple "ht_100001f10"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f10: SHL RAX, 10 4"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 36 ##
######################################
*)

htriple "ht_100001e3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e3e: SHL RAX, 20 4"
 Post  "RAX = (bot(fun__strtoll) *64 0x100000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001e42"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x100000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e42: JMP 4294975252 5"
 Post  "RAX = (bot(fun__strtoll) *64 0x100000) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 37 ##
######################################
*)

htriple "ht_100001f17"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f17: MOV QWORD PTR [RSI], RCX 3"
 Post  "RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 38 ##
######################################
*)

htriple "ht_100001e7b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001e7b: JMP 4294975798 5"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002136"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002136: LEA RSI, [RIP + 7159] 7"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000213d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000213d: MOV EDI, 1 5"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002142"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002142: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002145"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002145: JMP 4294975827 2"
 Post  "RAX = bot(fun__atoi) ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003d34 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 39 ##
######################################
*)

htriple "ht_100001ebb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ebb: CMP ECX, 111 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ebe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ebe: JNE 4294975815 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 40 ##
######################################
*)

htriple "ht_100001eff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001eff: CMP DL, 98 3"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f02"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f02: JNE 4294975255 2"
 Post  "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 41 ##
######################################
*)

htriple "ht_100001f1a"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f1a: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f1f"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100004028,8]_0,8); (bot(fun____error),4) SEP (0x100004000,8); (bot(fun____error),4) SEP (0x100004028,8); (bot(fun____error),4) SEP (0x100004030,8); (bot(fun____error),4) SEP (0x100008180,4); (bot(fun____error),4) SEP (0x100008184,4); (bot(fun____error),4) SEP (0x1000081f0,8); (bot(fun____error),4) SEP (0x1000081f8,4); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f1f: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f22"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f22: JNE 4294975299 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 42 ##
######################################
*)

htriple "ht_100001f04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f04: SHL RAX, 9 4"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f08"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 512) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f08: JMP 4294975252 2"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 43 ##
######################################
*)

htriple "ht_100001f14"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0xffffffffffffffff ; RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f14: MOV RCX, RAX 3"
 Post  "RSI = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 44 ##
######################################
*)

htriple "ht_100001f24"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f24: LEA RAX, [RIP + 25285] 7"
 Post  "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f2b"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f2b: CMP QWORD PTR [RAX], 0 4"
 Post  "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f2f: JS 4294975299 2"
 Post  "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 45 ##
######################################
*)

htriple "ht_100001f43"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f43: ExternalCall fun_0x100003341 5"
 Post  "RAX = bot(fun_0x100003341) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x100003341 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 46 ##
######################################
*)

htriple "ht_100001f31"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f31: MOV RDI, RBX 3"
 Post  "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f34"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f34: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f39"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f39: CMP RAX, 2 4"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f3d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f3d: JB 4294974634 6"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 47 ##
######################################
*)

htriple "ht_100001f51"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f51: LEA RAX, [RIP + 25224] 7"
 Post  "RAX = 0x1000081e0 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f58"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f58: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f5b"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f5b: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f5e"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f5e: CMP QWORD PTR [RAX], 0 4"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f62"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f62: JNE 4294975344 2"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 48 ##
######################################
*)

htriple "ht_100001f64"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f64: LEA RDI, [RIP + 7650] 7"
 Post  "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d4d ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f6b"
 Separations ""
 Assertions  ""
 Pre   "RCX = (b32(bot(fun__getopt)) -32 65) ; RDI = 0x100003d4d ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f6b: ExternalCall fun_0x10000223c 5"
 Post  "RAX = bot(fun_0x10000223c) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000223c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 49 ##
######################################
*)

htriple "ht_100001f70"
 Separations "(0x100004030,8) SEP (bot(fun____error),4); (0x100004030,8) SEP (RSI_0,8); (0x100004030,8) SEP (RSP_0,8); (0x100004030,8) SEP ([0x100004028,8]_0,8); (0x100004030,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004030,8) SEP ((RSP_0 -64 8),8); (0x100004030,8) SEP ((RSP_0 -64 16),8); (0x100004030,8) SEP ((RSP_0 -64 24),8); (0x100004030,8) SEP ((RSP_0 -64 32),8); (0x100004030,8) SEP ((RSP_0 -64 40),8); (0x100004030,8) SEP ((RSP_0 -64 48),8); (0x100004030,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f70: MOV RAX, QWORD PTR [RIP + 8377] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f77"
 Separations ""
 Assertions  "(RAX,4) SEP (RSP_0,8); (RAX,4) SEP ((RSP_0 -64 8),8); (RAX,4) SEP ((RSP_0 -64 16),8); (RAX,4) SEP ((RSP_0 -64 24),8); (RAX,4) SEP ((RSP_0 -64 32),8); (RAX,4) SEP ((RSP_0 -64 40),8); (RAX,4) SEP ((RSP_0 -64 48),8); (RAX,4) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f77: MOVSXD RCX, DWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f7a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f7a: MOV RAX, RCX 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f7d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f7d: SHL RAX, 3 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f81"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004028,8); ((RSP_0 -64 56),8) SEP (0x100004030,8); ((RSP_0 -64 56),8) SEP (0x100008180,4); ((RSP_0 -64 56),8) SEP (0x100008184,4); ((RSP_0 -64 56),8) SEP (0x1000081f0,8); ((RSP_0 -64 56),8) SEP (0x1000081f8,4); ((RSP_0 -64 56),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f81: MOV R13, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f85"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP (0x100004000,8); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081e0,8); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP (0x1000081f8,4); (RSI_0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f85: ADD RAX, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f89"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP (0x100004000,8); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081e0,8); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP (0x1000081f8,4); (RSI_0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f89: MOV QWORD PTR [R13], RAX 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f8d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f8d: SUB R15D, ECX 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f90"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f90: JE 4294975708 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 50 ##
######################################
*)

htriple "ht_100001f96"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f96: XOR ECX, ECX 2"
 Post  "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f98"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f98: CMP R15D, 1 4"
 Post  "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f9c"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f9c: SETNE CL 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001f9f"
 Separations ""
 Assertions  "((RAX +64 (RCX *64 8)),8) SEP (RSP_0,8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 8),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 16),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 24),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 32),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 40),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 48),8); ((RAX +64 (RCX *64 8)),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001f9f: MOV RAX, QWORD PTR [RAX + RCX * 8] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fa3"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fa3: MOVZX ECX, BYTE PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fa6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fa6: CMP RCX, 43 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001faa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001faa: JNE 4294975457 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 51 ##
######################################
*)

htriple "ht_1000020dc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020dc: ADD RSP, 24 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e0"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004028,8); ((RSP_0 -64 40),8) SEP (0x100004030,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x1000081f0,8); ((RSP_0 -64 40),8) SEP (0x1000081f8,4); ((RSP_0 -64 40),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e0: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e1"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004028,8); ((RSP_0 -64 32),8) SEP (0x100004030,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x1000081f0,8); ((RSP_0 -64 32),8) SEP (0x1000081f8,4); ((RSP_0 -64 32),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e1: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e3"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004028,8); ((RSP_0 -64 24),8) SEP (0x100004030,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x1000081f0,8); ((RSP_0 -64 24),8) SEP (0x1000081f8,4); ((RSP_0 -64 24),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e3: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e5"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004028,8); ((RSP_0 -64 16),8) SEP (0x100004030,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x1000081f0,8); ((RSP_0 -64 16),8) SEP (0x1000081f8,4); ((RSP_0 -64 16),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e5: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e7"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004028,8); ((RSP_0 -64 8),8) SEP (0x100004030,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x1000081f0,8); ((RSP_0 -64 8),8) SEP (0x1000081f8,4); ((RSP_0 -64 8),8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e7: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020e9"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020e9: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020ea"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020ea: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 52 ##
######################################
*)

htriple "ht_100001fac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fac: LEA RDI, [RAX + 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fb0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fb0: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fb2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fb2: CMP CL, 43 3"
 Post  "RDX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fb5"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fb5: SETE DL 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fb8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fb8: CMOVNE RDI, RAX 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fbc"
 Separations ""
 Assertions  "((RAX +64 RDX),1) SEP (RSP_0,8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 8),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 16),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 24),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 32),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 40),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 48),8); ((RAX +64 RDX),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fbc: MOVZX EAX, BYTE PTR [RAX + RDX] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fc0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fc0: CMP RAX, 48 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fc4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fc4: JE 4294975506 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 53 ##
######################################
*)

htriple "ht_100001fe1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fe1: CMP R15D, 2 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fe5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fe5: JL 4294975708 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 54 ##
######################################
*)

htriple "ht_100001fc6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fc6: CMP AL, 120 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fc8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fc8: JNE 4294975556 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 55 ##
######################################
*)

htriple "ht_100002012"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002012: CMP BYTE PTR [RDI + 1], 120 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002016"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002016: JNE 4294975556 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 56 ##
######################################
*)

htriple "ht_100001fca"
 Separations ""
 Assertions  "((RDI +64 1),1) SEP (RSP_0,8); ((RDI +64 1),1) SEP ((RSP_0 -64 8),8); ((RDI +64 1),1) SEP ((RSP_0 -64 16),8); ((RDI +64 1),1) SEP ((RSP_0 -64 24),8); ((RDI +64 1),1) SEP ((RSP_0 -64 32),8); ((RDI +64 1),1) SEP ((RSP_0 -64 40),8); ((RDI +64 1),1) SEP ((RSP_0 -64 48),8); ((RDI +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fca: MOVZX ECX, BYTE PTR [RDI + 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fce"
 Separations "(0x100004000,8) SEP (bot(fun____error),4); (0x100004000,8) SEP (RSI_0,8); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004028,8]_0,8); (0x100004000,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fce: MOV RDX, QWORD PTR [RIP + 8235] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fd5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fd5: TEST BYTE PTR [RDX + RCX * 4 + 62], 1 5"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fda"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fda: JE 4294975556 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 57 ##
######################################
*)

htriple "ht_100002044"
 Separations "(0x100004000,8) SEP (bot(fun____error),4); (0x100004000,8) SEP (RSI_0,8); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004028,8]_0,8); (0x100004000,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002044: MOV RSI, QWORD PTR [RIP + 8117] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000204b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000204b: MOV CL, 1 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000204d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000204d: XOR R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002050"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002050: MOV EDX, 8 5"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002055"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002055: TEST BYTE PTR [RSI + RAX * 4 + 61], 4 5"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000205a"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000205a: JNE 4294975585 2"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 58 ##
######################################
*)

htriple "ht_100001fdc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fdc: INC RDI 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001fdf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001fdf: JMP 4294975516 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 59 ##
######################################
*)

htriple "ht_100001feb"
 Separations "(0x100004000,8) SEP (bot(fun____error),4); (0x100004000,8) SEP (RSI_0,8); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004028,8]_0,8); (0x100004000,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001feb: MOV RDX, QWORD PTR [RIP + 8206] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ff2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ff2: TEST BYTE PTR [RDX + RCX * 4 + 61], 4 5"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ff7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ff7: JNE 4294975404 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 60 ##
######################################
*)

htriple "ht_100001ff9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ff9: CMP CL, 120 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ffc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100001ffc: JNE 4294975708 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 61 ##
######################################
*)

htriple "ht_100002002"
 Separations ""
 Assertions  "((RAX +64 1),1) SEP (RSP_0,8); ((RAX +64 1),1) SEP ((RSP_0 -64 8),8); ((RAX +64 1),1) SEP ((RSP_0 -64 16),8); ((RAX +64 1),1) SEP ((RSP_0 -64 24),8); ((RAX +64 1),1) SEP ((RSP_0 -64 32),8); ((RAX +64 1),1) SEP ((RSP_0 -64 40),8); ((RAX +64 1),1) SEP ((RSP_0 -64 48),8); ((RAX +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002002: MOVZX ESI, BYTE PTR [RAX + 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002006"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002006: TEST BYTE PTR [RDX + RSI * 4 + 62], 1 5"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000200b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000200b: JNE 4294975404 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 62 ##
######################################
*)

htriple "ht_10000200d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000200d: JMP 4294975708 5"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 63 ##
######################################
*)

htriple "ht_100002018"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002018: ADD RDI, 2 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 64 ##
######################################
*)

htriple "ht_10000201c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000201c: LEA RBX, [RDI - 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002020"
 Separations "(0x100004000,8) SEP (bot(fun____error),4); (0x100004000,8) SEP (RSI_0,8); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004028,8]_0,8); (0x100004000,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002020: MOV RCX, QWORD PTR [RIP + 8153] 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 65 ##
######################################
*)

htriple "ht_100002027"
 Separations ""
 Assertions  "((RBX +64 1),1) SEP (RSP_0,8); ((RBX +64 1),1) SEP ((RSP_0 -64 8),8); ((RBX +64 1),1) SEP ((RSP_0 -64 16),8); ((RBX +64 1),1) SEP ((RSP_0 -64 24),8); ((RBX +64 1),1) SEP ((RSP_0 -64 32),8); ((RBX +64 1),1) SEP ((RSP_0 -64 40),8); ((RBX +64 1),1) SEP ((RSP_0 -64 48),8); ((RBX +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002027: MOVZX EAX, BYTE PTR [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000202b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000202b: INC RBX 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000202e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000202e: TEST BYTE PTR [RCX + RAX * 4 + 62], 1 5"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002033"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002033: JNE 4294975527 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 66 ##
######################################
*)

htriple "ht_100002035"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002035: XOR ECX, ECX 2"
 Post  "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002037"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002037: MOV EDX, 16 5"
 Post  "RCX = 0 ; RDX = 16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000203c"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RDX = 16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000203c: MOV R14D, 16 6"
 Post  "RCX = 0 ; RDX = 16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 16 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002042"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RDX = 16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 16 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002042: JMP 4294975602 2"
 Post  "RCX = 0 ; RDX = 16 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 16 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 67 ##
######################################
*)

htriple "ht_10000205c"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000205c: MOV RBX, RDI 3"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000205f"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000205f: JMP 4294975602 2"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 68 ##
######################################
*)

htriple "ht_100002061"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002061: MOV RBX, RDI 3"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 69 ##
######################################
*)

htriple "ht_100002072"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002072: CMP RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002075"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002075: JE 4294975708 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 70 ##
######################################
*)

htriple "ht_100002064"
 Separations ""
 Assertions  "((RBX +64 1),1) SEP (RSP_0,8); ((RBX +64 1),1) SEP ((RSP_0 -64 8),8); ((RBX +64 1),1) SEP ((RSP_0 -64 16),8); ((RBX +64 1),1) SEP ((RSP_0 -64 24),8); ((RBX +64 1),1) SEP ((RSP_0 -64 32),8); ((RBX +64 1),1) SEP ((RSP_0 -64 40),8); ((RBX +64 1),1) SEP ((RSP_0 -64 48),8); ((RBX +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002064: MOVZX EAX, BYTE PTR [RBX + 1] 4"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002068"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002068: INC RBX 3"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000206b"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000206b: TEST BYTE PTR [RSI + RAX * 4 + 61], 4 5"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002070"
 Separations ""
 Assertions  ""
 Pre   "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002070: JNE 4294975588 2"
 Post  "RDX = 8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 0 ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 71 ##
######################################
*)

htriple "ht_100002077"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002077: MOV R12, RBX 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000207a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000207a: CMP AL, 46 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000207c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000207c: JNE 4294975633 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 72 ##
######################################
*)

htriple "ht_10000207e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000207e: TEST CL, CL 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002080"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002080: JE 4294975708 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 73 ##
######################################
*)

htriple "ht_100002091"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002091: LEA R15, [RBP - 64] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002095"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002095: MOV RSI, R15 3"
 Post  "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002098"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002098: ExternalCall fun__strtoll 5"
 Post  "RAX = bot(fun__strtoll) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__strtoll {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000209d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000209d: LEA RDX, [RIP + 24908] 7"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020a4"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020a4: MOV QWORD PTR [RDX], RAX 3"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020a7: CMP QWORD PTR [R15], RBX 3"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020aa: JNE 4294975701 2"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 74 ##
######################################
*)

htriple "ht_100002082"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002082: LEA R12, [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002086"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002086: MOV R14D, 10 6"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 10 ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000208c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 10 ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000208c: MOV EDX, 10 5"
 Post  "RDX = 10 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = 10 ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 75 ##
######################################
*)

htriple "ht_1000020ac"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020ac: MOV CL, BYTE PTR [R12] 4"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020b0: CMP CL, 98 3"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020b3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020b3: JE 4294975683 2"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 76 ##
######################################
*)

htriple "ht_1000020d5"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020d5: MOV QWORD PTR [RDX], 0 7"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 77 ##
######################################
*)

htriple "ht_1000020b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020b5: CMP CL, 66 3"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020b8: JNE 4294975697 2"
 Post  "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 78 ##
######################################
*)

htriple "ht_1000020c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020c3: SHL RAX, 9 4"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020c7"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 512) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020c7: MOV QWORD PTR [RDX], RAX 3"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 512) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020ca: INC R12 3"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 79 ##
######################################
*)

htriple "ht_1000020ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020ba: SHL RAX, 10 4"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020be"
 Separations "(0x1000081f0,8) SEP (bot(fun____error),4); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 1024) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020be: MOV QWORD PTR [RDX], RAX 3"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 1024) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020c1: JMP 4294975693 2"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 80 ##
######################################
*)

htriple "ht_1000020d1"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020d1: TEST CL, CL 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020d3"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020d3: JE 4294975723 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 81 ##
######################################
*)

htriple "ht_1000020cd"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020cd: MOV CL, BYTE PTR [R12] 4"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 82 ##
######################################
*)

htriple "ht_1000020eb"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020eb: CMP R14D, 16 4"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020ef"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020ef: JE 4294975739 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 83 ##
######################################
*)

htriple "ht_1000020f1"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020f1: CMP R14D, 10 4"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020f5"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020f5: JNE 4294975779 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 84 ##
######################################
*)

htriple "ht_1000020fb"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020fb: MOV AL, 120 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 85 ##
######################################
*)

htriple "ht_1000020f7"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020f7: MOV AL, 100 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000020f9"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020f9: JMP 4294975741 2"
 Post  "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 86 ##
######################################
*)

htriple "ht_100002123"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP (0x100004000,8); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081e0,8); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP (0x1000081f8,4); (RSI_0,8) SEP ((0x10000215c +64 ((b32(bot(fun__getopt)) -32 65) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002123: MOV RAX, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002127"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002127: MOV QWORD PTR [RAX + 8], 0 8"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000212f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000212f: JMP 4294975708 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 87 ##
######################################
*)

htriple "ht_1000020fd"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x1000081f0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "1000020fd: LEA RDX, [RIP + 24796] 7"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002104"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002104: MOV RCX, QWORD PTR [RDX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002107"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002107: MOV RCX, QWORD PTR [RCX + 8] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000210b"
 Separations ""
 Assertions  "((RCX +64 32),8) SEP (RSP_0,8); ((RCX +64 32),8) SEP ((RSP_0 -64 8),8); ((RCX +64 32),8) SEP ((RSP_0 -64 16),8); ((RCX +64 32),8) SEP ((RSP_0 -64 24),8); ((RCX +64 32),8) SEP ((RSP_0 -64 32),8); ((RCX +64 32),8) SEP ((RSP_0 -64 40),8); ((RCX +64 32),8) SEP ((RSP_0 -64 48),8); ((RCX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000210b: MOV RCX, QWORD PTR [RCX + 32] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000210f"
 Separations ""
 Assertions  "((RCX +64 7),1) SEP (RSP_0,8); ((RCX +64 7),1) SEP ((RSP_0 -64 8),8); ((RCX +64 7),1) SEP ((RSP_0 -64 16),8); ((RCX +64 7),1) SEP ((RSP_0 -64 24),8); ((RCX +64 7),1) SEP ((RSP_0 -64 32),8); ((RCX +64 7),1) SEP ((RSP_0 -64 40),8); ((RCX +64 7),1) SEP ((RSP_0 -64 48),8); ((RCX +64 7),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000210f: MOV BYTE PTR [RCX + 7], AL 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002112"
 Separations "(0x1000081e0,8) SEP (RSI_0,8)"
 Assertions  ""
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002112: MOV RCX, QWORD PTR [RDX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002115"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002115: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002118"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002118: MOV RCX, QWORD PTR [RCX + 8] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000211c"
 Separations ""
 Assertions  "((RCX +64 32),8) SEP (RSP_0,8); ((RCX +64 32),8) SEP ((RSP_0 -64 8),8); ((RCX +64 32),8) SEP ((RSP_0 -64 16),8); ((RCX +64 32),8) SEP ((RSP_0 -64 24),8); ((RCX +64 32),8) SEP ((RSP_0 -64 32),8); ((RCX +64 32),8) SEP ((RSP_0 -64 40),8); ((RCX +64 32),8) SEP ((RSP_0 -64 48),8); ((RCX +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "10000211c: MOV RCX, QWORD PTR [RCX + 32] 4"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002120"
 Separations ""
 Assertions  "((RCX +64 7),1) SEP (RSP_0,8); ((RCX +64 7),1) SEP ((RSP_0 -64 8),8); ((RCX +64 7),1) SEP ((RSP_0 -64 16),8); ((RCX +64 7),1) SEP ((RSP_0 -64 24),8); ((RCX +64 7),1) SEP ((RSP_0 -64 32),8); ((RCX +64 7),1) SEP ((RSP_0 -64 40),8); ((RCX +64 7),1) SEP ((RSP_0 -64 48),8); ((RCX +64 7),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002120: MOV BYTE PTR [RCX + 7], AL 3"
 Post  "RDX = 0x1000081e0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 72) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100001c5c, blockId == 88 ##
######################################
*)

htriple "ht_100002153"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002153: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002155"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 Instruction "100002155: ExternalCall fun__errx 5"
 Post  "RAX = bot(fun__errx) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x10000215c ; R12 = 0x100003cc3 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__errx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
