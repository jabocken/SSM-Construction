theory hexdump_100000d1b
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100000d1b, blockId == 0 ##
#####################################
*)

htriple "ht_100000d1b"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 8),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 8),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
 Instruction "100000d1b: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
 Instruction "100000d1c: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d1f"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
 Instruction "100000d1f: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d21"
 Separations "((RSP_0 -64 24),8) SEP (RSI_0,1); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 24),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 24),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0"
 Instruction "100000d21: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d22"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d22: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d25"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d25: MOV RBX, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d28"
 Separations "(RSI_0,1) SEP (RSP_0,8); (RSI_0,1) SEP ([(RDI_0 +64 16),8]_0,1); (RSI_0,1) SEP (0x100004000,8); (RSI_0,1) SEP ((RDI_0 +64 16),8); (RSI_0,1) SEP ((RDI_0 +64 24),8); (RSI_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); (RSI_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); (RSI_0,1) SEP ((RSP_0 -64 8),8); (RSI_0,1) SEP ((RSP_0 -64 16),8); (RSI_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d28: MOVZX EDI, BYTE PTR [RSI] 3"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d2b"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d2b: CMP RDI, 31 4"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d2f: JA 4294970712 2"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 1 ##
#####################################
*)

htriple "ht_100000d31"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d31: MOV RAX, QWORD PTR [RBX + 16] 4"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d35"
 Separations "([(RDI_0 +64 16),8]_0,1) SEP (RSI_0,1); ([(RDI_0 +64 16),8]_0,1) SEP (RSP_0,8); ([(RDI_0 +64 16),8]_0,1) SEP (0x100004000,8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 24),8); ([(RDI_0 +64 16),8]_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ([(RDI_0 +64 16),8]_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 8),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d35: MOV BYTE PTR [RAX], 115 3"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d38"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d38: LEA RAX, [RIP + 29881] 7"
 Post  "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d3f: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d42"
 Separations "(RSI_0,1) SEP (RSP_0,8); (RSI_0,1) SEP ([(RDI_0 +64 16),8]_0,1); (RSI_0,1) SEP (0x100004000,8); (RSI_0,1) SEP ((RDI_0 +64 16),8); (RSI_0,1) SEP ((RDI_0 +64 24),8); (RSI_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); (RSI_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); (RSI_0,1) SEP ((RSP_0 -64 8),8); (RSI_0,1) SEP ((RSP_0 -64 16),8); (RSI_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d42: MOV AL, BYTE PTR [R14] 3"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d45"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 24),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d45: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d49"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d49: JE 4294970738 2"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 2 ##
#####################################
*)

htriple "ht_100000d58"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d58: CMP DIL, 127 4"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d5c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d5c: JNE 4294970754 2"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 3 ##
#####################################
*)

htriple "ht_100000d4b"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d4b: CMP AL, 10 2"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d4d"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d4d: JNE 4294970738 2"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 4 ##
#####################################
*)

htriple "ht_100000d72"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d72: MOVZX EAX, AL 3"
 Post  "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d75"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d75: LEA RCX, [RIP + 12996] 7"
 Post  "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = 0x100004040 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d7c"
 Separations "((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP (RSI_0,1); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP (RSP_0,8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ([(RDI_0 +64 16),8]_0,1); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP (0x100004000,8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 16),8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 24),8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 8),8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 16),8); ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = 0x100004040 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d7c: MOV RSI, QWORD PTR [RCX + RAX * 8] 4"
 Post  "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = 0x100004040 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d80"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = 0x100004040 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d80: JMP 4294970790 2"
 Post  "RAX = b8([RSI_0,1]_0) ; RBX = RDI_0 ; RCX = 0x100004040 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 5 ##
#####################################
*)

htriple "ht_100000d4f"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d4f: LEA RSI, [RIP + 11550] 7"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a74 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d56"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a74 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d56: JMP 4294970790 2"
 Post  "RAX = overwrite(8,0x1000081f8,b8([RSI_0,1]_0)) ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a74 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 6 ##
#####################################
*)

htriple "ht_100000d5e"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d5e: MOV RAX, QWORD PTR [RBX + 16] 4"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d62"
 Separations "([(RDI_0 +64 16),8]_0,1) SEP (RSI_0,1); ([(RDI_0 +64 16),8]_0,1) SEP (RSP_0,8); ([(RDI_0 +64 16),8]_0,1) SEP (0x100004000,8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 24),8); ([(RDI_0 +64 16),8]_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ([(RDI_0 +64 16),8]_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 8),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d62: MOV BYTE PTR [RAX], 115 3"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d65"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 24),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d65: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d69"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d69: LEA RSI, [RIP + 11527] 7"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a77 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d70"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a77 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d70: JMP 4294970790 2"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a77 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 7 ##
#####################################
*)

htriple "ht_100000d82"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d82: CMP DIL, 32 4"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d86"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d86: JNE 4294970801 2"
 Post  "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 8 ##
#####################################
*)

htriple "ht_100000da6"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000da6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RDI_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000da8"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RDI_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000da8: POP RBX 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000da9"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 8),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 8),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000da9: POP R14 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dab"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dab: POP RBP 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dac"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dac: ExternalCallWithReturn fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R14;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000d1b, blockId == 9 ##
#####################################
*)

htriple "ht_100000d88"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d88: LEA RAX, [RIP + 29801] 7"
 Post  "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d8f: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d92"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d92: JE 4294970801 2"
 Post  "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 10 ##
######################################
*)

htriple "ht_100000db1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000db1: TEST DIL, DIL 3"
 Post  "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000db4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000db4: JS 4294970824 2"
 Post  "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 11 ##
######################################
*)

htriple "ht_100000d94"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d94: MOV RAX, QWORD PTR [RBX + 16] 4"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d98"
 Separations "([(RDI_0 +64 16),8]_0,1) SEP (RSI_0,1); ([(RDI_0 +64 16),8]_0,1) SEP (RSP_0,8); ([(RDI_0 +64 16),8]_0,1) SEP (0x100004000,8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RDI_0 +64 24),8); ([(RDI_0 +64 16),8]_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ([(RDI_0 +64 16),8]_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 8),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 16),8); ([(RDI_0 +64 16),8]_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d98: MOV BYTE PTR [RAX], 115 3"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d9b"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 24),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d9b: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d9f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000d9f: LEA RSI, [RIP + 11477] 7"
 Post  "RAX = [(RDI_0 +64 16),8]_0 ; RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [(RDI_0 +64 24),8]_0 ; RSI = 0x100003a7b ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = 115 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 12 ##
######################################
*)

htriple "ht_100000db6"
 Separations "(0x100004000,8) SEP (RSI_0,1); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 16),8]_0,1); (0x100004000,8) SEP ((RDI_0 +64 16),8); (0x100004000,8) SEP ((RDI_0 +64 24),8); (0x100004000,8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); (0x100004000,8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000db6: MOV RCX, QWORD PTR [RIP + 12867] 7"
 Post  "RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dbd"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dbd: MOV EAX, 262144 5"
 Post  "RAX = 0x40000 ; RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dc2"
 Separations "(([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP (RSI_0,1); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP (RSP_0,8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ([(RDI_0 +64 16),8]_0,1); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP (0x100004000,8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((RDI_0 +64 16),8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((RDI_0 +64 24),8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RAX = 0x40000 ; RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dc2: AND EAX, DWORD PTR [RCX + RDI * 4 + 60] 4"
 Post  "RAX = (0x40000 &32 b32([([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0)) ; RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dc6"
 Separations ""
 Assertions  ""
 Pre   "RAX = (0x40000 &32 b32([([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0)) ; RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dc6: JMP 4294970834 2"
 Post  "RAX = (0x40000 &32 b32([([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0)) ; RBX = RDI_0 ; RCX = [0x100004000,8]_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 13 ##
######################################
*)

htriple "ht_100000dc8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dc8: MOV ESI, 262144 5"
 Post  "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = 0x40000 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dcd"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = 0x40000 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 16),8]_0,1] = [[(RDI_0 +64 16),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 16),8] = [(RDI_0 +64 16),8]_0 ; [(RDI_0 +64 24),8] = [(RDI_0 +64 24),8]_0 ; [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4] = [([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4]_0 ; [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8] = [(0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dcd: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R14;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 14 ##
######################################
*)

htriple "ht_100000dd2"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dd2: MOV RCX, QWORD PTR [RBX + 16] 4"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dd6"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dd6: TEST EAX, EAX 2"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dd8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dd8: JE 4294970847 2"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 15 ##
######################################
*)

htriple "ht_100000dda"
 Separations ""
 Assertions  "(RCX,1) SEP (RSP_0,8); (RCX,1) SEP ((RSP_0 -64 8),8); (RCX,1) SEP ((RSP_0 -64 16),8); (RCX,1) SEP ((RSP_0 -64 24),8)"
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dda: MOV BYTE PTR [RCX], 99 3"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ddd"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000ddd: JMP 4294970850 2"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 16 ##
######################################
*)

htriple "ht_100000ddf"
 Separations ""
 Assertions  "(RCX,1) SEP (RSP_0,8); (RCX,1) SEP ((RSP_0 -64 8),8); (RCX,1) SEP ((RSP_0 -64 16),8); (RCX,1) SEP ((RSP_0 -64 24),8)"
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000ddf: MOV BYTE PTR [RCX], 120 3"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000d1b, blockId == 17 ##
######################################
*)

htriple "ht_100000de2"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RDI_0 +64 24),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000de2: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000de6"
 Separations "(RSI_0,1) SEP (RSP_0,8); (RSI_0,1) SEP ([(RDI_0 +64 16),8]_0,1); (RSI_0,1) SEP (0x100004000,8); (RSI_0,1) SEP ((RDI_0 +64 16),8); (RSI_0,1) SEP ((RDI_0 +64 24),8); (RSI_0,1) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); (RSI_0,1) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8); (RSI_0,1) SEP ((RSP_0 -64 8),8); (RSI_0,1) SEP ((RSP_0 -64 16),8); (RSI_0,1) SEP ((RSP_0 -64 24),8)"
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000de6: MOVZX ESI, BYTE PTR [R14] 4"
 Post  "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dea"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dea: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dec"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 16),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 16),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RDI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000dec: POP RBX 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ded"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 16),8]_0,1); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 8),8) SEP (([0x100004000,8]_0 +64 ((b32([RSI_0,1]_0) *64 4) +64 60)),4); ((RSP_0 -64 8),8) SEP ((0x100004040 +64 (b8([RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000ded: POP R14 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000def"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000def: POP RBP 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000df0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 Instruction "100000df0: ExternalCallWithReturn fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R14;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
