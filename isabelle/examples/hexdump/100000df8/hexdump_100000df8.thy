theory hexdump_100000df8
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100000df8, blockId == 0 ##
#####################################
*)

htriple "ht_100000df8"
 Separations "((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100008198,8); ((RSP_0 -64 8),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000df8: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000df9"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000df9: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dfc"
 Separations "((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100008198,8); ((RSP_0 -64 16),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000dfc: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000dfe"
 Separations "((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100008198,8); ((RSP_0 -64 24),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000dfe: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e00"
 Separations "((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100008198,8); ((RSP_0 -64 32),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e00: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e02"
 Separations "((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100008198,8); ((RSP_0 -64 40),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e02: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e04"
 Separations "((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP (0x100008198,8); ((RSP_0 -64 48),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e04: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e05"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e05: SUB RSP, 56 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e09"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e09: ExternalCall fun_0x10000124c 5"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 FunctionConstraints "PRESERVES fun_0x10000124c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e0e"
 Separations "((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008198,8); ((RSP_0 -64 64),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e0e: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e12"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e12: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e15"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e15: JE 4294971757 6"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 1 ##
#####################################
*)

htriple "ht_100000e1b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e1b: LEA R14, [RIP + 970] 7"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0x1000011ec ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e22"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0x1000011ec ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
 Instruction "100000e22: XOR R15D, R15D 3"
 Post  "RAX = bot(fun_0x10000124c) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x1000011ec ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),10] = [(RSP_0 -64 104),10]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 2 ##
#####################################
*)

htriple "ht_10000116d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000116d: LEA RAX, [RIP + 28812] 7"
 Post  "RAX = 0x100008200 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001174"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100008200 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001174: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001177"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001177: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000117a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000117a: JE 4294971867 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 3 ##
#####################################
*)

htriple "ht_100000e38"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e38: MOV RCX, QWORD PTR [RIP + 29529] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e3f"
 Separations "((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008198,8); ((RSP_0 -64 72),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e3f: MOV QWORD PTR [RBP - 64], RCX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 4 ##
#####################################
*)

htriple "ht_10000115b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000115b: ExternalCall fun_0x10000124c 5"
 Post  "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun_0x10000124c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001160"
 Separations "((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008198,8); ((RSP_0 -64 64),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001160: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001164"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001164: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001167"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001167: JNE 4294970917 6"
 Post  "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 5 ##
#####################################
*)

htriple "ht_100000e54"
 Separations "((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008198,8); ((RSP_0 -64 72),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e54: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e58"
 Separations "((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008198,8); ((RSP_0 -64 64),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e58: MOV R13, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; R13 = bot(fun_0x10000124c) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 6 ##
#####################################
*)

htriple "ht_100001140"
 Separations "((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100008198,8); ((RSP_0 -64 80),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001140: MOV RAX, QWORD PTR [RBP - 72] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001144"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8); (RAX,8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001144: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001147"
 Separations "((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008198,8); ((RSP_0 -64 72),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001147: MOV RCX, QWORD PTR [RBP - 64] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000114b"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000114b: MOV QWORD PTR [RIP + 28742], RCX 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001152"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001152: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001155"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001155: JNE 4294970947 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 7 ##
#####################################
*)

htriple "ht_100000e66"
 Separations ""
 Assertions  "((RCX +64 20),4) SEP (RSP_0,8); ((RCX +64 20),4) SEP ((RSP_0 -64 8),8); ((RCX +64 20),4) SEP ((RSP_0 -64 16),8); ((RCX +64 20),4) SEP ((RSP_0 -64 24),8); ((RCX +64 20),4) SEP ((RSP_0 -64 32),8); ((RCX +64 20),4) SEP ((RSP_0 -64 40),8); ((RCX +64 20),4) SEP ((RSP_0 -64 48),8); ((RCX +64 20),4) SEP ((RSP_0 -64 52),4); ((RCX +64 20),4) SEP ((RSP_0 -64 64),8); ((RCX +64 20),4) SEP ((RSP_0 -64 72),8); ((RCX +64 20),4) SEP ((RSP_0 -64 80),8); ((RCX +64 20),4) SEP ((RSP_0 -64 88),8); ((RCX +64 20),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e66: MOV R12D, DWORD PTR [RCX + 20] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e6a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e6a: TEST R12D, R12D 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e6d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e6d: JE 4294971700 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 8 ##
#####################################
*)

htriple "ht_100000e73"
 Separations "((RSP_0 -64 88),8) SEP (0x100004000,8); ((RSP_0 -64 88),8) SEP (0x100008198,8); ((RSP_0 -64 88),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e73: MOV QWORD PTR [RBP - 80], RCX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000df8, blockId == 9 ##
#####################################
*)

htriple "ht_100001134"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 52),4); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 80),8); (RCX,8) SEP ((RSP_0 -64 88),8); (RCX,8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001134: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001137"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001137: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000113a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000113a: JNE 4294970972 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 10 ##
######################################
*)

htriple "ht_100000e84"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 52),4); (0x1000081a0,8) SEP ((RSP_0 -64 64),8); (0x1000081a0,8) SEP ((RSP_0 -64 72),8); (0x1000081a0,8) SEP ((RSP_0 -64 80),8); (0x1000081a0,8) SEP ((RSP_0 -64 88),8); (0x1000081a0,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e84: MOV RCX, QWORD PTR [RIP + 29461] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e8b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e8b: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e8e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e8e: JE 4294971048 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 11 ##
######################################
*)

htriple "ht_100001127"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001127: DEC R12D 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000112a"
 Separations "((RSP_0 -64 88),8) SEP (0x100004000,8); ((RSP_0 -64 88),8) SEP (0x100008198,8); ((RSP_0 -64 88),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000112a: MOV RCX, QWORD PTR [RBP - 80] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000112e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000112e: JNE 4294970999 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 12 ##
######################################
*)

htriple "ht_100000e90"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e90: CMP RAX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e93"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e93: JL 4294971048 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 13 ##
######################################
*)

htriple "ht_100000ea8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ea8: CMP R12D, 1 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eac: JNE 4294971069 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 14 ##
######################################
*)

htriple "ht_100000e95"
 Separations ""
 Assertions  "((RBX +64 8),2) SEP (RSP_0,8); ((RBX +64 8),2) SEP ((RSP_0 -64 8),8); ((RBX +64 8),2) SEP ((RSP_0 -64 16),8); ((RBX +64 8),2) SEP ((RSP_0 -64 24),8); ((RBX +64 8),2) SEP ((RSP_0 -64 32),8); ((RBX +64 8),2) SEP ((RSP_0 -64 40),8); ((RBX +64 8),2) SEP ((RSP_0 -64 48),8); ((RBX +64 8),2) SEP ((RSP_0 -64 52),4); ((RBX +64 8),2) SEP ((RSP_0 -64 64),8); ((RBX +64 8),2) SEP ((RSP_0 -64 72),8); ((RBX +64 8),2) SEP ((RSP_0 -64 80),8); ((RBX +64 8),2) SEP ((RSP_0 -64 88),8); ((RBX +64 8),2) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e95: MOVZX EAX, WORD PTR [RBX + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e99"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e99: TEST EAX, 1026 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e9e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e9e: JNE 4294971048 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 15 ##
######################################
*)

htriple "ht_100000ea0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ea0: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ea3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ea3: ExternalCall fun_0x100001518 5"
 Post  "RAX = bot(fun_0x100001518) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun_0x100001518 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 16 ##
######################################
*)

htriple "ht_100000eae"
 Separations ""
 Assertions  "((RBX +64 32),8) SEP (RSP_0,8); ((RBX +64 32),8) SEP ((RSP_0 -64 8),8); ((RBX +64 32),8) SEP ((RSP_0 -64 16),8); ((RBX +64 32),8) SEP ((RSP_0 -64 24),8); ((RBX +64 32),8) SEP ((RSP_0 -64 32),8); ((RBX +64 32),8) SEP ((RSP_0 -64 40),8); ((RBX +64 32),8) SEP ((RSP_0 -64 48),8); ((RBX +64 32),8) SEP ((RSP_0 -64 52),4); ((RBX +64 32),8) SEP ((RSP_0 -64 64),8); ((RBX +64 32),8) SEP ((RSP_0 -64 72),8); ((RBX +64 32),8) SEP ((RSP_0 -64 80),8); ((RBX +64 32),8) SEP ((RSP_0 -64 88),8); ((RBX +64 32),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eae: MOV RAX, QWORD PTR [RBX + 32] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eb2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eb2: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eb5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eb5: JE 4294971069 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 17 ##
######################################
*)

htriple "ht_100000ebd"
 Separations ""
 Assertions  "((RBX +64 8),4) SEP (RSP_0,8); ((RBX +64 8),4) SEP ((RSP_0 -64 8),8); ((RBX +64 8),4) SEP ((RSP_0 -64 16),8); ((RBX +64 8),4) SEP ((RSP_0 -64 24),8); ((RBX +64 8),4) SEP ((RSP_0 -64 32),8); ((RBX +64 8),4) SEP ((RSP_0 -64 40),8); ((RBX +64 8),4) SEP ((RSP_0 -64 48),8); ((RBX +64 8),4) SEP ((RSP_0 -64 52),4); ((RBX +64 8),4) SEP ((RSP_0 -64 64),8); ((RBX +64 8),4) SEP ((RSP_0 -64 72),8); ((RBX +64 8),4) SEP ((RSP_0 -64 80),8); ((RBX +64 8),4) SEP ((RSP_0 -64 88),8); ((RBX +64 8),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ebd: MOV EAX, DWORD PTR [RBX + 8] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ec0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ec0: CMP EAX, 63 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ec3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ec3: JG 4294971110 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 18 ##
######################################
*)

htriple "ht_100000eb7"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 52),4); (RAX,1) SEP ((RSP_0 -64 64),8); (RAX,1) SEP ((RSP_0 -64 72),8); (RAX,1) SEP ((RSP_0 -64 80),8); (RAX,1) SEP ((RSP_0 -64 88),8); (RAX,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eb7: MOV R15B, BYTE PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eba"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 52),4); (RAX,1) SEP ((RSP_0 -64 64),8); (RAX,1) SEP ((RSP_0 -64 72),8); (RAX,1) SEP ((RSP_0 -64 80),8); (RAX,1) SEP ((RSP_0 -64 88),8); (RAX,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eba: MOV BYTE PTR [RAX], 0 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 19 ##
######################################
*)

htriple "ht_100000ec5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ec5: LEA ECX, [RAX - 1] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ec8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ec8: CMP ECX, 7 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ecb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ecb: JA 4294971166 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 20 ##
######################################
*)

htriple "ht_100000ee6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ee6: CMP EAX, 255 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eeb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eeb: JLE 4294971228 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 21 ##
######################################
*)

htriple "ht_100000ecd"
 Separations ""
 Assertions  "((0x1000011ec +64 (RCX *64 4)),4) SEP (RSP_0,8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x1000011ec +64 (RCX *64 4)),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ecd: MOVSXD RAX, DWORD PTR [R14 + RCX * 4] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ed1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ed1: ADD RAX, R14 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ed4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ed4: JMP RAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 22 ##
######################################
*)

htriple "ht_100000f1e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f1e: CMP EAX, 16 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f21"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f21: JE 4294971427 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 23 ##
######################################
*)

htriple "ht_100000ed6"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ed6: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000eda"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eda: MOV RSI, QWORD PTR [RIP + 29367] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ee1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ee1: JMP 4294971616 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 24 ##
######################################
*)

htriple "ht_100000f7c"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f7c: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f80"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f80: LEA RSI, [RIP + 10868] 7"
 Post  "RSI = 0x1000039fb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f87"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x1000039fb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f87: JMP 4294971616 5"
 Post  "RSI = 0x1000039fb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 25 ##
######################################
*)

htriple "ht_100000f8c"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 52),4); (0x1000081a0,8) SEP ((RSP_0 -64 64),8); (0x1000081a0,8) SEP ((RSP_0 -64 72),8); (0x1000081a0,8) SEP ((RSP_0 -64 80),8); (0x1000081a0,8) SEP ((RSP_0 -64 88),8); (0x1000081a0,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f8c: MOV RCX, QWORD PTR [RIP + 29197] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f93"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f93: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f96"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f96: JE 4294971464 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 26 ##
######################################
*)

htriple "ht_1000010e7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010e7: CMP R12D, 1 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010eb: JNE 4294971641 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 27 ##
######################################
*)

htriple "ht_100000eed"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000eed: CMP EAX, 256 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ef2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ef2: JE 4294971325 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 28 ##
######################################
*)

htriple "ht_100000f5c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f5c: CMP EAX, 64 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f5f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f5f: JE 4294971385 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 29 ##
######################################
*)

htriple "ht_100000ef8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ef8: CMP EAX, 512 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000efd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000efd: JE 4294971341 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 30 ##
######################################
*)

htriple "ht_100000fbd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fbd: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fc0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fc0: MOV RSI, R13 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fc3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fc3: ExternalCall fun_0x100000d1b 5"
 Post  "RAX = bot(fun_0x100000d1b) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun_0x100000d1b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fc8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100000d1b) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fc8: JMP 4294971623 5"
 Post  "RAX = bot(fun_0x100000d1b) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 31 ##
######################################
*)

htriple "ht_100000f03"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f03: CMP EAX, 1024 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f08"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f08: JNE 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 32 ##
######################################
*)

htriple "ht_100000fcd"
 Separations ""
 Assertions  "((RBX +64 12),4) SEP (RSP_0,8); ((RBX +64 12),4) SEP ((RSP_0 -64 8),8); ((RBX +64 12),4) SEP ((RSP_0 -64 16),8); ((RBX +64 12),4) SEP ((RSP_0 -64 24),8); ((RBX +64 12),4) SEP ((RSP_0 -64 32),8); ((RBX +64 12),4) SEP ((RSP_0 -64 40),8); ((RBX +64 12),4) SEP ((RSP_0 -64 48),8); ((RBX +64 12),4) SEP ((RSP_0 -64 52),4); ((RBX +64 12),4) SEP ((RSP_0 -64 64),8); ((RBX +64 12),4) SEP ((RSP_0 -64 72),8); ((RBX +64 12),4) SEP ((RSP_0 -64 80),8); ((RBX +64 12),4) SEP ((RSP_0 -64 88),8); ((RBX +64 12),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fcd: MOV EAX, DWORD PTR [RBX + 12] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fd0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fd0: DEC EAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fd2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fd2: CMP EAX, 7 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fd5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fd5: JA 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 33 ##
######################################
*)

htriple "ht_100000f0e"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f0e: MOV RSI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f12"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f12: LEA RDI, [RIP + 11110] 7"
 Post  "RDI = 0x100003a7f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f19"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003a7f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f19: JMP 4294971616 5"
 Post  "RDI = 0x100003a7f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 34 ##
######################################
*)

htriple "ht_1000010e0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010e0: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010e2: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 35 ##
######################################
*)

htriple "ht_100000f27"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f27: CMP EAX, 32 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f2a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f2a: JNE 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 36 ##
######################################
*)

htriple "ht_100001023"
 Separations ""
 Assertions  "((RBX +64 12),4) SEP (RSP_0,8); ((RBX +64 12),4) SEP ((RSP_0 -64 8),8); ((RBX +64 12),4) SEP ((RSP_0 -64 16),8); ((RBX +64 12),4) SEP ((RSP_0 -64 24),8); ((RBX +64 12),4) SEP ((RSP_0 -64 32),8); ((RBX +64 12),4) SEP ((RSP_0 -64 40),8); ((RBX +64 12),4) SEP ((RSP_0 -64 48),8); ((RBX +64 12),4) SEP ((RSP_0 -64 52),4); ((RBX +64 12),4) SEP ((RSP_0 -64 64),8); ((RBX +64 12),4) SEP ((RSP_0 -64 72),8); ((RBX +64 12),4) SEP ((RSP_0 -64 80),8); ((RBX +64 12),4) SEP ((RSP_0 -64 88),8); ((RBX +64 12),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001023: MOV EAX, DWORD PTR [RBX + 12] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001026"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001026: CMP EAX, 16 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001029"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001029: JE 4294971543 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 37 ##
######################################
*)

htriple "ht_100000f30"
 Separations ""
 Assertions  "((RBX +64 12),4) SEP (RSP_0,8); ((RBX +64 12),4) SEP ((RSP_0 -64 8),8); ((RBX +64 12),4) SEP ((RSP_0 -64 16),8); ((RBX +64 12),4) SEP ((RSP_0 -64 24),8); ((RBX +64 12),4) SEP ((RSP_0 -64 32),8); ((RBX +64 12),4) SEP ((RSP_0 -64 40),8); ((RBX +64 12),4) SEP ((RSP_0 -64 48),8); ((RBX +64 12),4) SEP ((RSP_0 -64 52),4); ((RBX +64 12),4) SEP ((RSP_0 -64 64),8); ((RBX +64 12),4) SEP ((RSP_0 -64 72),8); ((RBX +64 12),4) SEP ((RSP_0 -64 80),8); ((RBX +64 12),4) SEP ((RSP_0 -64 88),8); ((RBX +64 12),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f30: MOV EAX, DWORD PTR [RBX + 12] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f33"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f33: DEC EAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f35"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f35: CMP EAX, 7 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f38"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f38: JA 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 38 ##
######################################
*)

htriple "ht_100000f3e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f3e: LEA RCX, [RIP + 743] 7"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f45"
 Separations ""
 Assertions  "((0x10000122c +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x10000122c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f45: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f49"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f49: ADD RAX, RCX 3"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f4c"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f4c: JMP RAX 2"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 39 ##
######################################
*)

htriple "ht_100000f4e"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f4e: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f52"
 Separations ""
 Assertions  "(R13,1) SEP (RSP_0,8); (R13,1) SEP ((RSP_0 -64 8),8); (R13,1) SEP ((RSP_0 -64 16),8); (R13,1) SEP ((RSP_0 -64 24),8); (R13,1) SEP ((RSP_0 -64 32),8); (R13,1) SEP ((RSP_0 -64 40),8); (R13,1) SEP ((RSP_0 -64 48),8); (R13,1) SEP ((RSP_0 -64 52),4); (R13,1) SEP ((RSP_0 -64 64),8); (R13,1) SEP ((RSP_0 -64 72),8); (R13,1) SEP ((RSP_0 -64 80),8); (R13,1) SEP ((RSP_0 -64 88),8); (R13,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f52: MOVSX RSI, BYTE PTR [R13] 5"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f57"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f57: JMP 4294971616 5"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 40 ##
######################################
*)

htriple "ht_1000010d1"
 Separations ""
 Assertions  "(R13,2) SEP (RSP_0,8); (R13,2) SEP ((RSP_0 -64 8),8); (R13,2) SEP ((RSP_0 -64 16),8); (R13,2) SEP ((RSP_0 -64 24),8); (R13,2) SEP ((RSP_0 -64 32),8); (R13,2) SEP ((RSP_0 -64 40),8); (R13,2) SEP ((RSP_0 -64 48),8); (R13,2) SEP ((RSP_0 -64 52),4); (R13,2) SEP ((RSP_0 -64 64),8); (R13,2) SEP ((RSP_0 -64 72),8); (R13,2) SEP ((RSP_0 -64 80),8); (R13,2) SEP ((RSP_0 -64 88),8); (R13,2) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010d1: MOVSX RSI, WORD PTR [R13] 5"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010d6"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010d6: JMP 4294971612 2"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 41 ##
######################################
*)

htriple "ht_1000010d8"
 Separations ""
 Assertions  "(R13,4) SEP (RSP_0,8); (R13,4) SEP ((RSP_0 -64 8),8); (R13,4) SEP ((RSP_0 -64 16),8); (R13,4) SEP ((RSP_0 -64 24),8); (R13,4) SEP ((RSP_0 -64 32),8); (R13,4) SEP ((RSP_0 -64 40),8); (R13,4) SEP ((RSP_0 -64 48),8); (R13,4) SEP ((RSP_0 -64 52),4); (R13,4) SEP ((RSP_0 -64 64),8); (R13,4) SEP ((RSP_0 -64 72),8); (R13,4) SEP ((RSP_0 -64 80),8); (R13,4) SEP ((RSP_0 -64 88),8); (R13,4) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010d8: MOVSXD RSI, DWORD PTR [R13] 4"
 Post  "RCX = 0x10000122c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 42 ##
######################################
*)

htriple "ht_100000f65"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f65: CMP EAX, 128 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f6a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f6a: JNE 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 43 ##
######################################
*)

htriple "ht_100000ff9"
 Separations "((RSP_0 -64 52),4) SEP (0x100004000,8); ((RSP_0 -64 52),4) SEP (0x100008198,8); ((RSP_0 -64 52),4) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ff9: MOV DWORD PTR [RBP - 44], R15D 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ffd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ffd: MOV R15, R14 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001000"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001000: MOV R14, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001004"
 Separations ""
 Assertions  "(R13,1) SEP (RSP_0,8); (R13,1) SEP ((RSP_0 -64 8),8); (R13,1) SEP ((RSP_0 -64 16),8); (R13,1) SEP ((RSP_0 -64 24),8); (R13,1) SEP ((RSP_0 -64 32),8); (R13,1) SEP ((RSP_0 -64 40),8); (R13,1) SEP ((RSP_0 -64 48),8); (R13,1) SEP ((RSP_0 -64 52),4); (R13,1) SEP ((RSP_0 -64 64),8); (R13,1) SEP ((RSP_0 -64 72),8); (R13,1) SEP ((RSP_0 -64 80),8); (R13,1) SEP ((RSP_0 -64 88),8); (R13,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001004: MOVZX EAX, BYTE PTR [R13] 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001009"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001009: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000100b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000100b: JS 4294971505 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 44 ##
######################################
*)

htriple "ht_100000f70"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f70: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f74"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f74: MOV RSI, R13 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000f77"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f77: JMP 4294971616 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 45 ##
######################################
*)

htriple "ht_100000f9c"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000f9c: SUB RCX, QWORD PTR [RIP + 29173] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fa3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fa3: JMP 4294971489 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 46 ##
######################################
*)

htriple "ht_100001048"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001048: LEA RAX, [RIP + 29065] 7"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000104f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000104f: MOVSXD RCX, DWORD PTR [RAX] 3"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001052"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001052: MOV RAX, QWORD PTR [RIP + 28991] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001059"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001059: CQO  2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000105b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000105b: IDIV RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000105e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000105e: SUB RCX, RDX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 47 ##
######################################
*)

htriple "ht_100000fdb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fdb: LEA RCX, [RIP + 554] 7"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fe2"
 Separations ""
 Assertions  "((0x10000120c +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x10000120c +64 (RAX *64 4)),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fe2: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fe6"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fe6: ADD RAX, RCX 3"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fe9"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fe9: JMP RAX 2"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 48 ##
######################################
*)

htriple "ht_100000feb"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000feb: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000fef"
 Separations ""
 Assertions  "(R13,1) SEP (RSP_0,8); (R13,1) SEP ((RSP_0 -64 8),8); (R13,1) SEP ((RSP_0 -64 16),8); (R13,1) SEP ((RSP_0 -64 24),8); (R13,1) SEP ((RSP_0 -64 32),8); (R13,1) SEP ((RSP_0 -64 40),8); (R13,1) SEP ((RSP_0 -64 48),8); (R13,1) SEP ((RSP_0 -64 52),4); (R13,1) SEP ((RSP_0 -64 64),8); (R13,1) SEP ((RSP_0 -64 72),8); (R13,1) SEP ((RSP_0 -64 80),8); (R13,1) SEP ((RSP_0 -64 88),8); (R13,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000fef: MOVZX ESI, BYTE PTR [R13] 5"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ff4"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000ff4: JMP 4294971616 5"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 49 ##
######################################
*)

htriple "ht_1000010be"
 Separations ""
 Assertions  "(R13,2) SEP (RSP_0,8); (R13,2) SEP ((RSP_0 -64 8),8); (R13,2) SEP ((RSP_0 -64 16),8); (R13,2) SEP ((RSP_0 -64 24),8); (R13,2) SEP ((RSP_0 -64 32),8); (R13,2) SEP ((RSP_0 -64 40),8); (R13,2) SEP ((RSP_0 -64 48),8); (R13,2) SEP ((RSP_0 -64 52),4); (R13,2) SEP ((RSP_0 -64 64),8); (R13,2) SEP ((RSP_0 -64 72),8); (R13,2) SEP ((RSP_0 -64 80),8); (R13,2) SEP ((RSP_0 -64 88),8); (R13,2) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010be: MOVZX ESI, WORD PTR [R13] 5"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010c3"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010c3: JMP 4294971612 2"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 50 ##
######################################
*)

htriple "ht_1000010c5"
 Separations ""
 Assertions  "(R13,4) SEP (RSP_0,8); (R13,4) SEP ((RSP_0 -64 8),8); (R13,4) SEP ((RSP_0 -64 16),8); (R13,4) SEP ((RSP_0 -64 24),8); (R13,4) SEP ((RSP_0 -64 32),8); (R13,4) SEP ((RSP_0 -64 40),8); (R13,4) SEP ((RSP_0 -64 48),8); (R13,4) SEP ((RSP_0 -64 52),4); (R13,4) SEP ((RSP_0 -64 64),8); (R13,4) SEP ((RSP_0 -64 72),8); (R13,4) SEP ((RSP_0 -64 80),8); (R13,4) SEP ((RSP_0 -64 88),8); (R13,4) SEP ((RSP_0 -64 104),10)"
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010c5: MOV ESI, DWORD PTR [R13] 4"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010c9"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010c9: JMP 4294971612 2"
 Post  "RCX = 0x10000120c ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 51 ##
######################################
*)

htriple "ht_10000100d"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 52),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000100d: MOV RCX, QWORD PTR [RIP + 12268] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001014"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001014: TEST BYTE PTR [RCX + RAX * 4 + 62], 4 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001019"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001019: MOV ECX, 46 5"
 Post  "RCX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000101e"
 Separations ""
 Assertions  ""
 Pre   "RCX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000101e: CMOVE EAX, ECX 3"
 Post  "RCX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001021"
 Separations ""
 Assertions  ""
 Pre   "RCX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001021: JMP 4294971522 2"
 Post  "RCX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 52 ##
######################################
*)

htriple "ht_100001071"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001071: MOV ESI, 262144 5"
 Post  "RSI = 0x40000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001076"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x40000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001076: MOV EDI, EAX 2"
 Post  "RSI = 0x40000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001078"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x40000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001078: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000107d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000107d: MOV EAX, 46 5"
 Post  "RAX = 46 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 53 ##
######################################
*)

htriple "ht_10000102b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000102b: CMP EAX, 8 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000102e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000102e: JE 4294971563 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 54 ##
######################################
*)

htriple "ht_100001097"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001097: FLD 80 PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000109b"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000109b: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000109f"
 Separations "((RSP_0 -64 104),10) SEP (0x100004000,8); ((RSP_0 -64 104),10) SEP (0x100008198,8); ((RSP_0 -64 104),10) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000109f: FSTP 80 PTR [RSP] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010a2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010a2: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010a4: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010a9: JMP 4294971623 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 55 ##
######################################
*)

htriple "ht_100001030"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001030: CMP EAX, 4 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001033"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001033: JNE 4294971623 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 56 ##
######################################
*)

htriple "ht_1000010ab"
 Separations ""
 Assertions  "(R13,8) SEP (RSP_0,8); (R13,8) SEP ((RSP_0 -64 8),8); (R13,8) SEP ((RSP_0 -64 16),8); (R13,8) SEP ((RSP_0 -64 24),8); (R13,8) SEP ((RSP_0 -64 32),8); (R13,8) SEP ((RSP_0 -64 40),8); (R13,8) SEP ((RSP_0 -64 48),8); (R13,8) SEP ((RSP_0 -64 52),4); (R13,8) SEP ((RSP_0 -64 64),8); (R13,8) SEP ((RSP_0 -64 72),8); (R13,8) SEP ((RSP_0 -64 80),8); (R13,8) SEP ((RSP_0 -64 88),8); (R13,8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010ab: MOVSD XMM0, QWORD PTR [R13] 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010b1"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010b1: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 57 ##
######################################
*)

htriple "ht_100001039"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001039: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000103d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000103d: XORPS XMM0, XMM0 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001040"
 Separations ""
 Assertions  "(R13,4) SEP (RSP_0,8); (R13,4) SEP ((RSP_0 -64 8),8); (R13,4) SEP ((RSP_0 -64 16),8); (R13,4) SEP ((RSP_0 -64 24),8); (R13,4) SEP ((RSP_0 -64 32),8); (R13,4) SEP ((RSP_0 -64 40),8); (R13,4) SEP ((RSP_0 -64 48),8); (R13,4) SEP ((RSP_0 -64 52),4); (R13,4) SEP ((RSP_0 -64 64),8); (R13,4) SEP ((RSP_0 -64 72),8); (R13,4) SEP ((RSP_0 -64 80),8); (R13,4) SEP ((RSP_0 -64 88),8); (R13,4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001040: CVTSS2SD XMM0, DWORD PTR [R13] 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001046"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001046: JMP 4294971573 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 58 ##
######################################
*)

htriple "ht_100001061"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001061: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001064"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001064: MOV RSI, R13 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001067"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001067: MOV RDX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000106a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000106a: ExternalCall fun_0x100000aac 5"
 Post  "RAX = bot(fun_0x100000aac) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun_0x100000aac {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000106f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100000aac) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000106f: JMP 4294971623 2"
 Post  "RAX = bot(fun_0x100000aac) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 59 ##
######################################
*)

htriple "ht_100001082"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001082: MOV RDI, R14 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001085"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001085: MOV ESI, EAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001087"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001087: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001089"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001089: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000108e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000108e: MOV R14, R15 3"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001091"
 Separations "((RSP_0 -64 52),4) SEP (0x100004000,8); ((RSP_0 -64 52),4) SEP (0x100008198,8); ((RSP_0 -64 52),4) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x1000011ec ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001091: MOV R15D, DWORD PTR [RBP - 44] 4"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001095"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001095: JMP 4294971623 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 60 ##
######################################
*)

htriple "ht_1000010b5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010b5: MOV AL, 1 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010b7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010b7: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010bc: JMP 4294971623 2"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 61 ##
######################################
*)

htriple "ht_1000010dc"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010dc: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 62 ##
######################################
*)

htriple "ht_1000010ed"
 Separations ""
 Assertions  "((RBX +64 32),8) SEP (RSP_0,8); ((RBX +64 32),8) SEP ((RSP_0 -64 8),8); ((RBX +64 32),8) SEP ((RSP_0 -64 16),8); ((RBX +64 32),8) SEP ((RSP_0 -64 24),8); ((RBX +64 32),8) SEP ((RSP_0 -64 32),8); ((RBX +64 32),8) SEP ((RSP_0 -64 40),8); ((RBX +64 32),8) SEP ((RSP_0 -64 48),8); ((RBX +64 32),8) SEP ((RSP_0 -64 52),4); ((RBX +64 32),8) SEP ((RSP_0 -64 64),8); ((RBX +64 32),8) SEP ((RSP_0 -64 72),8); ((RBX +64 32),8) SEP ((RSP_0 -64 80),8); ((RBX +64 32),8) SEP ((RSP_0 -64 88),8); ((RBX +64 32),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010ed: MOV RAX, QWORD PTR [RBX + 32] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010f1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010f1: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010f4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010f4: JE 4294971641 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 63 ##
######################################
*)

htriple "ht_1000010f9"
 Separations ""
 Assertions  "((RBX +64 12),4) SEP (RSP_0,8); ((RBX +64 12),4) SEP ((RSP_0 -64 8),8); ((RBX +64 12),4) SEP ((RSP_0 -64 16),8); ((RBX +64 12),4) SEP ((RSP_0 -64 24),8); ((RBX +64 12),4) SEP ((RSP_0 -64 32),8); ((RBX +64 12),4) SEP ((RSP_0 -64 40),8); ((RBX +64 12),4) SEP ((RSP_0 -64 48),8); ((RBX +64 12),4) SEP ((RSP_0 -64 52),4); ((RBX +64 12),4) SEP ((RSP_0 -64 64),8); ((RBX +64 12),4) SEP ((RSP_0 -64 72),8); ((RBX +64 12),4) SEP ((RSP_0 -64 80),8); ((RBX +64 12),4) SEP ((RSP_0 -64 88),8); ((RBX +64 12),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010f9: MOVSXD RCX, DWORD PTR [RBX + 12] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000010fd"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010fd: MOV RAX, QWORD PTR [RIP + 28820] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001104"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001104: ADD RAX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001107"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001107: MOV QWORD PTR [RIP + 28810], RAX 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000110e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000110e: ADD R13, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001111"
 Separations ""
 Assertions  "(RBX,8) SEP (RSP_0,8); (RBX,8) SEP ((RSP_0 -64 8),8); (RBX,8) SEP ((RSP_0 -64 16),8); (RBX,8) SEP ((RSP_0 -64 24),8); (RBX,8) SEP ((RSP_0 -64 32),8); (RBX,8) SEP ((RSP_0 -64 40),8); (RBX,8) SEP ((RSP_0 -64 48),8); (RBX,8) SEP ((RSP_0 -64 52),4); (RBX,8) SEP ((RSP_0 -64 64),8); (RBX,8) SEP ((RSP_0 -64 72),8); (RBX,8) SEP ((RSP_0 -64 80),8); (RBX,8) SEP ((RSP_0 -64 88),8); (RBX,8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001111: MOV RBX, QWORD PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001114"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001114: JMP 4294971003 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 64 ##
######################################
*)

htriple "ht_1000010f6"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 52),4); (RAX,1) SEP ((RSP_0 -64 64),8); (RAX,1) SEP ((RSP_0 -64 72),8); (RAX,1) SEP ((RSP_0 -64 80),8); (RAX,1) SEP ((RSP_0 -64 88),8); (RAX,1) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000010f6: MOV BYTE PTR [RAX], R15B 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 65 ##
######################################
*)

htriple "ht_100000e7b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e7b: TEST RBX, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e7e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e7e: JE 4294971687 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 66 ##
######################################
*)

htriple "ht_100000e77"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 52),4); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 80),8); ((RCX +64 8),8) SEP ((RSP_0 -64 88),8); ((RCX +64 8),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e77: MOV RBX, QWORD PTR [RCX + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 67 ##
######################################
*)

htriple "ht_100000e5c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e5c: TEST BYTE PTR [RCX + 16], 1 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e60"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e60: JNE 4294971712 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 68 ##
######################################
*)

htriple "ht_100000e43"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 52),4); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 72),8); ((RAX +64 8),8) SEP ((RSP_0 -64 80),8); ((RAX +64 8),8) SEP ((RSP_0 -64 88),8); ((RAX +64 8),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e43: MOV RCX, QWORD PTR [RAX + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e47"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e47: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e4a"
 Separations "((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100008198,8); ((RSP_0 -64 80),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e4a: MOV QWORD PTR [RBP - 72], RAX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e4e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e4e: JE 4294971712 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 69 ##
######################################
*)

htriple "ht_100000e25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000124c) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e25: LEA RAX, [RIP + 29620] 7"
 Post  "RAX = 0x1000081e0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e2c: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e2f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e2f: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000e32"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100000e32: JE 4294971739 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000011ec ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 70 ##
######################################
*)

htriple "ht_10000117c"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 52),4); (0x1000081a0,8) SEP ((RSP_0 -64 64),8); (0x1000081a0,8) SEP ((RSP_0 -64 72),8); (0x1000081a0,8) SEP ((RSP_0 -64 80),8); (0x1000081a0,8) SEP ((RSP_0 -64 88),8); (0x1000081a0,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000117c: CMP QWORD PTR [RIP + 28700], 0 8"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001184"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001184: JNE 4294971801 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 71 ##
######################################
*)

htriple "ht_1000011db"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011db: ADD RSP, 56 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011df"
 Separations "((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100008198,8); ((RSP_0 -64 40),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011df: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e0"
 Separations "((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100008198,8); ((RSP_0 -64 32),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e0: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e2"
 Separations "((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100008198,8); ((RSP_0 -64 24),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e2: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e4"
 Separations "((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100008198,8); ((RSP_0 -64 16),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e4: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e6"
 Separations "((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100008198,8); ((RSP_0 -64 8),8) SEP (0x1000081a0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e6: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e8: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011e9"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011e9: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 72 ##
######################################
*)

htriple "ht_100001186"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 52),4); (0x100008198,8) SEP ((RSP_0 -64 64),8); (0x100008198,8) SEP ((RSP_0 -64 72),8); (0x100008198,8) SEP ((RSP_0 -64 80),8); (0x100008198,8) SEP ((RSP_0 -64 88),8); (0x100008198,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001186: MOV RCX, QWORD PTR [RIP + 28683] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000118d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000118d: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001190"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001190: JE 4294971867 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 73 ##
######################################
*)

htriple "ht_100001199"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 52),4); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 72),8); ((RAX +64 8),8) SEP ((RSP_0 -64 80),8); ((RAX +64 8),8) SEP ((RSP_0 -64 88),8); ((RAX +64 8),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001199: MOV RBX, QWORD PTR [RAX + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000119d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "10000119d: TEST RBX, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011a0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011a0: JE 4294971867 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 74 ##
######################################
*)

htriple "ht_100001192"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 52),4); (0x1000081a0,8) SEP ((RSP_0 -64 64),8); (0x1000081a0,8) SEP ((RSP_0 -64 72),8); (0x1000081a0,8) SEP ((RSP_0 -64 80),8); (0x1000081a0,8) SEP ((RSP_0 -64 88),8); (0x1000081a0,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "100001192: MOV QWORD PTR [RIP + 28679], RCX 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 75 ##
######################################
*)

htriple "ht_1000011a2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011a2: LEA R14, [RIP + 10454] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 76 ##
######################################
*)

htriple "ht_1000011b3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011b3: CMP EAX, 1 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011b6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011b6: JNE 4294971859 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 77 ##
######################################
*)

htriple "ht_1000011c5"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011c5: MOV RSI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011c9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011c9: MOV RDI, R14 3"
 Post  "RDI = 0x100003a7f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 78 ##
######################################
*)

htriple "ht_1000011b8"
 Separations ""
 Assertions  "((RBX +64 24),8) SEP (RSP_0,8); ((RBX +64 24),8) SEP ((RSP_0 -64 8),8); ((RBX +64 24),8) SEP ((RSP_0 -64 16),8); ((RBX +64 24),8) SEP ((RSP_0 -64 24),8); ((RBX +64 24),8) SEP ((RSP_0 -64 32),8); ((RBX +64 24),8) SEP ((RSP_0 -64 40),8); ((RBX +64 24),8) SEP ((RSP_0 -64 48),8); ((RBX +64 24),8) SEP ((RSP_0 -64 52),4); ((RBX +64 24),8) SEP ((RSP_0 -64 64),8); ((RBX +64 24),8) SEP ((RSP_0 -64 72),8); ((RBX +64 24),8) SEP ((RSP_0 -64 80),8); ((RBX +64 24),8) SEP ((RSP_0 -64 88),8); ((RBX +64 24),8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011b8: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011bc"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 52),4); (0x1000081a0,8) SEP ((RSP_0 -64 64),8); (0x1000081a0,8) SEP ((RSP_0 -64 72),8); (0x1000081a0,8) SEP ((RSP_0 -64 80),8); (0x1000081a0,8) SEP ((RSP_0 -64 88),8); (0x1000081a0,8) SEP ((RSP_0 -64 104),10)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011bc: MOV RSI, QWORD PTR [RIP + 28637] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011c3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011c3: JMP 4294971852 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 79 ##
######################################
*)

htriple "ht_1000011d3"
 Separations ""
 Assertions  "(RBX,8) SEP (RSP_0,8); (RBX,8) SEP ((RSP_0 -64 8),8); (RBX,8) SEP ((RSP_0 -64 16),8); (RBX,8) SEP ((RSP_0 -64 24),8); (RBX,8) SEP ((RSP_0 -64 32),8); (RBX,8) SEP ((RSP_0 -64 40),8); (RBX,8) SEP ((RSP_0 -64 48),8); (RBX,8) SEP ((RSP_0 -64 52),4); (RBX,8) SEP ((RSP_0 -64 64),8); (RBX,8) SEP ((RSP_0 -64 72),8); (RBX,8) SEP ((RSP_0 -64 80),8); (RBX,8) SEP ((RSP_0 -64 88),8); (RBX,8) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011d3: MOV RBX, QWORD PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011d6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011d6: TEST RBX, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011d9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011d9: JNE 4294971817 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 80 ##
######################################
*)

htriple "ht_1000011cc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011cc: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011ce: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100008198,8];[0x1000081a0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 104),10]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000df8, blockId == 81 ##
######################################
*)

htriple "ht_1000011a9"
 Separations ""
 Assertions  "((RBX +64 8),4) SEP (RSP_0,8); ((RBX +64 8),4) SEP ((RSP_0 -64 8),8); ((RBX +64 8),4) SEP ((RSP_0 -64 16),8); ((RBX +64 8),4) SEP ((RSP_0 -64 24),8); ((RBX +64 8),4) SEP ((RSP_0 -64 32),8); ((RBX +64 8),4) SEP ((RSP_0 -64 40),8); ((RBX +64 8),4) SEP ((RSP_0 -64 48),8); ((RBX +64 8),4) SEP ((RSP_0 -64 52),4); ((RBX +64 8),4) SEP ((RSP_0 -64 64),8); ((RBX +64 8),4) SEP ((RSP_0 -64 72),8); ((RBX +64 8),4) SEP ((RSP_0 -64 80),8); ((RBX +64 8),4) SEP ((RSP_0 -64 88),8); ((RBX +64 8),4) SEP ((RSP_0 -64 104),10)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011a9: MOV EAX, DWORD PTR [RBX + 8] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011ac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011ac: CMP EAX, 1024 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000011b1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
 Instruction "1000011b1: JE 4294971845 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003a7f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun_0x10000124c)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
