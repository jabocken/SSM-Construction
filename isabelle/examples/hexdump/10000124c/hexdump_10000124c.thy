theory hexdump_10000124c
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000124c, blockId == 0 ##
#####################################
*)

htriple "ht_10000124c"
 Separations "((RSP_0 -64 8),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004020,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x100008198,8); ((RSP_0 -64 8),8) SEP (0x1000081a0,8); ((RSP_0 -64 8),8) SEP (0x1000081a8,1); ((RSP_0 -64 8),8) SEP (0x1000081b0,8); ((RSP_0 -64 8),8) SEP (0x1000081b8,8); ((RSP_0 -64 8),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000124c: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000124d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000124d: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001250"
 Separations "((RSP_0 -64 16),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004020,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x100008198,8); ((RSP_0 -64 16),8) SEP (0x1000081a0,8); ((RSP_0 -64 16),8) SEP (0x1000081a8,1); ((RSP_0 -64 16),8) SEP (0x1000081b0,8); ((RSP_0 -64 16),8) SEP (0x1000081b8,8); ((RSP_0 -64 16),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001250: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001252"
 Separations "((RSP_0 -64 24),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004020,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x100008198,8); ((RSP_0 -64 24),8) SEP (0x1000081a0,8); ((RSP_0 -64 24),8) SEP (0x1000081a8,1); ((RSP_0 -64 24),8) SEP (0x1000081b0,8); ((RSP_0 -64 24),8) SEP (0x1000081b8,8); ((RSP_0 -64 24),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001252: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001254"
 Separations "((RSP_0 -64 32),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004020,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x100008198,8); ((RSP_0 -64 32),8) SEP (0x1000081a0,8); ((RSP_0 -64 32),8) SEP (0x1000081a8,1); ((RSP_0 -64 32),8) SEP (0x1000081b0,8); ((RSP_0 -64 32),8) SEP (0x1000081b8,8); ((RSP_0 -64 32),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001254: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001256"
 Separations "((RSP_0 -64 40),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004020,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x100008198,8); ((RSP_0 -64 40),8) SEP (0x1000081a0,8); ((RSP_0 -64 40),8) SEP (0x1000081a8,1); ((RSP_0 -64 40),8) SEP (0x1000081b0,8); ((RSP_0 -64 40),8) SEP (0x1000081b8,8); ((RSP_0 -64 40),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001256: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001258"
 Separations "((RSP_0 -64 48),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100004020,8); ((RSP_0 -64 48),8) SEP (0x100008180,4); ((RSP_0 -64 48),8) SEP (0x100008184,4); ((RSP_0 -64 48),8) SEP (0x100008198,8); ((RSP_0 -64 48),8) SEP (0x1000081a0,8); ((RSP_0 -64 48),8) SEP (0x1000081a8,1); ((RSP_0 -64 48),8) SEP (0x1000081b0,8); ((RSP_0 -64 48),8) SEP (0x1000081b8,8); ((RSP_0 -64 48),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001258: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001259"
 Separations "((RSP_0 -64 56),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004020,8); ((RSP_0 -64 56),8) SEP (0x100008180,4); ((RSP_0 -64 56),8) SEP (0x100008184,4); ((RSP_0 -64 56),8) SEP (0x100008198,8); ((RSP_0 -64 56),8) SEP (0x1000081a0,8); ((RSP_0 -64 56),8) SEP (0x1000081a8,1); ((RSP_0 -64 56),8) SEP (0x1000081b0,8); ((RSP_0 -64 56),8) SEP (0x1000081b8,8); ((RSP_0 -64 56),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001259: PUSH RAX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000125a"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000125a: MOV RAX, QWORD PTR [RIP + 28495] 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001261"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001261: TEST RAX, RAX 3"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001264"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001264: JE 4294972053 2"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 1 ##
#####################################
*)

htriple "ht_100001266"
 Separations "(0x1000081b8,8) SEP (RSP_0,8); (0x1000081b8,8) SEP ([0x100004020,8]_0,8); (0x1000081b8,8) SEP ((RSP_0 -64 8),8); (0x1000081b8,8) SEP ((RSP_0 -64 16),8); (0x1000081b8,8) SEP ((RSP_0 -64 24),8); (0x1000081b8,8) SEP ((RSP_0 -64 32),8); (0x1000081b8,8) SEP ((RSP_0 -64 40),8); (0x1000081b8,8) SEP ((RSP_0 -64 48),8); (0x1000081b8,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001266: MOV RCX, QWORD PTR [RIP + 28491] 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = [0x1000081b8,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000126d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = [0x1000081b8,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000126d: LEA RDX, [RIP + 28516] 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001274"
 Separations "(0x1000081d8,4) SEP (RSP_0,8); (0x1000081d8,4) SEP ([0x100004020,8]_0,8); (0x1000081d8,4) SEP ((RSP_0 -64 8),8); (0x1000081d8,4) SEP ((RSP_0 -64 16),8); (0x1000081d8,4) SEP ((RSP_0 -64 24),8); (0x1000081d8,4) SEP ((RSP_0 -64 32),8); (0x1000081d8,4) SEP ((RSP_0 -64 40),8); (0x1000081d8,4) SEP ((RSP_0 -64 48),8); (0x1000081d8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001274: MOVSXD RBX, DWORD PTR [RDX] 3"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001277"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ([0x100004020,8]_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001277: ADD QWORD PTR [RIP + 28442], RBX 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000127e"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000127e: MOV QWORD PTR [RIP + 28459], RCX 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001285"
 Separations "(0x1000081b8,8) SEP (RSP_0,8); (0x1000081b8,8) SEP ([0x100004020,8]_0,8); (0x1000081b8,8) SEP ((RSP_0 -64 8),8); (0x1000081b8,8) SEP ((RSP_0 -64 16),8); (0x1000081b8,8) SEP ((RSP_0 -64 24),8); (0x1000081b8,8) SEP ((RSP_0 -64 32),8); (0x1000081b8,8) SEP ((RSP_0 -64 40),8); (0x1000081b8,8) SEP ((RSP_0 -64 48),8); (0x1000081b8,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001285: MOV QWORD PTR [RIP + 28460], RAX 7"
 Post  "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000128c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000128c: MOV AL, 1 2"
 Post  "RAX = overwrite(8,[0x1000081b0,8]_0,1) ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000128e"
 Separations "((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100008180,4); ((RSP_0 -64 52),4) SEP (0x100008184,4); ((RSP_0 -64 52),4) SEP (0x100008198,8); ((RSP_0 -64 52),4) SEP (0x1000081a0,8); ((RSP_0 -64 52),4) SEP (0x1000081a8,1); ((RSP_0 -64 52),4) SEP (0x1000081b0,8); ((RSP_0 -64 52),4) SEP (0x1000081b8,8); ((RSP_0 -64 52),4) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = overwrite(8,[0x1000081b0,8]_0,1) ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000128e: MOV DWORD PTR [RBP - 44], EAX 3"
 Post  "RAX = overwrite(8,[0x1000081b0,8]_0,1) ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001291"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,[0x1000081b0,8]_0,1) ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001291: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001293"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001293: JMP 4294972132 2"
 Post  "RAX = 0 ; RBX = signextend(32,64, [0x1000081d8,4]_0) ; RCX = [0x1000081b8,8]_0 ; RDX = 0x1000081d8 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = ([0x100008198,8]_0 +64 signextend(32,64, [0x1000081d8,4]_0)) ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b8,8]_0 ; [0x1000081b8,8] = [0x1000081b0,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 2 ##
#####################################
*)

htriple "ht_100001295"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081b0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001295: LEA RAX, [RIP + 28476] 7"
 Post  "RAX = 0x1000081d8 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000129c"
 Separations "(0x1000081d8,4) SEP (RSP_0,8); (0x1000081d8,4) SEP ([0x100004020,8]_0,8); (0x1000081d8,4) SEP ((RSP_0 -64 8),8); (0x1000081d8,4) SEP ((RSP_0 -64 16),8); (0x1000081d8,4) SEP ((RSP_0 -64 24),8); (0x1000081d8,4) SEP ((RSP_0 -64 32),8); (0x1000081d8,4) SEP ((RSP_0 -64 40),8); (0x1000081d8,4) SEP ((RSP_0 -64 48),8); (0x1000081d8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000129c: MOV EBX, DWORD PTR [RAX] 2"
 Post  "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000129e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000129e: MOVSXD R14, EBX 3"
 Post  "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012a1: MOV EDI, 1 5"
 Post  "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 1 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 1 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012a6: MOV RSI, R14 3"
 Post  "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 1 ; RSI = signextend(32,64, [0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RBX = b32([0x1000081d8,4]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 1 ; RSI = signextend(32,64, [0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [0x1000081d8,4] = [0x1000081d8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012a9: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012ae"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = [0x1000081b0,8]_0 ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012ae: MOV QWORD PTR [RIP + 28411], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012b5: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012b8: JE 4294972686 6"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 3 ##
#####################################
*)

htriple "ht_1000012be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012be: MOV EDI, 1 5"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RDI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RDI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012c3: MOV RSI, R14 3"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RDI = 1 ; RSI = signextend(32,64, [0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RDI = 1 ; RSI = signextend(32,64, [0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012c6: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012cb"
 Separations "(0x1000081b8,8) SEP (RSP_0,8); (0x1000081b8,8) SEP ([0x100004020,8]_0,8); (0x1000081b8,8) SEP ((RSP_0 -64 8),8); (0x1000081b8,8) SEP ((RSP_0 -64 16),8); (0x1000081b8,8) SEP ((RSP_0 -64 24),8); (0x1000081b8,8) SEP ((RSP_0 -64 32),8); (0x1000081b8,8) SEP ((RSP_0 -64 40),8); (0x1000081b8,8) SEP ((RSP_0 -64 48),8); (0x1000081b8,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012cb: MOV QWORD PTR [RIP + 28390], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012d2: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012d5: JE 4294972691 6"
 Post  "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 4 ##
#####################################
*)

htriple "ht_10000150e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = [0x1000081b8,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000150e: ExternalCall fun_0x1000032cd 5"
 Post  "RAX = bot(fun_0x1000032cd) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x1000032cd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 5 ##
#####################################
*)

htriple "ht_1000012db"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012db: MOV AL, 1 2"
 Post  "RAX = overwrite(8,bot(fun__calloc),1) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012dd"
 Separations "((RSP_0 -64 52),4) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 52),4) SEP (0x100004020,8); ((RSP_0 -64 52),4) SEP (0x100008180,4); ((RSP_0 -64 52),4) SEP (0x100008184,4); ((RSP_0 -64 52),4) SEP (0x100008198,8); ((RSP_0 -64 52),4) SEP (0x1000081a0,8); ((RSP_0 -64 52),4) SEP (0x1000081a8,1); ((RSP_0 -64 52),4) SEP (0x1000081b0,8); ((RSP_0 -64 52),4) SEP (0x1000081b8,8); ((RSP_0 -64 52),4) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__calloc),1) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000012dd: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RAX = overwrite(8,bot(fun__calloc),1) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 6 ##
#####################################
*)

htriple "ht_100001513"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x100008198,8] = [0x100008198,8]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [0x1000081b0,8] = bot(fun__calloc) ; [0x1000081b8,8] = bot(fun__calloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001513: ExternalCall fun_0x1000032dd 5"
 Post  "RAX = bot(fun_0x1000032dd) ; RBX = b32([0x1000081d8,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = signextend(32,64, [0x1000081d8,4]_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x1000032dd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 7 ##
#####################################
*)

htriple "ht_1000012e4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012e4: LEA R15, [RIP + 28313] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012eb"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012eb: MOV ECX, DWORD PTR [R15] 3"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012ee"
 Separations ""
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012ee: TEST ECX, ECX 2"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012f0"
 Separations ""
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012f0: JE 4294972442 6"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 8 ##
#####################################
*)

htriple "ht_1000012f6"
 Separations "((RSP_0 -64 56),4) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 56),4) SEP (0x100004020,8); ((RSP_0 -64 56),4) SEP (0x100008180,4); ((RSP_0 -64 56),4) SEP (0x100008184,4); ((RSP_0 -64 56),4) SEP (0x100008198,8); ((RSP_0 -64 56),4) SEP (0x1000081a0,8); ((RSP_0 -64 56),4) SEP (0x1000081a8,1); ((RSP_0 -64 56),4) SEP (0x1000081b0,8); ((RSP_0 -64 56),4) SEP (0x1000081b8,8); ((RSP_0 -64 56),4) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012f6: MOV DWORD PTR [RBP - 48], EAX 3"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012f9"
 Separations ""
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012f9: XOR R14D, R14D 3"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000012fc"
 Separations "(0x100004020,8) SEP (RSP_0,8); (0x100004020,8) SEP ([0x100004020,8]_0,8); (0x100004020,8) SEP ((RSP_0 -64 8),8); (0x100004020,8) SEP ((RSP_0 -64 16),8); (0x100004020,8) SEP ((RSP_0 -64 24),8); (0x100004020,8) SEP ((RSP_0 -64 32),8); (0x100004020,8) SEP ((RSP_0 -64 40),8); (0x100004020,8) SEP ((RSP_0 -64 48),8); (0x100004020,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000012fc: MOV R13, QWORD PTR [RIP + 11549] 7"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = 0 ; R13 = [0x100004020,8]_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000124c, blockId == 9 ##
#####################################
*)

htriple "ht_10000141a"
 Separations ""
 Assertions  ""
 Pre   "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000141a: XOR R14D, R14D 3"
 Post  "RCX = b32([0x100008184,4]_0) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081a0,8] = [0x1000081a0,8]_0 ; [0x1000081a8,1] = [0x1000081a8,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 10 ##
######################################
*)

htriple "ht_100001310"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001310: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001312"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001312: ExternalCall fun_0x10000158e 5"
 Post  "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x10000158e {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001317"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001317: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001319"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001319: JE 4294972445 6"
 Post  "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 11 ##
######################################
*)

htriple "ht_100001322"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001322: MOV RDI, QWORD PTR [RIP + 28295] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001329"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001329: ADD RDI, R12 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000132c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000132c: CMP ECX, EBX 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000132e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000132e: MOV EAX, EBX 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001330"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001330: CMOVLE EAX, ECX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001333"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001333: CMP ECX, 18446744073709551615 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001336"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001336: CMOVE EAX, EBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001339"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001339: MOVSXD RDX, EAX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000133c"
 Separations "([0x100004020,8]_0,8) SEP (RSP_0,8); ([0x100004020,8]_0,8) SEP (0x100004020,8); ([0x100004020,8]_0,8) SEP (0x100008180,4); ([0x100004020,8]_0,8) SEP (0x100008184,4); ([0x100004020,8]_0,8) SEP (0x100008198,8); ([0x100004020,8]_0,8) SEP (0x1000081a0,8); ([0x100004020,8]_0,8) SEP (0x1000081a8,1); ([0x100004020,8]_0,8) SEP (0x1000081b0,8); ([0x100004020,8]_0,8) SEP (0x1000081b8,8); ([0x100004020,8]_0,8) SEP (0x1000081d8,4); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000133c: MOV RCX, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001340"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001340: MOV ESI, 1 5"
 Post  "RSI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001345"
 Separations ""
 Assertions  ""
 Pre   "RSI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001345: ExternalCall fun__fread 5"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__fread {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000134a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000134a: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000134c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000134c: JNE 4294972279 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 12 ##
######################################
*)

htriple "ht_10000131f"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000131f: MOV ECX, DWORD PTR [R15] 3"
 Post  "RAX = bot(fun_0x10000158e) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 13 ##
######################################
*)

htriple "ht_10000141d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000141d: LEA RAX, [RIP + 28116] 7"
 Post  "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001424"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001424: CMP DWORD PTR [RAX], 0 3"
 Post  "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001427"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001427: JE 4294972480 2"
 Post  "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 14 ##
######################################
*)

htriple "ht_10000134e"
 Separations "([0x100004020,8]_0,8) SEP (RSP_0,8); ([0x100004020,8]_0,8) SEP (0x100004020,8); ([0x100004020,8]_0,8) SEP (0x100008180,4); ([0x100004020,8]_0,8) SEP (0x100008184,4); ([0x100004020,8]_0,8) SEP (0x100008198,8); ([0x100004020,8]_0,8) SEP (0x1000081a0,8); ([0x100004020,8]_0,8) SEP (0x1000081a8,1); ([0x100004020,8]_0,8) SEP (0x1000081b0,8); ([0x100004020,8]_0,8) SEP (0x1000081b8,8); ([0x100004020,8]_0,8) SEP (0x1000081d8,4); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000134e: MOV RDI, QWORD PTR [R13] 4"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001352"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001352: ExternalCall fun__ferror 5"
 Post  "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__ferror {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001357"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001357: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001359"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001359: JNE 4294972272 2"
 Post  "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 15 ##
######################################
*)

htriple "ht_100001377"
 Separations "(0x1000081a8,1) SEP (RSP_0,8); (0x1000081a8,1) SEP ([0x100004020,8]_0,8); (0x1000081a8,1) SEP ((RSP_0 -64 8),8); (0x1000081a8,1) SEP ((RSP_0 -64 16),8); (0x1000081a8,1) SEP ((RSP_0 -64 24),8); (0x1000081a8,1) SEP ((RSP_0 -64 32),8); (0x1000081a8,1) SEP ((RSP_0 -64 40),8); (0x1000081a8,1) SEP ((RSP_0 -64 48),8); (0x1000081a8,1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001377: MOV BYTE PTR [RIP + 28202], 1 7"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000137e"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000137e: MOV ECX, DWORD PTR [R15] 3"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001381"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001381: CMP ECX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001384"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001384: JE 4294972301 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 16 ##
######################################
*)

htriple "ht_10000135b"
 Separations "(0x1000081a8,1) SEP (RSP_0,8); (0x1000081a8,1) SEP ([0x100004020,8]_0,8); (0x1000081a8,1) SEP ((RSP_0 -64 8),8); (0x1000081a8,1) SEP ((RSP_0 -64 16),8); (0x1000081a8,1) SEP ((RSP_0 -64 24),8); (0x1000081a8,1) SEP ((RSP_0 -64 32),8); (0x1000081a8,1) SEP ((RSP_0 -64 40),8); (0x1000081a8,1) SEP ((RSP_0 -64 48),8); (0x1000081a8,1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000135b: MOV BYTE PTR [RIP + 28230], 0 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001362"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001362: MOV ECX, DWORD PTR [R15] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001365"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001365: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001367"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001367: TEST ECX, ECX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001369"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001369: JNE 4294972172 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 17 ##
######################################
*)

htriple "ht_100001370"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001370: ExternalCall fun_0x100003302 5"
 Post  "RAX = bot(fun_0x100003302) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x100003302 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001375"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003302) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001375: JMP 4294972251 2"
 Post  "RAX = bot(fun_0x100003302) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 18 ##
######################################
*)

htriple "ht_10000130c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000130c: TEST AL, 1 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000130e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000130e: JNE 4294972194 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 19 ##
######################################
*)

htriple "ht_10000136b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000136b: JMP 4294972445 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 20 ##
######################################
*)

htriple "ht_100001386"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001386: SUB ECX, EAX 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001388"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001388: MOV DWORD PTR [R15], ECX 3"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000138b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000138b: JMP 4294972306 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 21 ##
######################################
*)

htriple "ht_10000138d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000138d: MOV ECX, 4294967295 5"
 Post  "RAX = bot(fun__fread) ; RCX = 0xffffffff ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 22 ##
######################################
*)

htriple "ht_100001392"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001392: SUB EBX, EAX 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001394"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001394: JE 4294972315 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 23 ##
######################################
*)

htriple "ht_100001396"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001396: ADD R14D, EAX 3"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001399"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001399: JMP 4294972432 2"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 24 ##
######################################
*)

htriple "ht_10000139b"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000139b: MOV ECX, DWORD PTR [RIP + 28127] 6"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013a1: TEST ECX, 4294967293 6"
 Post  "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fread) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013a7: SETE AL 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013aa"
 Separations "((RSP_0 -64 56),1) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 56),1) SEP (0x100004020,8); ((RSP_0 -64 56),1) SEP (0x100008180,4); ((RSP_0 -64 56),1) SEP (0x100008184,4); ((RSP_0 -64 56),1) SEP (0x100008198,8); ((RSP_0 -64 56),1) SEP (0x1000081a0,8); ((RSP_0 -64 56),1) SEP (0x1000081a8,1); ((RSP_0 -64 56),1) SEP (0x1000081b0,8); ((RSP_0 -64 56),1) SEP (0x1000081b8,8); ((RSP_0 -64 56),1) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013aa: OR AL, BYTE PTR [RBP - 48] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013ad"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013ad: JNE 4294972662 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 25 ##
######################################
*)

htriple "ht_1000013b3"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013b3: MOV RDI, QWORD PTR [RIP + 28150] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013ba"
 Separations "(0x1000081b8,8) SEP (RSP_0,8); (0x1000081b8,8) SEP ([0x100004020,8]_0,8); (0x1000081b8,8) SEP ((RSP_0 -64 8),8); (0x1000081b8,8) SEP ((RSP_0 -64 16),8); (0x1000081b8,8) SEP ((RSP_0 -64 24),8); (0x1000081b8,8) SEP ((RSP_0 -64 32),8); (0x1000081b8,8) SEP ((RSP_0 -64 40),8); (0x1000081b8,8) SEP ((RSP_0 -64 48),8); (0x1000081b8,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013ba: MOV RSI, QWORD PTR [RIP + 28151] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013c1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013c1: LEA RAX, [RIP + 28176] 7"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013c8"
 Separations "(0x1000081d8,4) SEP (RSP_0,8); (0x1000081d8,4) SEP ([0x100004020,8]_0,8); (0x1000081d8,4) SEP ((RSP_0 -64 8),8); (0x1000081d8,4) SEP ((RSP_0 -64 16),8); (0x1000081d8,4) SEP ((RSP_0 -64 24),8); (0x1000081d8,4) SEP ((RSP_0 -64 32),8); (0x1000081d8,4) SEP ((RSP_0 -64 40),8); (0x1000081d8,4) SEP ((RSP_0 -64 48),8); (0x1000081d8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013c8: MOVSXD RDX, DWORD PTR [RAX] 3"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013cb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013cb: ExternalCall fun__bcmp 5"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__bcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013d0"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013d0: MOV ECX, DWORD PTR [RIP + 28074] 6"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013d6: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013d8: JNE 4294972662 6"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 26 ##
######################################
*)

htriple "ht_1000014f6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f6: DEC ECX 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014f8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f8: CMP ECX, 1 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014fb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014fb: JA 4294972640 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 27 ##
######################################
*)

htriple "ht_1000013de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013de: CMP ECX, 3 3"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013e1: JNE 4294972399 2"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 28 ##
######################################
*)

htriple "ht_1000013e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013e3: LEA RDI, [RIP + 9924] 7"
 Post  "RAX = bot(fun__bcmp) ; RDI = 0x100003aae ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RDI = 0x100003aae ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013ea: ExternalCall fun__puts 5"
 Post  "RAX = bot(fun__puts) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__puts {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 29 ##
######################################
*)

htriple "ht_1000013ef"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013ef: LEA RAX, [RIP + 28130] 7"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013f6"
 Separations "(0x1000081d8,4) SEP (RSP_0,8); (0x1000081d8,4) SEP ([0x100004020,8]_0,8); (0x1000081d8,4) SEP ((RSP_0 -64 8),8); (0x1000081d8,4) SEP ((RSP_0 -64 16),8); (0x1000081d8,4) SEP ((RSP_0 -64 24),8); (0x1000081d8,4) SEP ((RSP_0 -64 32),8); (0x1000081d8,4) SEP ((RSP_0 -64 40),8); (0x1000081d8,4) SEP ((RSP_0 -64 48),8); (0x1000081d8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013f6: MOVSXD RBX, DWORD PTR [RAX] 3"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000013f9"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ([0x100004020,8]_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000013f9: ADD QWORD PTR [RIP + 28056], RBX 7"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001400"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001400: MOV DWORD PTR [RIP + 28022], 1 10"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 1 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000140a"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 1 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000140a: MOV ECX, DWORD PTR [R15] 3"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 1 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000140d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 1 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000140d: XOR R14D, R14D 3"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = 0 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 1 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 30 ##
######################################
*)

htriple "ht_100001410"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001410: TEST ECX, ECX 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001412"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001412: JNE 4294972163 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 31 ##
######################################
*)

htriple "ht_100001303"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001303: MOVSXD R12, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001306"
 Separations "(0x1000081a8,1) SEP (RSP_0,8); (0x1000081a8,1) SEP ([0x100004020,8]_0,8); (0x1000081a8,1) SEP ((RSP_0 -64 8),8); (0x1000081a8,1) SEP ((RSP_0 -64 16),8); (0x1000081a8,1) SEP ((RSP_0 -64 24),8); (0x1000081a8,1) SEP ((RSP_0 -64 32),8); (0x1000081a8,1) SEP ((RSP_0 -64 40),8); (0x1000081a8,1) SEP ((RSP_0 -64 48),8); (0x1000081a8,1) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001306: MOV AL, BYTE PTR [RIP + 28316] 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 32 ##
######################################
*)

htriple "ht_100001418"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001418: JMP 4294972445 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 33 ##
######################################
*)

htriple "ht_100001429"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ([0x100004020,8]_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081f8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001429: MOV RAX, QWORD PTR [RIP + 28008] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001430"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001430: LEA RCX, [RIP + 28089] 7"
 Post  "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001437"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001437: CMP RAX, QWORD PTR [RCX] 3"
 Post  "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000143a"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000143a: JL 4294972681 6"
 Post  "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 34 ##
######################################
*)

htriple "ht_100001440"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001440: LEA RAX, [RIP + 28049] 7"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001447"
 Separations "(0x1000081d8,4) SEP (RSP_0,8); (0x1000081d8,4) SEP ([0x100004020,8]_0,8); (0x1000081d8,4) SEP ((RSP_0 -64 8),8); (0x1000081d8,4) SEP ((RSP_0 -64 16),8); (0x1000081d8,4) SEP ((RSP_0 -64 24),8); (0x1000081d8,4) SEP ((RSP_0 -64 32),8); (0x1000081d8,4) SEP ((RSP_0 -64 40),8); (0x1000081d8,4) SEP ((RSP_0 -64 48),8); (0x1000081d8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001447: CMP EBX, DWORD PTR [RAX] 2"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001449"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001449: JNE 4294972498 2"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 35 ##
######################################
*)

htriple "ht_100001509"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001509: ExternalCall fun_0x1000032ed 5"
 Post  "RAX = bot(fun_0x1000032ed) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x1000032ed {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 36 ##
######################################
*)

htriple "ht_10000144b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000144b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000144d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000144d: JMP 4294972647 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 37 ##
######################################
*)

htriple "ht_100001452"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001452: TEST EBX, EBX 2"
 Post  "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001454"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081d8 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001454: SETE AL 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001457"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001457: CMP DWORD PTR [RIP + 27938], 0 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000145e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000145e: SETNE CL 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001461"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001461: AND CL, AL 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001463"
 Separations "((RSP_0 -64 52),1) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 52),1) SEP (0x100004020,8); ((RSP_0 -64 52),1) SEP (0x100008180,4); ((RSP_0 -64 52),1) SEP (0x100008184,4); ((RSP_0 -64 52),1) SEP (0x100008198,8); ((RSP_0 -64 52),1) SEP (0x1000081a0,8); ((RSP_0 -64 52),1) SEP (0x1000081a8,1); ((RSP_0 -64 52),1) SEP (0x1000081b0,8); ((RSP_0 -64 52),1) SEP (0x1000081b8,8); ((RSP_0 -64 52),1) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001463: TEST BYTE PTR [RBP - 44], CL 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001466"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001466: JE 4294972572 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 38 ##
######################################
*)

htriple "ht_100001468"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001468: MOV RDI, QWORD PTR [RIP + 27969] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000146f"
 Separations "(0x1000081b8,8) SEP (RSP_0,8); (0x1000081b8,8) SEP ([0x100004020,8]_0,8); (0x1000081b8,8) SEP ((RSP_0 -64 8),8); (0x1000081b8,8) SEP ((RSP_0 -64 16),8); (0x1000081b8,8) SEP ((RSP_0 -64 24),8); (0x1000081b8,8) SEP ((RSP_0 -64 32),8); (0x1000081b8,8) SEP ((RSP_0 -64 40),8); (0x1000081b8,8) SEP ((RSP_0 -64 48),8); (0x1000081b8,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000146f: MOV RSI, QWORD PTR [RIP + 27970] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001476"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001476: MOVSXD R14, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001479"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001479: MOV RDX, R14 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000147c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000147c: ExternalCall fun__bcmp 5"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__bcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001481"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001481: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001483"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001483: JNE 4294972575 2"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 39 ##
######################################
*)

htriple "ht_10000149c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000149c: MOVSXD R14, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 40 ##
######################################
*)

htriple "ht_100001485"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001485: CMP DWORD PTR [RIP + 27892], 1 7"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000148c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000148c: JE 4294972491 2"
 Post  "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 41 ##
######################################
*)

htriple "ht_10000149f"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000149f: MOV RDI, QWORD PTR [RIP + 27914] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014a6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014a6: ADD RDI, R14 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014a9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014a9: MOVSXD RSI, EBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014ac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014ac: ExternalCall fun____bzero 5"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun____bzero {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014b1"
 Separations "(0x100008198,8) SEP (RSP_0,8); (0x100008198,8) SEP ([0x100004020,8]_0,8); (0x100008198,8) SEP ((RSP_0 -64 8),8); (0x100008198,8) SEP ((RSP_0 -64 16),8); (0x100008198,8) SEP ((RSP_0 -64 24),8); (0x100008198,8) SEP ((RSP_0 -64 32),8); (0x100008198,8) SEP ((RSP_0 -64 40),8); (0x100008198,8) SEP ((RSP_0 -64 48),8); (0x100008198,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014b1: ADD R14, QWORD PTR [RIP + 27872] 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014b8"
 Separations "(0x1000081a0,8) SEP (RSP_0,8); (0x1000081a0,8) SEP ([0x100004020,8]_0,8); (0x1000081a0,8) SEP ((RSP_0 -64 8),8); (0x1000081a0,8) SEP ((RSP_0 -64 16),8); (0x1000081a0,8) SEP ((RSP_0 -64 24),8); (0x1000081a0,8) SEP ((RSP_0 -64 32),8); (0x1000081a0,8) SEP ((RSP_0 -64 40),8); (0x1000081a0,8) SEP ((RSP_0 -64 48),8); (0x1000081a0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014b8: MOV QWORD PTR [RIP + 27873], R14 7"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014bf"
 Separations "(0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([0x100004020,8]_0,8); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014bf: CMP DWORD PTR [R15], 0 4"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014c3: JNE 4294972640 2"
 Post  "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 42 ##
######################################
*)

htriple "ht_10000148e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000148e: LEA RDI, [RIP + 9753] 7"
 Post  "RAX = bot(fun__bcmp) ; RDI = 0x100003aae ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001495"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__bcmp) ; RDI = 0x100003aae ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001495: ExternalCall fun__puts 5"
 Post  "RAX = bot(fun__puts) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__puts {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000149a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__puts) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000149a: JMP 4294972491 2"
 Post  "RAX = bot(fun__puts) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 43 ##
######################################
*)

htriple "ht_1000014c5"
 Separations "(0x100004020,8) SEP (RSP_0,8); (0x100004020,8) SEP ([0x100004020,8]_0,8); (0x100004020,8) SEP ((RSP_0 -64 8),8); (0x100004020,8) SEP ((RSP_0 -64 16),8); (0x100004020,8) SEP ((RSP_0 -64 24),8); (0x100004020,8) SEP ((RSP_0 -64 32),8); (0x100004020,8) SEP ((RSP_0 -64 40),8); (0x100004020,8) SEP ((RSP_0 -64 48),8); (0x100004020,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____bzero) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014c5: MOV RAX, QWORD PTR [RIP + 11092] 7"
 Post  "RAX = [0x100004020,8]_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014cc"
 Separations "([0x100004020,8]_0,8) SEP (RSP_0,8); ([0x100004020,8]_0,8) SEP (0x100004020,8); ([0x100004020,8]_0,8) SEP (0x100008180,4); ([0x100004020,8]_0,8) SEP (0x100008184,4); ([0x100004020,8]_0,8) SEP (0x100008198,8); ([0x100004020,8]_0,8) SEP (0x1000081a0,8); ([0x100004020,8]_0,8) SEP (0x1000081a8,1); ([0x100004020,8]_0,8) SEP (0x1000081b0,8); ([0x100004020,8]_0,8) SEP (0x1000081b8,8); ([0x100004020,8]_0,8) SEP (0x1000081d8,4); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x100004020,8]_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014cc: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004020,8]_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004020,8]_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014cf: ExternalCall fun__ftell 5"
 Post  "RAX = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__ftell {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014d4: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__ftell) ; RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ftell) ; RDI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014d6: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__ftell) ; RDI = 0 ; RSI = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014d9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ftell) ; RDI = 0 ; RSI = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014d9: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__ftell) ; RDX = 0 ; RDI = 0 ; RSI = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014db"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ftell) ; RDX = 0 ; RDI = 0 ; RSI = bot(fun__ftell) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014db: ExternalCall fun__lseek 5"
 Post  "RAX = bot(fun__lseek) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__lseek {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x100008180,4];[0x100008184,4];[0x100008198,8];[0x1000081a0,8];[0x1000081a8,1];[0x1000081b0,8];[0x1000081b8,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 44 ##
######################################
*)

htriple "ht_1000014e0"
 Separations "(0x1000081b0,8) SEP (RSP_0,8); (0x1000081b0,8) SEP ([0x100004020,8]_0,8); (0x1000081b0,8) SEP ((RSP_0 -64 8),8); (0x1000081b0,8) SEP ((RSP_0 -64 16),8); (0x1000081b0,8) SEP ((RSP_0 -64 24),8); (0x1000081b0,8) SEP ((RSP_0 -64 32),8); (0x1000081b0,8) SEP ((RSP_0 -64 40),8); (0x1000081b0,8) SEP ((RSP_0 -64 48),8); (0x1000081b0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014e0: MOV RAX, QWORD PTR [RIP + 27849] 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 45 ##
######################################
*)

htriple "ht_1000014e7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014e7: ADD RSP, 8 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014eb"
 Separations "((RSP_0 -64 40),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004020,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x100008198,8); ((RSP_0 -64 40),8) SEP (0x1000081a0,8); ((RSP_0 -64 40),8) SEP (0x1000081a8,1); ((RSP_0 -64 40),8) SEP (0x1000081b0,8); ((RSP_0 -64 40),8) SEP (0x1000081b8,8); ((RSP_0 -64 40),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014eb: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014ec"
 Separations "((RSP_0 -64 32),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004020,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x100008198,8); ((RSP_0 -64 32),8) SEP (0x1000081a0,8); ((RSP_0 -64 32),8) SEP (0x1000081a8,1); ((RSP_0 -64 32),8) SEP (0x1000081b0,8); ((RSP_0 -64 32),8) SEP (0x1000081b8,8); ((RSP_0 -64 32),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014ec: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014ee"
 Separations "((RSP_0 -64 24),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004020,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x100008198,8); ((RSP_0 -64 24),8) SEP (0x1000081a0,8); ((RSP_0 -64 24),8) SEP (0x1000081a8,1); ((RSP_0 -64 24),8) SEP (0x1000081b0,8); ((RSP_0 -64 24),8) SEP (0x1000081b8,8); ((RSP_0 -64 24),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014ee: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014f0"
 Separations "((RSP_0 -64 16),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004020,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x100008198,8); ((RSP_0 -64 16),8) SEP (0x1000081a0,8); ((RSP_0 -64 16),8) SEP (0x1000081a8,1); ((RSP_0 -64 16),8) SEP (0x1000081b0,8); ((RSP_0 -64 16),8) SEP (0x1000081b8,8); ((RSP_0 -64 16),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f0: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014f2"
 Separations "((RSP_0 -64 8),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004020,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x100008198,8); ((RSP_0 -64 8),8) SEP (0x1000081a0,8); ((RSP_0 -64 8),8) SEP (0x1000081a8,1); ((RSP_0 -64 8),8) SEP (0x1000081b0,8); ((RSP_0 -64 8),8) SEP (0x1000081b8,8); ((RSP_0 -64 8),8) SEP (0x1000081d8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f2: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014f4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f4: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000014f5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014f5: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000124c, blockId == 46 ##
######################################
*)

htriple "ht_1000014fd"
 Separations "(0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([0x100004020,8]_0,8); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000014fd: MOV DWORD PTR [RIP + 27769], 3 10"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 3 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001507"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 3 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100001507: JMP 4294972640 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100008184 ; R13 = [0x100004020,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x100008180,4] = 3 ; [0x1000081a8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
