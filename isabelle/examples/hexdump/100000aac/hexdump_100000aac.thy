theory hexdump_100000aac
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100000aac, blockId == 0 ##
#####################################
*)

htriple "ht_100000aac"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 8),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004008,8); ((RSP_0 -64 8),8) SEP (0x100004010,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 8),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000aac: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000aad"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000aad: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab0"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 16),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004008,8); ((RSP_0 -64 16),8) SEP (0x100004010,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 16),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab0: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab2"
 Separations "((RSP_0 -64 24),8) SEP (RSI_0,1); ((RSP_0 -64 24),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 24),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004008,8); ((RSP_0 -64 24),8) SEP (0x100004010,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 24),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab2: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab4"
 Separations "((RSP_0 -64 32),8) SEP (RSI_0,1); ((RSP_0 -64 32),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 32),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004008,8); ((RSP_0 -64 32),8) SEP (0x100004010,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 32),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab4: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab6"
 Separations "((RSP_0 -64 40),8) SEP (RSI_0,1); ((RSP_0 -64 40),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 40),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004008,8); ((RSP_0 -64 40),8) SEP (0x100004010,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 40),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab6: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab8"
 Separations "((RSP_0 -64 48),8) SEP (RSI_0,1); ((RSP_0 -64 48),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 48),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP (0x100004008,8); ((RSP_0 -64 48),8) SEP (0x100004010,8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 48),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab8: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ab9"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ab9: SUB RSP, 40 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000abd"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000abd: MOV R14, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ac0"
 Separations "(0x100004010,8) SEP (RSI_0,1); (0x100004010,8) SEP (RSP_0,8); (0x100004010,8) SEP ([0x100004008,8]_0,4); (0x100004010,8) SEP ([0x100004010,8]_0,8); (0x100004010,8) SEP ((RDI_0 +64 16),8); (0x100004010,8) SEP ((RDI_0 +64 24),8); (0x100004010,8) SEP ((RDI_0 +64 40),4); (0x100004010,8) SEP ((RDI_0 +64 48),8); (0x100004010,8) SEP ((RDI_0 +64 56),8); (0x100004010,8) SEP ((RDI_0 +64 64),8); (0x100004010,8) SEP ((RDI_0 +64 72),8); (0x100004010,8) SEP ((RDI_0 +64 80),8); (0x100004010,8) SEP ((RDI_0 +64 88),8); (0x100004010,8) SEP ((RDI_0 +64 96),8); (0x100004010,8) SEP ((RDI_0 +64 104),8); (0x100004010,8) SEP ((RDI_0 +64 112),8); (0x100004010,8) SEP ((RDI_0 +64 120),8); (0x100004010,8) SEP ((RDI_0 +64 128),8); (0x100004010,8) SEP ((RDI_0 +64 136),8); (0x100004010,8) SEP ((RDI_0 +64 144),8); (0x100004010,8) SEP ((RDI_0 +64 152),8); (0x100004010,8) SEP ((RDI_0 +64 160),8); (0x100004010,8) SEP ((RDI_0 +64 168),8); (0x100004010,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (0x100004010,8) SEP ((RSP_0 -64 8),8); (0x100004010,8) SEP ((RSP_0 -64 16),8); (0x100004010,8) SEP ((RSP_0 -64 24),8); (0x100004010,8) SEP ((RSP_0 -64 32),8); (0x100004010,8) SEP ((RSP_0 -64 40),8); (0x100004010,8) SEP ((RSP_0 -64 48),8); (0x100004010,8) SEP ((RSP_0 -64 56),8); (0x100004010,8) SEP ((RSP_0 -64 72),4); (0x100004010,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ac0: MOV RAX, QWORD PTR [RIP + 13641] 7"
 Post  "RAX = [0x100004010,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ac7"
 Separations "([0x100004010,8]_0,8) SEP (RSI_0,1); ([0x100004010,8]_0,8) SEP (RSP_0,8); ([0x100004010,8]_0,8) SEP ([0x100004008,8]_0,4); ([0x100004010,8]_0,8) SEP (0x100004000,8); ([0x100004010,8]_0,8) SEP (0x100004008,8); ([0x100004010,8]_0,8) SEP (0x100004010,8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 16),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 24),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 40),4); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 48),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 56),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 64),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 72),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 80),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 88),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 96),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 104),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 112),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 120),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 128),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 136),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 152),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 160),8); ([0x100004010,8]_0,8) SEP ((RDI_0 +64 168),8); ([0x100004010,8]_0,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x100004010,8]_0,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = [0x100004010,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ac7: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000aca"
 Separations "((RSP_0 -64 56),8) SEP (RSI_0,1); ((RSP_0 -64 56),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 56),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004008,8); ((RSP_0 -64 56),8) SEP (0x100004010,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 56),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000aca: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ace"
 Separations "((RDI_0 +64 40),4) SEP (RSI_0,1); ((RDI_0 +64 40),4) SEP (RSP_0,8); ((RDI_0 +64 40),4) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 40),4) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 40),4) SEP (0x100004000,8); ((RDI_0 +64 40),4) SEP (0x100004008,8); ((RDI_0 +64 40),4) SEP (0x100004010,8); ((RDI_0 +64 40),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = [[0x100004010,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ace: MOV EAX, DWORD PTR [RDI + 40] 3"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ad1"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ad1: TEST EAX, EAX 2"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ad3"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ad3: JLE 4294970138 2"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 1 ##
#####################################
*)

htriple "ht_100000ad5"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ad5: DEC EAX 2"
 Post  "RAX = (b32([(RDI_0 +64 40),4]_0) -32 1) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ad7"
 Separations "((RDI_0 +64 40),4) SEP (RSI_0,1); ((RDI_0 +64 40),4) SEP (RSP_0,8); ((RDI_0 +64 40),4) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 40),4) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 40),4) SEP (0x100004000,8); ((RDI_0 +64 40),4) SEP (0x100004008,8); ((RDI_0 +64 40),4) SEP (0x100004010,8); ((RDI_0 +64 40),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = (b32([(RDI_0 +64 40),4]_0) -32 1) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000ad7: MOV DWORD PTR [R14 + 40], EAX 4"
 Post  "RAX = (b32([(RDI_0 +64 40),4]_0) -32 1) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = (b32([(RDI_0 +64 40),4]_0) -32 1) ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000adb"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32([(RDI_0 +64 40),4]_0) -32 1) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = (b32([(RDI_0 +64 40),4]_0) -32 1) ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000adb: LEA RBX, [RIP + 11838] 7"
 Post  "RAX = (b32([(RDI_0 +64 40),4]_0) -32 1) ; RBX = 0x100003920 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = (b32([(RDI_0 +64 40),4]_0) -32 1) ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 2 ##
#####################################
*)

htriple "ht_100000b1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b1a: MOV RBX, RDX 3"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b1d"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b1d: MOV R15, RSI 3"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b20"
 Separations "(RSI_0,1) SEP (RSP_0,8); (RSI_0,1) SEP ([0x100004008,8]_0,4); (RSI_0,1) SEP ([0x100004010,8]_0,8); (RSI_0,1) SEP (0x100004000,8); (RSI_0,1) SEP (0x100004008,8); (RSI_0,1) SEP (0x100004010,8); (RSI_0,1) SEP ((RDI_0 +64 16),8); (RSI_0,1) SEP ((RDI_0 +64 24),8); (RSI_0,1) SEP ((RDI_0 +64 40),4); (RSI_0,1) SEP ((RDI_0 +64 48),8); (RSI_0,1) SEP ((RDI_0 +64 56),8); (RSI_0,1) SEP ((RDI_0 +64 64),8); (RSI_0,1) SEP ((RDI_0 +64 72),8); (RSI_0,1) SEP ((RDI_0 +64 80),8); (RSI_0,1) SEP ((RDI_0 +64 88),8); (RSI_0,1) SEP ((RDI_0 +64 96),8); (RSI_0,1) SEP ((RDI_0 +64 104),8); (RSI_0,1) SEP ((RDI_0 +64 112),8); (RSI_0,1) SEP ((RDI_0 +64 120),8); (RSI_0,1) SEP ((RDI_0 +64 128),8); (RSI_0,1) SEP ((RDI_0 +64 136),8); (RSI_0,1) SEP ((RDI_0 +64 144),8); (RSI_0,1) SEP ((RDI_0 +64 152),8); (RSI_0,1) SEP ((RDI_0 +64 160),8); (RSI_0,1) SEP ((RDI_0 +64 168),8); (RSI_0,1) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (RSI_0,1) SEP ((RSP_0 -64 8),8); (RSI_0,1) SEP ((RSP_0 -64 16),8); (RSI_0,1) SEP ((RSP_0 -64 24),8); (RSI_0,1) SEP ((RSP_0 -64 32),8); (RSI_0,1) SEP ((RSP_0 -64 40),8); (RSI_0,1) SEP ((RSP_0 -64 48),8); (RSI_0,1) SEP ((RSP_0 -64 56),8); (RSI_0,1) SEP ((RSP_0 -64 72),4); (RSI_0,1) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b20: MOVZX EDI, BYTE PTR [RSI] 3"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b23"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b23: CMP EDI, 14 3"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b26"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b26: JAE 4294970166 2"
 Post  "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 3 ##
#####################################
*)

htriple "ht_100000b0b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b0b: ADD RSP, 40 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b0f"
 Separations "((RSP_0 -64 40),8) SEP (RSI_0,1); ((RSP_0 -64 40),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 40),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100004008,8); ((RSP_0 -64 40),8) SEP (0x100004010,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 40),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b0f: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b10"
 Separations "((RSP_0 -64 32),8) SEP (RSI_0,1); ((RSP_0 -64 32),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 32),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100004008,8); ((RSP_0 -64 32),8) SEP (0x100004010,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 32),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b10: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b12"
 Separations "((RSP_0 -64 24),8) SEP (RSI_0,1); ((RSP_0 -64 24),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 24),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100004008,8); ((RSP_0 -64 24),8) SEP (0x100004010,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 24),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b12: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b14"
 Separations "((RSP_0 -64 16),8) SEP (RSI_0,1); ((RSP_0 -64 16),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 16),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100004008,8); ((RSP_0 -64 16),8) SEP (0x100004010,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 16),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b14: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b16"
 Separations "((RSP_0 -64 8),8) SEP (RSI_0,1); ((RSP_0 -64 8),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 8),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100004008,8); ((RSP_0 -64 8),8) SEP (0x100004010,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 8),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b16: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b18"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b18: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b19"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b19: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 4 ##
#####################################
*)

htriple "ht_100000d0c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d0c: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 5 ##
#####################################
*)

htriple "ht_100000b28"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 40),4]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b28: MOV EAX, 16257 5"
 Post  "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b2d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b2d: BT EAX, EDI 3"
 Post  "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b30"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b30: JB 4294970300 6"
 Post  "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 6 ##
#####################################
*)

htriple "ht_100000b36"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b36: LEA R12, [RIP + 30395] 7"
 Post  "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b3d"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b3d: CMP DWORD PTR [R12], 0 5"
 Post  "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b42"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b42: JE 4294970290 2"
 Post  "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 7 ##
#####################################
*)

htriple "ht_100000bbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3f81 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bbc: MOVSX RAX, DIL 4"
 Post  "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bc0: LEA RCX, [RIP + 13689] 7"
 Post  "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = RDX_0 ; RCX = 0x100004140 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bc7"
 Separations "((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP (RSI_0,1); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP (RSP_0,8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ([0x100004008,8]_0,4); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ([0x100004010,8]_0,8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP (0x100004000,8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP (0x100004008,8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP (0x100004010,8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 16),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 24),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 40),4); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 48),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 56),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 64),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 72),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 80),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 88),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 96),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 104),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 112),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 120),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 128),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 136),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 144),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 152),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 160),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RDI_0 +64 168),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 8),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 16),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 24),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 32),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 40),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 48),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 56),8); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 72),4); ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = RDX_0 ; RCX = 0x100004140 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bc7: MOV RBX, QWORD PTR [RCX + RAX * 8] 4"
 Post  "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; RCX = 0x100004140 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bcb"
 Separations ""
 Assertions  ""
 Pre   "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; RCX = 0x100004140 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bcb: JMP 4294970082 5"
 Post  "RAX = signextend(8,64, [RSI_0,1]_0) ; RBX = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; RCX = 0x100004140 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 8 ##
#####################################
*)

htriple "ht_100000b44"
 Separations "(0x100004008,8) SEP (RSI_0,1); (0x100004008,8) SEP (RSP_0,8); (0x100004008,8) SEP ([0x100004008,8]_0,4); (0x100004008,8) SEP ([0x100004010,8]_0,8); (0x100004008,8) SEP ((RDI_0 +64 16),8); (0x100004008,8) SEP ((RDI_0 +64 24),8); (0x100004008,8) SEP ((RDI_0 +64 40),4); (0x100004008,8) SEP ((RDI_0 +64 48),8); (0x100004008,8) SEP ((RDI_0 +64 56),8); (0x100004008,8) SEP ((RDI_0 +64 64),8); (0x100004008,8) SEP ((RDI_0 +64 72),8); (0x100004008,8) SEP ((RDI_0 +64 80),8); (0x100004008,8) SEP ((RDI_0 +64 88),8); (0x100004008,8) SEP ((RDI_0 +64 96),8); (0x100004008,8) SEP ((RDI_0 +64 104),8); (0x100004008,8) SEP ((RDI_0 +64 112),8); (0x100004008,8) SEP ((RDI_0 +64 120),8); (0x100004008,8) SEP ((RDI_0 +64 128),8); (0x100004008,8) SEP ((RDI_0 +64 136),8); (0x100004008,8) SEP ((RDI_0 +64 144),8); (0x100004008,8) SEP ((RDI_0 +64 152),8); (0x100004008,8) SEP ((RDI_0 +64 160),8); (0x100004008,8) SEP ((RDI_0 +64 168),8); (0x100004008,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (0x100004008,8) SEP ((RSP_0 -64 8),8); (0x100004008,8) SEP ((RSP_0 -64 16),8); (0x100004008,8) SEP ((RSP_0 -64 24),8); (0x100004008,8) SEP ((RSP_0 -64 32),8); (0x100004008,8) SEP ((RSP_0 -64 40),8); (0x100004008,8) SEP ((RSP_0 -64 48),8); (0x100004008,8) SEP ((RSP_0 -64 56),8); (0x100004008,8) SEP ((RSP_0 -64 72),4); (0x100004008,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b44: MOV RAX, QWORD PTR [RIP + 13501] 7"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b4b"
 Separations "([0x100004008,8]_0,4) SEP (RSI_0,1); ([0x100004008,8]_0,4) SEP (RSP_0,8); ([0x100004008,8]_0,4) SEP ([0x100004010,8]_0,8); ([0x100004008,8]_0,4) SEP (0x100004000,8); ([0x100004008,8]_0,4) SEP (0x100004008,8); ([0x100004008,8]_0,4) SEP (0x100004010,8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 40),4); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 48),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 56),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 64),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 72),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 80),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 88),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 96),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 104),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 112),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 120),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 128),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 136),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 144),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 152),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 160),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 168),8); ([0x100004008,8]_0,4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 8),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 16),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 24),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 32),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 40),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 48),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 56),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 72),4); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b4b: CMP DWORD PTR [RAX], 2 3"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b4e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b4e: JL 4294970290 2"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100000aac, blockId == 9 ##
#####################################
*)

htriple "ht_100000bb2"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bb2: MOV DWORD PTR [RBP - 64], EDI 3"
 Post  "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = b32([RSI_0,1]_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bb5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = b32([RSI_0,1]_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bb5: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = b32([RSI_0,1]_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bb7"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = b32([RSI_0,1]_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000bb7: JMP 4294970444 5"
 Post  "RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = b32([RSI_0,1]_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 10 ##
######################################
*)

htriple "ht_100000b50"
 Separations "((RSP_0 -64 80),8) SEP (RSI_0,1); ((RSP_0 -64 80),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 80),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100004008,8); ((RSP_0 -64 80),8) SEP (0x100004010,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 80),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0"
 Instruction "100000b50: MOV QWORD PTR [RBP - 72], R14 4"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b54"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = 0x1000081f8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b54: LEA R12, [R14 + 48] 4"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = (RDI_0 +64 48) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b58"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDI_0 ; R13 = R13_0 ; R12 = (RDI_0 +64 48) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b58: XOR R14D, R14D 3"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = 0 ; R13 = R13_0 ; R12 = (RDI_0 +64 48) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b5b"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = 0 ; R13 = R13_0 ; R12 = (RDI_0 +64 48) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b5b: LEA R13, [RBP - 78] 4"
 Post  "RAX = [0x100004008,8]_0 ; RBX = RDX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = b32([RSI_0,1]_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = 0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,1] = [RSI_0,1]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004010,8]_0,8] = [[0x100004010,8]_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 40),4] = [(RDI_0 +64 40),4]_0 ; [(RDI_0 +64 48),8] = [(RDI_0 +64 48),8]_0 ; [(RDI_0 +64 56),8] = [(RDI_0 +64 56),8]_0 ; [(RDI_0 +64 64),8] = [(RDI_0 +64 64),8]_0 ; [(RDI_0 +64 72),8] = [(RDI_0 +64 72),8]_0 ; [(RDI_0 +64 80),8] = [(RDI_0 +64 80),8]_0 ; [(RDI_0 +64 88),8] = [(RDI_0 +64 88),8]_0 ; [(RDI_0 +64 96),8] = [(RDI_0 +64 96),8]_0 ; [(RDI_0 +64 104),8] = [(RDI_0 +64 104),8]_0 ; [(RDI_0 +64 112),8] = [(RDI_0 +64 112),8]_0 ; [(RDI_0 +64 120),8] = [(RDI_0 +64 120),8]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 136),8] = [(RDI_0 +64 136),8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [(RDI_0 +64 160),8] = [(RDI_0 +64 160),8]_0 ; [(RDI_0 +64 168),8] = [(RDI_0 +64 168),8]_0 ; [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8] = [(0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 11 ##
######################################
*)

htriple "ht_100000b77"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b77: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b7a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b7a: JE 4294970420 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 12 ##
######################################
*)

htriple "ht_100000bd3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bd3: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bd5"
 Separations "((RDI_0 +64 168),8) SEP (RSI_0,1); ((RDI_0 +64 168),8) SEP (RSP_0,8); ((RDI_0 +64 168),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 168),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 168),8) SEP (0x100004000,8); ((RDI_0 +64 168),8) SEP (0x100004008,8); ((RDI_0 +64 168),8) SEP (0x100004010,8); ((RDI_0 +64 168),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 168),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bd5: MOV QWORD PTR [R12 + 120], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bda"
 Separations "((RDI_0 +64 160),8) SEP (RSI_0,1); ((RDI_0 +64 160),8) SEP (RSP_0,8); ((RDI_0 +64 160),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 160),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 160),8) SEP (0x100004000,8); ((RDI_0 +64 160),8) SEP (0x100004008,8); ((RDI_0 +64 160),8) SEP (0x100004010,8); ((RDI_0 +64 160),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 160),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bda: MOV QWORD PTR [R12 + 112], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bdf"
 Separations "((RDI_0 +64 152),8) SEP (RSI_0,1); ((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 152),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 152),8) SEP (0x100004000,8); ((RDI_0 +64 152),8) SEP (0x100004008,8); ((RDI_0 +64 152),8) SEP (0x100004010,8); ((RDI_0 +64 152),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bdf: MOV QWORD PTR [R12 + 104], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000be4"
 Separations "((RDI_0 +64 144),8) SEP (RSI_0,1); ((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 144),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 144),8) SEP (0x100004000,8); ((RDI_0 +64 144),8) SEP (0x100004008,8); ((RDI_0 +64 144),8) SEP (0x100004010,8); ((RDI_0 +64 144),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000be4: MOV QWORD PTR [R12 + 96], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000be9"
 Separations "((RDI_0 +64 136),8) SEP (RSI_0,1); ((RDI_0 +64 136),8) SEP (RSP_0,8); ((RDI_0 +64 136),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 136),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 136),8) SEP (0x100004000,8); ((RDI_0 +64 136),8) SEP (0x100004008,8); ((RDI_0 +64 136),8) SEP (0x100004010,8); ((RDI_0 +64 136),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 136),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000be9: MOV QWORD PTR [R12 + 88], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bee"
 Separations "((RDI_0 +64 128),8) SEP (RSI_0,1); ((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 128),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 128),8) SEP (0x100004000,8); ((RDI_0 +64 128),8) SEP (0x100004008,8); ((RDI_0 +64 128),8) SEP (0x100004010,8); ((RDI_0 +64 128),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bee: MOV QWORD PTR [R12 + 80], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bf3"
 Separations "((RDI_0 +64 120),8) SEP (RSI_0,1); ((RDI_0 +64 120),8) SEP (RSP_0,8); ((RDI_0 +64 120),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 120),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 120),8) SEP (0x100004000,8); ((RDI_0 +64 120),8) SEP (0x100004008,8); ((RDI_0 +64 120),8) SEP (0x100004010,8); ((RDI_0 +64 120),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 120),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bf3: MOV QWORD PTR [R12 + 72], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bf8"
 Separations "((RDI_0 +64 112),8) SEP (RSI_0,1); ((RDI_0 +64 112),8) SEP (RSP_0,8); ((RDI_0 +64 112),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 112),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 112),8) SEP (0x100004000,8); ((RDI_0 +64 112),8) SEP (0x100004008,8); ((RDI_0 +64 112),8) SEP (0x100004010,8); ((RDI_0 +64 112),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bf8: MOV QWORD PTR [R12 + 64], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bfd"
 Separations "((RDI_0 +64 104),8) SEP (RSI_0,1); ((RDI_0 +64 104),8) SEP (RSP_0,8); ((RDI_0 +64 104),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 104),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 104),8) SEP (0x100004000,8); ((RDI_0 +64 104),8) SEP (0x100004008,8); ((RDI_0 +64 104),8) SEP (0x100004010,8); ((RDI_0 +64 104),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 104),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bfd: MOV QWORD PTR [R12 + 56], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c02"
 Separations "((RDI_0 +64 96),8) SEP (RSI_0,1); ((RDI_0 +64 96),8) SEP (RSP_0,8); ((RDI_0 +64 96),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 96),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 96),8) SEP (0x100004000,8); ((RDI_0 +64 96),8) SEP (0x100004008,8); ((RDI_0 +64 96),8) SEP (0x100004010,8); ((RDI_0 +64 96),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c02: MOV QWORD PTR [R12 + 48], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c07"
 Separations "((RDI_0 +64 88),8) SEP (RSI_0,1); ((RDI_0 +64 88),8) SEP (RSP_0,8); ((RDI_0 +64 88),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 88),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 88),8) SEP (0x100004000,8); ((RDI_0 +64 88),8) SEP (0x100004008,8); ((RDI_0 +64 88),8) SEP (0x100004010,8); ((RDI_0 +64 88),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 88),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c07: MOV QWORD PTR [R12 + 40], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c0c"
 Separations "((RDI_0 +64 80),8) SEP (RSI_0,1); ((RDI_0 +64 80),8) SEP (RSP_0,8); ((RDI_0 +64 80),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 80),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 80),8) SEP (0x100004000,8); ((RDI_0 +64 80),8) SEP (0x100004008,8); ((RDI_0 +64 80),8) SEP (0x100004010,8); ((RDI_0 +64 80),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c0c: MOV QWORD PTR [R12 + 32], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c11"
 Separations "((RDI_0 +64 72),8) SEP (RSI_0,1); ((RDI_0 +64 72),8) SEP (RSP_0,8); ((RDI_0 +64 72),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 72),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 72),8) SEP (0x100004000,8); ((RDI_0 +64 72),8) SEP (0x100004008,8); ((RDI_0 +64 72),8) SEP (0x100004010,8); ((RDI_0 +64 72),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c11: MOV QWORD PTR [R12 + 24], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c16"
 Separations "((RDI_0 +64 64),8) SEP (RSI_0,1); ((RDI_0 +64 64),8) SEP (RSP_0,8); ((RDI_0 +64 64),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 64),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 64),8) SEP (0x100004000,8); ((RDI_0 +64 64),8) SEP (0x100004008,8); ((RDI_0 +64 64),8) SEP (0x100004010,8); ((RDI_0 +64 64),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 64),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c16: MOV QWORD PTR [R12 + 16], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c1b"
 Separations "((RDI_0 +64 56),8) SEP (RSI_0,1); ((RDI_0 +64 56),8) SEP (RSP_0,8); ((RDI_0 +64 56),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 56),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 56),8) SEP (0x100004000,8); ((RDI_0 +64 56),8) SEP (0x100004008,8); ((RDI_0 +64 56),8) SEP (0x100004010,8); ((RDI_0 +64 56),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c1b: MOV QWORD PTR [R12 + 8], RAX 5"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c20"
 Separations "((RDI_0 +64 48),8) SEP (RSI_0,1); ((RDI_0 +64 48),8) SEP (RSP_0,8); ((RDI_0 +64 48),8) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 48),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 48),8) SEP (0x100004000,8); ((RDI_0 +64 48),8) SEP (0x100004008,8); ((RDI_0 +64 48),8) SEP (0x100004010,8); ((RDI_0 +64 48),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 48),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c20: MOV QWORD PTR [R12], RAX 4"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c24"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 56),8); (R15,1) SEP ((RSP_0 -64 72),4); (R15,1) SEP ((RSP_0 -64 80),8)"
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c24: MOVZX EAX, BYTE PTR [R15] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c28"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c28: MOV DWORD PTR [RBP - 64], EAX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c2b"
 Separations "((RSP_0 -64 80),8) SEP (RSI_0,1); ((RSP_0 -64 80),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 80),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100004008,8); ((RSP_0 -64 80),8) SEP (0x100004010,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 80),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c2b: MOV R14, QWORD PTR [RBP - 72] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c2f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c2f: JMP 4294970574 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RDI_0 +64 48),8] = 0 ; [(RDI_0 +64 56),8] = 0 ; [(RDI_0 +64 64),8] = 0 ; [(RDI_0 +64 72),8] = 0 ; [(RDI_0 +64 80),8] = 0 ; [(RDI_0 +64 88),8] = 0 ; [(RDI_0 +64 96),8] = 0 ; [(RDI_0 +64 104),8] = 0 ; [(RDI_0 +64 112),8] = 0 ; [(RDI_0 +64 120),8] = 0 ; [(RDI_0 +64 128),8] = 0 ; [(RDI_0 +64 136),8] = 0 ; [(RDI_0 +64 144),8] = 0 ; [(RDI_0 +64 152),8] = 0 ; [(RDI_0 +64 160),8] = 0 ; [(RDI_0 +64 168),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 13 ##
######################################
*)

htriple "ht_100000b80"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b80: CMP R15, R13 3"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b83"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b83: JNE 4294970251 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 14 ##
######################################
*)

htriple "ht_100000c34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c34: MOV EAX, 1 5"
 Post  "RAX = 1 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 15 ##
######################################
*)

htriple "ht_100000b85"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b85: CMP RAX, 18446744073709551614 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b89"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b89: JE 4294970320 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 16 ##
######################################
*)

htriple "ht_100000b8b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b8b: CMP RAX, 18446744073709551614 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b8f: JNE 4294970425 6"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 17 ##
######################################
*)

htriple "ht_100000bd0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bd0: MOV R15, R13 3"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 86) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 18 ##
######################################
*)

htriple "ht_100000b95"
 Separations "(0x100004008,8) SEP (RSI_0,1); (0x100004008,8) SEP (RSP_0,8); (0x100004008,8) SEP ([0x100004008,8]_0,4); (0x100004008,8) SEP ([0x100004010,8]_0,8); (0x100004008,8) SEP ((RDI_0 +64 16),8); (0x100004008,8) SEP ((RDI_0 +64 24),8); (0x100004008,8) SEP ((RDI_0 +64 40),4); (0x100004008,8) SEP ((RDI_0 +64 48),8); (0x100004008,8) SEP ((RDI_0 +64 56),8); (0x100004008,8) SEP ((RDI_0 +64 64),8); (0x100004008,8) SEP ((RDI_0 +64 72),8); (0x100004008,8) SEP ((RDI_0 +64 80),8); (0x100004008,8) SEP ((RDI_0 +64 88),8); (0x100004008,8) SEP ((RDI_0 +64 96),8); (0x100004008,8) SEP ((RDI_0 +64 104),8); (0x100004008,8) SEP ((RDI_0 +64 112),8); (0x100004008,8) SEP ((RDI_0 +64 120),8); (0x100004008,8) SEP ((RDI_0 +64 128),8); (0x100004008,8) SEP ((RDI_0 +64 136),8); (0x100004008,8) SEP ((RDI_0 +64 144),8); (0x100004008,8) SEP ((RDI_0 +64 152),8); (0x100004008,8) SEP ((RDI_0 +64 160),8); (0x100004008,8) SEP ((RDI_0 +64 168),8); (0x100004008,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (0x100004008,8) SEP ((RSP_0 -64 8),8); (0x100004008,8) SEP ((RSP_0 -64 16),8); (0x100004008,8) SEP ((RSP_0 -64 24),8); (0x100004008,8) SEP ((RSP_0 -64 32),8); (0x100004008,8) SEP ((RSP_0 -64 40),8); (0x100004008,8) SEP ((RSP_0 -64 48),8); (0x100004008,8) SEP ((RSP_0 -64 56),8); (0x100004008,8) SEP ((RSP_0 -64 72),4); (0x100004008,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b95: MOV RAX, QWORD PTR [RIP + 13420] 7"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b9c"
 Separations "([0x100004008,8]_0,4) SEP (RSI_0,1); ([0x100004008,8]_0,4) SEP (RSP_0,8); ([0x100004008,8]_0,4) SEP ([0x100004010,8]_0,8); ([0x100004008,8]_0,4) SEP (0x100004000,8); ([0x100004008,8]_0,4) SEP (0x100004008,8); ([0x100004008,8]_0,4) SEP (0x100004010,8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 40),4); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 48),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 56),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 64),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 72),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 80),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 88),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 96),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 104),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 112),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 120),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 128),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 136),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 144),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 152),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 160),8); ([0x100004008,8]_0,4) SEP ((RDI_0 +64 168),8); ([0x100004008,8]_0,4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 8),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 16),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 24),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 32),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 40),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 48),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 56),8); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 72),4); ([0x100004008,8]_0,4) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b9c: MOVSXD RSI, DWORD PTR [RAX] 3"
 Post  "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b9f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b9f: MOV RDI, R13 3"
 Post  "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 86) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ba2"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004008,8]_0 ; RDI = (RSP_0 -64 86) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000ba2: ExternalCall fun_0x1000016a3 5"
 Post  "RAX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000016a3 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ba7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000ba7: MOV R14, RBX 3"
 Post  "RAX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000baa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000baa: MOV RBX, RAX 3"
 Post  "RAX = bot(fun_0x1000016a3) ; RBX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000016a3) ; RBX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bad: MOV R15, R13 3"
 Post  "RAX = bot(fun_0x1000016a3) ; RBX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 86) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000bb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000016a3) ; RBX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 86) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000bb0: JMP 4294970207 2"
 Post  "RAX = bot(fun_0x1000016a3) ; RBX = bot(fun_0x1000016a3) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 86) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 19 ##
######################################
*)

htriple "ht_100000c39"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c39: LEA EBX, [RAX + R14 - 1] 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c3e"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c3e: MOV EDI, DWORD PTR [RBP - 64] 3"
 Post  "RDI = b32([(RSP_0 -64 72),4]_0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c41"
 Separations "((RSP_0 -64 80),8) SEP (RSI_0,1); ((RSP_0 -64 80),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 80),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100004008,8); ((RSP_0 -64 80),8) SEP (0x100004010,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 80),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RDI = b32([(RSP_0 -64 72),4]_0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c41: MOV R14, QWORD PTR [RBP - 72] 4"
 Post  "RDI = b32([(RSP_0 -64 72),4]_0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c45"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32([(RSP_0 -64 72),4]_0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000c45: LEA R12, [RIP + 30124] 7"
 Post  "RDI = b32([(RSP_0 -64 72),4]_0) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R13 = (RSP_0 -64 86) ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 20 ##
######################################
*)

htriple "ht_100000b5f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b5f: LEA RDI, [RBP - 64] 4"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b63"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b63: MOV RSI, R15 3"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b66"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b66: MOV RDX, RBX 3"
 Post  "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b69"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b69: MOV RCX, R12 3"
 Post  "RCX = (RDI_0 +64 48) ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b6c"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RDI_0 +64 48) ; RDI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b6c: ExternalCall fun__mbrtowc 5"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__mbrtowc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b71"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b71: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b75"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100000b75: JE 4294970323 2"
 Post  "RAX = bot(fun__mbrtowc) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R13 = (RSP_0 -64 86) ; R12 = (RDI_0 +64 48) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 21 ##
######################################
*)

htriple "ht_100000ae2"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (0x100004008,8); ((RDI_0 +64 16),8) SEP (0x100004010,8); ((RDI_0 +64 16),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ae2: MOV RAX, QWORD PTR [R14 + 16] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ae6"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 56),8); (RAX,1) SEP ((RSP_0 -64 72),4); (RAX,1) SEP ((RSP_0 -64 80),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ae6: MOV BYTE PTR [RAX], 115 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ae9"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (0x100004008,8); ((RDI_0 +64 24),8) SEP (0x100004010,8); ((RDI_0 +64 24),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ae9: MOV RDI, QWORD PTR [R14 + 24] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000aed"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000aed: MOV RSI, RBX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000af0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000af0: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000af2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000af2: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 22 ##
######################################
*)

htriple "ht_100000c4c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c4c: CMP EDI, 127 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c4f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c4f: JA 4294970469 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 23 ##
######################################
*)

htriple "ht_100000c51"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c51: MOV ECX, EDI 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c53"
 Separations "(0x100004000,8) SEP (RSI_0,1); (0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([0x100004008,8]_0,4); (0x100004000,8) SEP ([0x100004010,8]_0,8); (0x100004000,8) SEP ((RDI_0 +64 16),8); (0x100004000,8) SEP ((RDI_0 +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 40),4); (0x100004000,8) SEP ((RDI_0 +64 48),8); (0x100004000,8) SEP ((RDI_0 +64 56),8); (0x100004000,8) SEP ((RDI_0 +64 64),8); (0x100004000,8) SEP ((RDI_0 +64 72),8); (0x100004000,8) SEP ((RDI_0 +64 80),8); (0x100004000,8) SEP ((RDI_0 +64 88),8); (0x100004000,8) SEP ((RDI_0 +64 96),8); (0x100004000,8) SEP ((RDI_0 +64 104),8); (0x100004000,8) SEP ((RDI_0 +64 112),8); (0x100004000,8) SEP ((RDI_0 +64 120),8); (0x100004000,8) SEP ((RDI_0 +64 128),8); (0x100004000,8) SEP ((RDI_0 +64 136),8); (0x100004000,8) SEP ((RDI_0 +64 144),8); (0x100004000,8) SEP ((RDI_0 +64 152),8); (0x100004000,8) SEP ((RDI_0 +64 160),8); (0x100004000,8) SEP ((RDI_0 +64 168),8); (0x100004000,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),8); (0x100004000,8) SEP ((RSP_0 -64 72),4); (0x100004000,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c53: MOV RDX, QWORD PTR [RIP + 13222] 7"
 Post  "RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c5a"
 Separations ""
 Assertions  ""
 Pre   "RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c5a: MOV EAX, 262144 5"
 Post  "RAX = 0x40000 ; RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c5f"
 Separations ""
 Assertions  "(([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP (RSP_0,8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 32),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 40),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 48),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 56),8); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 72),4); (([0x100004000,8]_0 +64 ((RCX *64 4) +64 60)),4) SEP ((RSP_0 -64 80),8)"
 Pre   "RAX = 0x40000 ; RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c5f: AND EAX, DWORD PTR [RDX + RCX * 4 + 60] 4"
 Post  "RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c63"
 Separations ""
 Assertions  ""
 Pre   "RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c63: JMP 4294970479 2"
 Post  "RDX = [0x100004000,8]_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 24 ##
######################################
*)

htriple "ht_100000c65"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c65: MOV ESI, 262144 5"
 Post  "RSI = 0x40000 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c6a"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x40000 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c6a: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 25 ##
######################################
*)

htriple "ht_100000c6f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c6f: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c71"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c71: JE 4294970574 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 26 ##
######################################
*)

htriple "ht_100000c73"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c73: CMP DWORD PTR [R12], 0 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c78"
 Separations "((RDI_0 +64 16),8) SEP (RSI_0,1); ((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 16),8) SEP (0x100004000,8); ((RDI_0 +64 16),8) SEP (0x100004008,8); ((RDI_0 +64 16),8) SEP (0x100004010,8); ((RDI_0 +64 16),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c78: MOV RAX, QWORD PTR [R14 + 16] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c7c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c7c: JE 4294970614 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 27 ##
######################################
*)

htriple "ht_100000cce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cce: LEA RBX, [RBP - 58] 4"
 Post  "RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cd2"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 56),8); (R15,1) SEP ((RSP_0 -64 72),4); (R15,1) SEP ((RSP_0 -64 80),8)"
 Pre   "RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cd2: MOVZX R8D, BYTE PTR [R15] 4"
 Post  "RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cd6"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cd6: LEA RCX, [RIP + 11551] 7"
 Post  "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cdd"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cdd: MOV EDX, 10 5"
 Post  "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ce2"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ce2: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ce5"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ce5: MOV ESI, 0 5"
 Post  "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cea"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cea: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cec"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 66) ; RCX = 0x1000039fc ; RDX = 10 ; RDI = (RSP_0 -64 66) ; RSI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cec: ExternalCall fun____sprintf_chk 5"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____sprintf_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cf1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cf1: JMP 4294970082 5"
 Post  "RAX = bot(fun____sprintf_chk) ; RBX = (RSP_0 -64 66) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 28 ##
######################################
*)

htriple "ht_100000c7e"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 56),8); (RAX,1) SEP ((RSP_0 -64 72),4); (RAX,1) SEP ((RSP_0 -64 80),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c7e: MOV BYTE PTR [RAX], 67 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c81"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (0x100004008,8); ((RDI_0 +64 24),8) SEP (0x100004010,8); ((RDI_0 +64 24),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c81: MOV RDI, QWORD PTR [R14 + 24] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c85"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c85: LEA RSI, [RIP + 11439] 7"
 Post  "RSI = 0x10000393b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c8c"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000393b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c8c: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c91: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c93"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c93: JNE 4294970641 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 29 ##
######################################
*)

htriple "ht_100000cf6"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 56),8); (RAX,1) SEP ((RSP_0 -64 72),4); (RAX,1) SEP ((RSP_0 -64 80),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100004008,8] = [0x100004008,8]_0 ; [0x100004010,8] = [0x100004010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cf6: MOV BYTE PTR [RAX], 99 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cf9"
 Separations "((RDI_0 +64 24),8) SEP (RSI_0,1); ((RDI_0 +64 24),8) SEP (RSP_0,8); ((RDI_0 +64 24),8) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 24),8) SEP (0x100004000,8); ((RDI_0 +64 24),8) SEP (0x100004008,8); ((RDI_0 +64 24),8) SEP (0x100004010,8); ((RDI_0 +64 24),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 24),8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cf9: MOV RDI, QWORD PTR [R14 + 24] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cfd"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cfd: MOV ESI, DWORD PTR [RBP - 64] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d00"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d00: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d02"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d02: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000d07"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d07: JMP 4294970103 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 30 ##
######################################
*)

htriple "ht_100000c95"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c95: MOV EDI, DWORD PTR [RBP - 64] 3"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c98"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c98: ExternalCall fun__wcwidth 5"
 Post  "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__wcwidth {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c9d: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000c9f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000c9f: JS 4294970646 2"
 Post  "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 31 ##
######################################
*)

htriple "ht_100000d11"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d11: ExternalCall fun_0x1000032aa 5"
 Post  "RAX = bot(fun_0x1000032aa) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun_0x1000032aa {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 32 ##
######################################
*)

htriple "ht_100000ca1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ca1: MOV ESI, 3 5"
 Post  "RAX = bot(fun__wcwidth) ; RSI = 3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ca6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSI = 3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ca6: XOR ECX, ECX 2"
 Post  "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSI = 3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000ca8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSI = 3 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000ca8: SUB ESI, EAX 2"
 Post  "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSI = (3 -32 b32(bot(fun__wcwidth))) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000caa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSI = (3 -32 b32(bot(fun__wcwidth))) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000caa: CMOVS ESI, ECX 3"
 Post  "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cad"
 Separations "((RSP_0 -64 72),4) SEP (RSI_0,1); ((RSP_0 -64 72),4) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 72),4) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 72),4) SEP (0x100004000,8); ((RSP_0 -64 72),4) SEP (0x100004008,8); ((RSP_0 -64 72),4) SEP (0x100004010,8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 72),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cad: MOV ECX, DWORD PTR [RBP - 64] 3"
 Post  "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cb0: LEA RDI, [RIP + 11582] 7"
 Post  "RAX = bot(fun__wcwidth) ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cb7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cb7: LEA RDX, [RIP + 11581] 7"
 Post  "RAX = bot(fun__wcwidth) ; RDX = 0x1000039fb ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cbe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RDX = 0x1000039fb ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cbe: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = 0x1000039fb ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = 0x1000039fb ; RDI = 0x1000039f5 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cc0: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cc5"
 Separations "((RDI_0 +64 40),4) SEP (RSI_0,1); ((RDI_0 +64 40),4) SEP (RSP_0,8); ((RDI_0 +64 40),4) SEP ([0x100004008,8]_0,4); ((RDI_0 +64 40),4) SEP ([0x100004010,8]_0,8); ((RDI_0 +64 40),4) SEP (0x100004000,8); ((RDI_0 +64 40),4) SEP (0x100004008,8); ((RDI_0 +64 40),4) SEP (0x100004010,8); ((RDI_0 +64 40),4) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 40),4) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cc5: MOV DWORD PTR [R14 + 40], EBX 4"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000cc9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000cc9: JMP 4294970103 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 33 ##
######################################
*)

htriple "ht_100000d16"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__wcwidth) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000d16: ExternalCall fun_0x100003287 5"
 Post  "RAX = bot(fun_0x100003287) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; R12 = 0x1000081f8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun_0x100003287 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[0x100004008,8];[0x100004010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100000aac, blockId == 34 ##
######################################
*)

htriple "ht_100000af7"
 Separations "(0x100004010,8) SEP (RSI_0,1); (0x100004010,8) SEP (RSP_0,8); (0x100004010,8) SEP ([0x100004008,8]_0,4); (0x100004010,8) SEP ([0x100004010,8]_0,8); (0x100004010,8) SEP ((RDI_0 +64 16),8); (0x100004010,8) SEP ((RDI_0 +64 24),8); (0x100004010,8) SEP ((RDI_0 +64 40),4); (0x100004010,8) SEP ((RDI_0 +64 48),8); (0x100004010,8) SEP ((RDI_0 +64 56),8); (0x100004010,8) SEP ((RDI_0 +64 64),8); (0x100004010,8) SEP ((RDI_0 +64 72),8); (0x100004010,8) SEP ((RDI_0 +64 80),8); (0x100004010,8) SEP ((RDI_0 +64 88),8); (0x100004010,8) SEP ((RDI_0 +64 96),8); (0x100004010,8) SEP ((RDI_0 +64 104),8); (0x100004010,8) SEP ((RDI_0 +64 112),8); (0x100004010,8) SEP ((RDI_0 +64 120),8); (0x100004010,8) SEP ((RDI_0 +64 128),8); (0x100004010,8) SEP ((RDI_0 +64 136),8); (0x100004010,8) SEP ((RDI_0 +64 144),8); (0x100004010,8) SEP ((RDI_0 +64 152),8); (0x100004010,8) SEP ((RDI_0 +64 160),8); (0x100004010,8) SEP ((RDI_0 +64 168),8); (0x100004010,8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8); (0x100004010,8) SEP ((RSP_0 -64 8),8); (0x100004010,8) SEP ((RSP_0 -64 16),8); (0x100004010,8) SEP ((RSP_0 -64 24),8); (0x100004010,8) SEP ((RSP_0 -64 32),8); (0x100004010,8) SEP ((RSP_0 -64 40),8); (0x100004010,8) SEP ((RSP_0 -64 48),8); (0x100004010,8) SEP ((RSP_0 -64 56),8); (0x100004010,8) SEP ((RSP_0 -64 72),4); (0x100004010,8) SEP ((RSP_0 -64 80),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000af7: MOV RAX, QWORD PTR [RIP + 13586] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000afe"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8); (RAX,8) SEP ((RSP_0 -64 72),4); (RAX,8) SEP ((RSP_0 -64 80),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000afe: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b01"
 Separations "((RSP_0 -64 56),8) SEP (RSI_0,1); ((RSP_0 -64 56),8) SEP ([0x100004008,8]_0,4); ((RSP_0 -64 56),8) SEP ([0x100004010,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP (0x100004008,8); ((RSP_0 -64 56),8) SEP (0x100004010,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 24),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 40),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 48),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 64),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 88),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 104),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 120),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 136),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 160),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 168),8); ((RSP_0 -64 56),8) SEP ((0x100004140 +64 (signextend(8,64, [RSI_0,1]_0) *64 8)),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b01: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100000b05"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
 Instruction "100000b05: JNE 4294970636 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100004010,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
