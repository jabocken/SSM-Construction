theory hexdump_100002ab4
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100002ab4, blockId == 0 ##
#####################################
*)

htriple "ht_100002ab4"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002ab4: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ab5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002ab5: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ab8"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 16),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002ab8: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aba"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 24),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002aba: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002abc"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 32),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002abc: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002abe"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 40),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002abe: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac0"
 Separations "((RSP_0 -64 48),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 48),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002ac0: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac1"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),8) SEP (0x100004000,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100002ac1: PUSH RAX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac2"
 Separations "((RDI_0 +64 8),8) SEP (RSP_0,8); ((RDI_0 +64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RDI_0 +64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RDI_0 +64 8),8) SEP (0x100004000,8); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 52),4); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 56),4); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002ac2: MOV R13, QWORD PTR [RDI + 8] 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac6"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002ac6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ac8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002ac8: TEST R13, R13 3"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002acb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002acb: JE 4294978513 6"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 1 ##
#####################################
*)

htriple "ht_100002ad1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002ad1: LEA R15, [RIP + 5235] 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ad8"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100002ad8: MOV R12, QWORD PTR [RIP + 5409] 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = [0x100004000,8]_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 8),8]_0,8] = [[(RDI_0 +64 8),8]_0,8]_0 ; [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1] = [[([(RDI_0 +64 8),8]_0 +64 32),8]_0,1]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 20),4] = [([(RDI_0 +64 8),8]_0 +64 20),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 24),4] = [([(RDI_0 +64 8),8]_0 +64 24),4]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 2 ##
#####################################
*)

htriple "ht_100002bd1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bd1: ADD RSP, 8 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bd5"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 40),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bd5: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bd6"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 32),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bd6: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bd8"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 24),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bd8: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bda"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 16),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bda: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bdc"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bdc: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bde"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bde: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bdf"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bdf: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 3 ##
#####################################
*)

htriple "ht_100002aec"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP (0x100004000,8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002aec: MOV DWORD PTR [RBP - 48], EAX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aef"
 Separations ""
 Assertions  "((R13 +64 32),8) SEP (RSP_0,8); ((R13 +64 32),8) SEP ((RSP_0 -64 8),8); ((R13 +64 32),8) SEP ((RSP_0 -64 16),8); ((R13 +64 32),8) SEP ((RSP_0 -64 24),8); ((R13 +64 32),8) SEP ((RSP_0 -64 32),8); ((R13 +64 32),8) SEP ((RSP_0 -64 40),8); ((R13 +64 32),8) SEP ((RSP_0 -64 48),8); ((R13 +64 32),8) SEP ((RSP_0 -64 56),4); ((R13 +64 32),8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002aef: MOV RBX, QWORD PTR [R13 + 32] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002af3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002af3: XOR R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = 0 ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002af6"
 Separations "((RSP_0 -64 52),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 52),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 52),4) SEP (0x100004000,8); ((RSP_0 -64 52),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = 0 ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002af6: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R14 = 0 ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 4 ##
#####################################
*)

htriple "ht_100002bbc"
 Separations ""
 Assertions  "((R13 +64 20),4) SEP (RSP_0,8); ((R13 +64 20),4) SEP ((RSP_0 -64 8),8); ((R13 +64 20),4) SEP ((RSP_0 -64 16),8); ((R13 +64 20),4) SEP ((RSP_0 -64 24),8); ((R13 +64 20),4) SEP ((RSP_0 -64 32),8); ((R13 +64 20),4) SEP ((RSP_0 -64 40),8); ((R13 +64 20),4) SEP ((RSP_0 -64 48),8); ((R13 +64 20),4) SEP ((RSP_0 -64 56),4); ((R13 +64 20),4) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bbc: IMUL R14D, DWORD PTR [R13 + 20] 5"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bc1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bc1: ADD EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bc4"
 Separations ""
 Assertions  "(R13,8) SEP (RSP_0,8); (R13,8) SEP ((RSP_0 -64 8),8); (R13,8) SEP ((RSP_0 -64 16),8); (R13,8) SEP ((RSP_0 -64 24),8); (R13,8) SEP ((RSP_0 -64 32),8); (R13,8) SEP ((RSP_0 -64 40),8); (R13,8) SEP ((RSP_0 -64 48),8); (R13,8) SEP ((RSP_0 -64 56),4); (R13,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bc4: MOV R13, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bc8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bc8: TEST R13, R13 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bcb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bcb: JNE 4294978271 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 5 ##
#####################################
*)

htriple "ht_100002b03"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b03: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b05"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b05: JNE 4294978481 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 6 ##
#####################################
*)

htriple "ht_100002b10"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b10: INC RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 7 ##
#####################################
*)

htriple "ht_100002b0b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b0b: JMP 4294978489 5"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bb9"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP (0x100004000,8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 56),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bb9: MOV EAX, DWORD PTR [RBP - 48] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 8 ##
#####################################
*)

htriple "ht_100002bb1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bb1: INC RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bb4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bb4: JMP 4294978301 5"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002ab4, blockId == 9 ##
#####################################
*)

htriple "ht_100002b13"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),4); (RBX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b13: MOVZX ESI, BYTE PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b16"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b16: MOV RDI, R15 3"
 Post  "RDI = 0x100003f4b ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b19"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100003f4b ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b19: ExternalCall fun__index 5"
 Post  "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__index {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),4];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b1e: INC RBX 3"
 Post  "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b21"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b21: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b24"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b24: JNE 4294978323 2"
 Post  "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 10 ##
######################################
*)

htriple "ht_100002b26"
 Separations ""
 Assertions  "((RBX -64 1),1) SEP (RSP_0,8); ((RBX -64 1),1) SEP ((RSP_0 -64 8),8); ((RBX -64 1),1) SEP ((RSP_0 -64 16),8); ((RBX -64 1),1) SEP ((RSP_0 -64 24),8); ((RBX -64 1),1) SEP ((RSP_0 -64 32),8); ((RBX -64 1),1) SEP ((RSP_0 -64 40),8); ((RBX -64 1),1) SEP ((RSP_0 -64 48),8); ((RBX -64 1),1) SEP ((RSP_0 -64 56),4); ((RBX -64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RAX = bot(fun__index) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b26: MOV AL, BYTE PTR [RBX - 1] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b29"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b29: CMP AL, 46 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b2b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b2b: JNE 4294978388 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 11 ##
######################################
*)

htriple "ht_100002b2d"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),4); (RBX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b2d: MOVZX EAX, BYTE PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b30"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b30: TEST BYTE PTR [R12 + RAX * 4 + 61], 4 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b36"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b36: JE 4294978391 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 12 ##
######################################
*)

htriple "ht_100002b54"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b54: DEC RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 13 ##
######################################
*)

htriple "ht_100002b38"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b38: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b3b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b3b: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),4];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b40"
 Separations "((RSP_0 -64 52),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 52),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 52),4) SEP (0x100004000,8); ((RSP_0 -64 52),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b40: MOV DWORD PTR [RBP - 44], EAX 3"
 Post  "RAX = bot(fun__atoi) ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 14 ##
######################################
*)

htriple "ht_100002b57"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b57: CMP AL, 94 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b59"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b59: JLE 4294978426 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 15 ##
######################################
*)

htriple "ht_100002b43"
 Separations ""
 Assertions  "((RBX +64 1),1) SEP (RSP_0,8); ((RBX +64 1),1) SEP ((RSP_0 -64 8),8); ((RBX +64 1),1) SEP ((RSP_0 -64 16),8); ((RBX +64 1),1) SEP ((RSP_0 -64 24),8); ((RBX +64 1),1) SEP ((RSP_0 -64 32),8); ((RBX +64 1),1) SEP ((RSP_0 -64 40),8); ((RBX +64 1),1) SEP ((RSP_0 -64 48),8); ((RBX +64 1),1) SEP ((RSP_0 -64 56),4); ((RBX +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b43: MOVZX EAX, BYTE PTR [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b47"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b47: INC RBX 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b4a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b4a: TEST BYTE PTR [R12 + RAX * 4 + 61], 4 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b50"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b50: JNE 4294978371 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 16 ##
######################################
*)

htriple "ht_100002b52"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b52: JMP 4294978391 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 17 ##
######################################
*)

htriple "ht_100002b5b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b5b: ADD AL, 161 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b5d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b5d: CMP AL, 25 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b5f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b5f: JA 4294978481 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 18 ##
######################################
*)

htriple "ht_100002b7a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b7a: CMP AL, 69 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b7c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b7c: JE 4294978440 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 19 ##
######################################
*)

htriple "ht_100002b61"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b61: MOVZX EAX, AL 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b64"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b64: LEA RCX, [RIP + 117] 7"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b6b"
 Separations ""
 Assertions  "((0x100002be0 +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 56),4); ((0x100002be0 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b6b: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b6f"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b6f: ADD RAX, RCX 3"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b72"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b72: JMP RAX 2"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 20 ##
######################################
*)

htriple "ht_100002b74"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b74: ADD R14D, 4 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b78"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b78: JMP 4294978481 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 21 ##
######################################
*)

htriple "ht_100002b88"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b88: ADD R14D, 8 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b8c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b8c: JMP 4294978481 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 22 ##
######################################
*)

htriple "ht_100002b8e"
 Separations ""
 Assertions  "((RBX +64 1),1) SEP (RSP_0,8); ((RBX +64 1),1) SEP ((RSP_0 -64 8),8); ((RBX +64 1),1) SEP ((RSP_0 -64 16),8); ((RBX +64 1),1) SEP ((RSP_0 -64 24),8); ((RBX +64 1),1) SEP ((RSP_0 -64 32),8); ((RBX +64 1),1) SEP ((RSP_0 -64 40),8); ((RBX +64 1),1) SEP ((RSP_0 -64 48),8); ((RBX +64 1),1) SEP ((RSP_0 -64 56),4); ((RBX +64 1),1) SEP ((RSP_0 -64 56),8)"
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b8e: MOV AL, BYTE PTR [RBX + 1] 3"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b91"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b91: INC RBX 3"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b94"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b94: ADD AL, 157 2"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b96"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b96: CMP AL, 18 2"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b98"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b98: JA 4294978481 2"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 23 ##
######################################
*)

htriple "ht_100002ba8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002ba8: INC R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002bab"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bab: JMP 4294978481 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 24 ##
######################################
*)

htriple "ht_100002bad"
 Separations "((RSP_0 -64 52),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 52),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 52),4) SEP (0x100004000,8); ((RSP_0 -64 52),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 20),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 24),4); ((RSP_0 -64 52),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002bad: ADD R14D, DWORD PTR [RBP - 44] 4"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 25 ##
######################################
*)

htriple "ht_100002b7e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b7e: CMP AL, 71 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b80"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b80: JE 4294978440 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 26 ##
######################################
*)

htriple "ht_100002b82"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b82: CMP AL, 88 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b84"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b84: JE 4294978420 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 27 ##
######################################
*)

htriple "ht_100002b86"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b86: JMP 4294978481 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 28 ##
######################################
*)

htriple "ht_100002b9a"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b9a: MOVZX EAX, AL 3"
 Post  "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b9d"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x100002be0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b9d: MOV ECX, 270337 5"
 Post  "RCX = 0x42001 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ba2"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x42001 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002ba2: BT RCX, RAX 4"
 Post  "RCX = 0x42001 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ba6"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x42001 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002ba6: JAE 4294978481 2"
 Post  "RCX = 0x42001 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 29 ##
######################################
*)

htriple "ht_100002afd"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 56),4); (RBX,1) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002afd: MOV AL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002aff"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002aff: CMP AL, 37 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002b01"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002b01: JE 4294978320 2"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002ab4, blockId == 30 ##
######################################
*)

htriple "ht_100002adf"
 Separations ""
 Assertions  "((R13 +64 24),4) SEP (RSP_0,8); ((R13 +64 24),4) SEP ((RSP_0 -64 8),8); ((R13 +64 24),4) SEP ((RSP_0 -64 16),8); ((R13 +64 24),4) SEP ((RSP_0 -64 24),8); ((R13 +64 24),4) SEP ((RSP_0 -64 32),8); ((R13 +64 24),4) SEP ((RSP_0 -64 40),8); ((R13 +64 24),4) SEP ((RSP_0 -64 48),8); ((R13 +64 24),4) SEP ((RSP_0 -64 56),4); ((R13 +64 24),4) SEP ((RSP_0 -64 56),8)"
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002adf: MOV R14D, DWORD PTR [R13 + 24] 4"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ae3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002ae3: TEST R14D, R14D 3"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ae6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002ae6: JNE 4294978492 6"
 Post  "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003f4b ; R12 = [0x100004000,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
