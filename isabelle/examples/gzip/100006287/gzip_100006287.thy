theory gzip_100006287
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin


(*
#####################################
## Entry = 100006287, blockId == 0 ##
#####################################
*)

htriple "ht_100006287"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006287: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006288"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006288: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000628b"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "10000628b: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000628d"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "10000628d: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000628f"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "10000628f: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006291"
 Separations "((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006291: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006292"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006292: SUB RSP, 96 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006296"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006296: MOV R12D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006299"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 4),2); (0x100008008,8) SEP ((RSI_0 +64 16),4); (0x100008008,8) SEP ((RSI_0 +64 20),4); (0x100008008,8) SEP ((RSI_0 +64 24),8); (0x100008008,8) SEP ((RSI_0 +64 32),8); (0x100008008,8) SEP ((RSI_0 +64 40),8); (0x100008008,8) SEP ((RSI_0 +64 48),8); (0x100008008,8) SEP ((RSI_0 +64 56),8); (0x100008008,8) SEP ((RSI_0 +64 116),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 64),8); (0x100008008,8) SEP ((RSP_0 -64 72),8); (0x100008008,8) SEP ((RSP_0 -64 80),8); (0x100008008,8) SEP ((RSP_0 -64 88),8); (0x100008008,8) SEP ((RSP_0 -64 96),8); (0x100008008,8) SEP ((RSP_0 -64 104),8); (0x100008008,8) SEP ((RSP_0 -64 112),8); (0x100008008,8) SEP ((RSP_0 -64 120),8); (0x100008008,8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "100006299: MOV RAX, QWORD PTR [RIP + 7528] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062a0"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 4),2); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 16),4); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 20),4); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 24),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 32),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 40),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 48),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 56),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 116),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062a0: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062a3"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062a3: MOV QWORD PTR [RBP - 40], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062a7: TEST RSI, RSI 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062aa: JE 4294992804 6"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 1 ##
#####################################
*)

htriple "ht_1000062b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062b0: MOV R14, RDX 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062b3"
 Separations "((RSI_0 +64 4),2) SEP (RSP_0,8); ((RSI_0 +64 4),2) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 4),2) SEP (0x100008008,8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 4),2) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062b3: MOVZX EBX, WORD PTR [RSI + 4] 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062b7"
 Separations "((RSI_0 +64 16),4) SEP (RSP_0,8); ((RSI_0 +64 16),4) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 16),4) SEP (0x100008008,8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 16),4) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062b7: MOV EAX, DWORD PTR [RSI + 16] 3"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ba"
 Separations "((RSI_0 +64 20),4) SEP (RSP_0,8); ((RSI_0 +64 20),4) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 20),4) SEP (0x100008008,8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 20),4) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062ba: MOV EDX, DWORD PTR [RSI + 20] 3"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062bd"
 Separations "((RSI_0 +64 40),8) SEP (RSP_0,8); ((RSI_0 +64 40),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 40),8) SEP (0x100008008,8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 40),8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = RCX_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062bd: MOV RCX, QWORD PTR [RSI + 40] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 40),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062c1"
 Separations "((RSP_0 -64 112),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 112),8) SEP (0x100008008,8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 40),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062c1: MOV QWORD PTR [RBP - 104], RCX 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 40),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062c5"
 Separations "((RSI_0 +64 32),8) SEP (RSP_0,8); ((RSI_0 +64 32),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 32),8) SEP (0x100008008,8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 32),8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 40),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062c5: MOV RCX, QWORD PTR [RSI + 32] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 32),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062c9"
 Separations "((RSP_0 -64 120),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x100008008,8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 32),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062c9: MOV QWORD PTR [RBP - 112], RCX 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 32),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062cd"
 Separations "((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 32),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062cd: MOV RCX, QWORD PTR [RSI + 24] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 24),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062d1"
 Separations "((RSP_0 -64 128),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 128),8) SEP (0x100008008,8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 128),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 24),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000062d1: MOV QWORD PTR [RBP - 120], RCX 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 24),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062d5"
 Separations "((RSI_0 +64 48),8) SEP (RSP_0,8); ((RSI_0 +64 48),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 48),8) SEP (0x100008008,8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 48),8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 24),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062d5: MOV RCX, QWORD PTR [RSI + 48] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062d9"
 Separations "((RSI_0 +64 56),8) SEP (RSP_0,8); ((RSI_0 +64 56),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 56),8) SEP (0x100008008,8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 56),8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062d9: MOV RDI, QWORD PTR [RSI + 56] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062dd"
 Separations "((RSP_0 -64 96),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 96),8) SEP (0x100008008,8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062dd: MOV QWORD PTR [RBP - 88], RDI 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062e1"
 Separations "((RSP_0 -64 104),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 104),8) SEP (0x100008008,8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062e1: MOV QWORD PTR [RBP - 96], RCX 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062e5"
 Separations "((RSI_0 +64 116),4) SEP (RSP_0,8); ((RSI_0 +64 116),4) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 116),4) SEP (0x100008008,8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 96),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 104),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 112),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 120),8); ((RSI_0 +64 116),4) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062e5: MOV R15D, DWORD PTR [RSI + 116] 4"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = [(RSI_0 +64 56),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062e9: MOV EDI, R12D 3"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = b32(RDI_0) ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062ec: MOV ESI, EAX 2"
 Post  "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = b32(RDI_0) ; RSI = b32([(RSI_0 +64 16),4]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RSI_0 +64 16),4]_0) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RCX = [(RSI_0 +64 48),8]_0 ; RDX = b32([(RSI_0 +64 20),4]_0) ; RDI = b32(RDI_0) ; RSI = b32([(RSI_0 +64 16),4]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062ee: ExternalCall fun__fchown 5"
 Post  "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun__fchown {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062f3: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062f5: JNS 4294992664 2"
 Post  "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 2 ##
#####################################
*)

htriple "ht_1000063a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063a4: MOV EDI, 18 5"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 18 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 18 ; RSI = RSI_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 4),2] = [(RSI_0 +64 4),2]_0 ; [(RSI_0 +64 16),4] = [(RSI_0 +64 16),4]_0 ; [(RSI_0 +64 20),4] = [(RSI_0 +64 20),4]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSI_0 +64 32),8] = [(RSI_0 +64 32),8]_0 ; [(RSI_0 +64 40),8] = [(RSI_0 +64 40),8]_0 ; [(RSI_0 +64 48),8] = [(RSI_0 +64 48),8]_0 ; [(RSI_0 +64 56),8] = [(RSI_0 +64 56),8]_0 ; [(RSI_0 +64 116),4] = [(RSI_0 +64 116),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063a9: ExternalCall fun__umask 5"
 Post  "RAX = bot(fun__umask) ; RBX = RBX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 FunctionConstraints "PRESERVES fun__umask {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063ae"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = RBX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063ae: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063b0: MOV ESI, EBX 2"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063b2: NOT ESI 2"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = not32(b32(bot(fun__umask))) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = not32(b32(bot(fun__umask))) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063b4: AND ESI, 438 6"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = (not32(b32(bot(fun__umask))) &32 438) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSI = (not32(b32(bot(fun__umask))) &32 438) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063ba: MOV EDI, R12D 3"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RDI = b32(RDI_0) ; RSI = (not32(b32(bot(fun__umask))) &32 438) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RDI = b32(RDI_0) ; RSI = (not32(b32(bot(fun__umask))) &32 438) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063bd: ExternalCall fun__fchmod 5"
 Post  "RAX = bot(fun__fchmod) ; RBX = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 FunctionConstraints "PRESERVES fun__fchmod {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RBX = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063c2: MOVZX EDI, BX 3"
 Post  "RAX = bot(fun__fchmod) ; RBX = b32(bot(fun__umask)) ; RDI = b16(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RBX = b32(bot(fun__umask)) ; RDI = b16(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 Instruction "1000063c5: ExternalCall fun__umask 5"
 Post  "RAX = bot(fun__umask) ; RBX = b32(bot(fun__umask)) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0"
 FunctionConstraints "PRESERVES fun__umask {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 3 ##
#####################################
*)

htriple "ht_1000062f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchown) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062f7: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062fc: CMP DWORD PTR [RAX], 1 3"
 Post  "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000062ff: JE 4294992658 2"
 Post  "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 4 ##
#####################################
*)

htriple "ht_100006318"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006318: AND EBX, 3583 6"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000631e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000631e: MOV EDI, R12D 3"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006321"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006321: MOV ESI, EBX 2"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006323"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006323: ExternalCall fun__fchmod 5"
 Post  "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun__fchmod {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006328"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006328: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000632a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000632a: JNS 4294992701 2"
 Post  "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 5 ##
#####################################
*)

htriple "ht_100006301"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006301: LEA RDI, [RIP + 5736] 7"
 Post  "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006308"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006308: MOV RSI, R14 3"
 Post  "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000630b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000630b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000630d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32([(RSI_0 +64 4),2]_0) ; RDI = 0x100007970 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000630d: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 6 ##
#####################################
*)

htriple "ht_100006312"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32([(RSI_0 +64 4),2]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006312: AND EBX, 62463 6"
 Post  "RBX = (b32([(RSI_0 +64 4),2]_0) &32 0xf3ff) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 7 ##
#####################################
*)

htriple "ht_10000632c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000632c: LEA RDI, [RIP + 5713] 7"
 Post  "RAX = bot(fun__fchmod) ; RDI = 0x100007984 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006333"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RDI = 0x100007984 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006333: MOV RSI, R14 3"
 Post  "RAX = bot(fun__fchmod) ; RDI = 0x100007984 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006336"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchmod) ; RDI = 0x100007984 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006336: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007984 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006338"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007984 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006338: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 8 ##
#####################################
*)

htriple "ht_10000633d"
 Separations "((RSP_0 -64 120),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 120),8) SEP (0x100008008,8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 120),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000633d: MOV RAX, QWORD PTR [RBP - 112] 4"
 Post  "RAX = [(RSI_0 +64 32),8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006341"
 Separations "((RSP_0 -64 112),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 112),8) SEP (0x100008008,8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 112),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 32),8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006341: MOV RCX, QWORD PTR [RBP - 104] 4"
 Post  "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006345"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006345: LEA RSI, [RBP - 80] 4"
 Post  "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006349"
 Separations "((RSP_0 -64 80),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 80),8) SEP (0x100008008,8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006349: MOV QWORD PTR [RSI + 8], RCX 4"
 Post  "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000634d"
 Separations "((RSP_0 -64 88),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 88),8) SEP (0x100008008,8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000634d: MOV QWORD PTR [RSI], RAX 3"
 Post  "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006350"
 Separations "((RSP_0 -64 104),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 104),8) SEP (0x100008008,8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 104),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 32),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006350: MOV RAX, QWORD PTR [RBP - 96] 4"
 Post  "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006354"
 Separations "((RSP_0 -64 96),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 96),8) SEP (0x100008008,8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 96),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 40),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006354: MOV RCX, QWORD PTR [RBP - 88] 4"
 Post  "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006358"
 Separations "((RSP_0 -64 72),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x100008008,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006358: MOV QWORD PTR [RSI + 16], RAX 4"
 Post  "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000635c"
 Separations "((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP (0x100008008,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000635c: MOV QWORD PTR [RSI + 24], RCX 4"
 Post  "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006360"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006360: MOV EDI, R12D 3"
 Post  "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006363"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 48),8]_0 ; RCX = [(RSI_0 +64 56),8]_0 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006363: ExternalCall fun_0x1000021c4 5"
 Post  "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000021c4 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006368"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006368: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000636a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000636a: JNS 4294992765 2"
 Post  "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006287, blockId == 9 ##
#####################################
*)

htriple "ht_10000636c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000021c4) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000636c: LEA RDI, [RIP + 5669] 7"
 Post  "RAX = bot(fun_0x1000021c4) ; RDI = 0x100007998 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006373"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000021c4) ; RDI = 0x100007998 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006373: MOV RSI, R14 3"
 Post  "RAX = bot(fun_0x1000021c4) ; RDI = 0x100007998 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006376"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000021c4) ; RDI = 0x100007998 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006376: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007998 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006378"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007998 ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006378: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 10 ##
######################################
*)

htriple "ht_10000637d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000637d: TEST R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006380"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006380: JE 4294992842 2"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 11 ##
######################################
*)

htriple "ht_100006382"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006382: MOV EDI, R12D 3"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006385"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006385: MOV ESI, R15D 3"
 Post  "RDI = b32(RDI_0) ; RSI = b32([(RSI_0 +64 116),4]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006388"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSI = b32([(RSI_0 +64 116),4]_0) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006388: ExternalCall fun__fchflags 5"
 Post  "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun__fchflags {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000638d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000638d: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000638f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000638f: JNS 4294992842 2"
 Post  "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 12 ##
######################################
*)

htriple "ht_1000063ca"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 4),2); (0x100008008,8) SEP ((RSI_0 +64 16),4); (0x100008008,8) SEP ((RSI_0 +64 20),4); (0x100008008,8) SEP ((RSI_0 +64 24),8); (0x100008008,8) SEP ((RSI_0 +64 32),8); (0x100008008,8) SEP ((RSI_0 +64 40),8); (0x100008008,8) SEP ((RSI_0 +64 48),8); (0x100008008,8) SEP ((RSI_0 +64 56),8); (0x100008008,8) SEP ((RSI_0 +64 116),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 64),8); (0x100008008,8) SEP ((RSP_0 -64 72),8); (0x100008008,8) SEP ((RSP_0 -64 80),8); (0x100008008,8) SEP ((RSP_0 -64 88),8); (0x100008008,8) SEP ((RSP_0 -64 96),8); (0x100008008,8) SEP ((RSP_0 -64 104),8); (0x100008008,8) SEP ((RSP_0 -64 112),8); (0x100008008,8) SEP ((RSP_0 -64 120),8); (0x100008008,8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063ca: MOV RAX, QWORD PTR [RIP + 7223] 7"
 Post  "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063d1"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 4),2); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 16),4); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 20),4); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 24),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 32),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 40),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 48),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 56),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 116),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 112),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 120),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 128),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063d1: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063d4"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063d4: CMP RAX, QWORD PTR [RBP - 40] 4"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063d8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063d8: JNE 4294992871 2"
 Post  "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 13 ##
######################################
*)

htriple "ht_100006391"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchflags) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006391: LEA RDI, [RIP + 5654] 7"
 Post  "RAX = bot(fun__fchflags) ; RDI = 0x1000079ae ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006398"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchflags) ; RDI = 0x1000079ae ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "100006398: MOV RSI, R14 3"
 Post  "RAX = bot(fun__fchflags) ; RDI = 0x1000079ae ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000639b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fchflags) ; RDI = 0x1000079ae ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000639b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x1000079ae ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000639d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x1000079ae ; RSI = RDX_0 ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "10000639d: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
 Instruction "1000063a2: JMP 4294992842 2"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R15 = b32([(RSI_0 +64 116),4]_0) ; R14 = RDX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 72),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 80),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 88),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 96),8] = [(RSI_0 +64 56),8]_0 ; [(RSP_0 -64 104),8] = [(RSI_0 +64 48),8]_0 ; [(RSP_0 -64 112),8] = [(RSI_0 +64 40),8]_0 ; [(RSP_0 -64 120),8] = [(RSI_0 +64 32),8]_0 ; [(RSP_0 -64 128),8] = [(RSI_0 +64 24),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 14 ##
######################################
*)

htriple "ht_1000063da"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063da: ADD RSP, 96 4"
 Post  "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063de"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063de: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063df"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063df: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e1"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063e1: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e3"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 4),2); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 20),4); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 32),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 40),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 48),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 116),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063e3: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063e5: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e6"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063e6: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006287, blockId == 15 ##
######################################
*)

htriple "ht_1000063e7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000063e7: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 136) ; RBP = (RSP_0 -64 8) ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
