theory gzip_10000312b
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000312b, blockId == 0 ##
#####################################
*)

htriple "ht_10000312b"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000312b: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000312c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000312c: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000312f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000312f: SUB RSP, 208 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003136"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003136: TEST AL, AL 2"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003138"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003138: JE 4294979936 2"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 1 ##
#####################################
*)

htriple "ht_10000313a"
 Separations "((RSP_0 -64 168),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 168),16) SEP (0x100008008,8); ((RSP_0 -64 168),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000313a: MOVAPS XMMWORD PTR [RBP - 160], XMM0 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003141"
 Separations "((RSP_0 -64 152),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 152),16) SEP (0x100008008,8); ((RSP_0 -64 152),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003141: MOVAPS XMMWORD PTR [RBP - 144], XMM1 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003148"
 Separations "((RSP_0 -64 136),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 136),16) SEP (0x100008008,8); ((RSP_0 -64 136),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003148: MOVAPS XMMWORD PTR [RBP - 128], XMM2 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314c"
 Separations "((RSP_0 -64 120),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 120),16) SEP (0x100008008,8); ((RSP_0 -64 120),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000314c: MOVAPS XMMWORD PTR [RBP - 112], XMM3 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003150"
 Separations "((RSP_0 -64 104),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 104),16) SEP (0x100008008,8); ((RSP_0 -64 104),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003150: MOVAPS XMMWORD PTR [RBP - 96], XMM4 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003154"
 Separations "((RSP_0 -64 88),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 88),16) SEP (0x100008008,8); ((RSP_0 -64 88),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003154: MOVAPS XMMWORD PTR [RBP - 80], XMM5 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003158"
 Separations "((RSP_0 -64 72),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 72),16) SEP (0x100008008,8); ((RSP_0 -64 72),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003158: MOVAPS XMMWORD PTR [RBP - 64], XMM6 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000315c"
 Separations "((RSP_0 -64 56),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),16) SEP (0x100008008,8); ((RSP_0 -64 56),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "10000315c: MOVAPS XMMWORD PTR [RBP - 48], XMM7 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 2 ##
#####################################
*)

htriple "ht_100003160"
 Separations "((RSP_0 -64 208),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 208),8) SEP (0x100008008,8); ((RSP_0 -64 208),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = [(RSP_0 -64 208),8]_0"
 Instruction "100003160: MOV QWORD PTR [RBP - 200], RSI 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003167"
 Separations "((RSP_0 -64 200),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 200),8) SEP (0x100008008,8); ((RSP_0 -64 200),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "100003167: MOV QWORD PTR [RBP - 192], RDX 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000316e"
 Separations "((RSP_0 -64 192),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 192),8) SEP (0x100008008,8); ((RSP_0 -64 192),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "10000316e: MOV QWORD PTR [RBP - 184], RCX 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003175"
 Separations "((RSP_0 -64 184),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 184),8) SEP (0x100008008,8); ((RSP_0 -64 184),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "100003175: MOV QWORD PTR [RBP - 176], R8 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000317c"
 Separations "((RSP_0 -64 176),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 176),8) SEP (0x100008008,8); ((RSP_0 -64 176),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "10000317c: MOV QWORD PTR [RBP - 168], R9 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003183"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 56),16); (0x100008008,8) SEP ((RSP_0 -64 72),16); (0x100008008,8) SEP ((RSP_0 -64 88),16); (0x100008008,8) SEP ((RSP_0 -64 104),16); (0x100008008,8) SEP ((RSP_0 -64 120),16); (0x100008008,8) SEP ((RSP_0 -64 136),16); (0x100008008,8) SEP ((RSP_0 -64 152),16); (0x100008008,8) SEP ((RSP_0 -64 168),16); (0x100008008,8) SEP ((RSP_0 -64 176),8); (0x100008008,8) SEP ((RSP_0 -64 184),8); (0x100008008,8) SEP ((RSP_0 -64 192),8); (0x100008008,8) SEP ((RSP_0 -64 200),8); (0x100008008,8) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "100003183: MOV RAX, QWORD PTR [RIP + 20094] 7"
 Post  "RAX = [0x100008008,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000318a"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x1000086f4,4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 120),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 200),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "10000318a: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000318d"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "10000318d: MOV QWORD PTR [RBP - 8], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003191"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "100003191: CMP BYTE PTR [RIP + 21836], 0 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003198"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "100003198: JE 4294980038 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 3 ##
#####################################
*)

htriple "ht_10000319a"
 Separations "(0x1000086f4,4) SEP (RSP_0,8); (0x1000086f4,4) SEP ([0x100008008,8]_0,8); (0x1000086f4,4) SEP ((RSP_0 -64 8),8); (0x1000086f4,4) SEP ((RSP_0 -64 16),8); (0x1000086f4,4) SEP ((RSP_0 -64 24),8); (0x1000086f4,4) SEP ((RSP_0 -64 32),8); (0x1000086f4,4) SEP ((RSP_0 -64 40),8); (0x1000086f4,4) SEP ((RSP_0 -64 56),16); (0x1000086f4,4) SEP ((RSP_0 -64 72),16); (0x1000086f4,4) SEP ((RSP_0 -64 88),16); (0x1000086f4,4) SEP ((RSP_0 -64 104),16); (0x1000086f4,4) SEP ((RSP_0 -64 120),16); (0x1000086f4,4) SEP ((RSP_0 -64 136),16); (0x1000086f4,4) SEP ((RSP_0 -64 152),16); (0x1000086f4,4) SEP ((RSP_0 -64 168),16); (0x1000086f4,4) SEP ((RSP_0 -64 176),8); (0x1000086f4,4) SEP ((RSP_0 -64 184),8); (0x1000086f4,4) SEP ((RSP_0 -64 192),8); (0x1000086f4,4) SEP ((RSP_0 -64 200),8); (0x1000086f4,4) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "10000319a: CMP DWORD PTR [RIP + 21843], 0 7"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031a1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031a1: JNE 4294980013 2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 4 ##
#####################################
*)

htriple "ht_1000031c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031c6: LEA RAX, [RBP - 208] 7"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031cd: LEA RSI, [RBP - 32] 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031d1"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031d1: MOV QWORD PTR [RSI + 16], RAX 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031d5: LEA RAX, [RBP + 16] 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031d9"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031d9: MOV QWORD PTR [RSI + 8], RAX 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031dd: MOVABS RAX, 206158430216 10"
 Post  "RAX = 0x3000000008 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031e7"
 Separations "((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031e7: MOV QWORD PTR [RSI], RAX 3"
 Post  "RAX = 0x3000000008 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000008 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000008 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 40) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000008 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031ea: ExternalCall fun__vwarnx 5"
 Post  "RAX = bot(fun__vwarnx) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000008 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__vwarnx {RSP;RBP;[RSP_0,8];[0x100008008,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 56),16];[(RSP_0 -64 72),16];[(RSP_0 -64 88),16];[(RSP_0 -64 104),16];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 176),8];[(RSP_0 -64 184),8];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8];[(RSP_0 -64 208),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__vwarnx) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000008 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031ef: JMP 4294979994 2"
 Post  "RAX = bot(fun__vwarnx) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000008 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 5 ##
#####################################
*)

htriple "ht_1000031a3"
 Separations "(0x1000086f4,4) SEP (RSP_0,8); (0x1000086f4,4) SEP ([0x100008008,8]_0,8); (0x1000086f4,4) SEP ((RSP_0 -64 8),8); (0x1000086f4,4) SEP ((RSP_0 -64 16),8); (0x1000086f4,4) SEP ((RSP_0 -64 24),8); (0x1000086f4,4) SEP ((RSP_0 -64 32),8); (0x1000086f4,4) SEP ((RSP_0 -64 40),8); (0x1000086f4,4) SEP ((RSP_0 -64 56),16); (0x1000086f4,4) SEP ((RSP_0 -64 72),16); (0x1000086f4,4) SEP ((RSP_0 -64 88),16); (0x1000086f4,4) SEP ((RSP_0 -64 104),16); (0x1000086f4,4) SEP ((RSP_0 -64 120),16); (0x1000086f4,4) SEP ((RSP_0 -64 136),16); (0x1000086f4,4) SEP ((RSP_0 -64 152),16); (0x1000086f4,4) SEP ((RSP_0 -64 168),16); (0x1000086f4,4) SEP ((RSP_0 -64 176),8); (0x1000086f4,4) SEP ((RSP_0 -64 184),8); (0x1000086f4,4) SEP ((RSP_0 -64 192),8); (0x1000086f4,4) SEP ((RSP_0 -64 200),8); (0x1000086f4,4) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031a3: MOV DWORD PTR [RIP + 21831], 1 10"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x1000086f4,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 6 ##
#####################################
*)

htriple "ht_1000031ad"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 56),16); (0x100008008,8) SEP ((RSP_0 -64 72),16); (0x100008008,8) SEP ((RSP_0 -64 88),16); (0x100008008,8) SEP ((RSP_0 -64 104),16); (0x100008008,8) SEP ((RSP_0 -64 120),16); (0x100008008,8) SEP ((RSP_0 -64 136),16); (0x100008008,8) SEP ((RSP_0 -64 152),16); (0x100008008,8) SEP ((RSP_0 -64 168),16); (0x100008008,8) SEP ((RSP_0 -64 176),8); (0x100008008,8) SEP ((RSP_0 -64 184),8); (0x100008008,8) SEP ((RSP_0 -64 192),8); (0x100008008,8) SEP ((RSP_0 -64 200),8); (0x100008008,8) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031ad: MOV RAX, QWORD PTR [RIP + 20052] 7"
 Post  "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031b4"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x1000086f4,4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 120),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 200),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 208),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031b4: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031b7"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031b7: CMP RAX, QWORD PTR [RBP - 8] 4"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031bb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031bb: JNE 4294980081 2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 7 ##
#####################################
*)

htriple "ht_1000031bd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031bd: ADD RSP, 208 7"
 Post  "RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031c4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031c4: POP RBP 1"
 Post  "RSP = RSP_0 ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000031c5"
 Separations ""
 Assertions  ""
 Pre   "RSP = RSP_0 ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031c5: RET  1"
 Post  "RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000312b, blockId == 8 ##
#####################################
*)

htriple "ht_1000031f1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 Instruction "1000031f1: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0 ; [(RSP_0 -64 208),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RSP;RBP;[RSP_0,8];[0x100008008,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 56),16];[(RSP_0 -64 72),16];[(RSP_0 -64 88),16];[(RSP_0 -64 104),16];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 176),8];[(RSP_0 -64 184),8];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8];[(RSP_0 -64 208),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
