theory gzip_10000343a
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000343a, blockId == 0 ##
#####################################
*)

htriple "ht_10000343a"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000343a: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000343b"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000343b: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000343e"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000343e: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003440"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003440: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003442"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003442: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003444"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003444: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003446"
 Separations "((RSP_0 -64 48),8) SEP (R8_0,8); ((RSP_0 -64 48),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003446: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003447"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003447: SUB RSP, 216 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000344e"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000344e: MOV R13, R9 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R9_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003451"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R9_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003451: MOV R12, R8 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003454"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003454: MOV R14, RCX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003457"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003457: MOV R15, RDX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000345a"
 Separations "((RSP_0 -64 124),4) SEP (R8_0,8); ((RSP_0 -64 124),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = [(RSP_0 -64 124),4]_0 ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000345a: MOV DWORD PTR [RBP - 116], ESI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000345d"
 Separations "((RSP_0 -64 128),4) SEP (R8_0,8); ((RSP_0 -64 128),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = [(RSP_0 -64 128),4]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000345d: MOV DWORD PTR [RBP - 120], EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003460"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003460: MOV EDI, 65536 5"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003465"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003465: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000346a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000346a: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000346d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000346d: JE 4294982503 6"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 1 ##
#####################################
*)

htriple "ht_100003473"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003473: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003476"
 Separations "((RSP_0 -64 256),8) SEP (R8_0,8); ((RSP_0 -64 256),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "100003476: MOV QWORD PTR [RBP - 248], R13 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000347d"
 Separations "((RSP_0 -64 264),8) SEP (R8_0,8); ((RSP_0 -64 264),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0"
 Instruction "10000347d: MOV QWORD PTR [RBP - 256], R12 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003484"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003484: MOV EDI, 65536 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003489"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003489: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000348e"
 Separations "((RSP_0 -64 104),8) SEP (R8_0,8); ((RSP_0 -64 104),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000348e: MOV QWORD PTR [RBP - 96], RAX 4"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003492"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003492: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003495"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003495: JE 4294982503 6"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 2 ##
#####################################
*)

htriple "ht_100003b67"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
 Instruction "100003b67: LEA RDI, [RIP + 13863] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x100007195 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RDI = 0x100007195 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
 Instruction "100003b6e: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007195 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b70"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007195 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
 Instruction "100003b70: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 3 ##
#####################################
*)

htriple "ht_10000349b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000349b: XORPS XMM0, XMM0 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000349e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000349e: LEA RAX, [RBP - 240] 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034a5"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),16) SEP (R8_0,8); ((RSP_0 -64 248),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 248),16] = [(RSP_0 -64 248),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034a5: MOVAPS XMMWORD PTR [RAX], XMM0 3"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034a8"
 Separations "((RSP_0 -64 216),4) SEP (R8_0,8); ((RSP_0 -64 216),16) SEP (R8_0,8); ((RSP_0 -64 216),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034a8: MOVAPS XMMWORD PTR [RAX + 32], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034ac"
 Separations "((RSP_0 -64 232),16) SEP (R8_0,8); ((RSP_0 -64 232),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 232),16] = [(RSP_0 -64 232),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034ac: MOVAPS XMMWORD PTR [RAX + 16], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034b0"
 Separations "((RSP_0 -64 168),8) SEP (R8_0,8); ((RSP_0 -64 168),16) SEP (R8_0,8); ((RSP_0 -64 168),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034b0: MOVAPS XMMWORD PTR [RAX + 80], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034b4"
 Separations "((RSP_0 -64 152),16) SEP (R8_0,8); ((RSP_0 -64 152),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034b4: MOVAPS XMMWORD PTR [RAX + 96], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034b8"
 Separations "((RSP_0 -64 200),16) SEP (R8_0,8); ((RSP_0 -64 200),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034b8: MOVAPS XMMWORD PTR [RAX + 48], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034bc"
 Separations "((RSP_0 -64 120),8) SEP (R8_0,8); ((RSP_0 -64 120),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034bc: MOV QWORD PTR [RBP - 112], R14 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034c0"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034c0: MOV DWORD PTR [RAX + 8], R14D 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034c4"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),8) SEP (0x1000086f4,4); ((RSP_0 -64 248),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034c4: MOV QWORD PTR [RAX], R15 3"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034c7"
 Separations "((RSP_0 -64 216),4) SEP (R8_0,8); ((RSP_0 -64 216),4) SEP (0x1000086f4,4); ((RSP_0 -64 216),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034c7: MOV DWORD PTR [RAX + 32], 65536 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034ce"
 Separations "((RSP_0 -64 112),8) SEP (R8_0,8); ((RSP_0 -64 112),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034ce: MOV QWORD PTR [RBP - 104], RBX 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034d2"
 Separations "((RSP_0 -64 224),8) SEP (R8_0,8); ((RSP_0 -64 224),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034d2: MOV QWORD PTR [RAX + 24], RBX 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034d6"
 Separations "((RSP_0 -64 184),16) SEP (R8_0,8); ((RSP_0 -64 184),16) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034d6: MOVAPS XMMWORD PTR [RAX + 64], XMM0 4"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034da"
 Separations "((RSP_0 -64 168),8) SEP (R8_0,8); ((RSP_0 -64 168),8) SEP (0x1000086f4,4); ((RSP_0 -64 168),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034da: MOV QWORD PTR [RAX + 80], 0 8"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034e2"
 Separations "((RSP_0 -64 80),4) SEP (R8_0,8); ((RSP_0 -64 80),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = [(RSP_0 -64 80),4]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034e2: MOV DWORD PTR [RBP - 72], 4294967294 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = RDX_0 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034e9: LEA R15, [RIP + 1672] 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034f0: MOV R12D, 0 6"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034f6"
 Separations "((RSP_0 -64 68),4) SEP (R8_0,8); ((RSP_0 -64 68),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034f6: MOV DWORD PTR [RBP - 60], 0 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000034fd"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000034fd: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003504"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = R9_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003504: MOV R13D, 0 6"
 Post  "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000350a"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 248) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000350a: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000350c"
 Separations "((RSP_0 -64 96),8) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000350c: MOV QWORD PTR [RBP - 88], RAX 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003510"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003510: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003512"
 Separations "((RSP_0 -64 88),8) SEP (R8_0,8); ((RSP_0 -64 88),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003512: MOV QWORD PTR [RBP - 80], RAX 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003516"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = RCX_0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003516: XOR R14D, R14D 3"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003519"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003519: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000351b"
 Separations "((RSP_0 -64 64),8) SEP (R8_0,8); ((RSP_0 -64 64),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000351b: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000351f"
 Separations "((RSP_0 -64 104),8) SEP (R8_0,8); ((RSP_0 -64 104),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000351f: MOV RBX, QWORD PTR [RBP - 96] 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 120),8] = RCX_0 ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 4 ##
#####################################
*)

htriple "ht_10000353f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000353f: OR DL, AL 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003541"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003541: JE 4294981036 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 5 ##
#####################################
*)

htriple "ht_1000035ac"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035ac: TEST ECX, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035ae"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035ae: JE 4294982139 6"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 6 ##
#####################################
*)

htriple "ht_100003543"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003543: TEST ECX, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003545"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003545: JE 4294980963 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 7 ##
#####################################
*)

htriple "ht_100003547"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),8) SEP (0x1000086f4,4); ((RSP_0 -64 248),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003547: MOV RSI, QWORD PTR [RBP - 240] 7"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000354e"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000354e: MOV EDX, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003550"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003550: MOV ECX, 65536 5"
 Post  "RBX = bot(fun__malloc) ; RCX = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003555"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RCX = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003555: MOV RDI, RBX 3"
 Post  "RBX = bot(fun__malloc) ; RCX = 0x10000 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003558"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RCX = 0x10000 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003558: ExternalCall fun____memmove_chk 5"
 Post  "RAX = bot(fun____memmove_chk) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun____memmove_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000355d"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun____memmove_chk) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000355d: MOV ECX, DWORD PTR [RBP - 232] 6"
 Post  "RAX = bot(fun____memmove_chk) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 8 ##
#####################################
*)

htriple "ht_100003563"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),8) SEP (0x1000086f4,4); ((RSP_0 -64 248),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003563: MOV QWORD PTR [RBP - 240], RBX 7"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000356a"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000356a: MOV ESI, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000356c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000356c: ADD RSI, RBX 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000356f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000356f: MOV EDX, 65536 5"
 Post  "RBX = bot(fun__malloc) ; RDX = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003574"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDX = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003574: SUB EDX, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003576"
 Separations "((RSP_0 -64 128),4) SEP (R8_0,8); ((RSP_0 -64 128),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003576: MOV EDI, DWORD PTR [RBP - 120] 3"
 Post  "RBX = bot(fun__malloc) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003579"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003579: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000357e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000357e: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003581"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003581: JE 4294981009 2"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000343a, blockId == 9 ##
#####################################
*)

htriple "ht_100003583"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003583: XOR R13D, R13D 3"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003586"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003586: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000358a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000358a: JNE 4294981015 2"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 10 ##
######################################
*)

htriple "ht_100003591"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003591: MOV R13D, 1 6"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 11 ##
######################################
*)

htriple "ht_10000358c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000358c: JMP 4294982196 5"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a34: LEA RDI, [RIP + 14184] 7"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RDI = 0x1000071a3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a3b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RDI = 0x1000071a3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a3b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071a3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a3d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071a3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a3d: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 12 ##
######################################
*)

htriple "ht_100003597"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003597: MOV ECX, DWORD PTR [RBP - 232] 6"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000359d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000359d: ADD ECX, EAX 2"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000359f"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000359f: MOV DWORD PTR [RBP - 232], ECX 6"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035a5"
 Separations "((RSP_0 -64 120),8) SEP (R8_0,8); ((RSP_0 -64 120),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035a5: ADD QWORD PTR [RBP - 112], RAX 4"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035a9: XOR R14D, R14D 3"
 Post  "RAX = bot(fun__read) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 13 ##
######################################
*)

htriple "ht_1000035b4"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035b4: MOV EAX, R12D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035b7"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035b7: CMP R12D, 15 4"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035bb"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035bb: JA 4294980899 6"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 14 ##
######################################
*)

htriple "ht_1000039fb"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000039fb: TEST R12D, R12D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000039fe"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000039fe: JE 4294982218 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 15 ##
######################################
*)

htriple "ht_100003523"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003523: MOV EAX, R13D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003526"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003526: MOV ECX, DWORD PTR [RBP - 232] 6"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000352c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000352c: MOV R13D, EAX 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000352f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000352f: TEST ECX, ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003531"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003531: SETE AL 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003534"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003534: TEST R14D, R14D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003537"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003537: SETNE DL 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000353a"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000353a: TEST R13D, R13D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000353d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000353d: JNE 4294981036 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 16 ##
######################################
*)

htriple "ht_1000035c1"
 Separations ""
 Assertions  "((0x100003b78 +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 68),4); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),4); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 96),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 104),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 112),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 120),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 124),4); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 128),4); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 152),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 168),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 184),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 200),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 216),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 232),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 248),16); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 256),8); ((0x100003b78 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 264),8)"
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035c1: MOVSXD RAX, DWORD PTR [R15 + RAX * 4] 4"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035c5"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035c5: ADD RAX, R15 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000035c8"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000035c8: JMP RAX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036cd"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),8) SEP (0x1000086f4,4); ((RSP_0 -64 248),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036cd: MOV RAX, QWORD PTR [RBP - 240] 7"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036d4"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036d4: CMP BYTE PTR [RAX], 31 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036d7"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036d7: JNE 4294982345 6"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 17 ##
######################################
*)

htriple "ht_1000036dd"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036dd: INC RAX 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036e0"
 Separations "((RSP_0 -64 248),8) SEP (R8_0,8); ((RSP_0 -64 248),8) SEP (0x1000086f4,4); ((RSP_0 -64 248),16) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036e0: MOV QWORD PTR [RBP - 240], RAX 7"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036e7"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036e7: DEC ECX 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036e9"
 Separations "((RSP_0 -64 240),4) SEP (R8_0,8); ((RSP_0 -64 240),4) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036e9: MOV DWORD PTR [RBP - 232], ECX 6"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036ef"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036ef: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036f1"
 Separations "((RSP_0 -64 88),8) SEP (R8_0,8); ((RSP_0 -64 88),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036f1: MOV QWORD PTR [RBP - 80], RAX 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036f5: XOR EDI, EDI 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036f7: XOR ESI, ESI 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036f9: XOR EDX, EDX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000036fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "1000036fb: ExternalCall fun__crc32 5"
 Post  "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__crc32 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003700"
 Separations "((RSP_0 -64 96),8) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003700: MOV QWORD PTR [RBP - 88], RAX 4"
 Post  "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = bot(fun__crc32) ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003704"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = bot(fun__crc32) ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003704: MOV R12D, 1 6"
 Post  "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R12 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = bot(fun__crc32) ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000370a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R12 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = bot(fun__crc32) ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "10000370a: JMP 4294980899 5"
 Post  "RAX = bot(fun__crc32) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R12 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = bot(fun__crc32) ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 18 ##
######################################
*)

htriple "ht_100003ac9"
 Separations "((RSP_0 -64 120),8) SEP (R8_0,8); ((RSP_0 -64 120),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ac9: CMP QWORD PTR [RBP - 112], 0 5"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ace"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ace: JLE 4294982397 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 19 ##
######################################
*)

htriple "ht_100003a00"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a00: TEST R13D, R13D 3"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a03"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a03: JE 4294982218 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 20 ##
######################################
*)

htriple "ht_100003a4a"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a4a: CMP R12D, 13 4"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a4e"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a4e: JB 4294982236 2"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 21 ##
######################################
*)

htriple "ht_100003a05"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a05: LEA RDI, [RIP + 14252] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a0c"
 Separations "((RSP_0 -64 256),8) SEP (R8_0,8); ((RSP_0 -64 256),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a0c: MOV RSI, QWORD PTR [RBP - 248] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a13"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a13: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a15"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071b8 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a15: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a1a: JMP 4294982210 2"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 22 ##
######################################
*)

htriple "ht_100003a42"
 Separations "((RSP_0 -64 64),8) SEP (R8_0,8); ((RSP_0 -64 64),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a42: MOV QWORD PTR [RBP - 56], 18446744073709551615 8"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0xffffffffffffffff ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 23 ##
######################################
*)

htriple "ht_100003a50"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a50: LEA RDI, [RBP - 240] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = (RSP_0 -64 248) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a57"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = (RSP_0 -64 248) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a57: ExternalCall fun__inflateEnd 5"
 Post  "RAX = bot(fun__inflateEnd) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__inflateEnd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 24 ##
######################################
*)

htriple "ht_100003a5c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a5c: MOV RDI, RBX 3"
 Post  "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a5f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a5f: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a64"
 Separations "((RSP_0 -64 112),8) SEP (R8_0,8); ((RSP_0 -64 112),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a64: MOV RDI, QWORD PTR [RBP - 104] 4"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a68"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a68: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x1000086f4,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a6d"
 Separations "((RSP_0 -64 264),8) SEP (R8_0,8); ((RSP_0 -64 264),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a6d: MOV RAX, QWORD PTR [RBP - 256] 7"
 Post  "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a74"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a74: TEST RAX, RAX 3"
 Post  "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a77"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a77: JE 4294982272 2"
 Post  "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 25 ##
######################################
*)

htriple "ht_100003a79"
 Separations "((RSP_0 -64 120),8) SEP (R8_0,8); ((RSP_0 -64 120),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a79: MOV RCX, QWORD PTR [RBP - 112] 4"
 Post  "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a7d"
 Separations "(R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP (0x1000086f4,4); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 52),4); (R8_0,8) SEP ((RSP_0 -64 64),8); (R8_0,8) SEP ((RSP_0 -64 68),4); (R8_0,8) SEP ((RSP_0 -64 80),4); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 104),8); (R8_0,8) SEP ((RSP_0 -64 112),8); (R8_0,8) SEP ((RSP_0 -64 120),8); (R8_0,8) SEP ((RSP_0 -64 124),4); (R8_0,8) SEP ((RSP_0 -64 128),4); (R8_0,8) SEP ((RSP_0 -64 152),16); (R8_0,8) SEP ((RSP_0 -64 168),8); (R8_0,8) SEP ((RSP_0 -64 168),16); (R8_0,8) SEP ((RSP_0 -64 184),16); (R8_0,8) SEP ((RSP_0 -64 200),16); (R8_0,8) SEP ((RSP_0 -64 216),4); (R8_0,8) SEP ((RSP_0 -64 216),16); (R8_0,8) SEP ((RSP_0 -64 224),8); (R8_0,8) SEP ((RSP_0 -64 232),16); (R8_0,8) SEP ((RSP_0 -64 240),4); (R8_0,8) SEP ((RSP_0 -64 248),8); (R8_0,8) SEP ((RSP_0 -64 248),16); (R8_0,8) SEP ((RSP_0 -64 256),8); (R8_0,8) SEP ((RSP_0 -64 264),8)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a7d: MOV QWORD PTR [RAX], RCX 3"
 Post  "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 26 ##
######################################
*)

htriple "ht_100003a80"
 Separations "((RSP_0 -64 64),8) SEP (R8_0,8); ((RSP_0 -64 64),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a80: MOV RAX, QWORD PTR [RBP - 56] 4"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a84"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a84: ADD RSP, 216 7"
 Post  "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a8b"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a8b: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a8c"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a8c: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a8e"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a8e: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a90"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a90: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a92"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a92: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a94"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a94: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003a95"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003a95: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 27 ##
######################################
*)

htriple "ht_100003ad0"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ad0: LEA RDI, [RIP + 14076] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ad7"
 Separations "((RSP_0 -64 256),8) SEP (R8_0,8); ((RSP_0 -64 256),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ad7: MOV RSI, QWORD PTR [RBP - 248] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ade"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ade: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ae0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071d3 ; RSI = R9_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ae0: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ae5"
 Separations "(0x1000086f4,4) SEP (RSP_0,8); (0x1000086f4,4) SEP (R8_0,8); (0x1000086f4,4) SEP ((RSP_0 -64 8),8); (0x1000086f4,4) SEP ((RSP_0 -64 16),8); (0x1000086f4,4) SEP ((RSP_0 -64 24),8); (0x1000086f4,4) SEP ((RSP_0 -64 32),8); (0x1000086f4,4) SEP ((RSP_0 -64 40),8); (0x1000086f4,4) SEP ((RSP_0 -64 48),8); (0x1000086f4,4) SEP ((RSP_0 -64 52),4); (0x1000086f4,4) SEP ((RSP_0 -64 64),8); (0x1000086f4,4) SEP ((RSP_0 -64 68),4); (0x1000086f4,4) SEP ((RSP_0 -64 80),4); (0x1000086f4,4) SEP ((RSP_0 -64 88),8); (0x1000086f4,4) SEP ((RSP_0 -64 96),8); (0x1000086f4,4) SEP ((RSP_0 -64 104),8); (0x1000086f4,4) SEP ((RSP_0 -64 112),8); (0x1000086f4,4) SEP ((RSP_0 -64 120),8); (0x1000086f4,4) SEP ((RSP_0 -64 124),4); (0x1000086f4,4) SEP ((RSP_0 -64 128),4); (0x1000086f4,4) SEP ((RSP_0 -64 152),16); (0x1000086f4,4) SEP ((RSP_0 -64 168),16); (0x1000086f4,4) SEP ((RSP_0 -64 184),16); (0x1000086f4,4) SEP ((RSP_0 -64 200),16); (0x1000086f4,4) SEP ((RSP_0 -64 216),16); (0x1000086f4,4) SEP ((RSP_0 -64 232),16); (0x1000086f4,4) SEP ((RSP_0 -64 248),16); (0x1000086f4,4) SEP ((RSP_0 -64 256),8); (0x1000086f4,4) SEP ((RSP_0 -64 264),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003ae5: MOV DWORD PTR [RIP + 19461], 2 10"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003aef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003aef: JMP 4294982236 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000343a, blockId == 28 ##
######################################
*)

htriple "ht_100003afd"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003afd: LEA RDI, [RIP + 14060] 7"
 Post  "RBX = bot(fun__malloc) ; RDI = 0x1000071f0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b04"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__malloc) ; RDI = 0x1000071f0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003b04: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071f0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b06"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = 0x1000071f0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086f4,4] = [0x1000086f4,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003b06: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),4];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 124),4];[(RSP_0 -64 128),4];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 232),16];[(RSP_0 -64 248),16];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b0b"
 Separations "((RSP_0 -64 64),8) SEP (R8_0,8); ((RSP_0 -64 64),8) SEP (0x1000086f4,4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003b0b: MOV QWORD PTR [RBP - 56], 18446744073709551615 8"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0xffffffffffffffff ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003b13"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0xffffffffffffffff ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
 Instruction "100003b13: JMP 4294982236 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003b78 ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 64),8] = 0xffffffffffffffff ; [(RSP_0 -64 68),4] = 0 ; [(RSP_0 -64 80),4] = 0xfffffffe ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 104),8] = bot(fun__malloc) ; [(RSP_0 -64 112),8] = bot(fun__malloc) ; [(RSP_0 -64 124),4] = b32(RSI_0) ; [(RSP_0 -64 128),4] = b32(RDI_0) ; [(RSP_0 -64 256),8] = R9_0 ; [(RSP_0 -64 264),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
