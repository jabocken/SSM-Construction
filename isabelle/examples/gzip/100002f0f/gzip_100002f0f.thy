theory gzip_100002f0f
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100002f0f, blockId == 0 ##
#####################################
*)

htriple "ht_100002f0f"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008020,8); ((RSP_0 -64 8),8) SEP (0x100008730,1); ((RSP_0 -64 8),8) SEP (0x100008738,8); ((RSP_0 -64 8),8) SEP (0x100008740,8); ((RSP_0 -64 8),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f0f: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f10"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f10: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f13"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008020,8); ((RSP_0 -64 16),8) SEP (0x100008730,1); ((RSP_0 -64 16),8) SEP (0x100008738,8); ((RSP_0 -64 16),8) SEP (0x100008740,8); ((RSP_0 -64 16),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f13: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f15"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008020,8); ((RSP_0 -64 24),8) SEP (0x100008730,1); ((RSP_0 -64 24),8) SEP (0x100008738,8); ((RSP_0 -64 24),8) SEP (0x100008740,8); ((RSP_0 -64 24),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f15: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f17"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008020,8); ((RSP_0 -64 32),8) SEP (0x100008730,1); ((RSP_0 -64 32),8) SEP (0x100008738,8); ((RSP_0 -64 32),8) SEP (0x100008740,8); ((RSP_0 -64 32),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f17: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f19"
 Separations "((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP (0x100008020,8); ((RSP_0 -64 40),8) SEP (0x100008730,1); ((RSP_0 -64 40),8) SEP (0x100008738,8); ((RSP_0 -64 40),8) SEP (0x100008740,8); ((RSP_0 -64 40),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f19: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f1a: SUB RSP, 32 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f1e: MOV R14, RDX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f21"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f21: MOV R15, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f24"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f24: MOV EBX, EDI 2"
 Post  "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f26"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008020,8]_0,8); (0x100008008,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f26: MOV RAX, QWORD PTR [RIP + 20699] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f2d"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008020,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008020,8); ([0x100008008,8]_0,8) SEP (0x100008730,1); ([0x100008008,8]_0,8) SEP (0x100008738,8); ([0x100008008,8]_0,8) SEP (0x100008740,8); ([0x100008008,8]_0,8) SEP ((bot(fun__ctime) +64 16),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 52),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f2d: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f30"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP (0x100008020,8); ((RSP_0 -64 48),8) SEP (0x100008730,1); ((RSP_0 -64 48),8) SEP (0x100008738,8); ((RSP_0 -64 48),8) SEP (0x100008740,8); ((RSP_0 -64 48),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f30: MOV QWORD PTR [RBP - 40], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f34"
 Separations "((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 64),8) SEP (0x100008008,8); ((RSP_0 -64 64),8) SEP (0x100008020,8); ((RSP_0 -64 64),8) SEP (0x100008730,1); ((RSP_0 -64 64),8) SEP (0x100008738,8); ((RSP_0 -64 64),8) SEP (0x100008740,8); ((RSP_0 -64 64),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100002f34: MOV QWORD PTR [RBP - 56], RCX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f38"
 Separations "(0x100008730,1) SEP (RSP_0,8); (0x100008730,1) SEP ([0x100008008,8]_0,8); (0x100008730,1) SEP ([0x100008020,8]_0,8); (0x100008730,1) SEP ((bot(fun__ctime) +64 16),1); (0x100008730,1) SEP ((RSP_0 -64 8),8); (0x100008730,1) SEP ((RSP_0 -64 16),8); (0x100008730,1) SEP ((RSP_0 -64 24),8); (0x100008730,1) SEP ((RSP_0 -64 32),8); (0x100008730,1) SEP ((RSP_0 -64 40),8); (0x100008730,1) SEP ((RSP_0 -64 48),8); (0x100008730,1) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f38: CMP BYTE PTR [RIP + 22513], 0 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f3f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f3f: JNE 4294979437 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 1 ##
#####################################
*)

htriple "ht_100002f41"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f41: CMP BYTE PTR [RIP + 22440], 1 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f48"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f48: JNE 4294979416 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 2 ##
#####################################
*)

htriple "ht_100002f6d"
 Separations "(0x100008730,1) SEP (RSP_0,8); (0x100008730,1) SEP ([0x100008008,8]_0,8); (0x100008730,1) SEP ([0x100008020,8]_0,8); (0x100008730,1) SEP ((bot(fun__ctime) +64 16),1); (0x100008730,1) SEP ((RSP_0 -64 8),8); (0x100008730,1) SEP ((RSP_0 -64 16),8); (0x100008730,1) SEP ((RSP_0 -64 24),8); (0x100008730,1) SEP ((RSP_0 -64 32),8); (0x100008730,1) SEP ((RSP_0 -64 40),8); (0x100008730,1) SEP ((RSP_0 -64 48),8); (0x100008730,1) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f6d: MOV BYTE PTR [RIP + 22460], 1 7"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f74"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f74: CMP EBX, 18446744073709551615 3"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f77"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f77: JE 4294979520 2"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 3 ##
#####################################
*)

htriple "ht_100002f4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f4a: LEA RDI, [RIP + 19255] 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100007a88 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f51"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100007a88 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f51: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100007a88 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f53"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(RDI_0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x100007a88 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f53: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 4 ##
#####################################
*)

htriple "ht_100002f58"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f58: CMP BYTE PTR [RIP + 22405], 0 7"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f5f"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f5f: JNE 4294979437 2"
 Post  "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 5 ##
#####################################
*)

htriple "ht_100002f61"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f61: LEA RDI, [RIP + 20407] 7"
 Post  "RBX = b32(RDI_0) ; RDI = 0x100007f1f ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f68"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDI = 0x100007f1f ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f68: ExternalCall fun__puts 5"
 Post  "RAX = bot(fun__puts) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = [0x100008730,1]_0 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__puts {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 6 ##
#####################################
*)

htriple "ht_100002f79"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f79: MOV EDI, EBX 2"
 Post  "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f7b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f7b: MOV RSI, 18446744073709551608 7"
 Post  "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSI = 0xfffffffffffffff8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f82"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDI = b32(RDI_0) ; RSI = 0xfffffffffffffff8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f82: MOV EDX, 2 5"
 Post  "RBX = b32(RDI_0) ; RDX = 2 ; RDI = b32(RDI_0) ; RSI = 0xfffffffffffffff8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f87"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RDX = 2 ; RDI = b32(RDI_0) ; RSI = 0xfffffffffffffff8 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f87: ExternalCall fun__lseek 5"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__lseek {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f8c: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f90"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f90: JE 4294979559 2"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 7 ##
#####################################
*)

htriple "ht_100002fc0"
 Separations "(0x100008738,8) SEP (RSP_0,8); (0x100008738,8) SEP ([0x100008008,8]_0,8); (0x100008738,8) SEP ([0x100008020,8]_0,8); (0x100008738,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008738,8) SEP ((RSP_0 -64 8),8); (0x100008738,8) SEP ((RSP_0 -64 16),8); (0x100008738,8) SEP ((RSP_0 -64 24),8); (0x100008738,8) SEP ((RSP_0 -64 32),8); (0x100008738,8) SEP ((RSP_0 -64 40),8); (0x100008738,8) SEP ((RSP_0 -64 48),8); (0x100008738,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fc0: MOV RBX, QWORD PTR [RIP + 22385] 7"
 Post  "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc7"
 Separations "(0x100008740,8) SEP (RSP_0,8); (0x100008740,8) SEP ([0x100008008,8]_0,8); (0x100008740,8) SEP ([0x100008020,8]_0,8); (0x100008740,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008740,8) SEP ((RSP_0 -64 8),8); (0x100008740,8) SEP ((RSP_0 -64 16),8); (0x100008740,8) SEP ((RSP_0 -64 24),8); (0x100008740,8) SEP ((RSP_0 -64 32),8); (0x100008740,8) SEP ((RSP_0 -64 40),8); (0x100008740,8) SEP ((RSP_0 -64 48),8); (0x100008740,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fc7: MOV R15, QWORD PTR [RIP + 22386] 7"
 Post  "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fce"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fce: CMP BYTE PTR [RIP + 22299], 1 7"
 Post  "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fd5"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fd5: JNE 4294979632 2"
 Post  "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 8 ##
#####################################
*)

htriple "ht_100002f92"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f92: LEA RSI, [RBP - 48] 4"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f96: MOV EDX, 8 5"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RDX = 8 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f9b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RDX = 8 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f9b: MOV EDI, EBX 2"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RDX = 8 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RDX = 8 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002f9d: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fa2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fa2: CMP RAX, 8 4"
 Post  "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fa6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fa6: JE 4294979563 2"
 Post  "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002f0f, blockId == 9 ##
#####################################
*)

htriple "ht_100002fe7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fe7: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__lseek) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fe9: JMP 4294979579 2"
 Post  "RAX = bot(fun__lseek) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 10 ##
######################################
*)

htriple "ht_100002fa8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fa8: LEA RDI, [RIP + 19190] 7"
 Post  "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002faf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002faf: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fb1: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fb5: JNE 4294979572 2"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 11 ##
######################################
*)

htriple "ht_100002feb"
 Separations "((RSP_0 -64 56),4) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002feb: MOV R12D, DWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fef"
 Separations "((RSP_0 -64 52),4) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fef: MOV EBX, DWORD PTR [RBP - 44] 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002ff2: JMP 4294979582 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 12 ##
######################################
*)

htriple "ht_100002fb7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fb7: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fb9: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fbe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fbe: JMP 4294979579 2"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 13 ##
######################################
*)

htriple "ht_100002ff4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002ff4: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RDI = 0x100007aa5 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002ff6: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 14 ##
######################################
*)

htriple "ht_100002fd7"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fd7: LEA RDI, [RIP + 19169] 7"
 Post  "RBX = [0x100008738,8]_0 ; RDI = 0x100007abf ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fde"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x100008738,8]_0 ; RDI = 0x100007abf ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fde: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [0x100008738,8]_0 ; RDI = 0x100007abf ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [0x100008738,8]_0 ; RDI = 0x100007abf ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fe0: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002fe5: JMP 4294979632 2"
 Post  "RAX = bot(fun__printf) ; RBX = [0x100008738,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = [0x100008740,8]_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [0x100008730,1] = 1 ; [0x100008738,8] = [0x100008738,8]_0 ; [0x100008740,8] = [0x100008740,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 15 ##
######################################
*)

htriple "ht_100003030"
 Separations "(0x100008738,8) SEP (RSP_0,8); (0x100008738,8) SEP ([0x100008008,8]_0,8); (0x100008738,8) SEP ([0x100008020,8]_0,8); (0x100008738,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008738,8) SEP ((RSP_0 -64 8),8); (0x100008738,8) SEP ((RSP_0 -64 16),8); (0x100008738,8) SEP ((RSP_0 -64 24),8); (0x100008738,8) SEP ((RSP_0 -64 32),8); (0x100008738,8) SEP ((RSP_0 -64 40),8); (0x100008738,8) SEP ((RSP_0 -64 48),8); (0x100008738,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003030: ADD QWORD PTR [RIP + 22273], RBX 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003037"
 Separations "(0x100008740,8) SEP (RSP_0,8); (0x100008740,8) SEP ([0x100008008,8]_0,8); (0x100008740,8) SEP ([0x100008020,8]_0,8); (0x100008740,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008740,8) SEP ((RSP_0 -64 8),8); (0x100008740,8) SEP ((RSP_0 -64 16),8); (0x100008740,8) SEP ((RSP_0 -64 24),8); (0x100008740,8) SEP ((RSP_0 -64 32),8); (0x100008740,8) SEP ((RSP_0 -64 40),8); (0x100008740,8) SEP ((RSP_0 -64 48),8); (0x100008740,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003037: ADD QWORD PTR [RIP + 22274], R15 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000303e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000303e: LEA RDI, [RIP + 19116] 7"
 Post  "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003045"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003045: MOV RSI, R15 3"
 Post  "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003048"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003048: MOV RDX, RBX 3"
 Post  "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000304b"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000304b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000304d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007af1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000304d: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003052"
 Separations "(0x100008020,8) SEP (RSP_0,8); (0x100008020,8) SEP ([0x100008008,8]_0,8); (0x100008020,8) SEP ([0x100008020,8]_0,8); (0x100008020,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008020,8) SEP ((RSP_0 -64 8),8); (0x100008020,8) SEP ((RSP_0 -64 16),8); (0x100008020,8) SEP ((RSP_0 -64 24),8); (0x100008020,8) SEP ((RSP_0 -64 32),8); (0x100008020,8) SEP ((RSP_0 -64 40),8); (0x100008020,8) SEP ((RSP_0 -64 48),8); (0x100008020,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003052: MOV RAX, QWORD PTR [RIP + 20423] 7"
 Post  "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003059"
 Separations "([0x100008020,8]_0,8) SEP (RSP_0,8); ([0x100008020,8]_0,8) SEP ([0x100008008,8]_0,8); ([0x100008020,8]_0,8) SEP (0x100008008,8); ([0x100008020,8]_0,8) SEP (0x100008020,8); ([0x100008020,8]_0,8) SEP (0x100008730,1); ([0x100008020,8]_0,8) SEP (0x100008738,8); ([0x100008020,8]_0,8) SEP (0x100008740,8); ([0x100008020,8]_0,8) SEP ((bot(fun__ctime) +64 16),1); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008020,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003059: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000305c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000305c: MOV RDI, RBX 3"
 Post  "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000305f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000305f: MOV RSI, R15 3"
 Post  "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003062"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008020,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003062: ExternalCall fun_0x100004f8b 5"
 Post  "RAX = bot(fun_0x100004f8b) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun_0x100004f8b {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003067"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004f8b) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003067: LEA RDI, [RIP + 19090] 7"
 Post  "RAX = bot(fun_0x100004f8b) ; RDI = 0x100007b00 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000306e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004f8b) ; RDI = 0x100007b00 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000306e: MOV RSI, R14 3"
 Post  "RAX = bot(fun_0x100004f8b) ; RDI = 0x100007b00 ; RSI = RDX_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003071"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004f8b) ; RDI = 0x100007b00 ; RSI = RDX_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003071: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007b00 ; RSI = RDX_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003073"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007b00 ; RSI = RDX_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003073: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003078"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008020,8]_0,8); (0x100008008,8) SEP ((bot(fun__ctime) +64 16),1); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003078: MOV RAX, QWORD PTR [RIP + 20361] 7"
 Post  "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000307f"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008020,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008020,8); ([0x100008008,8]_0,8) SEP (0x100008730,1); ([0x100008008,8]_0,8) SEP (0x100008738,8); ([0x100008008,8]_0,8) SEP (0x100008740,8); ([0x100008008,8]_0,8) SEP ((bot(fun__ctime) +64 16),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 52),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000307f: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003082"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP (0x100008020,8); ((RSP_0 -64 48),8) SEP (0x100008730,1); ((RSP_0 -64 48),8) SEP (0x100008738,8); ((RSP_0 -64 48),8) SEP (0x100008740,8); ((RSP_0 -64 48),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003082: CMP RAX, QWORD PTR [RBP - 40] 4"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003086"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003086: JNE 4294979733 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 16 ##
######################################
*)

htriple "ht_100002ffb"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002ffb: XOR R12D, R12D 3"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 17 ##
######################################
*)

htriple "ht_100002ffe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100002ffe: CMP BYTE PTR [RIP + 22251], 0 7"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003005"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003005: JE 4294979632 2"
 Post  "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 18 ##
######################################
*)

htriple "ht_100003007"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003007: LEA RDI, [RBP - 56] 4"
 Post  "RDI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000300b"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000300b: ExternalCall fun__ctime 5"
 Post  "RAX = bot(fun__ctime) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__ctime {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003010"
 Separations "((bot(fun__ctime) +64 16),1) SEP (RSP_0,8); ((bot(fun__ctime) +64 16),1) SEP ([0x100008008,8]_0,8); ((bot(fun__ctime) +64 16),1) SEP ([0x100008020,8]_0,8); ((bot(fun__ctime) +64 16),1) SEP (0x100008008,8); ((bot(fun__ctime) +64 16),1) SEP (0x100008020,8); ((bot(fun__ctime) +64 16),1) SEP (0x100008730,1); ((bot(fun__ctime) +64 16),1) SEP (0x100008738,8); ((bot(fun__ctime) +64 16),1) SEP (0x100008740,8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 8),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 16),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 24),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 32),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 40),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 48),8); ((bot(fun__ctime) +64 16),1) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003010: MOV BYTE PTR [RAX + 16], 0 4"
 Post  "RAX = bot(fun__ctime) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003014"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003014: LEA RCX, [RAX + 4] 4"
 Post  "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003018"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003018: LEA RDI, [RIP + 19133] 7"
 Post  "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000301f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000301f: LEA RSI, [RIP + 19141] 7"
 Post  "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003026"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003026: MOV EDX, R12D 3"
 Post  "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003029"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ctime) ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003029: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000302b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (bot(fun__ctime) +64 4) ; RDI = 0x100007adc ; RSI = 0x100007aeb ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000302b: ExternalCall fun__printf 5"
 Post  "RAX = bot(fun__printf) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = RSI_0 ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun__printf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 19 ##
######################################
*)

htriple "ht_100003088"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003088: ADD RSP, 32 4"
 Post  "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308c"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008020,8); ((RSP_0 -64 32),8) SEP (0x100008730,1); ((RSP_0 -64 32),8) SEP (0x100008738,8); ((RSP_0 -64 32),8) SEP (0x100008740,8); ((RSP_0 -64 32),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000308c: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308d"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008020,8); ((RSP_0 -64 24),8) SEP (0x100008730,1); ((RSP_0 -64 24),8) SEP (0x100008738,8); ((RSP_0 -64 24),8) SEP (0x100008740,8); ((RSP_0 -64 24),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000308d: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308f"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008020,8); ((RSP_0 -64 16),8) SEP (0x100008730,1); ((RSP_0 -64 16),8) SEP (0x100008738,8); ((RSP_0 -64 16),8) SEP (0x100008740,8); ((RSP_0 -64 16),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "10000308f: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003091"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008020,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008020,8); ((RSP_0 -64 8),8) SEP (0x100008730,1); ((RSP_0 -64 8),8) SEP (0x100008738,8); ((RSP_0 -64 8),8) SEP (0x100008740,8); ((RSP_0 -64 8),8) SEP ((bot(fun__ctime) +64 16),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003091: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003093"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003093: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003094"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003094: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002f0f, blockId == 20 ##
######################################
*)

htriple "ht_100003095"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 Instruction "100003095: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R14 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008020,8] = [0x100008020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 64),8] = RCX_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008020,8];[0x100008730,1];[0x100008738,8];[0x100008740,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
