theory gzip_10000403c
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000403c, blockId == 0 ##
#####################################
*)

htriple "ht_10000403c"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 8),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 8),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 8),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000403c: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000403d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000403d: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004040"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 16),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 16),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 16),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004040: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004042"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 24),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 24),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 24),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004042: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004044"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 32),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 32),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 32),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004044: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004046"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 40),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 40),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 40),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004046: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004048"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 48),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 48),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 48),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004048: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004049"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004049: SUB RSP, 152 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004050"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 64),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004050: MOV QWORD PTR [RBP - 56], R8 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004054"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004054: MOV RBX, RCX 3"
 Post  "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004057"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004057: MOV R13, RDX 3"
 Post  "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000405a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000405a: MOV R14D, ESI 3"
 Post  "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000405d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RCX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000405d: ExternalCall fun__dup 5"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__dup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004062"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004062: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004065"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004065: JE 4294984868 6"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 1 ##
#####################################
*)

htriple "ht_10000406b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000406b: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000406e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000406e: MOV EDI, R14D 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004071"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004071: ExternalCall fun__dup 5"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__dup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004076"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004076: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004079"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004079: JE 4294984868 6"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 2 ##
#####################################
*)

htriple "ht_1000044a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044a4: LEA RDI, [RIP + 12094] 7"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = 0x1000073e9 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044ab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = 0x1000073e9 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044ab: JMP 4294984852 2"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = 0x1000073e9 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 3 ##
#####################################
*)

htriple "ht_10000407f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RSI_0) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000407f: MOV R14D, EAX 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004082"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004082: TEST RBX, RBX 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004085"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004085: JE 4294983835 2"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 4 ##
#####################################
*)

htriple "ht_100004087"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004087: LEA RDI, [RBP - 71] 4"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = (RSP_0 -64 79) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000408b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RDI = (RSP_0 -64 79) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000408b: MOV ECX, 7 5"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDI = (RSP_0 -64 79) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004090"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDI = (RSP_0 -64 79) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004090: MOV RSI, R13 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDI = (RSP_0 -64 79) ; RSI = RDX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004093"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDI = (RSP_0 -64 79) ; RSI = RDX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004093: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDX = RCX_0 ; RDI = (RSP_0 -64 79) ; RSI = RDX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004096"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = RCX_0 ; RCX = 7 ; RDX = RCX_0 ; RDI = (RSP_0 -64 79) ; RSI = RDX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004096: ExternalCall fun____memcpy_chk 5"
 Post  "RAX = bot(fun____memcpy_chk) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun____memcpy_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 5 ##
#####################################
*)

htriple "ht_10000409b"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000409b: LEA RSI, [RBP + RBX - 71] 5"
 Post  "RBX = RCX_0 ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040a0"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040a0: MOV EDX, 7 5"
 Post  "RBX = RCX_0 ; RDX = 7 ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040a5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RDX = 7 ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040a5: SUB RDX, RBX 3"
 Post  "RBX = RCX_0 ; RDX = (7 -64 RCX_0) ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040a8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RDX = (7 -64 RCX_0) ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040a8: MOV EDI, R12D 3"
 Post  "RBX = RCX_0 ; RDX = (7 -64 RCX_0) ; RDI = b32(bot(fun__dup)) ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040ab"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RDX = (7 -64 RCX_0) ; RDI = b32(bot(fun__dup)) ; RSI = (RSP_0 -64 (79 -64 RCX_0)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040ab: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040b0: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040b3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040b3: JS 4294984877 6"
 Post  "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 6 ##
#####################################
*)

htriple "ht_1000040b9"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 64),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040b9: MOV RAX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040bd: TEST RAX, RAX 3"
 Post  "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040c0: JE 4294983878 2"
 Post  "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 7 ##
#####################################
*)

htriple "ht_1000044ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044ad: LEA RDI, [RIP + 12089] 7"
 Post  "RAX = bot(fun__read) ; RBX = RCX_0 ; RDI = 0x1000073ed ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = RCX_0 ; RDI = 0x1000073ed ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044b4: JMP 4294984852 2"
 Post  "RAX = bot(fun__read) ; RBX = RCX_0 ; RDI = 0x1000073ed ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 8 ##
#####################################
*)

htriple "ht_1000040c2"
 Separations "(R8_0,8) SEP (bot(fun__calloc),1); (R8_0,8) SEP (bot(fun__calloc),4); (R8_0,8) SEP (bot(fun__calloc),8); (R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 56),8); (R8_0,8) SEP ((RSP_0 -64 64),8); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 73),1); (R8_0,8) SEP ((RSP_0 -64 77),1); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),4); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 104),8); (R8_0,8) SEP ((RSP_0 -64 112),8); (R8_0,8) SEP ((RSP_0 -64 120),8); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 136),8); (R8_0,8) SEP ((RSP_0 -64 144),8); (R8_0,8) SEP ((RSP_0 -64 152),8); (R8_0,8) SEP ((RSP_0 -64 160),8); (R8_0,8) SEP ((RSP_0 -64 168),8); (R8_0,8) SEP ((RSP_0 -64 176),8); (R8_0,8) SEP ((RSP_0 -64 180),4); (R8_0,8) SEP ((RSP_0 -64 184),4); (R8_0,8) SEP ((RSP_0 -64 192),8); (R8_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040c2: ADD QWORD PTR [RAX], 7 4"
 Post  "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000403c, blockId == 9 ##
#####################################
*)

htriple "ht_1000040c6"
 Separations "((RSP_0 -64 136),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 136),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = [(RSP_0 -64 136),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040c6: MOV QWORD PTR [RBP - 128], 0 8"
 Post  "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040ce: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040d0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040d0: XOR ECX, ECX 2"
 Post  "RAX = 0 ; RBX = RCX_0 ; RCX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 10 ##
######################################
*)

htriple "ht_1000040d2"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040d2: MOV RDX, RCX 3"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040d5"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040d5: SHL RDX, 8 4"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040d9"
 Separations ""
 Assertions  "((RSP_0 -64 (77 -64 RAX)),1) SEP (RSP_0,8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 64),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 72),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 88),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 96),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 104),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 112),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 120),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 128),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 136),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 144),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 152),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 160),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 168),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 176),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 180),4); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 184),4); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 192),8); ((RSP_0 -64 (77 -64 RAX)),1) SEP ((RSP_0 -64 200),8)"
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040d9: MOVZX ECX, BYTE PTR [RBP + RAX - 69] 5"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040de"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040de: OR RCX, RDX 3"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040e1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040e1: INC RAX 3"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040e4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040e4: CMP RAX, 4 4"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040e8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040e8: JNE 4294983890 2"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 11 ##
######################################
*)

htriple "ht_1000040ea"
 Separations "((RSP_0 -64 136),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 136),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 136),8] = 0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040ea: MOV QWORD PTR [RBP - 128], RCX 4"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040ee"
 Separations "((RSP_0 -64 73),1) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040ee: MOVZX R15D, BYTE PTR [RBP - 65] 5"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040f3"
 Separations "((RSP_0 -64 180),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 180),4) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 180),4] = [(RSP_0 -64 180),4]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040f3: MOV DWORD PTR [RBP - 172], R15D 7"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040fa"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040fa: LEA EAX, [R15 - 1] 4"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000040fe"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000040fe: CMP AL, 24 2"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004100"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004100: JAE 4294984886 6"
 Post  "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 12 ##
######################################
*)

htriple "ht_100004106"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004106: LEA RSI, [RIP + 13018] 7"
 Post  "RBX = RCX_0 ; RSI = 0x1000073e7 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000410d"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSI = 0x1000073e7 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000410d: MOV EDI, R12D 3"
 Post  "RBX = RCX_0 ; RDI = b32(bot(fun__dup)) ; RSI = 0x1000073e7 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004110"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RDI = b32(bot(fun__dup)) ; RSI = 0x1000073e7 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004110: ExternalCall fun__fdopen 5"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__fdopen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004115"
 Separations "((RSP_0 -64 128),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 128),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004115: MOV QWORD PTR [RBP - 120], RAX 4"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004119"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004119: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000411c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000411c: JE 4294984895 6"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 13 ##
######################################
*)

htriple "ht_1000044b6"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044b6: LEA RDI, [RIP + 12106] 7"
 Post  "RBX = RCX_0 ; RDI = 0x100007407 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044bd"
 Separations ""
 Assertions  ""
 Pre   "RBX = RCX_0 ; RDI = 0x100007407 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044bd: JMP 4294984829 2"
 Post  "RBX = RCX_0 ; RDI = 0x100007407 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 14 ##
######################################
*)

htriple "ht_100004122"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004122: MOV R13, RAX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004125"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004125: LEA RSI, [RIP + 13080] 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 0x100007444 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000412c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 0x100007444 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000412c: MOV EDI, R14D 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = b32(bot(fun__dup)) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000412f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = b32(bot(fun__dup)) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000412f: ExternalCall fun__fdopen 5"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__fdopen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004134"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 120),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004134: MOV QWORD PTR [RBP - 112], RAX 4"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004138"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004138: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000413b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000413b: JE 4294984904 6"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 15 ##
######################################
*)

htriple "ht_1000044bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044bf: LEA RDI, [RIP + 12128] 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007426 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007426 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044c6: JMP 4294984852 2"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007426 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = RDX_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = [(RSP_0 -64 120),8]_0 ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 16 ##
######################################
*)

htriple "ht_100004141"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004141: MOV ESI, 4 5"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004146"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004146: MOV RDI, R15 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004149"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004149: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000414e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000414e: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004151"
 Separations "((RSP_0 -64 168),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 168),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004151: MOV QWORD PTR [RBP - 160], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004158"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004158: MOV ESI, 4 5"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000415d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000415d: MOV RDI, R15 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004160"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 4 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004160: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004165"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004165: MOV R12, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004168"
 Separations "((RSP_0 -64 176),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 176),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004168: MOV QWORD PTR [RBP - 168], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000416f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000416f: MOV ESI, 8 5"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 8 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004174"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 8 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004174: MOV RDI, R15 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 8 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004177"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSI = 8 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004177: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000417c"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 72),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000417c: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004180"
 Separations "((RSP_0 -64 144),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 144),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004180: MOV QWORD PTR [RBP - 136], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004187"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004187: TEST RBX, RBX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000418a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000418a: JE 4294984859 6"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 17 ##
######################################
*)

htriple "ht_1000044c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044c8: LEA RDI, [RIP + 12151] 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007446 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007446 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044cf: JMP 4294984852 2"
 Post  "RAX = bot(fun__fdopen) ; RBX = RCX_0 ; RDI = 0x100007446 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = [(RSP_0 -64 144),8]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = [(RSP_0 -64 168),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 18 ##
######################################
*)

htriple "ht_100004190"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004190: TEST R12, R12 3"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004193"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004193: JE 4294984859 6"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 19 ##
######################################
*)

htriple "ht_10000449b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000449b: LEA RDI, [RIP + 12227] 7"
 Post  "RAX = bot(fun__calloc) ; RDI = 0x100007465 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RDI = 0x100007465 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044a2: JMP 4294984852 2"
 Post  "RAX = bot(fun__calloc) ; RDI = 0x100007465 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 20 ##
######################################
*)

htriple "ht_100004199"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 72),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004199: CMP QWORD PTR [RBP - 64], 0 5"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000419e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000419e: JE 4294984859 6"
 Post  "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 21 ##
######################################
*)

htriple "ht_1000041a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041a4: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041a6"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041a6: MOV QWORD PTR [RBP - 48], R15 4"
 Post  "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041aa: DEC R15 3"
 Post  "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041ad"
 Separations "((RSP_0 -64 180),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 180),4) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041ad: MOV DWORD PTR [RBP - 172], R15D 7"
 Post  "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041b4"
 Separations "((RSP_0 -64 184),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 184),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 184),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 184),4) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = [(RSP_0 -64 184),4]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041b4: MOV DWORD PTR [RBP - 176], 1 10"
 Post  "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041be: MOV EAX, 0 5"
 Post  "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041c3"
 Separations "((RSP_0 -64 96),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),4) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041c3: MOV QWORD PTR [RBP - 88], R15 4"
 Post  "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041c7: CMOVNS RAX, R15 4"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041cb"
 Separations "((RSP_0 -64 112),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 112),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 112),8] = [(RSP_0 -64 112),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041cb: MOV QWORD PTR [RBP - 104], RAX 4"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041cf"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = b32(bot(fun__dup)) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041cf: LEA R14, [RAX + 1] 4"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041d3"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041d3: MOV R15D, 1 6"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 22 ##
######################################
*)

htriple "ht_1000041ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041ea: MOVZX EAX, AL 3"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041ed"
 Separations ""
 Assertions  "((R12 +64 (RBX *64 4)),4) SEP (RSP_0,8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 8),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 16),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 24),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 32),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 40),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 48),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 56),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 64),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 72),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 88),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 96),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 104),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 112),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 120),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 128),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 136),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 144),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 152),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 160),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 168),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 176),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 180),4); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 184),4); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 192),8); ((R12 +64 (RBX *64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041ed: MOV DWORD PTR [R12 + RBX * 4], EAX 4"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041f1"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041f1: ADD R15D, EAX 3"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041f4"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041f4: INC RBX 3"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041f7: CMP R14, RBX 3"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041fa: JNE 4294984153 2"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 23 ##
######################################
*)

htriple "ht_10000448d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000448d: LEA RDI, [RIP + 12248] 7"
 Post  "RAX = bot(fun__fgetc) ; RDI = 0x10000746c ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 24 ##
######################################
*)

htriple "ht_1000041d9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041d9: MOV RDI, R13 3"
 Post  "RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041dc"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041dc: ExternalCall fun__fgetc 5"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__fgetc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041e1: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000041e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041e4: JE 4294984845 6"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 25 ##
######################################
*)

htriple "ht_1000041fc"
 Separations "((RSP_0 -64 184),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 184),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 184),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 184),4) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 184),4] = 1 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000041fc: MOV DWORD PTR [RBP - 176], R15D 7"
 Post  "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004203"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 64),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004203: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004207"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004207: TEST RBX, RBX 3"
 Post  "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000420a"
 Separations ""
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000420a: JE 4294984211 2"
 Post  "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 26 ##
######################################
*)

htriple "ht_10000420c"
 Separations "((RSP_0 -64 96),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),4) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = b8(bot(fun__fgetc)) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000420c: MOV RAX, QWORD PTR [RBP - 88] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004210"
 Separations "(R8_0,8) SEP (bot(fun__calloc),1); (R8_0,8) SEP (bot(fun__calloc),4); (R8_0,8) SEP (bot(fun__calloc),8); (R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 56),8); (R8_0,8) SEP ((RSP_0 -64 64),8); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 73),1); (R8_0,8) SEP ((RSP_0 -64 77),1); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),4); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 104),8); (R8_0,8) SEP ((RSP_0 -64 112),8); (R8_0,8) SEP ((RSP_0 -64 120),8); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 136),8); (R8_0,8) SEP ((RSP_0 -64 144),8); (R8_0,8) SEP ((RSP_0 -64 152),8); (R8_0,8) SEP ((RSP_0 -64 160),8); (R8_0,8) SEP ((RSP_0 -64 168),8); (R8_0,8) SEP ((RSP_0 -64 176),8); (R8_0,8) SEP ((RSP_0 -64 180),4); (R8_0,8) SEP ((RSP_0 -64 184),4); (R8_0,8) SEP ((RSP_0 -64 192),8); (R8_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004210: ADD QWORD PTR [RBX], RAX 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 27 ##
######################################
*)

htriple "ht_100004213"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004213: CMP R15D, 257 7"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000421a"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000421a: JAE 4294984913 6"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 28 ##
######################################
*)

htriple "ht_100004220"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004220: MOV ESI, R15D 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004223"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004223: MOV EDI, 1 5"
 Post  "RBX = R8_0 ; RDI = 1 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004228"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RDI = 1 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004228: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000422d"
 Separations "((RSP_0 -64 160),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 160),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 160),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 160),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000422d: MOV QWORD PTR [RBP - 152], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004234"
 Separations "((RSP_0 -64 152),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 152),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004234: MOV QWORD PTR [RBP - 144], RAX 7"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000423b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000423b: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000423e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000423e: JE 4294984859 6"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 29 ##
######################################
*)

htriple "ht_1000044d1"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044d1: LEA RDI, [RIP + 12209] 7"
 Post  "RBX = R8_0 ; RDI = 0x100007489 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044d8"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RDI = 0x100007489 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000044d8: JMP 4294984829 2"
 Post  "RBX = R8_0 ; RDI = 0x100007489 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0 ; [(RSP_0 -64 160),8] = [(RSP_0 -64 160),8]_0 ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 30 ##
######################################
*)

htriple "ht_100004244"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004244: MOV R14, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004247"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004247: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000424b"
 Separations ""
 Assertions  "((R12 +64 ((RCX *64 4) -64 4)),4) SEP (RSP_0,8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 8),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 16),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 24),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 32),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 40),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 48),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 56),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 64),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 72),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 88),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 96),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 104),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 112),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 120),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 128),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 136),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 144),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 152),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 160),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 168),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 176),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 180),4); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 184),4); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 192),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000424b: MOV EAX, DWORD PTR [R12 + RCX * 4 - 4] 5"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004250"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004250: INC EAX 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004252"
 Separations ""
 Assertions  "((R12 +64 ((RCX *64 4) -64 4)),4) SEP (RSP_0,8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 8),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 16),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 24),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 32),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 40),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 48),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 56),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 64),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 72),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 88),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 96),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 104),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 112),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 120),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 128),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 136),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 144),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 152),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 160),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 168),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 176),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 180),4); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 184),4); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 192),8); ((R12 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004252: MOV DWORD PTR [R12 + RCX * 4 - 4], EAX 5"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004257"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004257: TEST CL, CL 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004259"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004259: JE 4294984416 6"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 31 ##
######################################
*)

htriple "ht_10000425f"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000425f: XOR R13D, R13D 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = 0 ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004262"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 104),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = 0 ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004262: MOV QWORD PTR [RBP - 96], R12 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = 0 ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 32 ##
######################################
*)

htriple "ht_1000042e0"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042e0: MOV R15, R12 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042e3"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042e3: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 152),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 33 ##
######################################
*)

htriple "ht_100004276"
 Separations "((RSP_0 -64 176),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 176),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004276: MOV R15, QWORD PTR [RBP - 168] 7"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000427d"
 Separations "((RSP_0 -64 128),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 128),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000427d: MOV RBX, QWORD PTR [RBP - 120] 4"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004281"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004281: XOR R12D, R12D 3"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 34 ##
######################################
*)

htriple "ht_1000042b9"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042b9: MOV R15, R12 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 35 ##
######################################
*)

htriple "ht_100004295"
 Separations ""
 Assertions  "((R14 +64 R12),1) SEP (RSP_0,8); ((R14 +64 R12),1) SEP ((RSP_0 -64 8),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 16),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 24),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 32),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 40),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 48),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 56),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 64),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 72),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 88),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 96),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 104),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 112),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 120),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 128),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 136),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 144),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 152),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 160),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 168),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 176),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 180),4); ((R14 +64 R12),1) SEP ((RSP_0 -64 184),4); ((R14 +64 R12),1) SEP ((RSP_0 -64 192),8); ((R14 +64 R12),1) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004295: MOV BYTE PTR [R14 + R12], AL 4"
 Post  "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004299"
 Separations ""
 Assertions  "((R15 +64 (R13 *64 4)),4) SEP (RSP_0,8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 8),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 16),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 24),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 32),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 40),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 48),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 56),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 64),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 72),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 88),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 96),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 104),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 112),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 120),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 128),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 136),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 144),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 152),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 160),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 168),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 176),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 180),4); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 184),4); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 192),8); ((R15 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004299: MOV EAX, DWORD PTR [R15 + R13 * 4] 4"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000429d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000429d: INC R12 3"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042a0"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042a0: CMP R12D, EAX 3"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042a3"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042a3: JL 4294984324 2"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 36 ##
######################################
*)

htriple "ht_100004476"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004476: LEA RDI, [RIP + 12317] 7"
 Post  "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RDI = 0x10000749a ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 37 ##
######################################
*)

htriple "ht_100004284"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004284: MOV RDI, RBX 3"
 Post  "RBX = bot(fun__fdopen) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004287"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004287: ExternalCall fun__fgetc 5"
 Post  "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__fgetc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000428c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000428c: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000428f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000428f: JE 4294984822 6"
 Post  "RAX = bot(fun__fgetc) ; RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 38 ##
######################################
*)

htriple "ht_1000042a5"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042a5: ADD R14, R12 3"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042a8"
 Separations "((RSP_0 -64 152),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 152),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042a8: MOV QWORD PTR [RBP - 144], R14 7"
 Post  "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042af"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 64),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042af: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042b3"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 104),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042b3: MOV R12, QWORD PTR [RBP - 96] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042b7"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042b7: JMP 4294984380 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 39 ##
######################################
*)

htriple "ht_1000042bc"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042bc: TEST RBX, RBX 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042bf"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042bf: JE 4294984390 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 40 ##
######################################
*)

htriple "ht_1000042c1"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042c1: CDQE  2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042c3"
 Separations "(R8_0,8) SEP (bot(fun__calloc),1); (R8_0,8) SEP (bot(fun__calloc),4); (R8_0,8) SEP (bot(fun__calloc),8); (R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 56),8); (R8_0,8) SEP ((RSP_0 -64 64),8); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 73),1); (R8_0,8) SEP ((RSP_0 -64 77),1); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),4); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 104),8); (R8_0,8) SEP ((RSP_0 -64 112),8); (R8_0,8) SEP ((RSP_0 -64 120),8); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 136),8); (R8_0,8) SEP ((RSP_0 -64 144),8); (R8_0,8) SEP ((RSP_0 -64 152),8); (R8_0,8) SEP ((RSP_0 -64 160),8); (R8_0,8) SEP ((RSP_0 -64 168),8); (R8_0,8) SEP ((RSP_0 -64 176),8); (R8_0,8) SEP ((RSP_0 -64 180),4); (R8_0,8) SEP ((RSP_0 -64 184),4); (R8_0,8) SEP ((RSP_0 -64 192),8); (R8_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042c3: ADD QWORD PTR [RBX], RAX 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 41 ##
######################################
*)

htriple "ht_1000042c6"
 Separations "((RSP_0 -64 112),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 112),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042c6: CMP R13, QWORD PTR [RBP - 104] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042ca"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042ca: JE 4294984401 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 42 ##
######################################
*)

htriple "ht_1000042cc"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042cc: INC R13 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042cf"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042cf: JMP 4294984294 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 43 ##
######################################
*)

htriple "ht_1000042d1"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042d1: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042d5"
 Separations ""
 Assertions  "((R15 +64 ((RCX *64 4) -64 4)),4) SEP (RSP_0,8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 8),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 16),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 24),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 32),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 40),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 48),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 56),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 64),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 72),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 88),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 96),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 104),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 112),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 120),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 128),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 136),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 144),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 152),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 160),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 168),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 176),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 180),4); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 184),4); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 192),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042d5: MOV EAX, DWORD PTR [R15 + RCX * 4 - 4] 5"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042da"
 Separations "((RSP_0 -64 128),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 128),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042da: MOV R13, QWORD PTR [RBP - 120] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042de"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042de: JMP 4294984423 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 44 ##
######################################
*)

htriple "ht_100004266"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 72),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004266: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000426a"
 Separations ""
 Assertions  "((RAX +64 (R13 *64 8)),8) SEP (RSP_0,8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 8),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 16),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 24),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 32),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 40),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 48),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 56),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 64),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 72),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 88),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 96),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 104),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 112),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 120),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 128),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 136),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 144),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 152),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 160),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 168),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 176),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 180),4); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 184),4); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 192),8); ((RAX +64 (R13 *64 8)),8) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000426a: MOV QWORD PTR [RAX + R13 * 8], R14 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000426e"
 Separations ""
 Assertions  "((R12 +64 (R13 *64 4)),4) SEP (RSP_0,8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 8),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 16),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 24),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 32),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 40),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 48),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 56),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 64),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 72),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 88),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 96),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 104),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 112),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 120),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 128),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 136),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 144),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 152),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 160),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 168),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 176),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 180),4); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 184),4); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 192),8); ((R12 +64 (R13 *64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000426e: MOV EAX, DWORD PTR [R12 + R13 * 4] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004272"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004272: TEST EAX, EAX 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004274"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004274: JLE 4294984377 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 45 ##
######################################
*)

htriple "ht_1000042e7"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042e7: INC EAX 2"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042e9"
 Separations ""
 Assertions  "((R15 +64 ((RCX *64 4) -64 4)),4) SEP (RSP_0,8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 8),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 16),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 24),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 32),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 40),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 48),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 56),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 64),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 72),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 88),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 96),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 104),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 112),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 120),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 128),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 136),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 144),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 152),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 160),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 168),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 176),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 180),4); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 184),4); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 192),8); ((R15 +64 ((RCX *64 4) -64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042e9: MOV DWORD PTR [R15 + RCX * 4 - 4], EAX 5"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042ee"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042ee: LEA RDI, [RBP - 176] 7"
 Post  "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042f5"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042f5: XOR R12D, R12D 3"
 Post  "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042f8"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042f8: XOR ESI, ESI 2"
 Post  "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSI = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042fa"
 Separations ""
 Assertions  ""
 Pre   "RBX = R8_0 ; RDI = (RSP_0 -64 184) ; RSI = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042fa: ExternalCall fun_0x100004f39 5"
 Post  "RAX = bot(fun_0x100004f39) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun_0x100004f39 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000042ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004f39) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000042ff: MOV RDI, R13 3"
 Post  "RAX = bot(fun_0x100004f39) ; RBX = R8_0 ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004302"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100004f39) ; RBX = R8_0 ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004302: ExternalCall fun__fgetc 5"
 Post  "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun__fgetc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004307"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004307: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000430a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000430a: JE 4294984720 6"
 Post  "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 46 ##
######################################
*)

htriple "ht_100004310"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004310: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004313"
 Separations "((RSP_0 -64 168),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 168),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004313: MOV RAX, QWORD PTR [RBP - 160] 7"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000431a"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 72),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000431a: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000431e"
 Separations "((RSP_0 -64 176),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 176),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000431e: MOV RAX, QWORD PTR [RBP - 168] 7"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004325"
 Separations "((RSP_0 -64 112),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 112),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004325: MOV QWORD PTR [RBP - 104], RAX 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004329"
 Separations "((RSP_0 -64 144),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 144),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004329: MOV RAX, QWORD PTR [RBP - 136] 7"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004330"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 104),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004330: MOV QWORD PTR [RBP - 96], RAX 4"
 Post  "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004334"
 Separations "((RSP_0 -64 152),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 152),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 152),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004334: MOV RAX, QWORD PTR [RBP - 144] 7"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000433b"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000433b: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000433f"
 Separations "((RSP_0 -64 136),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 136),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000433f: MOV RAX, QWORD PTR [RBP - 128] 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004343"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 88),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004343: MOV QWORD PTR [RBP - 80], RAX 4"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004347"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 120),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004347: MOV RAX, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000434b"
 Separations "((RSP_0 -64 200),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 200),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 200),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 200),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "10000434b: MOV QWORD PTR [RBP - 192], RAX 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004352"
 Separations "((RSP_0 -64 180),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 180),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 180),4) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004352: MOV EAX, DWORD PTR [RBP - 172] 6"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004358"
 Separations "((RSP_0 -64 96),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),4) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004358: MOV DWORD PTR [RBP - 88], EAX 3"
 Post  "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000435b"
 Separations "((RSP_0 -64 128),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 128),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000435b: MOV RAX, QWORD PTR [RBP - 120] 4"
 Post  "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000435f"
 Separations "((RSP_0 -64 192),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 192),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 192),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 192),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000435f: MOV QWORD PTR [RBP - 184], RAX 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004366"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004366: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__fdopen) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004368"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004368: XOR R14D, R14D 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R14 = 0 ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 47 ##
######################################
*)

htriple "ht_100004410"
 Separations "((RSP_0 -64 136),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 136),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 136),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004410: MOV R14, QWORD PTR [RBP - 128] 4"
 Post  "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004414"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RBX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004414: XOR EBX, EBX 2"
 Post  "RAX = bot(fun__fgetc) ; RBX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R13 = bot(fun__fdopen) ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 48 ##
######################################
*)

htriple "ht_100004374"
 Separations "(R8_0,8) SEP (bot(fun__calloc),1); (R8_0,8) SEP (bot(fun__calloc),4); (R8_0,8) SEP (bot(fun__calloc),8); (R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 56),8); (R8_0,8) SEP ((RSP_0 -64 64),8); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 73),1); (R8_0,8) SEP ((RSP_0 -64 77),1); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),4); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 104),8); (R8_0,8) SEP ((RSP_0 -64 112),8); (R8_0,8) SEP ((RSP_0 -64 120),8); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 136),8); (R8_0,8) SEP ((RSP_0 -64 144),8); (R8_0,8) SEP ((RSP_0 -64 152),8); (R8_0,8) SEP ((RSP_0 -64 160),8); (R8_0,8) SEP ((RSP_0 -64 168),8); (R8_0,8) SEP ((RSP_0 -64 176),8); (R8_0,8) SEP ((RSP_0 -64 180),4); (R8_0,8) SEP ((RSP_0 -64 184),4); (R8_0,8) SEP ((RSP_0 -64 192),8); (R8_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004374: INC QWORD PTR [RAX] 3"
 Post  "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 49 ##
######################################
*)

htriple "ht_100004377"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004377: MOV R13D, 7 6"
 Post  "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R13 = 7 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 50 ##
######################################
*)

htriple "ht_10000439b"
 Separations "((RSP_0 -64 96),4) SEP (bot(fun__calloc),1); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),4) SEP (bot(fun__calloc),8); ((RSP_0 -64 96),4) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 96),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000439b: CMP R12D, DWORD PTR [RBP - 88] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000439f"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000439f: JGE 4294984836 6"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 51 ##
######################################
*)

htriple "ht_1000043aa"
 Separations "((RSP_0 -64 112),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 112),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 112),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043aa: MOV RDX, QWORD PTR [RBP - 104] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043ae"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043ae: CMP ECX, DWORD PTR [RDX + RAX * 4] 3"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043b1"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043b1: JG 4294984836 6"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 52 ##
######################################
*)

htriple "ht_1000043a5"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043a5: INC R12D 3"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043a8"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043a8: JMP 4294984678 2"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 53 ##
######################################
*)

htriple "ht_100004484"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004484: LEA RDI, [RIP + 12326] 7"
 Post  "RDX = bot(fun__calloc) ; RDI = 0x1000074b1 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000448b"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RDI = 0x1000074b1 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000448b: JMP 4294984829 2"
 Post  "RDX = bot(fun__calloc) ; RDI = 0x1000074b1 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 54 ##
######################################
*)

htriple "ht_1000043b7"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043b7: MOVSXD RCX, ECX 3"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043ba"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 104),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 104),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043ba: MOV RDX, QWORD PTR [RBP - 96] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043be"
 Separations ""
 Assertions  "((RDX +64 (RAX *64 8)),8) SEP (RSP_0,8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 56),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 72),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 96),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 104),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 112),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 120),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 128),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 136),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 144),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 152),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 160),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 168),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 176),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 180),4); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 184),4); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 192),8); ((RDX +64 (RAX *64 8)),8) SEP ((RSP_0 -64 200),8)"
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043be: ADD RCX, QWORD PTR [RDX + RAX * 8] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043c2"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 56),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 56),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043c2: CMP RCX, QWORD PTR [RBP - 48] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043c6"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043c6: JNE 4294984654 2"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 55 ##
######################################
*)

htriple "ht_1000043c8"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 88),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043c8: CMP RBX, QWORD PTR [RBP - 80] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043cc"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043cc: JE 4294984714 2"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 56 ##
######################################
*)

htriple "ht_1000043ce"
 Separations ""
 Assertions  "(RCX,1) SEP (RSP_0,8); (RCX,1) SEP ((RSP_0 -64 8),8); (RCX,1) SEP ((RSP_0 -64 16),8); (RCX,1) SEP ((RSP_0 -64 24),8); (RCX,1) SEP ((RSP_0 -64 32),8); (RCX,1) SEP ((RSP_0 -64 40),8); (RCX,1) SEP ((RSP_0 -64 48),8); (RCX,1) SEP ((RSP_0 -64 56),8); (RCX,1) SEP ((RSP_0 -64 64),8); (RCX,1) SEP ((RSP_0 -64 72),8); (RCX,1) SEP ((RSP_0 -64 88),8); (RCX,1) SEP ((RSP_0 -64 96),8); (RCX,1) SEP ((RSP_0 -64 104),8); (RCX,1) SEP ((RSP_0 -64 112),8); (RCX,1) SEP ((RSP_0 -64 120),8); (RCX,1) SEP ((RSP_0 -64 128),8); (RCX,1) SEP ((RSP_0 -64 136),8); (RCX,1) SEP ((RSP_0 -64 144),8); (RCX,1) SEP ((RSP_0 -64 152),8); (RCX,1) SEP ((RSP_0 -64 160),8); (RCX,1) SEP ((RSP_0 -64 168),8); (RCX,1) SEP ((RSP_0 -64 176),8); (RCX,1) SEP ((RSP_0 -64 180),4); (RCX,1) SEP ((RSP_0 -64 184),4); (RCX,1) SEP ((RSP_0 -64 192),8); (RCX,1) SEP ((RSP_0 -64 200),8)"
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043ce: MOVSX EDI, BYTE PTR [RCX] 3"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043d1"
 Separations "((RSP_0 -64 200),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 200),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 200),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 200),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043d1: MOV RSI, QWORD PTR [RBP - 192] 7"
 Post  "RDX = bot(fun__calloc) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043d8"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043d8: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043dd: INC RBX 3"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043e0: XOR R14D, R14D 3"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R14 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043e3: XOR R12D, R12D 3"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; R14 = 0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 57 ##
######################################
*)

htriple "ht_10000440a"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 88),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000440a: MOV R14, QWORD PTR [RBP - 80] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000440e"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000440e: JMP 4294984735 2"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 58 ##
######################################
*)

htriple "ht_1000043e6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043e6: ADD R13D, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043ea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043ea: JB 4294984573 2"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 59 ##
######################################
*)

htriple "ht_10000437d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000437d: MOV EAX, R15D 3"
 Post  "RAX = b32(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004380"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004380: MOV ECX, R13D 3"
 Post  "RAX = b32(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004383"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32(bot(fun__fgetc)) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004383: SHR EAX, CL 2"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004385"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004385: AND EAX, 1 3"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004388"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004388: LEA R14D, [RAX + R14 * 2] 4"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000438c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000438c: MOVSXD RAX, R12D 3"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000438f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000438f: MOV ECX, R14D 3"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004392"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 72),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 72),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004392: MOV RDX, QWORD PTR [RBP - 64] 4"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004396"
 Separations ""
 Assertions  "((RDX +64 (RAX *64 4)),4) SEP (RSP_0,8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 56),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 96),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 104),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 112),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 120),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 128),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 136),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 144),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 152),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 160),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 168),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 176),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 180),4); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 184),4); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 192),8); ((RDX +64 (RAX *64 4)),4) SEP ((RSP_0 -64 200),8)"
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004396: SUB ECX, DWORD PTR [RDX + RAX * 4] 3"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004399"
 Separations ""
 Assertions  ""
 Pre   "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004399: JGE 4294984618 2"
 Post  "RDX = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 60 ##
######################################
*)

htriple "ht_1000043ec"
 Separations "((RSP_0 -64 192),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 192),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 192),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 192),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043ec: MOV RDI, QWORD PTR [RBP - 184] 7"
 Post  "RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043f3"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043f3: ExternalCall fun__fgetc 5"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 FunctionConstraints "PRESERVES fun__fgetc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043f8: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043fb: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000043fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "1000043fe: JNE 4294984555 6"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 61 ##
######################################
*)

htriple "ht_10000436b"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 64),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 64),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000436b: MOV RAX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000436f"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "10000436f: TEST RAX, RAX 3"
 Post  "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004372"
 Separations ""
 Assertions  ""
 Pre   "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004372: JE 4294984567 2"
 Post  "RAX = R8_0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 62 ##
######################################
*)

htriple "ht_100004404"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 88),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 88),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004404: MOV R14, QWORD PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004408"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
 Instruction "100004408: JMP 4294984726 2"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__fgetc)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 104),8] = bot(fun__calloc) ; [(RSP_0 -64 112),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc) ; [(RSP_0 -64 192),8] = bot(fun__fdopen) ; [(RSP_0 -64 200),8] = bot(fun__fdopen)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 63 ##
######################################
*)

htriple "ht_100004416"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004416: CMP RBX, R14 3"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004419"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004419: JNE 4294984922 6"
 Post  "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 64 ##
######################################
*)

htriple "ht_10000441f"
 Separations "((RSP_0 -64 176),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 176),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 176),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000441f: MOV RDI, QWORD PTR [RBP - 168] 7"
 Post  "RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004426"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004426: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000442b"
 Separations "((RSP_0 -64 168),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 168),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 168),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000442b: MOV RDI, QWORD PTR [RBP - 160] 7"
 Post  "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004432"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004432: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004437"
 Separations "((RSP_0 -64 160),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 160),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 160),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 160),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004437: MOV RDI, QWORD PTR [RBP - 152] 7"
 Post  "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000443e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000443e: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004443"
 Separations "((RSP_0 -64 144),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 144),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 144),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004443: MOV RDI, QWORD PTR [RBP - 136] 7"
 Post  "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000444a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000444a: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000444f"
 Separations "((RSP_0 -64 128),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 128),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 128),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000444f: MOV RDI, QWORD PTR [RBP - 120] 4"
 Post  "RAX = bot(fun__free) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004453"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004453: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004458"
 Separations "((RSP_0 -64 120),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 120),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 120),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004458: MOV RDI, QWORD PTR [RBP - 112] 4"
 Post  "RAX = bot(fun__fclose) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000445c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000445c: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004461"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004461: MOV RAX, R14 3"
 Post  "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004464"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004464: ADD RSP, 152 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000446b"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 40),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 40),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 40),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000446b: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000446c"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 32),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 32),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 32),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000446c: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000446e"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 24),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 24),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 24),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "10000446e: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004470"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 16),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 16),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 16),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004470: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004472"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun__calloc),1); ((RSP_0 -64 8),8) SEP (bot(fun__calloc),4); ((RSP_0 -64 8),8) SEP (bot(fun__calloc),8); ((RSP_0 -64 8),8) SEP (R8_0,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004472: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004474"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004474: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004475"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "100004475: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 65 ##
######################################
*)

htriple "ht_1000044da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "1000044da: LEA RDI, [RIP + 12253] 7"
 Post  "RAX = bot(fun__fgetc) ; RDI = 0x1000074be ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetc) ; RDI = 0x1000074be ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
 Instruction "1000044e1: JMP 4294984829 2"
 Post  "RAX = bot(fun__fgetc) ; RDI = 0x1000074be ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 72),8] = bot(fun__calloc) ; [(RSP_0 -64 120),8] = bot(fun__fdopen) ; [(RSP_0 -64 128),8] = bot(fun__fdopen) ; [(RSP_0 -64 144),8] = bot(fun__calloc) ; [(RSP_0 -64 160),8] = bot(fun__calloc) ; [(RSP_0 -64 168),8] = bot(fun__calloc) ; [(RSP_0 -64 176),8] = bot(fun__calloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 66 ##
######################################
*)

htriple "ht_10000447d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0"
 Instruction "10000447d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000447f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0"
 Instruction "10000447f: ExternalCall fun_0x10000496b 5"
 Post  "RAX = bot(fun_0x10000496b) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0"
 FunctionConstraints "PRESERVES fun_0x10000496b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000403c, blockId == 67 ##
######################################
*)

htriple "ht_100004494"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004494: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004496"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "100004496: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 200) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = R8_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8];[(RSP_0 -64 112),8];[(RSP_0 -64 120),8];[(RSP_0 -64 128),8];[(RSP_0 -64 136),8];[(RSP_0 -64 144),8];[(RSP_0 -64 152),8];[(RSP_0 -64 160),8];[(RSP_0 -64 168),8];[(RSP_0 -64 176),8];[(RSP_0 -64 180),4];[(RSP_0 -64 184),4];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
