theory gzip_1000021c4
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000021c4, blockId == 0 ##
#####################################
*)

htriple "ht_1000021c4"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021c4: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021c5: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021c8"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021c8: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021ca"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021ca: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021cb"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021cb: SUB RSP, 208 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021d2: MOV R14D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021d5"
 Separations "(0x100008008,8) SEP (bot(fun____error),4); (0x100008008,8) SEP (RSI_0,8); (0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 8),8); (0x100008008,8) SEP ((RSI_0 +64 16),8); (0x100008008,8) SEP ((RSI_0 +64 24),8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 48),4); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 64),4); (0x100008008,8) SEP ((RSP_0 -64 64),8); (0x100008008,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021d5: MOV RAX, QWORD PTR [RIP + 24108] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021dc"
 Separations "([0x100008008,8]_0,8) SEP (bot(fun____error),4); ([0x100008008,8]_0,8) SEP (RSI_0,8); ([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 8),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 16),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021dc: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021df"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021df: MOV QWORD PTR [RBP - 24], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021e3: TEST RSI, RSI 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021e6"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021e6: JE 4294976009 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 1 ##
#####################################
*)

htriple "ht_1000021e8"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021e8: MOV RBX, RSI 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021eb"
 Separations "((RSI_0 +64 8),8) SEP (bot(fun____error),4); ((RSI_0 +64 8),8) SEP (RSP_0,8); ((RSI_0 +64 8),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 8),8) SEP (0x100008008,8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021eb: MOV RCX, QWORD PTR [RSI + 8] 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021ef: CMP RCX, 18446744073709551614 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021f3: JE 4294976024 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 2 ##
#####################################
*)

htriple "ht_100002209"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002209: XOR ESI, ESI 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 3 ##
#####################################
*)

htriple "ht_1000021f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021f5: CMP RCX, 18446744073709551615 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021f9: JNE 4294976044 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 4 ##
#####################################
*)

htriple "ht_100002218"
 Separations "((RSI_0 +64 24),8) SEP (bot(fun____error),4); ((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002218: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000221c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000221c: MOV SIL, 1 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000221f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000221f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002221"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002221: CMP RDI, 18446744073709551614 4"
 Post  "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002225"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002225: JNE 4294976063 2"
 Post  "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 5 ##
#####################################
*)

htriple "ht_1000021fb"
 Separations "((RSI_0 +64 24),8) SEP (bot(fun____error),4); ((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021fb: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000021ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "1000021ff: XOR ESI, ESI 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002201"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002201: CMP RDI, 18446744073709551615 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002205"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002205: JNE 4294976063 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 6 ##
#####################################
*)

htriple "ht_10000222c"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000222c: CMP RCX, 999999999 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002233"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002233: JA 4294976306 6"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 7 ##
#####################################
*)

htriple "ht_100002207"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002207: JMP 4294976011 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 8 ##
#####################################
*)

htriple "ht_10000223f"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000223f: LEA RAX, [RDI - 1000000000] 7"
 Post  "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002246"
 Separations ""
 Assertions  ""
 Pre   "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002246: CMP RAX, 18446744072709551613 6"
 Post  "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000224c"
 Separations ""
 Assertions  ""
 Pre   "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000224c: JBE 4294976306 6"
 Post  "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000021c4, blockId == 9 ##
#####################################
*)

htriple "ht_10000220b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000220b: MOV EDI, R14D 3"
 Post  "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000220e"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(RDI_0) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000220e: ExternalCall fun__futimes 5"
 Post  "RAX = bot(fun__futimes) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__futimes {RBX;RSP;RBP;R14;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 48),4];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002213"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__futimes) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002213: JMP 4294976322 5"
 Post  "RAX = bot(fun__futimes) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 10 ##
######################################
*)

htriple "ht_100002227"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002227: JMP 4294976322 5"
 Post  "RAX = 0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = overwrite(8,RSI_0,1) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 11 ##
######################################
*)

htriple "ht_100002342"
 Separations "(0x100008008,8) SEP (bot(fun____error),4); (0x100008008,8) SEP (RSI_0,8); (0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 8),8); (0x100008008,8) SEP ((RSI_0 +64 16),8); (0x100008008,8) SEP ((RSI_0 +64 24),8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 48),4); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 64),4); (0x100008008,8) SEP ((RSP_0 -64 64),8); (0x100008008,8) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002342: MOV RCX, QWORD PTR [RIP + 23743] 7"
 Post  "RCX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002349"
 Separations "([0x100008008,8]_0,8) SEP (bot(fun____error),4); ([0x100008008,8]_0,8) SEP (RSI_0,8); ([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 8),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 16),8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 72),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RCX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002349: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000234c"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000234c: CMP RCX, QWORD PTR [RBP - 24] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002350"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002350: JNE 4294976449 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 12 ##
######################################
*)

htriple "ht_100002239"
 Separations "((RSI_0 +64 24),8) SEP (bot(fun____error),4); ((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002239: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000223d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "10000223d: XOR ESI, ESI 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 13 ##
######################################
*)

htriple "ht_100002332"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002332: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R14;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 48),4];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002337"
 Separations "(bot(fun____error),4) SEP (RSI_0,8); (bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([0x100008008,8]_0,8); (bot(fun____error),4) SEP (0x100008008,8); (bot(fun____error),4) SEP ((RSI_0 +64 8),8); (bot(fun____error),4) SEP ((RSI_0 +64 16),8); (bot(fun____error),4) SEP ((RSI_0 +64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),4); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 56),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),4); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 72),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002337: MOV DWORD PTR [RAX], 22 6"
 Post  "RAX = bot(fun____error) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 14 ##
######################################
*)

htriple "ht_100002252"
 Separations "(RSI_0,8) SEP (bot(fun____error),4); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([0x100008008,8]_0,8); (RSI_0,8) SEP (0x100008008,8); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 48),4); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),4); (RSI_0,8) SEP ((RSP_0 -64 64),8); (RSI_0,8) SEP ((RSP_0 -64 72),8); (RSI_0,8) SEP ((RSP_0 -64 80),8); (RSI_0,8) SEP ((RSP_0 -64 88),8); (RSI_0,8) SEP ((RSP_0 -64 176),8); (RSI_0,8) SEP ((RSP_0 -64 184),8); (RSI_0,8) SEP ((RSP_0 -64 192),8); (RSI_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = ([(RSI_0 +64 24),8]_0 -64 0x3b9aca00) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002252: MOV RAX, QWORD PTR [RBX] 3"
 Post  "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002255"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x100008008,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0"
 Instruction "100002255: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002259"
 Separations ""
 Assertions  ""
 Pre   "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002259: MOVABS R8, 2361183241434822607 10"
 Post  "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002263"
 Separations ""
 Assertions  ""
 Pre   "RAX = [RSI_0,8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002263: MOV RAX, RCX 3"
 Post  "RAX = [(RSI_0 +64 8),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002266"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 8),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDX = RDX_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002266: IMUL R8 3"
 Post  "RAX = ([(RSI_0 +64 8),8]_0 *64 0x20c49ba5e353f7cf) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002269"
 Separations ""
 Assertions  ""
 Pre   "RAX = ([(RSI_0 +64 8),8]_0 *64 0x20c49ba5e353f7cf) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002269: MOV RAX, RDX 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000226c"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000226c: SHR RAX, 63 4"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002270"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002270: SHR RDX, 7 4"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002274"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002274: ADD EDX, EAX 2"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002276"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),4) SEP (0x100008008,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),4] = [(RSP_0 -64 64),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002276: MOV DWORD PTR [RBP - 56], EDX 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002279"
 Separations "((RSI_0 +64 16),8) SEP (bot(fun____error),4); ((RSI_0 +64 16),8) SEP (RSP_0,8); ((RSI_0 +64 16),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 16),8) SEP (0x100008008,8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 16),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002279: MOV RAX, QWORD PTR [RBX + 16] 4"
 Post  "RAX = [(RSI_0 +64 16),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000227d"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 16),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000227d: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [(RSI_0 +64 16),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002281"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 16),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002281: MOV RAX, RDI 3"
 Post  "RAX = [(RSI_0 +64 24),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002284"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RSI_0 +64 24),8]_0 ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002284: IMUL R8 3"
 Post  "RAX = ([(RSI_0 +64 24),8]_0 *64 0x20c49ba5e353f7cf) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002287"
 Separations ""
 Assertions  ""
 Pre   "RAX = ([(RSI_0 +64 24),8]_0 *64 0x20c49ba5e353f7cf) ; RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002287: MOV RAX, RDX 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000228a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000228a: SHR RAX, 63 4"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000228e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000228e: SHR RDX, 7 4"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002292"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002292: ADD EDX, EAX 2"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002294"
 Separations "((RSP_0 -64 48),4) SEP (bot(fun____error),4); ((RSP_0 -64 48),4) SEP (RSI_0,8); ((RSP_0 -64 48),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),4) SEP (0x100008008,8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 48),4] = [(RSP_0 -64 48),4]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002294: MOV DWORD PTR [RBP - 40], EDX 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002297"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "100002297: CMP RDI, 18446744073709551614 4"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000229b"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000229b: SETNE AL 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000229e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "10000229e: NOT SIL 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022a1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022a1: TEST SIL, AL 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022a4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022a4: JNE 4294976350 6"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 15 ##
######################################
*)

htriple "ht_1000022aa"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022aa: LEA RSI, [RBP - 224] 7"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022b1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = [(RSI_0 +64 24),8]_0 ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022b1: MOV EDI, R14D 3"
 Post  "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022b4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RCX = [(RSI_0 +64 8),8]_0 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R9 = R9_0 ; R8 = 0x20c49ba5e353f7cf ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSI_0 +64 8),8] = [(RSI_0 +64 8),8]_0 ; [(RSI_0 +64 16),8] = [(RSI_0 +64 16),8]_0 ; [(RSI_0 +64 24),8] = [(RSI_0 +64 24),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022b4: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R14;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 48),4];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022b9: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022bc: JE 4294976317 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 16 ##
######################################
*)

htriple "ht_10000235e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "10000235e: CMP RCX, 18446744073709551615 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002362"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "100002362: JE 4294976371 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 17 ##
######################################
*)

htriple "ht_1000022be"
 Separations "((RSI_0 +64 8),8) SEP (bot(fun____error),4); ((RSI_0 +64 8),8) SEP (RSP_0,8); ((RSI_0 +64 8),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 8),8) SEP (0x100008008,8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022be: MOV RCX, QWORD PTR [RBX + 8] 4"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022c2: CMP RCX, 18446744073709551614 4"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022c6: JNE 4294976244 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 18 ##
######################################
*)

htriple "ht_10000233d"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000233d: MOV EAX, 4294967295 5"
 Post  "RAX = 0xffffffff ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 19 ##
######################################
*)

htriple "ht_1000022c8"
 Separations "((RSP_0 -64 200),8) SEP (RSI_0,8); ((RSP_0 -64 200),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 200),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 200),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 200),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022c8: MOV RAX, QWORD PTR [RBP - 192] 7"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022cf"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x100008008,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0 ; [(RSP_0 -64 72),8] = [RSI_0,8]_0"
 Instruction "1000022cf: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022d3"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022d3: MOVABS RAX, 2361183241434822607 10"
 Post  "RAX = 0x20c49ba5e353f7cf ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022dd"
 Separations "((RSP_0 -64 192),8) SEP (RSI_0,8); ((RSP_0 -64 192),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 192),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 192),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 192),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = 0x20c49ba5e353f7cf ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022dd: IMUL QWORD PTR [RBP - 184] 7"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022e4"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022e4: MOV RAX, RDX 3"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022e7"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022e7: SHR RAX, 63 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022eb"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022eb: SHR RDX, 7 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022ef"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022ef: ADD EDX, EAX 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022f1"
 Separations "((RSP_0 -64 64),4) SEP (bot(fun____error),4); ((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),4) SEP (0x100008008,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022f1: MOV DWORD PTR [RBP - 56], EDX 3"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 20 ##
######################################
*)

htriple "ht_1000022f4"
 Separations "((RSI_0 +64 24),8) SEP (bot(fun____error),4); ((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022f4: MOV RDI, QWORD PTR [RBX + 24] 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022f8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022f8: CMP RDI, 18446744073709551614 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000022fc"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022fc: JNE 4294976350 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 21 ##
######################################
*)

htriple "ht_1000022fe"
 Separations "((RSP_0 -64 184),8) SEP (RSI_0,8); ((RSP_0 -64 184),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 184),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 184),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 184),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "1000022fe: MOV RAX, QWORD PTR [RBP - 176] 7"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002305"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "100002305: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002309"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002309: MOVABS RAX, 2361183241434822607 10"
 Post  "RAX = 0x20c49ba5e353f7cf ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002313"
 Separations "((RSP_0 -64 176),8) SEP (RSI_0,8); ((RSP_0 -64 176),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 176),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 176),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 176),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = 0x20c49ba5e353f7cf ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002313: IMUL QWORD PTR [RBP - 168] 7"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000231a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000231a: MOV RAX, RDX 3"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000231d"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000231d: SHR RAX, 63 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002321"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002321: SHR RDX, 7 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002325"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002325: ADD EDX, EAX 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002327"
 Separations "((RSP_0 -64 48),4) SEP (bot(fun____error),4); ((RSP_0 -64 48),4) SEP (RSI_0,8); ((RSP_0 -64 48),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),4) SEP (0x100008008,8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002327: MOV DWORD PTR [RBP - 40], EDX 3"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000232a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000232a: CMP RCX, 18446744073709551615 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000232e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000232e: JNE 4294976362 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 22 ##
######################################
*)

htriple "ht_100002330"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002330: JMP 4294976371 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 23 ##
######################################
*)

htriple "ht_10000236a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000236a: LEA RSI, [RBP - 64] 4"
 Post  "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000236e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000236e: JMP 4294976011 5"
 Post  "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 24 ##
######################################
*)

htriple "ht_100002352"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002352: ADD RSP, 208 7"
 Post  "RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002359"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002359: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000235a"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000235a: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000235c"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000235c: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000235d"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000235d: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R14 = R14_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 25 ##
######################################
*)

htriple "ht_1000023c1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023c1: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R14;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 48),4];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 26 ##
######################################
*)

htriple "ht_100002364"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "100002364: CMP RDI, 18446744073709551615 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002368"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
 Instruction "100002368: JE 4294976371 2"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),8] = [(RSI_0 +64 16),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 27 ##
######################################
*)

htriple "ht_100002373"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002373: LEA RDI, [RBP - 80] 4"
 Post  "RBX = RSI_0 ; RDI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002377"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RDI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002377: XOR ESI, ESI 2"
 Post  "RBX = RSI_0 ; RDI = (RSP_0 -64 88) ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002379"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RDI = (RSP_0 -64 88) ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002379: ExternalCall fun__gettimeofday 5"
 Post  "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__gettimeofday {RBX;RSP;RBP;R14;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 48),4];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000237e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000237e: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002381"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002381: JE 4294976317 2"
 Post  "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 28 ##
######################################
*)

htriple "ht_100002383"
 Separations "((RSI_0 +64 8),8) SEP (bot(fun____error),4); ((RSI_0 +64 8),8) SEP (RSP_0,8); ((RSI_0 +64 8),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 8),8) SEP (0x100008008,8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002383: CMP QWORD PTR [RBX + 8], 18446744073709551615 5"
 Post  "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002388"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002388: JNE 4294976410 2"
 Post  "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 29 ##
######################################
*)

htriple "ht_10000238a"
 Separations "((RSP_0 -64 88),8) SEP (RSI_0,8); ((RSP_0 -64 88),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__gettimeofday) ; RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000238a: MOV RAX, QWORD PTR [RBP - 80] 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000238e"
 Separations "((RSP_0 -64 80),8) SEP (RSI_0,8); ((RSP_0 -64 80),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000238e: MOV RCX, QWORD PTR [RBP - 72] 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002392"
 Separations "((RSP_0 -64 64),4) SEP (RSI_0,8); ((RSP_0 -64 64),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP (0x100008008,8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002392: MOV QWORD PTR [RBP - 56], RCX 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002396"
 Separations "((RSP_0 -64 72),8) SEP (bot(fun____error),4); ((RSP_0 -64 72),8) SEP (RSI_0,8); ((RSP_0 -64 72),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 72),8) SEP (0x100008008,8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 72),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100002396: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 30 ##
######################################
*)

htriple "ht_10000239a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000239a: LEA RSI, [RBP - 64] 4"
 Post  "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000239e"
 Separations "((RSI_0 +64 24),8) SEP (bot(fun____error),4); ((RSI_0 +64 24),8) SEP (RSP_0,8); ((RSI_0 +64 24),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 24),8) SEP (0x100008008,8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),4); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 72),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 88),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 176),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 184),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 192),8); ((RSI_0 +64 24),8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000239e: CMP QWORD PTR [RBX + 24], 18446744073709551615 5"
 Post  "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023a3"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023a3: JNE 4294976011 6"
 Post  "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000021c4, blockId == 31 ##
######################################
*)

htriple "ht_1000023a9"
 Separations ""
 Assertions  ""
 Pre   "RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023a9: LEA RAX, [RBP - 48] 4"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023ad"
 Separations "((RSP_0 -64 88),8) SEP (RSI_0,8); ((RSP_0 -64 88),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023ad: MOV RCX, QWORD PTR [RBP - 80] 4"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023b1"
 Separations "((RSP_0 -64 80),8) SEP (RSI_0,8); ((RSP_0 -64 80),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023b1: MOV RDX, QWORD PTR [RBP - 72] 4"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023b5"
 Separations "((RSP_0 -64 48),4) SEP (RSI_0,8); ((RSP_0 -64 48),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),4) SEP ((RSI_0 +64 24),8); ((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023b5: MOV QWORD PTR [RAX + 8], RDX 4"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023b9"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun____error),4); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 24),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023b9: MOV QWORD PTR [RAX], RCX 3"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000023bc: JMP 4294976011 5"
 Post  "RAX = (RSP_0 -64 56) ; RBX = RSI_0 ; RSI = (RSP_0 -64 72) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R14_0 ; [(RSP_0 -64 24),8] = RBX_0 ; [(RSP_0 -64 32),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
