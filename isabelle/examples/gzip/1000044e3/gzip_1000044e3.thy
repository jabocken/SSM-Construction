theory gzip_1000044e3
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000044e3, blockId == 0 ##
#####################################
*)

htriple "ht_1000044e3"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044e3: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044e4: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044e7"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044e7: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044e9"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044e9: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044eb"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044eb: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044ed"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044ed: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044ef"
 Separations "((RSP_0 -64 48),8) SEP (R8_0,8); ((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044ef: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044f0: SUB RSP, 2232 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044f7: MOV R14, RCX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000044fa"
 Separations "((RSP_0 -64 0x840),4) SEP (R8_0,8); ((RSP_0 -64 0x840),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x840),4) SEP (0x100008008,8); ((RSP_0 -64 0x840),4) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = [(RSP_0 -64 0x840),4]_0 ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000044fa: MOV DWORD PTR [RBP - 2104], ESI 6"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004500"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004500: MOV R12D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004503"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP (R8_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 0x83c),4); (0x100008008,8) SEP ((RSP_0 -64 0x840),4); (0x100008008,8) SEP ((RSP_0 -64 0x848),8); (0x100008008,8) SEP ((RSP_0 -64 0x850),8); (0x100008008,8) SEP ((RSP_0 -64 0x858),8); (0x100008008,8) SEP ((RSP_0 -64 0x860),8); (0x100008008,8) SEP ((RSP_0 -64 0x868),8); (0x100008008,8) SEP ((RSP_0 -64 0x870),8); (0x100008008,8) SEP ((RSP_0 -64 0x878),8); (0x100008008,8) SEP ((RSP_0 -64 0x880),8); (0x100008008,8) SEP ((RSP_0 -64 0x888),8); (0x100008008,8) SEP ((RSP_0 -64 0x890),8); (0x100008008,8) SEP ((RSP_0 -64 0x898),8); (0x100008008,8) SEP ((RSP_0 -64 0x8a0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8a8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8b0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8b8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8c0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8c8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8d0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8d8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8e0),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004503: MOV RAX, QWORD PTR [RIP + 15102] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000450a"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (R8_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x83c),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x840),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x848),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x850),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x858),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x860),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x868),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x870),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x878),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x880),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x888),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x890),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x898),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8a0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8a8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8b0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8b8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8c0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8c8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8d0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8d8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e0),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000450a: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000450d"
 Separations "((RSP_0 -64 56),8) SEP (R8_0,8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000450d: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004511"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004511: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004513"
 Separations "((RSP_0 -64 0x858),8) SEP (R8_0,8); ((RSP_0 -64 0x858),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x858),8) SEP (0x100008008,8); ((RSP_0 -64 0x858),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = [(RSP_0 -64 0x858),8]_0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004513: MOV QWORD PTR [RBP - 2128], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000451a"
 Separations "((RSP_0 -64 0x860),8) SEP (R8_0,8); ((RSP_0 -64 0x860),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x860),8) SEP (0x100008008,8); ((RSP_0 -64 0x860),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = [(RSP_0 -64 0x860),8]_0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000451a: MOV QWORD PTR [RBP - 2136], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004521"
 Separations "((RSP_0 -64 0x868),8) SEP (R8_0,8); ((RSP_0 -64 0x868),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x868),8) SEP (0x100008008,8); ((RSP_0 -64 0x868),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = [(RSP_0 -64 0x868),8]_0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004521: MOV QWORD PTR [RBP - 2144], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004528"
 Separations "((RSP_0 -64 0x870),8) SEP (R8_0,8); ((RSP_0 -64 0x870),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x870),8) SEP (0x100008008,8); ((RSP_0 -64 0x870),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = [(RSP_0 -64 0x870),8]_0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004528: MOV QWORD PTR [RBP - 2152], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000452f"
 Separations "((RSP_0 -64 0x878),8) SEP (R8_0,8); ((RSP_0 -64 0x878),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x878),8) SEP (0x100008008,8); ((RSP_0 -64 0x878),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = [(RSP_0 -64 0x878),8]_0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000452f: MOV QWORD PTR [RBP - 2160], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004536"
 Separations "((RSP_0 -64 0x880),8) SEP (R8_0,8); ((RSP_0 -64 0x880),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x880),8) SEP (0x100008008,8); ((RSP_0 -64 0x880),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = [(RSP_0 -64 0x880),8]_0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004536: MOV QWORD PTR [RBP - 2168], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000453d"
 Separations "((RSP_0 -64 0x888),8) SEP (R8_0,8); ((RSP_0 -64 0x888),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x888),8) SEP (0x100008008,8); ((RSP_0 -64 0x888),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = [(RSP_0 -64 0x888),8]_0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000453d: MOV QWORD PTR [RBP - 2176], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004544"
 Separations "((RSP_0 -64 0x890),8) SEP (R8_0,8); ((RSP_0 -64 0x890),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x890),8) SEP (0x100008008,8); ((RSP_0 -64 0x890),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = [(RSP_0 -64 0x890),8]_0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004544: MOV QWORD PTR [RBP - 2184], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000454b"
 Separations "((RSP_0 -64 0x898),8) SEP (R8_0,8); ((RSP_0 -64 0x898),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x898),8) SEP (0x100008008,8); ((RSP_0 -64 0x898),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = [(RSP_0 -64 0x898),8]_0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000454b: MOV QWORD PTR [RBP - 2192], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004552"
 Separations "((RSP_0 -64 0x8a0),8) SEP (R8_0,8); ((RSP_0 -64 0x8a0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8a0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8a0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = [(RSP_0 -64 0x8a0),8]_0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004552: MOV QWORD PTR [RBP - 2200], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004559"
 Separations "((RSP_0 -64 0x8a8),8) SEP (R8_0,8); ((RSP_0 -64 0x8a8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8a8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8a8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = [(RSP_0 -64 0x8a8),8]_0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004559: MOV QWORD PTR [RBP - 2208], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004560"
 Separations "((RSP_0 -64 0x8b0),8) SEP (R8_0,8); ((RSP_0 -64 0x8b0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = [(RSP_0 -64 0x8b0),8]_0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004560: MOV QWORD PTR [RBP - 2216], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004567"
 Separations "((RSP_0 -64 0x8b8),8) SEP (R8_0,8); ((RSP_0 -64 0x8b8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = [(RSP_0 -64 0x8b8),8]_0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004567: MOV QWORD PTR [RBP - 2224], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000456e"
 Separations "((RSP_0 -64 0x8c0),8) SEP (R8_0,8); ((RSP_0 -64 0x8c0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8c0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8c0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = [(RSP_0 -64 0x8c0),8]_0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000456e: MOV QWORD PTR [RBP - 2232], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004575"
 Separations "((RSP_0 -64 0x8c8),8) SEP (R8_0,8); ((RSP_0 -64 0x8c8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8c8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8c8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = [(RSP_0 -64 0x8c8),8]_0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004575: MOV QWORD PTR [RBP - 2240], RAX 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000457c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000457c: TEST R8, R8 3"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000457f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000457f: LEA RBX, [RBP - 2264] 7"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 0x8e0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004586"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 0x8e0) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004586: CMOVNE RBX, R8 4"
 Post  "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000458a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000458a: LEA RDI, [RBP - 1072] 7"
 Post  "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004591"
 Separations "((RSP_0 -64 0x8d8),8) SEP (R8_0,8); ((RSP_0 -64 0x8d8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = [(RSP_0 -64 0x8d8),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004591: MOV QWORD PTR [RBP - 2256], RDI 7"
 Post  "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004598"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "100004598: MOV R15D, 1024 6"
 Post  "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000459e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "10000459e: MOV ECX, 1024 5"
 Post  "RAX = 0 ; RCX = 1024 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 1024 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045a3: MOV RSI, RDX 3"
 Post  "RAX = 0 ; RCX = 1024 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RDX_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 1024 ; RDX = RDX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RDX_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045a6: MOV RDX, R14 3"
 Post  "RAX = 0 ; RCX = 1024 ; RDX = RCX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RDX_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 1024 ; RDX = RCX_0 ; RDI = (RSP_0 -64 1080) ; RSI = RDX_0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045a9: ExternalCall fun____memcpy_chk 5"
 Post  "RAX = bot(fun____memcpy_chk) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 FunctionConstraints "PRESERVES fun____memcpy_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045ae"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045ae: LEA RSI, [RBP + R14 - 1072] 8"
 Post  "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045b6: SUB R15, R14 3"
 Post  "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045b9"
 Separations "((RSP_0 -64 0x83c),4) SEP (R8_0,8); ((RSP_0 -64 0x83c),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x83c),4) SEP (0x100008008,8); ((RSP_0 -64 0x83c),4) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = [(RSP_0 -64 0x83c),4]_0 ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045b9: MOV DWORD PTR [RBP - 2100], R12D 7"
 Post  "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045c0: MOV EDI, R12D 3"
 Post  "RAX = bot(fun____memcpy_chk) ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045c3: MOV RDX, R15 3"
 Post  "RAX = bot(fun____memcpy_chk) ; RDX = (1024 -64 RCX_0) ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____memcpy_chk) ; RDX = (1024 -64 RCX_0) ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 (1080 -64 RCX_0)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045c6: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045cb"
 Separations "((RSP_0 -64 0x8d0),8) SEP (R8_0,8); ((RSP_0 -64 0x8d0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = [(RSP_0 -64 0x8d0),8]_0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045cb: MOV QWORD PTR [RBP - 2248], RAX 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045d2: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045d6: JE 4294985608 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 1 ##
#####################################
*)

htriple "ht_1000045dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045dc: ADD RAX, R14 3"
 Post  "RAX = (bot(fun__read) +64 RCX_0) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045df"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__read) +64 RCX_0) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045df: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045e6"
 Separations "((RSP_0 -64 0x8d0),8) SEP (R8_0,8); ((RSP_0 -64 0x8d0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
 Instruction "1000045e6: MOV QWORD PTR [RDI + 8], RAX 4"
 Post  "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = (bot(fun__read) +64 RCX_0) ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000045ed: MOV RSI, 18446744073709551615 7"
 Post  "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = (bot(fun__read) +64 RCX_0) ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045f4"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__read) +64 RCX_0) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = (bot(fun__read) +64 RCX_0) ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000045f4: MOV EDX, 10 5"
 Post  "RAX = (bot(fun__read) +64 RCX_0) ; RDX = 10 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = (bot(fun__read) +64 RCX_0) ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__read) +64 RCX_0) ; RDX = 10 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = (bot(fun__read) +64 RCX_0) ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000045f9: ExternalCall fun__lzma_stream_decoder 5"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 FunctionConstraints "PRESERVES fun__lzma_stream_decoder {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000045fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000045fe: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004600"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004600: JNE 4294985688 6"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 2 ##
#####################################
*)

htriple "ht_100004788"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004788: LEA RDI, [RIP + 11581] 7"
 Post  "RAX = bot(fun__read) ; RDI = 0x1000074cc ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 3 ##
#####################################
*)

htriple "ht_100004606"
 Separations "((RSP_0 -64 0x850),8) SEP (R8_0,8); ((RSP_0 -64 0x850),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x850),8) SEP (0x100008008,8); ((RSP_0 -64 0x850),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004606: MOV QWORD PTR [RBP - 2120], RBX 7"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000460d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000460d: XOR R13D, R13D 3"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004610"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004610: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004617"
 Separations "((RSP_0 -64 0x8b8),8) SEP (R8_0,8); ((RSP_0 -64 0x8b8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004617: MOV QWORD PTR [RDI + 32], R13 4"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000461b"
 Separations "((RSP_0 -64 0x8c0),8) SEP (R8_0,8); ((RSP_0 -64 0x8c0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8c0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8c0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000461b: MOV QWORD PTR [RDI + 24], R13 4"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000461f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000461f: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004621"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004621: ExternalCall fun__lzma_code 5"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 FunctionConstraints "PRESERVES fun__lzma_code {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004626"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004626: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004628"
 Separations "((RSP_0 -64 0x83c),4) SEP (R8_0,8); ((RSP_0 -64 0x83c),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x83c),4) SEP (0x100008008,8); ((RSP_0 -64 0x83c),4) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004628: MOV R15D, DWORD PTR [RBP - 2100] 7"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000462f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000462f: JNE 4294985697 6"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 4 ##
#####################################
*)

htriple "ht_1000047d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000047d8: LEA RDI, [RIP + 11513] 7"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = 0x1000074d8 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_stream_decoder) ; RDI = 0x1000074d8 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000047df: JMP 4294985704 2"
 Post  "RAX = bot(fun__lzma_stream_decoder) ; RDI = 0x1000074d8 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = (1024 -64 RCX_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x850),8] = [(RSP_0 -64 0x850),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 5 ##
#####################################
*)

htriple "ht_100004635"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004635: LEA RAX, [RBP - 2096] 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000463c"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000463c: LEA R14, [RBP - 2256] 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004643"
 Separations "((RSP_0 -64 0x8c0),8) SEP (R8_0,8); ((RSP_0 -64 0x8c0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8c0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8c0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004643: MOV QWORD PTR [R14 + 24], RAX 4"
 Post  "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004647"
 Separations "((RSP_0 -64 0x8b8),8) SEP (R8_0,8); ((RSP_0 -64 0x8b8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004647: MOV QWORD PTR [R14 + 32], 1024 8"
 Post  "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000464f"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000464f: XOR EBX, EBX 2"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 6 ##
#####################################
*)

htriple "ht_1000047e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000047e1: LEA RDI, [RIP + 11534] 7"
 Post  "RAX = bot(fun__lzma_code) ; RDI = 0x1000074f6 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = RCX_0 ; R13 = 0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 7 ##
#####################################
*)

htriple "ht_100004665"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004665: LEA RSI, [RBP - 1072] 7"
 Post  "RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000466c"
 Separations "((RSP_0 -64 0x8d8),8) SEP (R8_0,8); ((RSP_0 -64 0x8d8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000466c: MOV QWORD PTR [RBP - 2256], RSI 7"
 Post  "RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004673"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004673: MOV EDX, 1024 5"
 Post  "RDX = 1024 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004678"
 Separations ""
 Assertions  ""
 Pre   "RDX = 1024 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004678: MOV EDI, R15D 3"
 Post  "RDX = 1024 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000467b"
 Separations ""
 Assertions  ""
 Pre   "RDX = 1024 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000467b: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004680"
 Separations "((RSP_0 -64 0x8d0),8) SEP (R8_0,8); ((RSP_0 -64 0x8d0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004680: MOV QWORD PTR [RBP - 2248], RAX 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004687"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004687: MOV R13D, 3 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000468d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000468d: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004690"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004690: JE 4294985385 2"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 8 ##
#####################################
*)

htriple "ht_1000046a6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046a6: MOV R13D, EBX 3"
 Post  "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000044e3, blockId == 9 ##
#####################################
*)

htriple "ht_100004692"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004692: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004696"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "100004696: JE 4294985608 6"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 10 ##
######################################
*)

htriple "ht_1000046a9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046a9: MOV RDI, R14 3"
 Post  "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046ac"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046ac: MOV ESI, R13D 3"
 Post  "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046af"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046af: ExternalCall fun__lzma_code 5"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun__lzma_code {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046b4: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046b7"
 Separations "((RSP_0 -64 0x8b8),8) SEP (R8_0,8); ((RSP_0 -64 0x8b8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_code) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046b7: MOV RAX, QWORD PTR [RBP - 2224] 7"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046be"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046be: TEST R12D, R12D 3"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046c1: JNE 4294985419 2"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 11 ##
######################################
*)

htriple "ht_10000469c"
 Separations "((RSP_0 -64 0x850),8) SEP (R8_0,8); ((RSP_0 -64 0x850),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x850),8) SEP (0x100008008,8); ((RSP_0 -64 0x850),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "10000469c: MOV RCX, QWORD PTR [RBP - 2120] 7"
 Post  "RAX = bot(fun__read) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = 3 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)






(*
######################################
## Entry = 1000044e3, blockId == 12 ##
######################################
*)

htriple "ht_1000046c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046c3: MOV EBX, R13D 3"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046c6: TEST RAX, RAX 3"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046c9: JNE 4294985307 2"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 13 ##
######################################
*)

htriple "ht_1000046cb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046cb: MOV R15D, 1024 6"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 1024 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046d1: SUB R15, RAX 3"
 Post  "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046d4"
 Separations "((RSP_0 -64 0x840),4) SEP (R8_0,8); ((RSP_0 -64 0x840),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x840),4) SEP (0x100008008,8); ((RSP_0 -64 0x840),4) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 1024 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046d4: MOV EDI, DWORD PTR [RBP - 2104] 6"
 Post  "RAX = 1024 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046da"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046da: LEA RSI, [RBP - 2096] 7"
 Post  "RAX = 1024 ; RDI = b32(RSI_0) ; RSI = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RDI = b32(RSI_0) ; RSI = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046e1: MOV RDX, R15 3"
 Post  "RAX = 1024 ; RDX = 0 ; RDI = b32(RSI_0) ; RSI = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1024 ; RDX = 0 ; RDI = b32(RSI_0) ; RSI = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046e4: ExternalCall fun__write 5"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun__write {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046e9: CMP RAX, R15 3"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046ec: JNE 4294985622 6"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 14 ##
######################################
*)

htriple "ht_10000465b"
 Separations "((RSP_0 -64 0x8d0),8) SEP (R8_0,8); ((RSP_0 -64 0x8d0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000465b: CMP QWORD PTR [RBP - 2248], 0 8"
 Post  "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004663"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004663: JNE 4294985382 2"
 Post  "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 15 ##
######################################
*)

htriple "ht_1000046f2"
 Separations "((RSP_0 -64 0x848),8) SEP (R8_0,8); ((RSP_0 -64 0x848),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x848),8) SEP (0x100008008,8); ((RSP_0 -64 0x848),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046f2: MOV RBX, QWORD PTR [RBP - 2112] 7"
 Post  "RAX = bot(fun__write) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046f9: ADD RBX, R15 3"
 Post  "RAX = bot(fun__write) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000046fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000046fc: LEA RAX, [RBP - 2096] 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004703"
 Separations "((RSP_0 -64 0x8c0),8) SEP (R8_0,8); ((RSP_0 -64 0x8c0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8c0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8c0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004703: MOV QWORD PTR [RBP - 2232], RAX 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000470a"
 Separations "((RSP_0 -64 0x8b8),8) SEP (R8_0,8); ((RSP_0 -64 0x8b8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8b8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8b8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000470a: MOV QWORD PTR [RBP - 2224], 1024 11"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004715"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004715: TEST R12D, R12D 3"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004718"
 Separations "((RSP_0 -64 0x83c),4) SEP (R8_0,8); ((RSP_0 -64 0x83c),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x83c),4) SEP (0x100008008,8); ((RSP_0 -64 0x83c),4) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004718: MOV R15D, DWORD PTR [RBP - 2100] 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000471f"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000471f: JE 4294985297 6"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 16 ##
######################################
*)

htriple "ht_100004796"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004796: LEA RDI, [RIP + 11633] 7"
 Post  "RAX = bot(fun__write) ; RDI = 0x10000750e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000479d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RDI = 0x10000750e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000479d: JMP 4294985615 2"
 Post  "RAX = bot(fun__write) ; RDI = 0x10000750e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 17 ##
######################################
*)

htriple "ht_100004651"
 Separations "((RSP_0 -64 0x848),8) SEP (R8_0,8); ((RSP_0 -64 0x848),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x848),8) SEP (0x100008008,8); ((RSP_0 -64 0x848),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004651: MOV QWORD PTR [RBP - 2112], RBX 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004658"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004658: MOV EBX, R13D 3"
 Post  "RAX = (RSP_0 -64 0x838) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 18 ##
######################################
*)

htriple "ht_100004725"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004725: CMP R12D, 1 4"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004729"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004729: JNE 4294985631 2"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 19 ##
######################################
*)

htriple "ht_10000472b"
 Separations "((RSP_0 -64 0x8d0),8) SEP (R8_0,8); ((RSP_0 -64 0x8d0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8d0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8d0),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000472b: CMP QWORD PTR [RBP - 2248], 0 8"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004733"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004733: JNE 4294985679 6"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 20 ##
######################################
*)

htriple "ht_10000479f"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000479f: LEA EAX, [R12 - 5] 5"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047a4: CMP EAX, 5 3"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047a7: JA 4294985708 2"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 21 ##
######################################
*)

htriple "ht_100004739"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004739: LEA RSI, [RBP - 1072] 7"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004740"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004740: MOV EDX, 1 5"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RDX = 1 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004745"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RDX = 1 ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004745: MOV EDI, R15D 3"
 Post  "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RDX = 1 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004748"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 0x838) ; RBX = 0 ; RDX = 1 ; RDI = b32(RDI_0) ; RSI = (RSP_0 -64 1080) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004748: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000474d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000474d: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004750"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004750: JNE 4294985679 2"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 22 ##
######################################
*)

htriple "ht_1000047cf"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047cf: LEA RSI, [RIP + 11648] 7"
 Post  "RBX = 0 ; RSI = 0x100007556 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047d6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSI = 0x100007556 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047d6: JMP 4294985750 2"
 Post  "RBX = 0 ; RSI = 0x100007556 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 23 ##
######################################
*)

htriple "ht_100004752"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004752: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__read) ; RBX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004759"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004759: ExternalCall fun__lzma_end 5"
 Post  "RAX = bot(fun__lzma_end) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun__lzma_end {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000475e"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP (R8_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 0x83c),4); (0x100008008,8) SEP ((RSP_0 -64 0x840),4); (0x100008008,8) SEP ((RSP_0 -64 0x848),8); (0x100008008,8) SEP ((RSP_0 -64 0x850),8); (0x100008008,8) SEP ((RSP_0 -64 0x858),8); (0x100008008,8) SEP ((RSP_0 -64 0x860),8); (0x100008008,8) SEP ((RSP_0 -64 0x868),8); (0x100008008,8) SEP ((RSP_0 -64 0x870),8); (0x100008008,8) SEP ((RSP_0 -64 0x878),8); (0x100008008,8) SEP ((RSP_0 -64 0x880),8); (0x100008008,8) SEP ((RSP_0 -64 0x888),8); (0x100008008,8) SEP ((RSP_0 -64 0x890),8); (0x100008008,8) SEP ((RSP_0 -64 0x898),8); (0x100008008,8) SEP ((RSP_0 -64 0x8a0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8a8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8b0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8b8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8c0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8c8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8d0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8d8),8); (0x100008008,8) SEP ((RSP_0 -64 0x8e0),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__lzma_end) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000475e: MOV RAX, QWORD PTR [RIP + 14499] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004765"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP (R8_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x83c),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x840),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x848),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x850),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x858),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x860),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x868),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x870),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x878),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x880),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x888),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x890),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x898),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8a0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8a8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8b0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8b8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8c0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8c8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8d0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8d8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e0),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004765: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004768"
 Separations "((RSP_0 -64 56),8) SEP (R8_0,8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004768: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000476c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000476c: JNE 4294985603 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 24 ##
######################################
*)

htriple "ht_10000476e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000476e: MOV RAX, RBX 3"
 Post  "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004771"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004771: ADD RSP, 2232 7"
 Post  "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004778"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004778: POP RBX 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004779"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004779: POP R12 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000477b"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000477b: POP R13 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000477d"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000477d: POP R14 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000477f"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000477f: POP R15 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004781"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004781: POP RBP 1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004782"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004782: RET  1"
 Post  "RAX = 0 ; RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 25 ##
######################################
*)

htriple "ht_100004783"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004783: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 26 ##
######################################
*)

htriple "ht_10000478f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000478f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004791"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004791: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 27 ##
######################################
*)

htriple "ht_1000047a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047a9: LEA RSI, [RIP + 11627] 7"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047b0: LEA RCX, [RIP + 109] 7"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047b7"
 Separations "((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP (RSP_0,8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP (R8_0,8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ([0x100008008,8]_0,8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP (0x100008008,8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x83c),4); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x840),4); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x848),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x850),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x858),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x860),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x868),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x870),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x878),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x880),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x888),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x890),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x898),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8a0),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8a8),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8b0),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8b8),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8c0),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8c8),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8d0),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8d8),8); ((0x100004824 +64 ((b32(bot(fun__lzma_code)) -32 5) *64 4)),4) SEP ((RSP_0 -64 0x8e0),8)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047b7: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047bb"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047bb: ADD RAX, RCX 3"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047be"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047be: JMP RAX 2"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 28 ##
######################################
*)

htriple "ht_1000047ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047ec: LEA RDI, [RIP + 11680] 7"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RDI = 0x100007593 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RDI = 0x100007593 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047f3: MOV ESI, R12D 3"
 Post  "RAX = (b32(bot(fun__lzma_code)) -32 5) ; RBX = 0 ; RDI = 0x100007593 ; RSI = b32(bot(fun__lzma_code)) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 29 ##
######################################
*)

htriple "ht_1000047c0"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047c0: MOV EDI, 12 5"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RDI = 12 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047c5"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RDI = 12 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047c5: ExternalCall fun__strerror 5"
 Post  "RAX = bot(fun__strerror) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun__strerror {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047ca: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__strerror) ; RBX = 0 ; RSI = bot(fun__strerror) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strerror) ; RBX = 0 ; RSI = bot(fun__strerror) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047cd: JMP 4294985750 2"
 Post  "RAX = bot(fun__strerror) ; RBX = 0 ; RSI = bot(fun__strerror) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 30 ##
######################################
*)

htriple "ht_1000047fd"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047fd: LEA RSI, [RIP + 11642] 7"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000757e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100004804"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000757e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004804: JMP 4294985750 2"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000757e ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 31 ##
######################################
*)

htriple "ht_100004806"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x10000751b ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004806: LEA RSI, [RIP + 11561] 7"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x100007536 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000480d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x100007536 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000480d: JMP 4294985750 2"
 Post  "RBX = 0 ; RCX = 0x100004824 ; RSI = 0x100007536 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 32 ##
######################################
*)

htriple "ht_100004816"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "100004816: LEA RDI, [RIP + 11657] 7"
 Post  "RBX = 0 ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000481d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0 ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000481d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0 ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000481f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "10000481f: ExternalCall fun_0x10000496b 5"
 Post  "RAX = bot(fun_0x10000496b) ; RBX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = (RSP_0 -64 0x8d8) ; R12 = b32(bot(fun__lzma_code)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = 0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 1024 ; [(RSP_0 -64 0x8c0),8] = (RSP_0 -64 0x838) ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = bot(fun__read) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun_0x10000496b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 33 ##
######################################
*)

htriple "ht_1000047e8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000047e8: MOV ESI, EAX 2"
 Post  "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047ea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
 Instruction "1000047ea: JMP 4294985718 2"
 Post  "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R12 = b32(RDI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x848),8] = [(RSP_0 -64 0x848),8]_0 ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8b8),8] = 0 ; [(RSP_0 -64 0x8c0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d0),8] = (bot(fun__read) +64 RCX_0) ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080) ; [(RSP_0 -64 0x8e0),8] = (bot(fun__read) +64 RCX_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000044e3, blockId == 34 ##
######################################
*)

htriple "ht_1000047f6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047f6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000047f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 Instruction "1000047f8: ExternalCall fun_0x10000496b 5"
 Post  "RAX = bot(fun_0x10000496b) ; RSP = (RSP_0 -64 0x8e8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x83c),4] = b32(RDI_0) ; [(RSP_0 -64 0x840),4] = b32(RSI_0) ; [(RSP_0 -64 0x858),8] = 0 ; [(RSP_0 -64 0x860),8] = 0 ; [(RSP_0 -64 0x868),8] = 0 ; [(RSP_0 -64 0x870),8] = 0 ; [(RSP_0 -64 0x878),8] = 0 ; [(RSP_0 -64 0x880),8] = 0 ; [(RSP_0 -64 0x888),8] = 0 ; [(RSP_0 -64 0x890),8] = 0 ; [(RSP_0 -64 0x898),8] = 0 ; [(RSP_0 -64 0x8a0),8] = 0 ; [(RSP_0 -64 0x8a8),8] = 0 ; [(RSP_0 -64 0x8b0),8] = 0 ; [(RSP_0 -64 0x8c8),8] = 0 ; [(RSP_0 -64 0x8d8),8] = (RSP_0 -64 1080)"
 FunctionConstraints "PRESERVES fun_0x10000496b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 0x83c),4];[(RSP_0 -64 0x840),4];[(RSP_0 -64 0x848),8];[(RSP_0 -64 0x850),8];[(RSP_0 -64 0x858),8];[(RSP_0 -64 0x860),8];[(RSP_0 -64 0x868),8];[(RSP_0 -64 0x870),8];[(RSP_0 -64 0x878),8];[(RSP_0 -64 0x880),8];[(RSP_0 -64 0x888),8];[(RSP_0 -64 0x890),8];[(RSP_0 -64 0x898),8];[(RSP_0 -64 0x8a0),8];[(RSP_0 -64 0x8a8),8];[(RSP_0 -64 0x8b0),8];[(RSP_0 -64 0x8b8),8];[(RSP_0 -64 0x8c0),8];[(RSP_0 -64 0x8c8),8];[(RSP_0 -64 0x8d0),8];[(RSP_0 -64 0x8d8),8];[(RSP_0 -64 0x8e0),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
