theory gzip_100003bd4
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100003bd4, blockId == 0 ##
#####################################
*)

htriple "ht_100003bd4"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP (0x100008700,8); ((RSP_0 -64 8),8) SEP (0x100008708,8); ((RSP_0 -64 8),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bd4: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bd5: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bd8"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP (0x100008700,8); ((RSP_0 -64 16),8) SEP (0x100008708,8); ((RSP_0 -64 16),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bd8: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bda"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP (0x100008700,8); ((RSP_0 -64 24),8) SEP (0x100008708,8); ((RSP_0 -64 24),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bda: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bdc"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP (0x100008700,8); ((RSP_0 -64 32),8) SEP (0x100008708,8); ((RSP_0 -64 32),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bdc: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bde"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP (0x100008700,8); ((RSP_0 -64 40),8) SEP (0x100008708,8); ((RSP_0 -64 40),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bde: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003be0"
 Separations "((RSP_0 -64 48),8) SEP (R8_0,8); ((RSP_0 -64 48),8) SEP (0x100008700,8); ((RSP_0 -64 48),8) SEP (0x100008708,8); ((RSP_0 -64 48),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003be0: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003be1"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003be1: SUB RSP, 104 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003be5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003be5: MOV R12, R8 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003be8"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003be8: MOV R13, RCX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003beb"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003beb: MOV R14, RDX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bee"
 Separations "((RSP_0 -64 56),4) SEP (R8_0,8); ((RSP_0 -64 56),4) SEP (0x100008700,8); ((RSP_0 -64 56),4) SEP (0x100008708,8); ((RSP_0 -64 56),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bee: MOV DWORD PTR [RBP - 48], ESI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf1"
 Separations "((RSP_0 -64 60),4) SEP (R8_0,8); ((RSP_0 -64 60),4) SEP (0x100008700,8); ((RSP_0 -64 60),4) SEP (0x100008708,8); ((RSP_0 -64 60),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = [(RSP_0 -64 60),4]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bf1: MOV DWORD PTR [RBP - 52], EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bf4"
 Separations "(0x100008700,8) SEP (RSP_0,8); (0x100008700,8) SEP (R8_0,8); (0x100008700,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008700,8) SEP ((RSP_0 -64 8),8); (0x100008700,8) SEP ((RSP_0 -64 16),8); (0x100008700,8) SEP ((RSP_0 -64 24),8); (0x100008700,8) SEP ((RSP_0 -64 32),8); (0x100008700,8) SEP ((RSP_0 -64 40),8); (0x100008700,8) SEP ((RSP_0 -64 48),8); (0x100008700,8) SEP ((RSP_0 -64 52),4); (0x100008700,8) SEP ((RSP_0 -64 56),4); (0x100008700,8) SEP ((RSP_0 -64 60),4); (0x100008700,8) SEP ((RSP_0 -64 72),8); (0x100008700,8) SEP ((RSP_0 -64 80),8); (0x100008700,8) SEP ((RSP_0 -64 88),8); (0x100008700,8) SEP ((RSP_0 -64 96),8); (0x100008700,8) SEP ((RSP_0 -64 120),4); (0x100008700,8) SEP ((RSP_0 -64 128),8); (0x100008700,8) SEP ((RSP_0 -64 144),4); (0x100008700,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bf4: MOV RBX, QWORD PTR [RIP + 19205] 7"
 Post  "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bfb"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bfb: TEST RBX, RBX 3"
 Post  "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003bfe"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003bfe: JNE 4294982676 2"
 Post  "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 1 ##
#####################################
*)

htriple "ht_100003c00"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c00: MOV EDI, 65536 5"
 Post  "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c05"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [0x100008700,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = [R8_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c05: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = [0x100008700,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c0a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = [0x100008700,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c0a: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c0d"
 Separations "(0x100008700,8) SEP (RSP_0,8); (0x100008700,8) SEP (R8_0,8); (0x100008700,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008700,8) SEP ((RSP_0 -64 8),8); (0x100008700,8) SEP ((RSP_0 -64 16),8); (0x100008700,8) SEP ((RSP_0 -64 24),8); (0x100008700,8) SEP ((RSP_0 -64 32),8); (0x100008700,8) SEP ((RSP_0 -64 40),8); (0x100008700,8) SEP ((RSP_0 -64 48),8); (0x100008700,8) SEP ((RSP_0 -64 52),4); (0x100008700,8) SEP ((RSP_0 -64 56),4); (0x100008700,8) SEP ((RSP_0 -64 60),4); (0x100008700,8) SEP ((RSP_0 -64 72),8); (0x100008700,8) SEP ((RSP_0 -64 80),8); (0x100008700,8) SEP ((RSP_0 -64 88),8); (0x100008700,8) SEP ((RSP_0 -64 96),8); (0x100008700,8) SEP ((RSP_0 -64 120),4); (0x100008700,8) SEP ((RSP_0 -64 128),8); (0x100008700,8) SEP ((RSP_0 -64 144),4); (0x100008700,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008700,8] = [0x100008700,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c0d: MOV QWORD PTR [RIP + 19180], RAX 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008700,8] = bot(fun__malloc) ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 2 ##
#####################################
*)

htriple "ht_100003c14"
 Separations "(0x100008708,8) SEP (RSP_0,8); (0x100008708,8) SEP (R8_0,8); (0x100008708,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008708,8) SEP ((RSP_0 -64 8),8); (0x100008708,8) SEP ((RSP_0 -64 16),8); (0x100008708,8) SEP ((RSP_0 -64 24),8); (0x100008708,8) SEP ((RSP_0 -64 32),8); (0x100008708,8) SEP ((RSP_0 -64 40),8); (0x100008708,8) SEP ((RSP_0 -64 48),8); (0x100008708,8) SEP ((RSP_0 -64 52),4); (0x100008708,8) SEP ((RSP_0 -64 56),4); (0x100008708,8) SEP ((RSP_0 -64 60),4); (0x100008708,8) SEP ((RSP_0 -64 72),8); (0x100008708,8) SEP ((RSP_0 -64 80),8); (0x100008708,8) SEP ((RSP_0 -64 88),8); (0x100008708,8) SEP ((RSP_0 -64 96),8); (0x100008708,8) SEP ((RSP_0 -64 120),4); (0x100008708,8) SEP ((RSP_0 -64 128),8); (0x100008708,8) SEP ((RSP_0 -64 144),4); (0x100008708,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c14: MOV RAX, QWORD PTR [RIP + 19181] 7"
 Post  "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c1b"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c1b: TEST RAX, RAX 3"
 Post  "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c1e: JNE 4294982705 2"
 Post  "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 3 ##
#####################################
*)

htriple "ht_100003c20"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008708,8]_0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c20: MOV EDI, 65536 5"
 Post  "RAX = [0x100008708,8]_0 ; RDI = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c25"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008708,8]_0 ; RDI = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c25: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c2a"
 Separations "(0x100008708,8) SEP (RSP_0,8); (0x100008708,8) SEP (R8_0,8); (0x100008708,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008708,8) SEP ((RSP_0 -64 8),8); (0x100008708,8) SEP ((RSP_0 -64 16),8); (0x100008708,8) SEP ((RSP_0 -64 24),8); (0x100008708,8) SEP ((RSP_0 -64 32),8); (0x100008708,8) SEP ((RSP_0 -64 40),8); (0x100008708,8) SEP ((RSP_0 -64 48),8); (0x100008708,8) SEP ((RSP_0 -64 52),4); (0x100008708,8) SEP ((RSP_0 -64 56),4); (0x100008708,8) SEP ((RSP_0 -64 60),4); (0x100008708,8) SEP ((RSP_0 -64 72),8); (0x100008708,8) SEP ((RSP_0 -64 80),8); (0x100008708,8) SEP ((RSP_0 -64 88),8); (0x100008708,8) SEP ((RSP_0 -64 96),8); (0x100008708,8) SEP ((RSP_0 -64 120),4); (0x100008708,8) SEP ((RSP_0 -64 128),8); (0x100008708,8) SEP ((RSP_0 -64 144),4); (0x100008708,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = [0x100008708,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c2a: MOV QWORD PTR [RIP + 19159], RAX 7"
 Post  "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008708,8] = bot(fun__malloc) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 4 ##
#####################################
*)

htriple "ht_100003c31"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c31: TEST RBX, RBX 3"
 Post  "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c34"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c34: JE 4294983283 6"
 Post  "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 5 ##
#####################################
*)

htriple "ht_100003c3a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c3a: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c3d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c3d: JE 4294983283 6"
 Post  "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 6 ##
#####################################
*)

htriple "ht_100003e73"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003e73: LEA RDI, [RIP + 12890] 7"
 Post  "RDI = 0x1000070d4 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e7a"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x1000070d4 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003e7a: JMP 4294983276 2"
 Post  "RDI = 0x1000070d4 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 7 ##
#####################################
*)

htriple "ht_100003c43"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c43: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c45"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c45: LEA RDI, [RBP - 144] 7"
 Post  "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c4c"
 Separations "((RSP_0 -64 80),8) SEP (R8_0,8); ((RSP_0 -64 80),8) SEP (0x100008700,8); ((RSP_0 -64 80),8) SEP (0x100008708,8); ((RSP_0 -64 80),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c4c: MOV QWORD PTR [RDI + 72], RAX 4"
 Post  "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c50"
 Separations "((RSP_0 -64 88),8) SEP (R8_0,8); ((RSP_0 -64 88),8) SEP (0x100008700,8); ((RSP_0 -64 88),8) SEP (0x100008708,8); ((RSP_0 -64 88),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c50: MOV QWORD PTR [RDI + 64], RAX 4"
 Post  "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c54"
 Separations "((RSP_0 -64 96),8) SEP (R8_0,8); ((RSP_0 -64 96),8) SEP (0x100008700,8); ((RSP_0 -64 96),8) SEP (0x100008708,8); ((RSP_0 -64 96),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c54: MOV QWORD PTR [RDI + 56], RAX 4"
 Post  "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c58"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c58: XOR ESI, ESI 2"
 Post  "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c5a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c5a: XOR EDX, EDX 2"
 Post  "RAX = 0 ; RDX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c5c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c5c: ExternalCall fun__BZ2_bzDecompressInit 5"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 FunctionConstraints "PRESERVES fun__BZ2_bzDecompressInit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c61"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c61: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c63: JNE 4294983310 6"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 8 ##
#####################################
*)

htriple "ht_100003c69"
 Separations "((RSP_0 -64 144),4) SEP (R8_0,8); ((RSP_0 -64 144),4) SEP (0x100008700,8); ((RSP_0 -64 144),4) SEP (0x100008708,8); ((RSP_0 -64 144),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c69: MOV DWORD PTR [RBP - 136], R13D 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c70"
 Separations "((RSP_0 -64 152),8) SEP (R8_0,8); ((RSP_0 -64 152),8) SEP (0x100008700,8); ((RSP_0 -64 152),8) SEP (0x100008708,8); ((RSP_0 -64 152),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003c70: MOV QWORD PTR [RBP - 144], R14 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c77"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c77: TEST R12, R12 3"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c7a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c7a: JE 4294982784 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100003bd4, blockId == 9 ##
#####################################
*)

htriple "ht_100003e8e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
 Instruction "100003e8e: LEA RDI, [RIP + 13503] 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RDI = 0x100007354 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = [(RSP_0 -64 144),4]_0 ; [(RSP_0 -64 152),8] = [(RSP_0 -64 152),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 10 ##
######################################
*)

htriple "ht_100003c7c"
 Separations "(R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP (0x100008700,8); (R8_0,8) SEP (0x100008708,8); (R8_0,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 52),4); (R8_0,8) SEP ((RSP_0 -64 56),4); (R8_0,8) SEP ((RSP_0 -64 60),4); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 80),8); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 120),4); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 144),4); (R8_0,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c7c: MOV QWORD PTR [R12], R13 4"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [R8_0,8] = RCX_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 11 ##
######################################
*)

htriple "ht_100003c80"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c80: LEA RBX, [RBP - 144] 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c87"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDX_0 ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c87: LEA R14, [RIP + 526] 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c8e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c8e: XOR R15D, R15D 3"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c91"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x100008700,8); ((RSP_0 -64 52),4) SEP (0x100008708,8); ((RSP_0 -64 52),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c91: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c98"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c98: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c9a"
 Separations "((RSP_0 -64 72),8) SEP (R8_0,8); ((RSP_0 -64 72),8) SEP (0x100008700,8); ((RSP_0 -64 72),8) SEP (0x100008708,8); ((RSP_0 -64 72),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c9a: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003c9e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = RCX_0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
 Instruction "100003c9e: XOR R13D, R13D 3"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = [(RSP_0 -64 120),4]_0 ; [(RSP_0 -64 128),8] = [(RSP_0 -64 128),8]_0 ; [(RSP_0 -64 144),4] = b32(RCX_0) ; [(RSP_0 -64 152),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 12 ##
######################################
*)

htriple "ht_100003caa"
 Separations "((RSP_0 -64 144),4) SEP (R8_0,8); ((RSP_0 -64 144),4) SEP (0x100008700,8); ((RSP_0 -64 144),4) SEP (0x100008708,8); ((RSP_0 -64 144),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003caa: MOV EAX, DWORD PTR [RBP - 136] 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cb0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cb0: OR EAX, R15D 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cb3"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cb3: JNE 4294982902 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 13 ##
######################################
*)

htriple "ht_100003e2a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e2a: CMP R13D, 4 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e2e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e2e: JNE 4294983247 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 14 ##
######################################
*)

htriple "ht_100003cb5"
 Separations "(0x100008700,8) SEP (RSP_0,8); (0x100008700,8) SEP (R8_0,8); (0x100008700,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008700,8) SEP ((RSP_0 -64 8),8); (0x100008700,8) SEP ((RSP_0 -64 16),8); (0x100008700,8) SEP ((RSP_0 -64 24),8); (0x100008700,8) SEP ((RSP_0 -64 32),8); (0x100008700,8) SEP ((RSP_0 -64 40),8); (0x100008700,8) SEP ((RSP_0 -64 48),8); (0x100008700,8) SEP ((RSP_0 -64 52),4); (0x100008700,8) SEP ((RSP_0 -64 56),4); (0x100008700,8) SEP ((RSP_0 -64 60),4); (0x100008700,8) SEP ((RSP_0 -64 72),8); (0x100008700,8) SEP ((RSP_0 -64 80),8); (0x100008700,8) SEP ((RSP_0 -64 88),8); (0x100008700,8) SEP ((RSP_0 -64 96),8); (0x100008700,8) SEP ((RSP_0 -64 120),4); (0x100008700,8) SEP ((RSP_0 -64 128),8); (0x100008700,8) SEP ((RSP_0 -64 144),4); (0x100008700,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cb5: MOV RSI, QWORD PTR [RIP + 19012] 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cbc"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cbc: MOV EDX, 65536 5"
 Post  "RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cc1"
 Separations "((RSP_0 -64 60),4) SEP (R8_0,8); ((RSP_0 -64 60),4) SEP (0x100008700,8); ((RSP_0 -64 60),4) SEP (0x100008708,8); ((RSP_0 -64 60),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cc1: MOV EDI, DWORD PTR [RBP - 52] 3"
 Post  "RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cc4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cc4: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cc9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cc9: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ccc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003ccc: JS 4294983269 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 15 ##
######################################
*)

htriple "ht_100003cf6"
 Separations "(0x100008708,8) SEP (RSP_0,8); (0x100008708,8) SEP (R8_0,8); (0x100008708,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008708,8) SEP ((RSP_0 -64 8),8); (0x100008708,8) SEP ((RSP_0 -64 16),8); (0x100008708,8) SEP ((RSP_0 -64 24),8); (0x100008708,8) SEP ((RSP_0 -64 32),8); (0x100008708,8) SEP ((RSP_0 -64 40),8); (0x100008708,8) SEP ((RSP_0 -64 48),8); (0x100008708,8) SEP ((RSP_0 -64 52),4); (0x100008708,8) SEP ((RSP_0 -64 56),4); (0x100008708,8) SEP ((RSP_0 -64 60),4); (0x100008708,8) SEP ((RSP_0 -64 72),8); (0x100008708,8) SEP ((RSP_0 -64 80),8); (0x100008708,8) SEP ((RSP_0 -64 88),8); (0x100008708,8) SEP ((RSP_0 -64 96),8); (0x100008708,8) SEP ((RSP_0 -64 120),4); (0x100008708,8) SEP ((RSP_0 -64 128),8); (0x100008708,8) SEP ((RSP_0 -64 144),4); (0x100008708,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cf6: MOV RAX, QWORD PTR [RIP + 18955] 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cfd"
 Separations "((RSP_0 -64 128),8) SEP (R8_0,8); ((RSP_0 -64 128),8) SEP (0x100008700,8); ((RSP_0 -64 128),8) SEP (0x100008708,8); ((RSP_0 -64 128),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cfd: MOV QWORD PTR [RBP - 120], RAX 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d01"
 Separations "((RSP_0 -64 120),4) SEP (R8_0,8); ((RSP_0 -64 120),4) SEP (0x100008700,8); ((RSP_0 -64 120),4) SEP (0x100008708,8); ((RSP_0 -64 120),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003d01: MOV DWORD PTR [RBP - 112], 65536 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d08"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d08: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d0b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d0b: ExternalCall fun__BZ2_bzDecompress 5"
 Post  "RAX = bot(fun__BZ2_bzDecompress) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun__BZ2_bzDecompress {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d10"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompress) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d10: MOV R13D, EAX 3"
 Post  "RAX = bot(fun__BZ2_bzDecompress) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d13"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompress) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d13: LEA EAX, [R13 + 5] 4"
 Post  "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d17"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d17: CMP EAX, 9 3"
 Post  "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d1a: JA 4294982999 2"
 Post  "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 16 ##
######################################
*)

htriple "ht_100003cd2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cd2: SETE CL 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cd5: MOVZX R15D, CL 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cd9"
 Separations "(0x100008700,8) SEP (RSP_0,8); (0x100008700,8) SEP (R8_0,8); (0x100008700,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008700,8) SEP ((RSP_0 -64 8),8); (0x100008700,8) SEP ((RSP_0 -64 16),8); (0x100008700,8) SEP ((RSP_0 -64 24),8); (0x100008700,8) SEP ((RSP_0 -64 32),8); (0x100008700,8) SEP ((RSP_0 -64 40),8); (0x100008700,8) SEP ((RSP_0 -64 48),8); (0x100008700,8) SEP ((RSP_0 -64 52),4); (0x100008700,8) SEP ((RSP_0 -64 56),4); (0x100008700,8) SEP ((RSP_0 -64 60),4); (0x100008700,8) SEP ((RSP_0 -64 72),8); (0x100008700,8) SEP ((RSP_0 -64 80),8); (0x100008700,8) SEP ((RSP_0 -64 88),8); (0x100008700,8) SEP ((RSP_0 -64 96),8); (0x100008700,8) SEP ((RSP_0 -64 120),4); (0x100008700,8) SEP ((RSP_0 -64 128),8); (0x100008700,8) SEP ((RSP_0 -64 144),4); (0x100008700,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003cd9: MOV RCX, QWORD PTR [RIP + 18976] 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ce0"
 Separations "((RSP_0 -64 152),8) SEP (R8_0,8); ((RSP_0 -64 152),8) SEP (0x100008700,8); ((RSP_0 -64 152),8) SEP (0x100008708,8); ((RSP_0 -64 152),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003ce0: MOV QWORD PTR [RBP - 144], RCX 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ce7"
 Separations "((RSP_0 -64 144),4) SEP (R8_0,8); ((RSP_0 -64 144),4) SEP (0x100008700,8); ((RSP_0 -64 144),4) SEP (0x100008708,8); ((RSP_0 -64 144),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003ce7: MOV DWORD PTR [RBP - 136], EAX 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ced"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
 Instruction "100003ced: TEST R12, R12 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003cf0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
 Instruction "100003cf0: JE 4294982902 2"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 17 ##
######################################
*)

htriple "ht_100003e65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e65: LEA RDI, [RIP + 13555] 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RDI = 0x10000735f ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 18 ##
######################################
*)

htriple "ht_100003cf2"
 Separations "(R8_0,8) SEP (RSP_0,8); (R8_0,8) SEP (0x100008700,8); (R8_0,8) SEP (0x100008708,8); (R8_0,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (R8_0,8) SEP ((RSP_0 -64 8),8); (R8_0,8) SEP ((RSP_0 -64 16),8); (R8_0,8) SEP ((RSP_0 -64 24),8); (R8_0,8) SEP ((RSP_0 -64 32),8); (R8_0,8) SEP ((RSP_0 -64 40),8); (R8_0,8) SEP ((RSP_0 -64 48),8); (R8_0,8) SEP ((RSP_0 -64 52),4); (R8_0,8) SEP ((RSP_0 -64 56),4); (R8_0,8) SEP ((RSP_0 -64 60),4); (R8_0,8) SEP ((RSP_0 -64 72),8); (R8_0,8) SEP ((RSP_0 -64 80),8); (R8_0,8) SEP ((RSP_0 -64 88),8); (R8_0,8) SEP ((RSP_0 -64 96),8); (R8_0,8) SEP ((RSP_0 -64 120),4); (R8_0,8) SEP ((RSP_0 -64 128),8); (R8_0,8) SEP ((RSP_0 -64 144),4); (R8_0,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
 Instruction "100003cf2: ADD QWORD PTR [R12], RAX 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 144),4] = b32(bot(fun__read))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 19 ##
######################################
*)

htriple "ht_100003d1c"
 Separations "((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP (RSP_0,8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP (R8_0,8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP (0x100008700,8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP (0x100008708,8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 56),4); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 60),4); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 96),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 120),4); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 128),8); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 144),4); ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__BZ2_bzDecompress)) +32 5) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d1c: MOVSXD RAX, DWORD PTR [R14 + RAX * 4] 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d20"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d20: ADD RAX, R14 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d23"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d23: JMP RAX 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 20 ##
######################################
*)

htriple "ht_100003d57"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d57: LEA RDI, [RIP + 13937] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d5e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d5e: MOV ESI, R13D 3"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSI = b32(bot(fun__BZ2_bzDecompress)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d61"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSI = b32(bot(fun__BZ2_bzDecompress)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d61: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSI = b32(bot(fun__BZ2_bzDecompress)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d63"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073cf ; RSI = b32(bot(fun__BZ2_bzDecompress)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d63: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d68"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d68: JMP 4294982817 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 21 ##
######################################
*)

htriple "ht_100003d25"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d25: LEA RDI, [RIP + 13942] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x1000073a2 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d2c"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x1000073a2 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d2c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073a2 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073a2 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d2e: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d33"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d33: MOV R13D, 4294967291 6"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffb ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d39"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffb ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d39: JMP 4294982817 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffb ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 22 ##
######################################
*)

htriple "ht_100003d3e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d3e: LEA RDI, [RIP + 13942] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x1000073bb ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d45"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x1000073bb ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d45: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073bb ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d47"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x1000073bb ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d47: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d4c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d4c: MOV R13D, 4294967293 6"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffd ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d52"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffd ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d52: JMP 4294982817 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffd ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 23 ##
######################################
*)

htriple "ht_100003d6d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d6d: LEA RDI, [RIP + 13843] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x100007387 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d74"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x100007387 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d74: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x100007387 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d76"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RDI = 0x100007387 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d76: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d7b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d7b: MOV R13D, 4294967292 6"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffc ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffc ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d81: JMP 4294982817 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0xfffffffc ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 24 ##
######################################
*)

htriple "ht_100003d86"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d86: TEST R15D, R15D 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d89"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d89: JE 4294983072 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 25 ##
######################################
*)

htriple "ht_100003ca1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003ca1: TEST R13D, R13D 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ca4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003ca4: JNE 4294983210 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 26 ##
######################################
*)

htriple "ht_100003d8b"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d8b: TEST R13D, R13D 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d8e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d8e: JNE 4294983072 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 27 ##
######################################
*)

htriple "ht_100003da0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003da0: CMP BYTE PTR [RIP + 18757], 0 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003da7"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003da7: JNE 4294983126 2"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 28 ##
######################################
*)

htriple "ht_100003d90"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = b32(bot(fun__BZ2_bzDecompress)) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d90: MOV R13D, 4 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d96"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x100008700,8); ((RSP_0 -64 52),4) SEP (0x100008708,8); ((RSP_0 -64 52),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d96: CMP DWORD PTR [RBP - 44], 1 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003d9a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003d9a: JNE 4294983292 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 29 ##
######################################
*)

htriple "ht_100003e7c"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e7c: LEA RDI, [RIP + 13537] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x100007364 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e83"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x100007364 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e83: JMP 4294983317 2"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x100007364 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 4 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 30 ##
######################################
*)

htriple "ht_100003da9"
 Separations "((RSP_0 -64 120),4) SEP (R8_0,8); ((RSP_0 -64 120),4) SEP (0x100008700,8); ((RSP_0 -64 120),4) SEP (0x100008708,8); ((RSP_0 -64 120),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003da9: MOV EAX, DWORD PTR [RBP - 112] 3"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dac"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dac: CMP EAX, 65536 5"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003db1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003db1: JE 4294983126 2"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 31 ##
######################################
*)

htriple "ht_100003dd6"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x100008700,8); ((RSP_0 -64 52),4) SEP (0x100008708,8); ((RSP_0 -64 52),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dd6: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ddd"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003ddd: TEST R15D, R15D 3"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003de0"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003de0: JNE 4294982817 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 32 ##
######################################
*)

htriple "ht_100003db3"
 Separations "(0x100008708,8) SEP (RSP_0,8); (0x100008708,8) SEP (R8_0,8); (0x100008708,8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4); (0x100008708,8) SEP ((RSP_0 -64 8),8); (0x100008708,8) SEP ((RSP_0 -64 16),8); (0x100008708,8) SEP ((RSP_0 -64 24),8); (0x100008708,8) SEP ((RSP_0 -64 32),8); (0x100008708,8) SEP ((RSP_0 -64 40),8); (0x100008708,8) SEP ((RSP_0 -64 48),8); (0x100008708,8) SEP ((RSP_0 -64 52),4); (0x100008708,8) SEP ((RSP_0 -64 56),4); (0x100008708,8) SEP ((RSP_0 -64 60),4); (0x100008708,8) SEP ((RSP_0 -64 72),8); (0x100008708,8) SEP ((RSP_0 -64 80),8); (0x100008708,8) SEP ((RSP_0 -64 88),8); (0x100008708,8) SEP ((RSP_0 -64 96),8); (0x100008708,8) SEP ((RSP_0 -64 120),4); (0x100008708,8) SEP ((RSP_0 -64 128),8); (0x100008708,8) SEP ((RSP_0 -64 144),4); (0x100008708,8) SEP ((RSP_0 -64 152),8)"
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003db3: MOV RSI, QWORD PTR [RIP + 18766] 7"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dba"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dba: MOV EDX, 65536 5"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dbf"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0x10000 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dbf: SUB EDX, EAX 2"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dc1"
 Separations "((RSP_0 -64 56),4) SEP (R8_0,8); ((RSP_0 -64 56),4) SEP (0x100008700,8); ((RSP_0 -64 56),4) SEP (0x100008708,8); ((RSP_0 -64 56),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dc1: MOV EDI, DWORD PTR [RBP - 48] 3"
 Post  "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dc4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000 ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dc4: ExternalCall fun__write 5"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun__write {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dc9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dc9: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dcc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dcc: JS 4294983301 6"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 33 ##
######################################
*)

htriple "ht_100003dd2"
 Separations "((RSP_0 -64 72),8) SEP (R8_0,8); ((RSP_0 -64 72),8) SEP (0x100008700,8); ((RSP_0 -64 72),8) SEP (0x100008708,8); ((RSP_0 -64 72),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dd2: ADD QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 34 ##
######################################
*)

htriple "ht_100003e85"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e85: LEA RDI, [RIP + 13543] 7"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RDI = 0x100007373 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RDI = 0x100007373 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e8c: JMP 4294983276 2"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 152) ; RDI = 0x100007373 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 35 ##
######################################
*)

htriple "ht_100003de6"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x100008700,8); ((RSP_0 -64 52),4) SEP (0x100008708,8); ((RSP_0 -64 52),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003de6: MOV DWORD PTR [RBP - 44], 0 7"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003ded"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003ded: CMP R13D, 4 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003df1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003df1: JNE 4294982817 6"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 36 ##
######################################
*)

htriple "ht_100003df7"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003df7: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dfa"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dfa: ExternalCall fun__BZ2_bzDecompressEnd 5"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun__BZ2_bzDecompressEnd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003dff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003dff: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e01"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e01: JNE 4294983201 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 37 ##
######################################
*)

htriple "ht_100003e03"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e03: XOR R13D, R13D 3"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e06"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e06: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e09"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e09: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e0b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e0b: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e0d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RDX = 0 ; RDI = (RSP_0 -64 152) ; RSI = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e0d: ExternalCall fun__BZ2_bzDecompressInit 5"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 FunctionConstraints "PRESERVES fun__BZ2_bzDecompressInit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e12"
 Separations "((RSP_0 -64 52),4) SEP (R8_0,8); ((RSP_0 -64 52),4) SEP (0x100008700,8); ((RSP_0 -64 52),4) SEP (0x100008708,8); ((RSP_0 -64 52),4) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e12: MOV DWORD PTR [RBP - 44], 1 7"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e19"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e19: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e1b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e1b: JE 4294982817 6"
 Post  "RAX = bot(fun__BZ2_bzDecompressInit) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = 0 ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = 1 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 38 ##
######################################
*)

htriple "ht_100003e21"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e21: LEA RDI, [RIP + 13649] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x100007379 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e28"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = 0x100007379 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
 Instruction "100003e28: JMP 4294983317 2"
 Post  "RBX = (RSP_0 -64 152) ; RDI = 0x100007379 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0 ; [(RSP_0 -64 120),4] = 0x10000"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 39 ##
######################################
*)

htriple "ht_100003e30"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e30: LEA RDI, [RBP - 144] 7"
 Post  "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e37"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RDI = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e37: ExternalCall fun__BZ2_bzDecompressEnd 5"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 FunctionConstraints "PRESERVES fun__BZ2_bzDecompressEnd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008700,8];[0x100008708,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e3c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e3c: MOV ECX, EAX 2"
 Post  "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__BZ2_bzDecompressEnd) ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e3e: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e40"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e40: CMP ECX, 1 3"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e43"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e43: SBB RAX, RAX 3"
 Post  "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e46"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e46: NOT RAX 3"
 Post  "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e49"
 Separations "((RSP_0 -64 72),8) SEP (R8_0,8); ((RSP_0 -64 72),8) SEP (0x100008700,8); ((RSP_0 -64 72),8) SEP (0x100008708,8); ((RSP_0 -64 72),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e49: OR RAX, QWORD PTR [RBP - 64] 4"
 Post  "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e4d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e4d: JMP 4294983254 2"
 Post  "RBX = (RSP_0 -64 152) ; RCX = b32(bot(fun__BZ2_bzDecompressEnd)) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 40 ##
######################################
*)

htriple "ht_100003e4f"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e4f: MOV RAX, 18446744073709551615 7"
 Post  "RAX = 0xffffffffffffffff ; RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 41 ##
######################################
*)

htriple "ht_100003e56"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e56: ADD RSP, 104 4"
 Post  "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e5a"
 Separations "((RSP_0 -64 40),8) SEP (R8_0,8); ((RSP_0 -64 40),8) SEP (0x100008700,8); ((RSP_0 -64 40),8) SEP (0x100008708,8); ((RSP_0 -64 40),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 152) ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e5a: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e5b"
 Separations "((RSP_0 -64 32),8) SEP (R8_0,8); ((RSP_0 -64 32),8) SEP (0x100008700,8); ((RSP_0 -64 32),8) SEP (0x100008708,8); ((RSP_0 -64 32),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e5b: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e5d"
 Separations "((RSP_0 -64 24),8) SEP (R8_0,8); ((RSP_0 -64 24),8) SEP (0x100008700,8); ((RSP_0 -64 24),8) SEP (0x100008708,8); ((RSP_0 -64 24),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e5d: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e5f"
 Separations "((RSP_0 -64 16),8) SEP (R8_0,8); ((RSP_0 -64 16),8) SEP (0x100008700,8); ((RSP_0 -64 16),8) SEP (0x100008708,8); ((RSP_0 -64 16),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = 0x100003e9c ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e5f: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e61"
 Separations "((RSP_0 -64 8),8) SEP (R8_0,8); ((RSP_0 -64 8),8) SEP (0x100008700,8); ((RSP_0 -64 8),8) SEP (0x100008708,8); ((RSP_0 -64 8),8) SEP ((0x100003e9c +64 ((b32(bot(fun__BZ2_bzDecompress)) +32 5) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e61: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e63"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e63: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e64"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e64: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 42 ##
######################################
*)

htriple "ht_100003e6c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0)"
 Instruction "100003e6c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0)"
 Instruction "100003e6e: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0)"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100003bd4, blockId == 43 ##
######################################
*)

htriple "ht_100003e95"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e95: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003e97"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 Instruction "100003e97: ExternalCall fun_0x10000496b 5"
 Post  "RAX = bot(fun_0x10000496b) ; RSP = (RSP_0 -64 152) ; RBP = (RSP_0 -64 8) ; R12 = R8_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = b32(RSI_0) ; [(RSP_0 -64 60),4] = b32(RDI_0) ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = 0 ; [(RSP_0 -64 96),8] = 0"
 FunctionConstraints "PRESERVES fun_0x10000496b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 56),4];[(RSP_0 -64 60),4];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 120),4];[(RSP_0 -64 128),8];[(RSP_0 -64 144),4];[(RSP_0 -64 152),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
