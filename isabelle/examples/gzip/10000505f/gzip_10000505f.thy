theory gzip_10000505f
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000505f, blockId == 0 ##
#####################################
*)

htriple "ht_10000505f"
 Separations "((RSP_0 -64 8),8) SEP (RDX_0,8); ((RSP_0 -64 8),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000505f: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005060"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005060: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005063"
 Separations "((RSP_0 -64 16),8) SEP (RDX_0,8); ((RSP_0 -64 16),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005063: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005065"
 Separations "((RSP_0 -64 24),8) SEP (RDX_0,8); ((RSP_0 -64 24),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005065: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005067"
 Separations "((RSP_0 -64 32),8) SEP (RDX_0,8); ((RSP_0 -64 32),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005067: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005069"
 Separations "((RSP_0 -64 40),8) SEP (RDX_0,8); ((RSP_0 -64 40),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005069: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000506b"
 Separations "((RSP_0 -64 48),8) SEP (RDX_0,8); ((RSP_0 -64 48),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000506b: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000506c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000506c: SUB RSP, 168 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005073"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005073: MOV R15D, R8D 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005076"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005076: MOV R14, RCX 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005079"
 Separations "((RSP_0 -64 64),8) SEP (RDX_0,8); ((RSP_0 -64 64),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005079: MOV QWORD PTR [RBP - 56], RDX 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000507d"
 Separations "((RSP_0 -64 68),4) SEP (RDX_0,8); ((RSP_0 -64 68),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000507d: MOV DWORD PTR [RBP - 60], ESI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005080"
 Separations "((RSP_0 -64 84),4) SEP (RDX_0,8); ((RSP_0 -64 84),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = [(RSP_0 -64 84),4]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005080: MOV DWORD PTR [RBP - 76], EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005083"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005083: MOV EDI, 65536 5"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005088"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = 0x10000 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; R11 = R11_0 ; R10 = R10_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005088: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000508d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000508d: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005090"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005090: MOV EDI, 65536 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005095"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005095: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000509a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000509a: TEST RBX, RBX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000509d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000509d: JE 4294988899 6"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 1 ##
#####################################
*)

htriple "ht_1000050a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050a3: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050a6: JE 4294988899 6"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 2 ##
#####################################
*)

htriple "ht_100005463"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005463: LEA RDI, [RIP + 7467] 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x100007195 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000546a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x100007195 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000546a: JMP 4294988915 2"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = 0x100007195 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 3 ##
#####################################
*)

htriple "ht_1000050ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050ac: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050af"
 Separations "((RSP_0 -64 80),8) SEP (RDX_0,8); ((RSP_0 -64 80),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050af: MOV QWORD PTR [RBP - 72], RAX 4"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050b3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050b3: XORPS XMM0, XMM0 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050b6"
 Separations "((RSP_0 -64 120),16) SEP (RDX_0,8); ((RSP_0 -64 120),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050b6: MOVAPS XMMWORD PTR [RBP - 112], XMM0 4"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050ba"
 Separations "((RSP_0 -64 136),16) SEP (RDX_0,8); ((RSP_0 -64 136),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050ba: MOVAPS XMMWORD PTR [RBP - 128], XMM0 4"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050be"
 Separations "((RSP_0 -64 152),16) SEP (RDX_0,8); ((RSP_0 -64 152),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050be: MOVAPS XMMWORD PTR [RBP - 144], XMM0 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050c5"
 Separations "((RSP_0 -64 168),16) SEP (RDX_0,8); ((RSP_0 -64 168),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050c5: MOVAPS XMMWORD PTR [RBP - 160], XMM0 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050cc"
 Separations "((RSP_0 -64 184),4) SEP (RDX_0,8); ((RSP_0 -64 184),16) SEP (RDX_0,8); ((RSP_0 -64 184),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 184),16] = [(RSP_0 -64 184),16]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050cc: MOVAPS XMMWORD PTR [RBP - 176], XMM0 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050d3"
 Separations "((RSP_0 -64 200),16) SEP (RDX_0,8); ((RSP_0 -64 200),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 200),16] = [(RSP_0 -64 200),16]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050d3: MOVAPS XMMWORD PTR [RBP - 192], XMM0 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050da"
 Separations "((RSP_0 -64 216),8) SEP (RDX_0,8); ((RSP_0 -64 216),16) SEP (RDX_0,8); ((RSP_0 -64 216),16) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 216),16] = [(RSP_0 -64 216),16]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050da: MOVAPS XMMWORD PTR [RBP - 208], XMM0 7"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050e1: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050e3: CMP BYTE PTR [RIP + 13810], 0 7"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(R8_0) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050ea: CMOVNE R15D, EAX 4"
 Post  "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050ee: LEA RAX, [RIP + 7953] 7"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RCX_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050f5: CMOVNE R14, RAX 4"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050f9: XOR R10D, R10D 3"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; R10 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000050fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; R10 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "1000050fc: CMP BYTE PTR [R14], 0 4"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; R10 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005100"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; R10 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005100: SETNE R10B 4"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005104"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005104: SHL R10D, 3 4"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005108"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005108: MOV EAX, 255 5"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000510d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000510d: MOV R12D, R15D 3"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005110"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005110: AND R12D, EAX 3"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005113"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005113: MOV R13D, R15D 3"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005116"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005116: SHR R13D, 8 4"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000511a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000511a: AND R13D, EAX 3"
 Post  "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000511d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000511d: MOV EBX, R15D 3"
 Post  "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005120"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005120: SHR EBX, 16 3"
 Post  "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005123"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005123: AND EBX, EAX 2"
 Post  "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005125"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005125: SHR R15D, 24 4"
 Post  "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005129"
 Separations "(0x100008560,4) SEP (RDX_0,8); (0x100008560,4) SEP (RSP_0,8); (0x100008560,4) SEP ((RSP_0 -64 8),8); (0x100008560,4) SEP ((RSP_0 -64 16),8); (0x100008560,4) SEP ((RSP_0 -64 24),8); (0x100008560,4) SEP ((RSP_0 -64 32),8); (0x100008560,4) SEP ((RSP_0 -64 40),8); (0x100008560,4) SEP ((RSP_0 -64 48),8); (0x100008560,4) SEP ((RSP_0 -64 56),8); (0x100008560,4) SEP ((RSP_0 -64 64),8); (0x100008560,4) SEP ((RSP_0 -64 68),4); (0x100008560,4) SEP ((RSP_0 -64 80),8); (0x100008560,4) SEP ((RSP_0 -64 84),4); (0x100008560,4) SEP ((RSP_0 -64 96),8); (0x100008560,4) SEP ((RSP_0 -64 120),16); (0x100008560,4) SEP ((RSP_0 -64 136),16); (0x100008560,4) SEP ((RSP_0 -64 152),16); (0x100008560,4) SEP ((RSP_0 -64 168),16); (0x100008560,4) SEP ((RSP_0 -64 184),16); (0x100008560,4) SEP ((RSP_0 -64 200),16); (0x100008560,4) SEP ((RSP_0 -64 216),16); (0x100008560,4) SEP ((RSP_0 -64 224),8); (0x100008560,4) SEP ((RSP_0 -64 232),8); (0x100008560,4) SEP ((RSP_0 -64 240),8); (0x100008560,4) SEP ((RSP_0 -64 248),8); (0x100008560,4) SEP ((RSP_0 -64 256),8); (0x100008560,4) SEP ((RSP_0 -64 264),8); (0x100008560,4) SEP ((RSP_0 -64 272),8); (0x100008560,4) SEP ((RSP_0 -64 280),8)"
 Assertions  ""
 Pre   "RAX = 255 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005129: MOV EAX, DWORD PTR [RIP + 13361] 6"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000512f"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000512f: XOR ECX, ECX 2"
 Post  "RAX = b32([0x100008560,4]_0) ; RCX = 0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005131"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RCX = 0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005131: CMP EAX, 9 3"
 Post  "RAX = b32([0x100008560,4]_0) ; RCX = 0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005134"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RCX = 0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005134: SETE CL 3"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005137"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005137: ADD ECX, ECX 2"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005139"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005139: CMP EAX, 1 3"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000513c"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000513c: MOV R11, R14 3"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000513f"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000513f: MOV R14D, 4 6"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005145"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = 4 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005145: CMOVNE R14D, ECX 4"
 Post  "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005149"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005149: LEA RDX, [RIP + 9437] 7"
 Post  "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005150"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005150: MOV ESI, 65536 5"
 Post  "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005155"
 Separations "((RSP_0 -64 96),8) SEP (RDX_0,8); ((RSP_0 -64 96),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005155: MOV QWORD PTR [RBP - 88], RDI 4"
 Post  "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005159"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005159: MOV ECX, 31 5"
 Post  "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000515e"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000515e: MOV R8D, 139 6"
 Post  "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005164"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005164: MOV R9D, 8 6"
 Post  "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000516a"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([0x100008560,4]_0) ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000516a: MOV EAX, 0 5"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000516f"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000516f: MOV QWORD PTR [RBP - 48], R11 4"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005173"
 Separations "((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005173: PUSH R11 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005175"
 Separations "((RSP_0 -64 232),8) SEP (RDX_0,8); ((RSP_0 -64 232),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = [(RSP_0 -64 232),8]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005175: PUSH 3 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005177"
 Separations "((RSP_0 -64 240),8) SEP (RDX_0,8); ((RSP_0 -64 240),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005177: PUSH R14 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 240) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005179"
 Separations "((RSP_0 -64 248),8) SEP (RDX_0,8); ((RSP_0 -64 248),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 240) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005179: PUSH R15 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 248) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000517b"
 Separations "((RSP_0 -64 256),8) SEP (RDX_0,8); ((RSP_0 -64 256),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 248) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000517b: PUSH RBX 1"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 256) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000517c"
 Separations "((RSP_0 -64 264),8) SEP (RDX_0,8); ((RSP_0 -64 264),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 256) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 264),8] = [(RSP_0 -64 264),8]_0 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000517c: PUSH R13 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000517e"
 Separations "((RSP_0 -64 272),8) SEP (RDX_0,8); ((RSP_0 -64 272),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 272),8] = [(RSP_0 -64 272),8]_0 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "10000517e: PUSH R12 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 272) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005180"
 Separations "((RSP_0 -64 280),8) SEP (RDX_0,8); ((RSP_0 -64 280),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 272) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3 ; [(RSP_0 -64 280),8] = [(RSP_0 -64 280),8]_0"
 Instruction "100005180: PUSH R10 2"
 Post  "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005182"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = 31 ; RDX = 0x10000762d ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; R9 = 8 ; R8 = 139 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "100005182: ExternalCall fun__snprintf 5"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 FunctionConstraints "PRESERVES fun__snprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005187"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 280) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "100005187: ADD RSP, 64 4"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000518b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "10000518b: CMP EAX, 65536 5"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005190"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "100005190: JGE 4294988908 6"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 4 ##
#####################################
*)

htriple "ht_100005196"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "100005196: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000519a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "10000519a: CMP BYTE PTR [RCX], 1 3"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000519d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "10000519d: SBB EAX, 18446744073709551615 3"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051a0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051a0: CDQE  2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051a2"
 Separations "((RSP_0 -64 96),8) SEP (RDX_0,8); ((RSP_0 -64 96),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051a2: MOV R14, QWORD PTR [RBP - 88] 4"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051a6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051a6: LEA RCX, [R14 + RAX] 4"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051aa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051aa: LEA RDI, [RBP - 208] 7"
 Post  "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051b1"
 Separations "((RSP_0 -64 192),8) SEP (RDX_0,8); ((RSP_0 -64 192),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051b1: MOV QWORD PTR [RDI + 24], RCX 4"
 Post  "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051b5"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051b5: MOV ECX, 65536 5"
 Post  "RCX = 0x10000 ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051ba"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0x10000 ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051ba: SUB ECX, EAX 2"
 Post  "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051bc"
 Separations "((RSP_0 -64 184),4) SEP (RDX_0,8); ((RSP_0 -64 184),4) SEP (0x100008560,4); ((RSP_0 -64 184),16) SEP (RDX_0,8)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051bc: MOV DWORD PTR [RDI + 32], ECX 3"
 Post  "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051bf"
 Separations "(0x100008560,4) SEP (RDX_0,8); (0x100008560,4) SEP (RSP_0,8); (0x100008560,4) SEP ((RSP_0 -64 8),8); (0x100008560,4) SEP ((RSP_0 -64 16),8); (0x100008560,4) SEP ((RSP_0 -64 24),8); (0x100008560,4) SEP ((RSP_0 -64 32),8); (0x100008560,4) SEP ((RSP_0 -64 40),8); (0x100008560,4) SEP ((RSP_0 -64 48),8); (0x100008560,4) SEP ((RSP_0 -64 56),8); (0x100008560,4) SEP ((RSP_0 -64 64),8); (0x100008560,4) SEP ((RSP_0 -64 68),4); (0x100008560,4) SEP ((RSP_0 -64 80),8); (0x100008560,4) SEP ((RSP_0 -64 84),4); (0x100008560,4) SEP ((RSP_0 -64 96),8); (0x100008560,4) SEP ((RSP_0 -64 120),16); (0x100008560,4) SEP ((RSP_0 -64 136),16); (0x100008560,4) SEP ((RSP_0 -64 152),16); (0x100008560,4) SEP ((RSP_0 -64 168),16); (0x100008560,4) SEP ((RSP_0 -64 184),16); (0x100008560,4) SEP ((RSP_0 -64 200),16); (0x100008560,4) SEP ((RSP_0 -64 216),16); (0x100008560,4) SEP ((RSP_0 -64 224),8); (0x100008560,4) SEP ((RSP_0 -64 232),8); (0x100008560,4) SEP ((RSP_0 -64 240),8); (0x100008560,4) SEP ((RSP_0 -64 248),8); (0x100008560,4) SEP ((RSP_0 -64 256),8); (0x100008560,4) SEP ((RSP_0 -64 264),8); (0x100008560,4) SEP ((RSP_0 -64 272),8); (0x100008560,4) SEP ((RSP_0 -64 280),8)"
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051bf: MOV ESI, DWORD PTR [RIP + 13211] 6"
 Post  "RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051c5"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051c5: LEA RAX, [RIP + 8307] 7"
 Post  "RAX = 0x10000723f ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051cc: MOV EDX, 8 5"
 Post  "RAX = 0x10000723f ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051d1: MOV ECX, 4294967281 5"
 Post  "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051d6: MOV R8D, 8 6"
 Post  "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051dc: XOR R9D, R9D 3"
 Post  "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051df"
 Separations "((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051df: PUSH 112 2"
 Post  "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 3"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051e1"
 Separations "((RSP_0 -64 232),8) SEP (RDX_0,8); ((RSP_0 -64 232),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 3"
 Instruction "1000051e1: PUSH RAX 1"
 Post  "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000723f ; RCX = 0xfffffff1 ; RDX = 8 ; RDI = (RSP_0 -64 216) ; RSI = b32([0x100008560,4]_0) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R9 = 0 ; R8 = 8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051e2: ExternalCall fun__deflateInit2 5"
 Post  "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__deflateInit2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051e7: ADD RSP, 16 4"
 Post  "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051eb: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051ed: JE 4294988286 2"
 Post  "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 5 ##
#####################################
*)

htriple "ht_10000546c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc)"
 Instruction "10000546c: LEA RDI, [RIP + 8657] 7"
 Post  "RAX = bot(fun__snprintf) ; RDI = 0x100007644 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 6 ##
#####################################
*)

htriple "ht_1000051ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051ef: LEA RDI, [RIP + 9303] 7"
 Post  "RAX = bot(fun__deflateInit2) ; RDI = 0x10000764d ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RDI = 0x10000764d ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051f6: XOR R13D, R13D 3"
 Post  "RAX = bot(fun__deflateInit2) ; RDI = 0x10000764d ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000051f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RDI = 0x10000764d ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051f9: JMP 4294988486 5"
 Post  "RAX = bot(fun__deflateInit2) ; RDI = 0x10000764d ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 7 ##
#####################################
*)

htriple "ht_1000051fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateInit2) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000051fe: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005200"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005200: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005204"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005204: XOR EDI, EDI 2"
 Post  "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005206"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005206: XOR ESI, ESI 2"
 Post  "RAX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005208"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005208: XOR EDX, EDX 2"
 Post  "RAX = 0 ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000520a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = 0 ; RDI = 0 ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000520a: ExternalCall fun__crc32 5"
 Post  "RAX = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__crc32 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000520f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000520f: MOV R12, RAX 3"
 Post  "RAX = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005212"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005212: LEA RBX, [RBP - 208] 7"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005219"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005219: XOR R13D, R13D 3"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0 ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 8 ##
#####################################
*)

htriple "ht_100005225"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005225: MOV EDX, 65536 5"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000522a"
 Separations "((RSP_0 -64 68),4) SEP (RDX_0,8); ((RSP_0 -64 68),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000522a: MOV EDI, DWORD PTR [RBP - 60] 3"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000522d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000522d: MOV RSI, R14 3"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005230"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005230: ExternalCall fun__write 5"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__write {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005235"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005235: CMP RAX, 65536 6"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000523b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000523b: JNE 4294988643 6"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000505f, blockId == 9 ##
#####################################
*)

htriple "ht_100005259"
 Separations "((RSP_0 -64 208),4) SEP (RDX_0,8); ((RSP_0 -64 208),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005259: CMP DWORD PTR [RBP - 200], 0 7"
 Post  "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005260"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005260: JNE 4294988460 2"
 Post  "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 10 ##
######################################
*)

htriple "ht_100005241"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005241: ADD R13, 65536 7"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005248"
 Separations "((RSP_0 -64 192),8) SEP (RDX_0,8); ((RSP_0 -64 192),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005248: MOV QWORD PTR [RBP - 184], R14 7"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000524f"
 Separations "((RSP_0 -64 184),4) SEP (RDX_0,8); ((RSP_0 -64 184),4) SEP (0x100008560,4); ((RSP_0 -64 184),16) SEP (RDX_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000524f: MOV DWORD PTR [RBP - 176], 65536 10"
 Post  "RAX = bot(fun__write) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 11 ##
######################################
*)

htriple "ht_100005363"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005363: LEA RDI, [RIP + 8201] 7"
 Post  "RAX = bot(fun__write) ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000536a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000536a: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000536c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000536c: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005371"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005371: MOV R13, 18446744073709551615 7"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0xffffffffffffffff ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005378"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0xffffffffffffffff ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005378: JMP 4294988501 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = 0xffffffffffffffff ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 12 ##
######################################
*)

htriple "ht_100005262"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005262: MOV EDX, 65536 5"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005267"
 Separations "((RSP_0 -64 84),4) SEP (RDX_0,8); ((RSP_0 -64 84),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005267: MOV EDI, DWORD PTR [RBP - 76] 3"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000526a"
 Separations "((RSP_0 -64 80),8) SEP (RDX_0,8); ((RSP_0 -64 80),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000526a: MOV RSI, QWORD PTR [RBP - 72] 4"
 Post  "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000526e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDX = 0x10000 ; RDI = b32(RDI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000526e: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005273"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005273: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005276"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005276: JS 4294988669 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 13 ##
######################################
*)

htriple "ht_1000052ac"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052ac: MOV RDI, RBX 3"
 Post  "RBX = (RSP_0 -64 216) ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052af"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052af: XOR ESI, ESI 2"
 Post  "RBX = (RSP_0 -64 216) ; RDI = (RSP_0 -64 216) ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052b1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RDI = (RSP_0 -64 216) ; RSI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052b1: ExternalCall fun__deflate 5"
 Post  "RAX = bot(fun__deflate) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__deflate {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052b6: CMP EAX, 2 3"
 Post  "RAX = bot(fun__deflate) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052b9: JB 4294988316 6"
 Post  "RAX = bot(fun__deflate) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 14 ##
######################################
*)

htriple "ht_10000527c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000527c: JE 4294988616 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 15 ##
######################################
*)

htriple "ht_10000537d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000537d: LEA RDI, [RIP + 8155] 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = 0x10000735f ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005384"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = 0x10000735f ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005384: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (RSP_0 -64 216) ; RDI = 0x10000735f ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005386"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (RSP_0 -64 216) ; RDI = 0x10000735f ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005386: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000538b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000538b: JMP 4294988493 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 16 ##
######################################
*)

htriple "ht_100005282"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005282: MOV R15, RAX 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005285"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005285: MOV RDI, R12 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005288"
 Separations "((RSP_0 -64 80),8) SEP (RDX_0,8); ((RSP_0 -64 80),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005288: MOV R12, QWORD PTR [RBP - 72] 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000528c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000528c: MOV RSI, R12 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000528f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDI = bot(fun__crc32) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000528f: MOV EDX, R15D 3"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDX = b32(bot(fun__read)) ; RDI = bot(fun__crc32) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005292"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 216) ; RDX = b32(bot(fun__read)) ; RDI = bot(fun__crc32) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005292: ExternalCall fun__crc32 5"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__crc32 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005297"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005297: ADD QWORD PTR [RBP - 48], R15 4"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000529b"
 Separations "((RSP_0 -64 216),8) SEP (RDX_0,8); ((RSP_0 -64 216),8) SEP (0x100008560,4); ((RSP_0 -64 216),16) SEP (RDX_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000529b: MOV QWORD PTR [RBP - 208], R12 7"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052a2: MOV R12, RAX 3"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052a5"
 Separations "((RSP_0 -64 208),4) SEP (RDX_0,8); ((RSP_0 -64 208),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052a5: MOV DWORD PTR [RBP - 200], R15D 7"
 Post  "RAX = bot(fun__crc32) ; RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__read) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 17 ##
######################################
*)

htriple "ht_100005348"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005348: LEA RDI, [RBP - 208] 7"
 Post  "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000534f"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000534f: MOV ESI, 4 5"
 Post  "RDI = (RSP_0 -64 216) ; RSI = 4 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005354"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 216) ; RSI = 4 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005354: ExternalCall fun__deflate 5"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__deflate {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005359"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005359: CMP EAX, 2 3"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000535c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000535c: JB 4294988552 2"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 18 ##
######################################
*)

htriple "ht_10000521c"
 Separations "((RSP_0 -64 184),4) SEP (RDX_0,8); ((RSP_0 -64 184),4) SEP (0x100008560,4); ((RSP_0 -64 184),16) SEP (RDX_0,8)"
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000521c: CMP DWORD PTR [RBP - 176], 0 7"
 Post  "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005223"
 Separations ""
 Assertions  ""
 Pre   "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005223: JNE 4294988377 2"
 Post  "RBX = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 19 ##
######################################
*)

htriple "ht_1000052bf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052bf: LEA RDI, [RIP + 9115] 7"
 Post  "RAX = bot(fun__deflate) ; RDI = 0x100007661 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 20 ##
######################################
*)

htriple "ht_1000052c6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052c6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052c8: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 21 ##
######################################
*)

htriple "ht_1000052ef"
 Separations "(RDX_0,8) SEP (RSP_0,8); (RDX_0,8) SEP (0x100008560,4); (RDX_0,8) SEP ((RSP_0 -64 8),8); (RDX_0,8) SEP ((RSP_0 -64 16),8); (RDX_0,8) SEP ((RSP_0 -64 24),8); (RDX_0,8) SEP ((RSP_0 -64 32),8); (RDX_0,8) SEP ((RSP_0 -64 40),8); (RDX_0,8) SEP ((RSP_0 -64 48),8); (RDX_0,8) SEP ((RSP_0 -64 56),8); (RDX_0,8) SEP ((RSP_0 -64 64),8); (RDX_0,8) SEP ((RSP_0 -64 68),4); (RDX_0,8) SEP ((RSP_0 -64 80),8); (RDX_0,8) SEP ((RSP_0 -64 84),4); (RDX_0,8) SEP ((RSP_0 -64 96),8); (RDX_0,8) SEP ((RSP_0 -64 120),16); (RDX_0,8) SEP ((RSP_0 -64 136),16); (RDX_0,8) SEP ((RSP_0 -64 152),16); (RDX_0,8) SEP ((RSP_0 -64 168),16); (RDX_0,8) SEP ((RSP_0 -64 184),4); (RDX_0,8) SEP ((RSP_0 -64 184),16); (RDX_0,8) SEP ((RSP_0 -64 192),8); (RDX_0,8) SEP ((RSP_0 -64 200),16); (RDX_0,8) SEP ((RSP_0 -64 208),4); (RDX_0,8) SEP ((RSP_0 -64 216),8); (RDX_0,8) SEP ((RSP_0 -64 216),16); (RDX_0,8) SEP ((RSP_0 -64 224),8); (RDX_0,8) SEP ((RSP_0 -64 232),8); (RDX_0,8) SEP ((RSP_0 -64 240),8); (RDX_0,8) SEP ((RSP_0 -64 248),8); (RDX_0,8) SEP ((RSP_0 -64 256),8); (RDX_0,8) SEP ((RSP_0 -64 264),8); (RDX_0,8) SEP ((RSP_0 -64 272),8); (RDX_0,8) SEP ((RSP_0 -64 280),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052ef: MOV QWORD PTR [RBX], R13 3"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 22 ##
######################################
*)

htriple "ht_1000052f2"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052f2: MOV RAX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052f6"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052f6: ADD RSP, 168 7"
 Post  "RBX = RDX_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052fd"
 Separations "((RSP_0 -64 40),8) SEP (RDX_0,8); ((RSP_0 -64 40),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RDX_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052fd: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052fe"
 Separations "((RSP_0 -64 32),8) SEP (RDX_0,8); ((RSP_0 -64 32),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052fe: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005300"
 Separations "((RSP_0 -64 24),8) SEP (RDX_0,8); ((RSP_0 -64 24),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005300: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005302"
 Separations "((RSP_0 -64 16),8) SEP (RDX_0,8); ((RSP_0 -64 16),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005302: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005304"
 Separations "((RSP_0 -64 8),8) SEP (RDX_0,8); ((RSP_0 -64 8),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005304: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005306"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005306: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005307"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005307: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 23 ##
######################################
*)

htriple "ht_100005329"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005329: CMP RAX, RBX 3"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000532c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000532c: JNE 4294988643 2"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 24 ##
######################################
*)

htriple "ht_10000532e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000532e: ADD R13, RBX 3"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005331"
 Separations "((RSP_0 -64 192),8) SEP (RDX_0,8); ((RSP_0 -64 192),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005331: MOV QWORD PTR [RBP - 184], R14 7"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005338"
 Separations "((RSP_0 -64 184),4) SEP (RDX_0,8); ((RSP_0 -64 184),4) SEP (0x100008560,4); ((RSP_0 -64 184),16) SEP (RDX_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005338: MOV DWORD PTR [RBP - 176], 65536 10"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005342"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005342: CMP R15D, 1 4"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005346"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005346: JE 4294988688 2"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 25 ##
######################################
*)

htriple "ht_100005390"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005390: LEA RDI, [RBP - 208] 7"
 Post  "RAX = bot(fun__write) ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005397"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RDI = (RSP_0 -64 216) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005397: ExternalCall fun__deflateEnd 5"
 Post  "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__deflateEnd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000539c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000539c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000539e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000539e: JE 4294988716 2"
 Post  "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 26 ##
######################################
*)

htriple "ht_100005308"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005308: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000530b"
 Separations "((RSP_0 -64 192),8) SEP (RDX_0,8); ((RSP_0 -64 192),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000530b: MOV RBX, QWORD PTR [RBP - 184] 7"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005312"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005312: SUB RBX, R14 3"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005315"
 Separations "((RSP_0 -64 68),4) SEP (RDX_0,8); ((RSP_0 -64 68),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005315: MOV EDI, DWORD PTR [RBP - 60] 3"
 Post  "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005318"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005318: MOV RSI, R14 3"
 Post  "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000531b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000531b: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000531e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000531e: ExternalCall fun__write 5"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 FunctionConstraints "PRESERVES fun__write {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005323"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005323: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005327"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005327: JE 4294988643 2"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 27 ##
######################################
*)

htriple "ht_10000535e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000535e: JMP 4294988479 5"
 Post  "RAX = bot(fun__deflate) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 28 ##
######################################
*)

htriple "ht_1000052d5"
 Separations "((RSP_0 -64 64),8) SEP (RDX_0,8); ((RSP_0 -64 64),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052d5: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 29 ##
######################################
*)

htriple "ht_1000052cd"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000052cd: MOV QWORD PTR [RBP - 48], 18446744073709551615 8"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0xffffffffffffffff ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 30 ##
######################################
*)

htriple "ht_1000053a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053a0: LEA RDI, [RIP + 8905] 7"
 Post  "RAX = bot(fun__deflateEnd) ; RDI = 0x100007670 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateEnd) ; RDI = 0x100007670 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053a7: JMP 4294988486 5"
 Post  "RAX = bot(fun__deflateEnd) ; RDI = 0x100007670 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 31 ##
######################################
*)

htriple "ht_1000053ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__deflateEnd) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053ac: MOV EAX, 255 5"
 Post  "RAX = 255 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053b1: MOV ECX, R12D 3"
 Post  "RAX = 255 ; RCX = b32(bot(fun__crc32)) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = b32(bot(fun__crc32)) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053b4: AND ECX, EAX 2"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053b6: MOV R8D, R12D 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = b32(bot(fun__crc32)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = b32(bot(fun__crc32)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053b9: SHR R8D, 8 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = b32(udiv32(b32(bot(fun__crc32)),256)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = b32(udiv32(b32(bot(fun__crc32)),256)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053bd: AND R8D, EAX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053c0: MOV R9D, R12D 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = b32(bot(fun__crc32)) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = b32(bot(fun__crc32)) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053c3: SHR R9D, 16 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = b32(udiv32(b32(bot(fun__crc32)),0x10000)) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = b32(udiv32(b32(bot(fun__crc32)),0x10000)) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053c7: AND R9D, EAX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = bot(fun__crc32) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053ca: SHR R12D, 24 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ce"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053ce: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053d2: MOV R10D, EDX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053d5: AND R10D, EAX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053d8: MOV R11D, EDX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053db"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053db: SHR R11D, 8 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053df"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053df: AND R11D, EAX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053e2: MOV EBX, EDX 2"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053e4: SHR EBX, 16 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053e7: AND EBX, EAX 2"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__deflate)) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053e9: MOV R15, R14 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053ec: MOV R14D, EDX 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053ef: SHR R14D, 24 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053f3: SUB RSP, 8 4"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053f7: LEA RDX, [RIP + 8836] 7"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000053fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "1000053fe: MOV ESI, 65536 5"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005403"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005403: MOV RDI, R15 3"
 Post  "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005406"
 Separations ""
 Assertions  ""
 Pre   "RAX = 255 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "100005406: MOV EAX, 0 5"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000540b"
 Separations "((RSP_0 -64 232),8) SEP (RDX_0,8); ((RSP_0 -64 232),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 224) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 232),8] = 0x10000723f"
 Instruction "10000540b: PUSH R14 2"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000540d"
 Separations "((RSP_0 -64 240),8) SEP (RDX_0,8); ((RSP_0 -64 240),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "10000540d: PUSH RBX 1"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 240) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000540e"
 Separations "((RSP_0 -64 248),8) SEP (RDX_0,8); ((RSP_0 -64 248),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 240) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "10000540e: PUSH R11 2"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 248) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005410"
 Separations "((RSP_0 -64 256),8) SEP (RDX_0,8); ((RSP_0 -64 256),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 248) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005410: PUSH R10 2"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 256) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005412"
 Separations "((RSP_0 -64 264),8) SEP (RDX_0,8); ((RSP_0 -64 264),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 256) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "100005412: PUSH R12 2"
 Post  "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005414"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = (b32(bot(fun__crc32)) &32 255) ; RDX = 0x100007682 ; RDI = bot(fun__malloc) ; RSI = 0x10000 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; R9 = (b32(udiv32(b32(bot(fun__crc32)),0x10000)) &32 255) ; R8 = (b32(udiv32(b32(bot(fun__crc32)),256)) &32 255) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005414: ExternalCall fun__snprintf 5"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 FunctionConstraints "PRESERVES fun__snprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005419"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005419: ADD RSP, 48 4"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000541d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000541d: CMP EAX, 8 3"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005420"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005420: JNE 4294988908 2"
 Post  "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 32 ##
######################################
*)

htriple "ht_100005422"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005422: MOV EDX, 8 5"
 Post  "RAX = bot(fun__snprintf) ; RDX = 8 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005427"
 Separations "((RSP_0 -64 68),4) SEP (RDX_0,8); ((RSP_0 -64 68),4) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RDX = 8 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005427: MOV EDI, DWORD PTR [RBP - 60] 3"
 Post  "RAX = bot(fun__snprintf) ; RDX = 8 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000542a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RDX = 8 ; RDI = b32(RSI_0) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000542a: MOV RSI, R15 3"
 Post  "RAX = bot(fun__snprintf) ; RDX = 8 ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000542d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RDX = 8 ; RDI = b32(RSI_0) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000542d: ExternalCall fun__write 5"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 FunctionConstraints "PRESERVES fun__write {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005432"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005432: CMP RAX, 8 4"
 Post  "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005436"
 Separations "((RSP_0 -64 64),8) SEP (RDX_0,8); ((RSP_0 -64 64),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005436: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000543a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000543a: MOV R14, R15 3"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000543d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000543d: JNE 4294988872 2"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 33 ##
######################################
*)

htriple "ht_10000543f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000543f: ADD R13, 8 4"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005443"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005443: JMP 4294988505 5"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 34 ##
######################################
*)

htriple "ht_100005448"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005448: LEA RDI, [RIP + 7972] 7"
 Post  "RAX = bot(fun__write) ; RBX = RDX_0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000544f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__write) ; RBX = RDX_0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000544f: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RDX_0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005451"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RDX_0 ; RDI = 0x100007373 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005451: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005456"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "100005456: MOV QWORD PTR [RBP - 48], 18446744073709551615 8"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0xffffffffffffffff ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000545e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0xffffffffffffffff ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
 Instruction "10000545e: JMP 4294988505 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R14 = bot(fun__malloc) ; R12 = b32(udiv32(b32(bot(fun__crc32)),0x1000000)) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = 0xffffffffffffffff ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112 ; [(RSP_0 -64 264),8] = b32(udiv32(b32(bot(fun__crc32)),0x1000000))"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 35 ##
######################################
*)

htriple "ht_1000052d9"
 Separations "((RSP_0 -64 80),8) SEP (RDX_0,8); ((RSP_0 -64 80),8) SEP (0x100008560,4)"
 Assertions  ""
 Pre   "RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052d9: MOV RDI, QWORD PTR [RBP - 72] 4"
 Post  "RBX = RDX_0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052dd"
 Separations ""
 Assertions  ""
 Pre   "RBX = RDX_0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052dd: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052e2: MOV RDI, R14 3"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052e5: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008560,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052ea: TEST RBX, RBX 3"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000052ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
 Instruction "1000052ed: JE 4294988530 2"
 Post  "RAX = bot(fun__free) ; RBX = RDX_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = bot(fun__malloc) ; [(RSP_0 -64 84),4] = b32(RDI_0) ; [(RSP_0 -64 96),8] = bot(fun__malloc) ; [(RSP_0 -64 224),8] = 112"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000505f, blockId == 36 ##
######################################
*)

htriple "ht_100005473"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 84),4] = b32(RDI_0)"
 Instruction "100005473: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 84),4] = b32(RDI_0)"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005475"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 84),4] = b32(RDI_0)"
 Instruction "100005475: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = RDX_0 ; [(RSP_0 -64 68),4] = b32(RSI_0) ; [(RSP_0 -64 84),4] = b32(RDI_0)"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 80),8];[(RSP_0 -64 84),4];[(RSP_0 -64 96),8];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 184),16];[(RSP_0 -64 200),16];[(RSP_0 -64 216),16];[(RSP_0 -64 224),8];[(RSP_0 -64 232),8];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8];[(RSP_0 -64 264),8];[(RSP_0 -64 272),8];[(RSP_0 -64 280),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
