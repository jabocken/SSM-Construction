theory gzip_100006174
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100006174, blockId == 0 ##
#####################################
*)

htriple "ht_100006174"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008010,8); ((RSP_0 -64 8),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006174: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006175"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006175: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006178"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008010,8); ((RSP_0 -64 16),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006178: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617a"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008010,8); ((RSP_0 -64 24),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000617a: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617c"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008010,8); ((RSP_0 -64 32),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000617c: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617e"
 Separations "((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP (0x100008010,8); ((RSP_0 -64 40),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000617e: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000617f: SUB RSP, 176 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006186"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008010,8]_0,8); (0x100008008,8) SEP ([0x100008018,8]_0,8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),2); (0x100008008,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006186: MOV RAX, QWORD PTR [RIP + 7803] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000618d"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008010,8]_0,8); ([0x100008008,8]_0,8) SEP ([0x100008018,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008010,8); ([0x100008008,8]_0,8) SEP (0x100008018,8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000618d: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006190"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP (0x100008010,8); ((RSP_0 -64 48),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006190: MOV QWORD PTR [RBP - 40], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006194"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006194: MOV EBX, 1 5"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006199"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006199: CMP BYTE PTR [RIP + 9520], 0 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061a0: JNE 4294992480 6"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 1 ##
#####################################
*)

htriple "ht_1000061a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061a6: MOV R14, RDI 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061a9: LEA RSI, [RBP - 200] 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 208) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = 1 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = (RSP_0 -64 208) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061b0: ExternalCall fun__stat_INODE64 5"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 FunctionConstraints "PRESERVES fun__stat_INODE64 {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061b5: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061b7: JNE 4294992480 6"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 2 ##
#####################################
*)

htriple "ht_100006260"
 Separations "(0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008010,8]_0,8); (0x100008008,8) SEP ([0x100008018,8]_0,8); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),2); (0x100008008,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006260: MOV RAX, QWORD PTR [RIP + 7585] 7"
 Post  "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006267"
 Separations "([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008010,8]_0,8); ([0x100008008,8]_0,8) SEP ([0x100008018,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008010,8); ([0x100008008,8]_0,8) SEP (0x100008018,8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006267: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000626a"
 Separations "((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP (0x100008010,8); ((RSP_0 -64 48),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000626a: CMP RAX, QWORD PTR [RBP - 40] 4"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000626e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000626e: JNE 4294992514 2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 3 ##
#####################################
*)

htriple "ht_1000061bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061bd: CMP BYTE PTR [RIP + 9488], 1 7"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061c4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061c4: JE 4294992423 2"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 4 ##
#####################################
*)

htriple "ht_1000061c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061c6: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RDI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RBX = 1 ; RDI = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061c8: ExternalCall fun__isatty 5"
 Post  "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 FunctionConstraints "PRESERVES fun__isatty {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061cd: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061cf: JE 4294992433 2"
 Post  "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 5 ##
#####################################
*)

htriple "ht_100006227"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006227: MOV RDI, R14 3"
 Post  "RBX = 1 ; RDI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000622a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RDI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000622a: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000622f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__unlink) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000622f: JMP 4294992480 2"
 Post  "RAX = bot(fun__unlink) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 6 ##
#####################################
*)

htriple "ht_1000061d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061d1: MOVZX EAX, WORD PTR [RIP + 2129] 7"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061d8: LEA R15, [RBP - 56] 4"
 Post  "RAX = 0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061dc"
 Separations "((RSP_0 -64 56),2) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),2) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 56),2) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 56),2) SEP (0x100008008,8); ((RSP_0 -64 56),2) SEP (0x100008010,8); ((RSP_0 -64 56),2) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061dc: MOV WORD PTR [R15 + 8], AX 5"
 Post  "RAX = 0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061e1: MOV RAX, QWORD PTR [RIP + 2105] 7"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061e8"
 Separations "((RSP_0 -64 64),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 64),8) SEP (0x100008008,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000061e8: MOV QWORD PTR [R15], RAX 3"
 Post  "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061eb"
 Separations "(0x100008010,8) SEP (RSP_0,8); (0x100008010,8) SEP ([0x100008008,8]_0,8); (0x100008010,8) SEP ([0x100008010,8]_0,8); (0x100008010,8) SEP ([0x100008018,8]_0,8); (0x100008010,8) SEP ((RSP_0 -64 8),8); (0x100008010,8) SEP ((RSP_0 -64 16),8); (0x100008010,8) SEP ((RSP_0 -64 24),8); (0x100008010,8) SEP ((RSP_0 -64 32),8); (0x100008010,8) SEP ((RSP_0 -64 40),8); (0x100008010,8) SEP ((RSP_0 -64 48),8); (0x100008010,8) SEP ((RSP_0 -64 56),2); (0x100008010,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "1000061eb: MOV R12, QWORD PTR [RIP + 7710] 7"
 Post  "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061f2"
 Separations "([0x100008010,8]_0,8) SEP (RSP_0,8); ([0x100008010,8]_0,8) SEP ([0x100008008,8]_0,8); ([0x100008010,8]_0,8) SEP (0x100008008,8); ([0x100008010,8]_0,8) SEP (0x100008010,8); ([0x100008010,8]_0,8) SEP (0x100008018,8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 56),2); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "1000061f2: MOV RDI, QWORD PTR [R12] 4"
 Post  "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "1000061f6: LEA RSI, [RIP + 5898] 7"
 Post  "RAX = 110 ; RBX = 1 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "1000061fd: MOV RDX, R14 3"
 Post  "RAX = 110 ; RBX = 1 ; RDX = RDI_0 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006200"
 Separations ""
 Assertions  ""
 Pre   "RAX = 110 ; RBX = 1 ; RDX = RDI_0 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006200: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 1 ; RDX = RDI_0 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006202"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 1 ; RDX = RDI_0 ; RSI = 0x100007907 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006202: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006207"
 Separations "(0x100008018,8) SEP (RSP_0,8); (0x100008018,8) SEP ([0x100008008,8]_0,8); (0x100008018,8) SEP ([0x100008010,8]_0,8); (0x100008018,8) SEP ([0x100008018,8]_0,8); (0x100008018,8) SEP ((RSP_0 -64 8),8); (0x100008018,8) SEP ((RSP_0 -64 16),8); (0x100008018,8) SEP ((RSP_0 -64 24),8); (0x100008018,8) SEP ((RSP_0 -64 32),8); (0x100008018,8) SEP ((RSP_0 -64 40),8); (0x100008018,8) SEP ((RSP_0 -64 48),8); (0x100008018,8) SEP ((RSP_0 -64 56),2); (0x100008018,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006207: MOV RAX, QWORD PTR [RIP + 7690] 7"
 Post  "RAX = [0x100008018,8]_0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000620e"
 Separations "([0x100008018,8]_0,8) SEP (RSP_0,8); ([0x100008018,8]_0,8) SEP ([0x100008008,8]_0,8); ([0x100008018,8]_0,8) SEP (0x100008008,8); ([0x100008018,8]_0,8) SEP (0x100008010,8); ([0x100008018,8]_0,8) SEP (0x100008018,8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 56),2); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "10000620e: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100008018,8]_0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006211"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006211: MOV RDI, R15 3"
 Post  "RAX = [0x100008018,8]_0 ; RBX = 1 ; RDI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006214"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = 1 ; RDI = (RSP_0 -64 64) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006214: MOV ESI, 9 5"
 Post  "RAX = [0x100008018,8]_0 ; RBX = 1 ; RDI = (RSP_0 -64 64) ; RSI = 9 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006219"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = 1 ; RDI = (RSP_0 -64 64) ; RSI = 9 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006219: ExternalCall fun__fgets 5"
 Post  "RAX = bot(fun__fgets) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 FunctionConstraints "PRESERVES fun__fgets {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000621e"
 Separations "((RSP_0 -64 64),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 64),1) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 64),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 64),1) SEP (0x100008008,8); ((RSP_0 -64 64),1) SEP (0x100008010,8); ((RSP_0 -64 64),1) SEP (0x100008018,8); ((RSP_0 -64 64),8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fgets) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "10000621e: MOV AL, BYTE PTR [R15] 3"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006221"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006221: OR AL, 32 2"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006223"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006223: CMP AL, 121 2"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006225"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006225: JNE 4294992452 2"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 7 ##
#####################################
*)

htriple "ht_100006231"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006231: LEA RDI, [RIP + 5914] 7"
 Post  "RAX = bot(fun__isatty) ; RBX = 1 ; RDI = 0x100007952 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006238"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RDI = 0x100007952 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006238: MOV RSI, R14 3"
 Post  "RAX = bot(fun__isatty) ; RBX = 1 ; RDI = 0x100007952 ; RSI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000623b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__isatty) ; RBX = 1 ; RDI = 0x100007952 ; RSI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000623b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 1 ; RDI = 0x100007952 ; RSI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000623d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 1 ; RDI = 0x100007952 ; RSI = RDI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "10000623d: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006242"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100006242: JMP 4294992478 2"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = [(RSP_0 -64 56),2]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 8 ##
#####################################
*)

htriple "ht_100006244"
 Separations "([0x100008010,8]_0,8) SEP (RSP_0,8); ([0x100008010,8]_0,8) SEP ([0x100008008,8]_0,8); ([0x100008010,8]_0,8) SEP (0x100008008,8); ([0x100008010,8]_0,8) SEP (0x100008010,8); ([0x100008010,8]_0,8) SEP (0x100008018,8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 56),2); ([0x100008010,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006244: MOV RCX, QWORD PTR [R12] 4"
 Post  "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006248"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006248: LEA RDI, [RIP + 5873] 7"
 Post  "RBX = 1 ; RDI = 0x100007940 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000624f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RDI = 0x100007940 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "10000624f: MOV ESI, 17 5"
 Post  "RBX = 1 ; RDI = 0x100007940 ; RSI = 17 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006254"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RDI = 0x100007940 ; RSI = 17 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006254: MOV EDX, 1 5"
 Post  "RBX = 1 ; RDX = 1 ; RDI = 0x100007940 ; RSI = 17 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006259"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RDX = 1 ; RDI = 0x100007940 ; RSI = 17 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 Instruction "100006259: ExternalCall fun__fwrite 5"
 Post  "RAX = bot(fun__fwrite) ; RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 64) ; R14 = RDI_0 ; R12 = [0x100008010,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 56),2] = 0 ; [(RSP_0 -64 64),8] = 110"
 FunctionConstraints "PRESERVES fun__fwrite {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006174, blockId == 9 ##
#####################################
*)

htriple "ht_10000625e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 1 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000625e: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R14 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006174, blockId == 10 ##
######################################
*)

htriple "ht_100006270"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006270: MOV EAX, EBX 2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006272"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006272: ADD RSP, 176 7"
 Post  "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006279"
 Separations "((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008010,8); ((RSP_0 -64 32),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006279: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000627a"
 Separations "((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008010,8); ((RSP_0 -64 24),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000627a: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000627c"
 Separations "((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008010,8); ((RSP_0 -64 16),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000627c: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000627e"
 Separations "((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008010,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008010,8); ((RSP_0 -64 8),8) SEP (0x100008018,8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000627e: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006280"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006280: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006281"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006281: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006174, blockId == 11 ##
######################################
*)

htriple "ht_100006282"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100006282: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R12_0 ; [(RSP_0 -64 40),8] = RBX_0 ; [(RSP_0 -64 48),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R12;[RSP_0,8];[0x100008008,8];[0x100008010,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),2];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
