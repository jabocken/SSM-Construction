theory gzip_10000547a
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000547a, blockId == 0 ##
#####################################
*)

htriple "ht_10000547a"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008018,8); ((RSP_0 -64 8),8) SEP (0x1000086d4,1); ((RSP_0 -64 8),8) SEP (0x1000086f8,8); ((RSP_0 -64 8),8) SEP (0x100008728,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000547a: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000547b"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000547b: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000547e"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008018,8); ((RSP_0 -64 16),8) SEP (0x1000086d4,1); ((RSP_0 -64 16),8) SEP (0x1000086f8,8); ((RSP_0 -64 16),8) SEP (0x100008728,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 16),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000547e: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005480"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008018,8); ((RSP_0 -64 24),8) SEP (0x1000086d4,1); ((RSP_0 -64 24),8) SEP (0x1000086f8,8); ((RSP_0 -64 24),8) SEP (0x100008728,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 24),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005480: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005482"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008018,8); ((RSP_0 -64 32),8) SEP (0x1000086d4,1); ((RSP_0 -64 32),8) SEP (0x1000086f8,8); ((RSP_0 -64 32),8) SEP (0x100008728,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 32),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005482: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005484"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP (0x100008018,8); ((RSP_0 -64 40),8) SEP (0x1000086d4,1); ((RSP_0 -64 40),8) SEP (0x1000086f8,8); ((RSP_0 -64 40),8) SEP (0x100008728,8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 40),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005484: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005486"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 48),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100008008,8); ((RSP_0 -64 48),8) SEP (0x100008018,8); ((RSP_0 -64 48),8) SEP (0x1000086d4,1); ((RSP_0 -64 48),8) SEP (0x1000086f8,8); ((RSP_0 -64 48),8) SEP (0x100008728,8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 48),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 48),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005486: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005487"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005487: SUB RSP, 2456 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000548e"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000548e: MOV R14, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005491"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005491: MOV R13, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005494"
 Separations "(0x100008008,8) SEP (bot(fun_0x1000060ec),8); (0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008018,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 96),8); (0x100008008,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 196),8); (0x100008008,8) SEP ((RSP_0 -64 1112),16); (0x100008008,8) SEP ((RSP_0 -64 1128),16); (0x100008008,8) SEP ((RSP_0 -64 1144),16); (0x100008008,8) SEP ((RSP_0 -64 1160),16); (0x100008008,8) SEP ((RSP_0 -64 1176),16); (0x100008008,8) SEP ((RSP_0 -64 1192),16); (0x100008008,8) SEP ((RSP_0 -64 1208),16); (0x100008008,8) SEP ((RSP_0 -64 1224),16); (0x100008008,8) SEP ((RSP_0 -64 1240),16); (0x100008008,8) SEP ((RSP_0 -64 0x8e0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8e4),4); (0x100008008,8) SEP ((RSP_0 -64 0x8f0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8f8),8); (0x100008008,8) SEP ((RSP_0 -64 0x908),8); (0x100008008,8) SEP ((RSP_0 -64 0x918),8); (0x100008008,8) SEP ((RSP_0 -64 0x928),16); (0x100008008,8) SEP ((RSP_0 -64 0x938),16); (0x100008008,8) SEP ((RSP_0 -64 0x948),16); (0x100008008,8) SEP ((RSP_0 -64 0x958),16); (0x100008008,8) SEP ((RSP_0 -64 0x968),16); (0x100008008,8) SEP ((RSP_0 -64 0x978),16); (0x100008008,8) SEP ((RSP_0 -64 0x988),16); (0x100008008,8) SEP ((RSP_0 -64 0x998),16); (0x100008008,8) SEP ((RSP_0 -64 0x9a8),16); (0x100008008,8) SEP ((RSP_0 -64 0x9b8),16); (0x100008008,8) SEP ((RSP_0 -64 0x9c8),8); (0x100008008,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005494: MOV RAX, QWORD PTR [RIP + 11117] 7"
 Post  "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000549b"
 Separations "([0x100008008,8]_0,8) SEP (bot(fun_0x1000060ec),8); ([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008018,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008018,8); ([0x100008008,8]_0,8) SEP (0x100008570,8); ([0x100008008,8]_0,8) SEP (0x100008578,4); ([0x100008008,8]_0,8) SEP (0x1000086cc,1); ([0x100008008,8]_0,8) SEP (0x1000086d0,1); ([0x100008008,8]_0,8) SEP (0x1000086d4,1); ([0x100008008,8]_0,8) SEP (0x1000086f8,8); ([0x100008008,8]_0,8) SEP (0x100008728,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 96),8); ([0x100008008,8]_0,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 196),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1112),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1128),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1144),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1160),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1176),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1192),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1192),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1208),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1224),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1234),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1240),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e4),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f8),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x900),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x908),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x918),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x924),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x928),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x928),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x938),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x948),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x958),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x958),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x968),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x978),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x988),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x988),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x998),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9a8),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b2),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b5),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b6),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b7),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b8),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b8),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9c8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000549b: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000549e"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP (0x100008018,8); ((RSP_0 -64 56),8) SEP (0x1000086d4,1); ((RSP_0 -64 56),8) SEP (0x1000086f8,8); ((RSP_0 -64 56),8) SEP (0x100008728,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 56),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 56),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000549e: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054a2"
 Separations "(0x100008728,8) SEP (bot(fun_0x1000060ec),8); (0x100008728,8) SEP (RSP_0,8); (0x100008728,8) SEP ([0x100008008,8]_0,8); (0x100008728,8) SEP ([0x100008018,8]_0,8); (0x100008728,8) SEP ((RSI_0 +64 96),8); (0x100008728,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x100008728,8) SEP ((RSP_0 -64 8),8); (0x100008728,8) SEP ((RSP_0 -64 16),8); (0x100008728,8) SEP ((RSP_0 -64 24),8); (0x100008728,8) SEP ((RSP_0 -64 32),8); (0x100008728,8) SEP ((RSP_0 -64 40),8); (0x100008728,8) SEP ((RSP_0 -64 48),8); (0x100008728,8) SEP ((RSP_0 -64 56),8); (0x100008728,8) SEP ((RSP_0 -64 196),8); (0x100008728,8) SEP ((RSP_0 -64 1112),16); (0x100008728,8) SEP ((RSP_0 -64 1128),16); (0x100008728,8) SEP ((RSP_0 -64 1144),16); (0x100008728,8) SEP ((RSP_0 -64 1160),16); (0x100008728,8) SEP ((RSP_0 -64 1176),16); (0x100008728,8) SEP ((RSP_0 -64 1192),16); (0x100008728,8) SEP ((RSP_0 -64 1208),16); (0x100008728,8) SEP ((RSP_0 -64 1224),16); (0x100008728,8) SEP ((RSP_0 -64 1240),16); (0x100008728,8) SEP ((RSP_0 -64 0x8e0),8); (0x100008728,8) SEP ((RSP_0 -64 0x8e4),4); (0x100008728,8) SEP ((RSP_0 -64 0x8f0),8); (0x100008728,8) SEP ((RSP_0 -64 0x8f8),8); (0x100008728,8) SEP ((RSP_0 -64 0x908),8); (0x100008728,8) SEP ((RSP_0 -64 0x918),8); (0x100008728,8) SEP ((RSP_0 -64 0x928),16); (0x100008728,8) SEP ((RSP_0 -64 0x938),16); (0x100008728,8) SEP ((RSP_0 -64 0x948),16); (0x100008728,8) SEP ((RSP_0 -64 0x958),16); (0x100008728,8) SEP ((RSP_0 -64 0x968),16); (0x100008728,8) SEP ((RSP_0 -64 0x978),16); (0x100008728,8) SEP ((RSP_0 -64 0x988),16); (0x100008728,8) SEP ((RSP_0 -64 0x998),16); (0x100008728,8) SEP ((RSP_0 -64 0x9a8),16); (0x100008728,8) SEP ((RSP_0 -64 0x9b8),16); (0x100008728,8) SEP ((RSP_0 -64 0x9c8),8); (0x100008728,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = [0x100008728,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054a2: MOV QWORD PTR [RIP + 12927], RDI 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054a9: CMP BYTE PTR [RIP + 12824], 1 7"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054b0: JNE 4294989089 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 1 ##
#####################################
*)

htriple "ht_1000054b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054b2: MOV RDI, R13 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054b5: XOR ESI, ESI 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054b7: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054b9: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054be: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054c1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054c1: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054c3: JS 4294989201 6"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 2 ##
#####################################
*)

htriple "ht_100005521"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005521: MOV RDI, R13 3"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005524"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005524: XOR ESI, ESI 2"
 Post  "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005526"
 Separations ""
 Assertions  ""
 Pre   "RAX = [[0x100008008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005526: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005528"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100008008,8]_0,8] = [[0x100008008,8]_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005528: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000552d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000552d: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005530"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005530: JE 4294989248 6"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 3 ##
#####################################
*)

htriple "ht_1000054c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054c9: LEA RBX, [RBP - 2256] 7"
 Post  "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054d0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054d0: MOV EDX, 1024 5"
 Post  "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054d5: MOV ECX, 1024 5"
 Post  "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054da: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054dd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054dd: MOV RSI, R13 3"
 Post  "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RDI = (RSP_0 -64 0x8d8) ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = (RSP_0 -64 0x8d8) ; RCX = 1024 ; RDX = 1024 ; RDI = (RSP_0 -64 0x8d8) ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054e0: ExternalCall fun____strlcpy_chk 5"
 Post  "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun____strlcpy_chk {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054e5: MOV RDI, RBX 3"
 Post  "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054e8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054e8: MOV ESI, 1 5"
 Post  "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054ed"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____strlcpy_chk) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054ed: ExternalCall fun_0x1000060ec 5"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000060ec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054f2: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000054f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054f5: JNE 4294989291 6"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 4 ##
#####################################
*)

htriple "ht_100005591"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005591: LEA RDI, [RIP + 8545] 7"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005598"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005598: MOV RSI, R13 3"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000559b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000559b: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000559d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000559d: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055a2: MOV RBX, 18446744073709551615 7"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055a9: CMP R15D, 18446744073709551615 4"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055ad: JE 4294989661 6"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 5 ##
#####################################
*)

htriple "ht_1000054fb"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000054fb: TEST BYTE PTR [RIP + 12746], 1 7"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005502"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005502: JNE 4294989291 6"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 6 ##
#####################################
*)

htriple "ht_1000055eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055eb: LEA RSI, [RBP - 2336] 7"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055f2: MOV EDX, 4 5"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 4 ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 4 ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055f7: MOV EDI, R15D 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 4 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDX = 4 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055fa: ExternalCall fun__read 5"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__read {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055ff: CMP RAX, 4 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005603"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005603: JNE 4294989450 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 7 ##
#####################################
*)

htriple "ht_100005508"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005508: TEST BYTE PTR [RIP + 12737], 1 7"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000550f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000550f: JNE 4294989291 6"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 8 ##
#####################################
*)

htriple "ht_100005515"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005515: LEA RDI, [RIP + 8683] 7"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDI = 0x100007707 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000551c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDI = 0x100007707 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000551c: JMP 4294989636 5"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = (RSP_0 -64 0x8d8) ; RDI = 0x100007707 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000547a, blockId == 9 ##
#####################################
*)

htriple "ht_100005536"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005536: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005538"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005538: XORPS XMM0, XMM0 3"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000553b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000553b: LEA RSI, [RBP - 1232] 7"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005542"
 Separations "((RSP_0 -64 1112),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1112),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1112),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1112),16) SEP (0x100008008,8); ((RSP_0 -64 1112),16) SEP (0x100008018,8); ((RSP_0 -64 1112),16) SEP (0x1000086d4,1); ((RSP_0 -64 1112),16) SEP (0x1000086f8,8); ((RSP_0 -64 1112),16) SEP (0x100008728,8); ((RSP_0 -64 1112),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1112),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1112),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005542: MOVAPS XMMWORD PTR [RSI + 128], XMM0 7"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005549"
 Separations "((RSP_0 -64 1128),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1128),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1128),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1128),16) SEP (0x100008008,8); ((RSP_0 -64 1128),16) SEP (0x100008018,8); ((RSP_0 -64 1128),16) SEP (0x1000086d4,1); ((RSP_0 -64 1128),16) SEP (0x1000086f8,8); ((RSP_0 -64 1128),16) SEP (0x100008728,8); ((RSP_0 -64 1128),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1128),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1128),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005549: MOVAPS XMMWORD PTR [RSI + 112], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000554d"
 Separations "((RSP_0 -64 1144),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1144),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1144),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1144),16) SEP (0x100008008,8); ((RSP_0 -64 1144),16) SEP (0x100008018,8); ((RSP_0 -64 1144),16) SEP (0x1000086d4,1); ((RSP_0 -64 1144),16) SEP (0x1000086f8,8); ((RSP_0 -64 1144),16) SEP (0x100008728,8); ((RSP_0 -64 1144),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1144),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1144),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000554d: MOVAPS XMMWORD PTR [RSI + 96], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005551"
 Separations "((RSP_0 -64 1160),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1160),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1160),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1160),16) SEP (0x100008008,8); ((RSP_0 -64 1160),16) SEP (0x100008018,8); ((RSP_0 -64 1160),16) SEP (0x1000086d4,1); ((RSP_0 -64 1160),16) SEP (0x1000086f8,8); ((RSP_0 -64 1160),16) SEP (0x100008728,8); ((RSP_0 -64 1160),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1160),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1160),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005551: MOVAPS XMMWORD PTR [RSI + 80], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005555"
 Separations "((RSP_0 -64 1176),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1176),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1176),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1176),16) SEP (0x100008008,8); ((RSP_0 -64 1176),16) SEP (0x100008018,8); ((RSP_0 -64 1176),16) SEP (0x1000086d4,1); ((RSP_0 -64 1176),16) SEP (0x1000086f8,8); ((RSP_0 -64 1176),16) SEP (0x100008728,8); ((RSP_0 -64 1176),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1176),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1176),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005555: MOVAPS XMMWORD PTR [RSI + 64], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005559"
 Separations "((RSP_0 -64 1192),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1192),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1192),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1192),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1192),16) SEP (0x100008008,8); ((RSP_0 -64 1192),16) SEP (0x100008018,8); ((RSP_0 -64 1192),16) SEP (0x1000086d4,1); ((RSP_0 -64 1192),16) SEP (0x1000086f8,8); ((RSP_0 -64 1192),16) SEP (0x100008728,8); ((RSP_0 -64 1192),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1192),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1192),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005559: MOVAPS XMMWORD PTR [RSI + 48], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000555d"
 Separations "((RSP_0 -64 1208),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1208),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1208),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1208),16) SEP (0x100008008,8); ((RSP_0 -64 1208),16) SEP (0x100008018,8); ((RSP_0 -64 1208),16) SEP (0x1000086d4,1); ((RSP_0 -64 1208),16) SEP (0x1000086f8,8); ((RSP_0 -64 1208),16) SEP (0x100008728,8); ((RSP_0 -64 1208),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1208),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1208),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000555d: MOVAPS XMMWORD PTR [RSI + 32], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005561"
 Separations "((RSP_0 -64 1224),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1224),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1224),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1224),16) SEP (0x100008008,8); ((RSP_0 -64 1224),16) SEP (0x100008018,8); ((RSP_0 -64 1224),16) SEP (0x1000086d4,1); ((RSP_0 -64 1224),16) SEP (0x1000086f8,8); ((RSP_0 -64 1224),16) SEP (0x100008728,8); ((RSP_0 -64 1224),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1224),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1224),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005561: MOVAPS XMMWORD PTR [RSI + 16], XMM0 4"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005565"
 Separations "((RSP_0 -64 1240),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1240),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1240),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1240),16) SEP (0x100008008,8); ((RSP_0 -64 1240),16) SEP (0x100008018,8); ((RSP_0 -64 1240),16) SEP (0x1000086d4,1); ((RSP_0 -64 1240),16) SEP (0x1000086f8,8); ((RSP_0 -64 1240),16) SEP (0x100008728,8); ((RSP_0 -64 1240),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1240),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1240),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005565: MOVAPS XMMWORD PTR [RSI], XMM0 3"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005568"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005568: MOV EDI, EAX 2"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000556a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000556a: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000556f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000556f: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005571"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005571: JE 4294989369 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 10 ##
######################################
*)

htriple "ht_1000055c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055c0: LEA RDI, [RIP + 8498] 7"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055c7: MOV RSI, R13 3"
 Post  "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055ca: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RDI = 0x1000076f9 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055cc: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = RBX_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 11 ##
######################################
*)

htriple "ht_100005577"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005577: LEA RDI, [RIP + 9286] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000557e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000557e: MOV RSI, R13 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005581"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005581: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005583"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005583: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 12 ##
######################################
*)

htriple "ht_100005639"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005639: MOV R15D, 1 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000563f"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000563f: CMP BYTE PTR [RIP + 12422], 0 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005646"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005646: JE 4294989495 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 13 ##
######################################
*)

htriple "ht_1000055b3"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000055b3: MOV EDI, R15D 3"
 Post  "RBX = 0xffffffffffffffff ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055b6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0xffffffffffffffff ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000055b6: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000055bb: JMP 4294989661 5"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 14 ##
######################################
*)

htriple "ht_10000575d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000575d: CMP BYTE PTR [RIP + 12172], 1 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005764"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005764: JNE 4294989697 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 15 ##
######################################
*)

htriple "ht_1000055d1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055d1: MOV RCX, 18446744073709551615 7"
 Post  "RCX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 16 ##
######################################
*)

htriple "ht_1000055e2"
 Separations "((RSI_0 +64 96),8) SEP (RSP_0,8); ((RSI_0 +64 96),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 96),8) SEP (0x100008008,8); ((RSI_0 +64 96),8) SEP (0x100008018,8); ((RSI_0 +64 96),8) SEP (0x1000086d4,1); ((RSI_0 +64 96),8) SEP (0x1000086f8,8); ((RSI_0 +64 96),8) SEP (0x100008728,8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 196),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1112),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1128),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1144),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1160),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1176),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1192),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1208),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1224),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1240),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8e0),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8e4),4); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8f0),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8f8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x908),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x918),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x928),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x938),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x948),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x958),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x968),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x978),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x988),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x998),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9a8),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9b8),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9c8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055e2: MOV RBX, QWORD PTR [R14 + 96] 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055e6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055e6: JMP 4294989707 5"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 17 ##
######################################
*)

htriple "ht_1000057bc"
 Separations "(0x100008008,8) SEP (bot(fun_0x1000060ec),8); (0x100008008,8) SEP (RSP_0,8); (0x100008008,8) SEP ([0x100008008,8]_0,8); (0x100008008,8) SEP ([0x100008018,8]_0,8); (0x100008008,8) SEP ((RSI_0 +64 96),8); (0x100008008,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x100008008,8) SEP ((RSP_0 -64 8),8); (0x100008008,8) SEP ((RSP_0 -64 16),8); (0x100008008,8) SEP ((RSP_0 -64 24),8); (0x100008008,8) SEP ((RSP_0 -64 32),8); (0x100008008,8) SEP ((RSP_0 -64 40),8); (0x100008008,8) SEP ((RSP_0 -64 48),8); (0x100008008,8) SEP ((RSP_0 -64 56),8); (0x100008008,8) SEP ((RSP_0 -64 196),8); (0x100008008,8) SEP ((RSP_0 -64 1112),16); (0x100008008,8) SEP ((RSP_0 -64 1128),16); (0x100008008,8) SEP ((RSP_0 -64 1144),16); (0x100008008,8) SEP ((RSP_0 -64 1160),16); (0x100008008,8) SEP ((RSP_0 -64 1176),16); (0x100008008,8) SEP ((RSP_0 -64 1192),16); (0x100008008,8) SEP ((RSP_0 -64 1208),16); (0x100008008,8) SEP ((RSP_0 -64 1224),16); (0x100008008,8) SEP ((RSP_0 -64 1240),16); (0x100008008,8) SEP ((RSP_0 -64 0x8e0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8e4),4); (0x100008008,8) SEP ((RSP_0 -64 0x8f0),8); (0x100008008,8) SEP ((RSP_0 -64 0x8f8),8); (0x100008008,8) SEP ((RSP_0 -64 0x908),8); (0x100008008,8) SEP ((RSP_0 -64 0x918),8); (0x100008008,8) SEP ((RSP_0 -64 0x928),16); (0x100008008,8) SEP ((RSP_0 -64 0x938),16); (0x100008008,8) SEP ((RSP_0 -64 0x948),16); (0x100008008,8) SEP ((RSP_0 -64 0x958),16); (0x100008008,8) SEP ((RSP_0 -64 0x968),16); (0x100008008,8) SEP ((RSP_0 -64 0x978),16); (0x100008008,8) SEP ((RSP_0 -64 0x988),16); (0x100008008,8) SEP ((RSP_0 -64 0x998),16); (0x100008008,8) SEP ((RSP_0 -64 0x9a8),16); (0x100008008,8) SEP ((RSP_0 -64 0x9b8),16); (0x100008008,8) SEP ((RSP_0 -64 0x9c8),8); (0x100008008,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057bc: MOV RAX, QWORD PTR [RIP + 10309] 7"
 Post  "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057c3"
 Separations "([0x100008008,8]_0,8) SEP (bot(fun_0x1000060ec),8); ([0x100008008,8]_0,8) SEP (RSP_0,8); ([0x100008008,8]_0,8) SEP ([0x100008018,8]_0,8); ([0x100008008,8]_0,8) SEP (0x100008008,8); ([0x100008008,8]_0,8) SEP (0x100008018,8); ([0x100008008,8]_0,8) SEP (0x100008570,8); ([0x100008008,8]_0,8) SEP (0x100008578,4); ([0x100008008,8]_0,8) SEP (0x1000086cc,1); ([0x100008008,8]_0,8) SEP (0x1000086d0,1); ([0x100008008,8]_0,8) SEP (0x1000086d4,1); ([0x100008008,8]_0,8) SEP (0x1000086f8,8); ([0x100008008,8]_0,8) SEP (0x100008728,8); ([0x100008008,8]_0,8) SEP ((RSI_0 +64 96),8); ([0x100008008,8]_0,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 104),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 196),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1112),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1128),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1144),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1160),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1176),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1192),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1192),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1208),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1224),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1234),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 1240),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8e4),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f0),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f8),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x8f8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x900),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x908),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x918),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x924),4); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x928),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x928),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x938),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x948),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x958),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x958),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x968),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x978),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x988),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x988),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x998),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9a8),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b2),2); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b5),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b6),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b7),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b8),1); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9b8),16); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 0x9c8),8); ([0x100008008,8]_0,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = [0x100008008,8]_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057c3: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057c6"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 56),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100008008,8); ((RSP_0 -64 56),8) SEP (0x100008018,8); ((RSP_0 -64 56),8) SEP (0x1000086d4,1); ((RSP_0 -64 56),8) SEP (0x1000086f8,8); ((RSP_0 -64 56),8) SEP (0x100008728,8); ((RSP_0 -64 56),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 56),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 56),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057c6: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057ca"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057ca: JNE 4294992079 6"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 18 ##
######################################
*)

htriple "ht_100005609"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005609: LEA RDI, [RBP - 2336] 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005610"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RDI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005610: ExternalCall fun_0x1000032c1 5"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000032c1 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005615"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005615: MOV EBX, EAX 2"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005617"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005617: CMP EAX, 6 3"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000561a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000561a: JNE 4294989570 6"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 19 ##
######################################
*)

htriple "ht_10000568a"
 Separations "(0x1000086d4,1) SEP (bot(fun_0x1000060ec),8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ([0x100008008,8]_0,8); (0x1000086d4,1) SEP ([0x100008018,8]_0,8); (0x1000086d4,1) SEP ((RSI_0 +64 96),8); (0x1000086d4,1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 56),8); (0x1000086d4,1) SEP ((RSP_0 -64 196),8); (0x1000086d4,1) SEP ((RSP_0 -64 1112),16); (0x1000086d4,1) SEP ((RSP_0 -64 1128),16); (0x1000086d4,1) SEP ((RSP_0 -64 1144),16); (0x1000086d4,1) SEP ((RSP_0 -64 1160),16); (0x1000086d4,1) SEP ((RSP_0 -64 1176),16); (0x1000086d4,1) SEP ((RSP_0 -64 1192),16); (0x1000086d4,1) SEP ((RSP_0 -64 1208),16); (0x1000086d4,1) SEP ((RSP_0 -64 1224),16); (0x1000086d4,1) SEP ((RSP_0 -64 1240),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e4),4); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f8),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x908),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x918),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x928),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x938),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x948),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x958),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x968),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x978),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x988),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x998),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9a8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9b8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9c8),8); (0x1000086d4,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000568a: CMP BYTE PTR [RIP + 12355], 0 7"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005691"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005691: JNE 4294989646 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 20 ##
######################################
*)

htriple "ht_100005620"
 Separations "(0x1000086d4,1) SEP (bot(fun_0x1000060ec),8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ([0x100008008,8]_0,8); (0x1000086d4,1) SEP ([0x100008018,8]_0,8); (0x1000086d4,1) SEP ((RSI_0 +64 96),8); (0x1000086d4,1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 56),8); (0x1000086d4,1) SEP ((RSP_0 -64 196),8); (0x1000086d4,1) SEP ((RSP_0 -64 1112),16); (0x1000086d4,1) SEP ((RSP_0 -64 1128),16); (0x1000086d4,1) SEP ((RSP_0 -64 1144),16); (0x1000086d4,1) SEP ((RSP_0 -64 1160),16); (0x1000086d4,1) SEP ((RSP_0 -64 1176),16); (0x1000086d4,1) SEP ((RSP_0 -64 1192),16); (0x1000086d4,1) SEP ((RSP_0 -64 1208),16); (0x1000086d4,1) SEP ((RSP_0 -64 1224),16); (0x1000086d4,1) SEP ((RSP_0 -64 1240),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e4),4); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f8),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x908),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x918),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x928),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x938),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x948),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x958),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x968),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x978),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x988),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x998),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9a8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9b8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9c8),8); (0x1000086d4,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005620: TEST BYTE PTR [RIP + 12461], 1 7"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005627"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005627: JNE 4294989570 6"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 21 ##
######################################
*)

htriple "ht_100005702"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005702: XOR R12D, R12D 3"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005705"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005705: TEST EBX, EBX 2"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005707"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005707: JNE 4294990602 6"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 22 ##
######################################
*)

htriple "ht_10000562d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000562d: LEA RDI, [RIP + 8447] 7"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007733 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005634"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007733 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005634: JMP 4294989636 5"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007733 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 23 ##
######################################
*)

htriple "ht_100005744"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005744: MOV RSI, R13 3"
 Post  "RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005747"
 Separations ""
 Assertions  ""
 Pre   "RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005747: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005749"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005749: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 24 ##
######################################
*)

htriple "ht_100005648"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005648: MOV RDI, R13 3"
 Post  "RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000564b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000564b: ExternalCall fun__basename 5"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__basename {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005650"
 Separations "((RSP_0 -64 1192),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1192),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1192),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1192),4) SEP (0x100008008,8); ((RSP_0 -64 1192),4) SEP (0x100008018,8); ((RSP_0 -64 1192),4) SEP (0x1000086d4,1); ((RSP_0 -64 1192),4) SEP (0x1000086f8,8); ((RSP_0 -64 1192),4) SEP (0x100008728,8); ((RSP_0 -64 1192),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1192),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1192),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 1192),16) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005650: MOV R8D, DWORD PTR [RBP - 1184] 7"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005657"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005657: LEA RDX, [RBP - 2296] 7"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000565e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000565e: MOV EDI, EBX 2"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005660"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005660: MOV ESI, R15D 3"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005663"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005663: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun__basename) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005666"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__basename) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun__basename) ; RDX = (RSP_0 -64 0x900) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005666: ExternalCall fun_0x10000505f 5"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000505f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000566b"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000566b: CMP BYTE PTR [RIP + 12378], 1 7"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005672"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005672: JNE 4294989794 6"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 25 ##
######################################
*)

htriple "ht_1000056b7"
 Separations "((RSP_0 -64 1234),2) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1234),2) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 1234),2) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1234),2) SEP (0x100008008,8); ((RSP_0 -64 1234),2) SEP (0x100008018,8); ((RSP_0 -64 1234),2) SEP (0x1000086d4,1); ((RSP_0 -64 1234),2) SEP (0x1000086f8,8); ((RSP_0 -64 1234),2) SEP (0x100008728,8); ((RSP_0 -64 1234),2) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1234),2) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1234),2) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056b7: MOVZX EDX, WORD PTR [RBP - 1226] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056be"
 Separations "(0x1000086d4,1) SEP (bot(fun_0x1000060ec),8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ([0x100008008,8]_0,8); (0x1000086d4,1) SEP ([0x100008018,8]_0,8); (0x1000086d4,1) SEP ((RSI_0 +64 96),8); (0x1000086d4,1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 56),8); (0x1000086d4,1) SEP ((RSP_0 -64 196),8); (0x1000086d4,1) SEP ((RSP_0 -64 1112),16); (0x1000086d4,1) SEP ((RSP_0 -64 1128),16); (0x1000086d4,1) SEP ((RSP_0 -64 1144),16); (0x1000086d4,1) SEP ((RSP_0 -64 1160),16); (0x1000086d4,1) SEP ((RSP_0 -64 1176),16); (0x1000086d4,1) SEP ((RSP_0 -64 1192),16); (0x1000086d4,1) SEP ((RSP_0 -64 1208),16); (0x1000086d4,1) SEP ((RSP_0 -64 1224),16); (0x1000086d4,1) SEP ((RSP_0 -64 1240),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e4),4); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f8),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x908),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x918),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x928),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x938),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x948),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x958),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x968),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x978),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x988),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x998),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9a8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9b8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9c8),8); (0x1000086d4,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056be: MOV AL, BYTE PTR [RIP + 12304] 6"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056c4"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056c4: CMP EDX, 2 3"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056c7: JB 4294989843 6"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 26 ##
######################################
*)

htriple "ht_100005678"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005678: MOV RCX, RAX 3"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000567b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000567b: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000567f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000567f: JNE 4294991036 6"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 27 ##
######################################
*)

htriple "ht_1000057e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057e2: LEA RSI, [RBP - 2480] 7"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057e9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057e9: MOV EDI, R15D 3"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057ec: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057f1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057f1: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057f3: JE 4294990057 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 28 ##
######################################
*)

htriple "ht_100005685"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005685: JMP 4294989272 5"
 Post  "RAX = bot(fun_0x10000505f) ; RBX = b32(bot(fun__open)) ; RCX = bot(fun_0x10000505f) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 29 ##
######################################
*)

htriple "ht_100005cbc"
 Separations "((RSP_0 -64 0x900),8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cbc: MOV RCX, QWORD PTR [RBP - 2296] 7"
 Post  "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cc3"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cc3: JMP 4294989272 5"
 Post  "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 30 ##
######################################
*)

htriple "ht_1000055d8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055d8: CMP RCX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000055dc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000055dc: JE 4294989756 6"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 31 ##
######################################
*)

htriple "ht_100005697"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005697: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000569b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000569b: JNE 4294989629 6"
 Post  "RAX = bot(fun__read) ; RBX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 32 ##
######################################
*)

htriple "ht_10000574e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000574e: MOV EDI, R15D 3"
 Post  "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005751"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005751: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 33 ##
######################################
*)

htriple "ht_1000056a1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056a1: LEA RDI, [RIP + 8317] 7"
 Post  "RDI = 0x100007725 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056a8"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007725 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056a8: MOV RSI, R13 3"
 Post  "RDI = 0x100007725 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 34 ##
######################################
*)

htriple "ht_10000573d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000573d: LEA RDI, [RIP + 6772] 7"
 Post  "RDI = 0x1000071b8 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 35 ##
######################################
*)

htriple "ht_1000056cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056cd: TEST AL, 1 2"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056cf: JNE 4294989843 6"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 36 ##
######################################
*)

htriple "ht_100005813"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005813: TEST AL, 1 2"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005815"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005815: JNE 4294989892 2"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 37 ##
######################################
*)

htriple "ht_1000056d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056d5: DEC EDX 2"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056d7: CMP EDX, 1 3"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056da"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056da: LEA RAX, [RIP + 6437] 7"
 Post  "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056e1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056e1: LEA RCX, [RIP + 8977] 7"
 Post  "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RCX = 0x1000079f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056e8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RCX = 0x1000079f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056e8: CMOVE RCX, RAX 4"
 Post  "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056ec"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056ec: LEA RDI, [RIP + 8931] 7"
 Post  "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056f3: MOV RSI, R13 3"
 Post  "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056f6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056f8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079d6 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056f8: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000056fd: JMP 4294989192 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 38 ##
######################################
*)

htriple "ht_100005588"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005588: MOV EDI, EBX 2"
 Post  "RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000558a"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000558a: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000558f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000558f: JMP 4294989265 2"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 39 ##
######################################
*)

htriple "ht_10000570d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000570d: TEST BYTE PTR [RIP + 12236], 1 7"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005714"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005714: JE 4294990602 6"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 40 ##
######################################
*)

htriple "ht_100005b0a"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b0a: MOV QWORD PTR [RBP - 2264], R12 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b11"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b11: XOR R12D, R12D 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b14"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b14: MOV EDI, R15D 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b17"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b17: XOR ESI, ESI 2"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b19"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b19: XOR EDX, EDX 2"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b1b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b1b: ExternalCall fun__lseek 5"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 FunctionConstraints "PRESERVES fun__lseek {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b20"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b20: XORPS XMM0, XMM0 3"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b23"
 Separations "((RSP_0 -64 0x9b8),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b8),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b8),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b8),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b8),16) SEP (0x100008008,8); ((RSP_0 -64 0x9b8),16) SEP (0x100008018,8); ((RSP_0 -64 0x9b8),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b8),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b8),16) SEP (0x100008728,8); ((RSP_0 -64 0x9b8),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b8),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b8),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b23: MOVAPS XMMWORD PTR [RBP - 2480], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b2a"
 Separations "((RSP_0 -64 0x9a8),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9a8),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9a8),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9a8),16) SEP (0x100008008,8); ((RSP_0 -64 0x9a8),16) SEP (0x100008018,8); ((RSP_0 -64 0x9a8),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x9a8),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x9a8),16) SEP (0x100008728,8); ((RSP_0 -64 0x9a8),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9a8),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9a8),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0"
 Instruction "100005b2a: MOVAPS XMMWORD PTR [RBP - 2464], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b31"
 Separations "((RSP_0 -64 0x998),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x998),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x998),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x998),16) SEP (0x100008008,8); ((RSP_0 -64 0x998),16) SEP (0x100008018,8); ((RSP_0 -64 0x998),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x998),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x998),16) SEP (0x100008728,8); ((RSP_0 -64 0x998),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x998),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x998),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0"
 Instruction "100005b31: MOVAPS XMMWORD PTR [RBP - 2448], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b38"
 Separations "((RSP_0 -64 0x988),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x988),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x988),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x988),16) SEP (0x100008008,8); ((RSP_0 -64 0x988),16) SEP (0x100008018,8); ((RSP_0 -64 0x988),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x988),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x988),16) SEP (0x100008728,8); ((RSP_0 -64 0x988),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x988),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x988),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0"
 Instruction "100005b38: MOVAPS XMMWORD PTR [RBP - 2432], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b3f"
 Separations "((RSP_0 -64 0x978),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x978),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x978),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x978),16) SEP (0x100008008,8); ((RSP_0 -64 0x978),16) SEP (0x100008018,8); ((RSP_0 -64 0x978),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x978),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x978),16) SEP (0x100008728,8); ((RSP_0 -64 0x978),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x978),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x978),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0"
 Instruction "100005b3f: MOVAPS XMMWORD PTR [RBP - 2416], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b46"
 Separations "((RSP_0 -64 0x968),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x968),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x968),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x968),16) SEP (0x100008008,8); ((RSP_0 -64 0x968),16) SEP (0x100008018,8); ((RSP_0 -64 0x968),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x968),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x968),16) SEP (0x100008728,8); ((RSP_0 -64 0x968),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x968),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x968),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0"
 Instruction "100005b46: MOVAPS XMMWORD PTR [RBP - 2400], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b4d"
 Separations "((RSP_0 -64 0x958),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x958),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x958),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x958),16) SEP (0x100008008,8); ((RSP_0 -64 0x958),16) SEP (0x100008018,8); ((RSP_0 -64 0x958),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x958),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x958),16) SEP (0x100008728,8); ((RSP_0 -64 0x958),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x958),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x958),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0"
 Instruction "100005b4d: MOVAPS XMMWORD PTR [RBP - 2384], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b54"
 Separations "((RSP_0 -64 0x948),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x948),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x948),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x948),16) SEP (0x100008008,8); ((RSP_0 -64 0x948),16) SEP (0x100008018,8); ((RSP_0 -64 0x948),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x948),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x948),16) SEP (0x100008728,8); ((RSP_0 -64 0x948),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x948),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x948),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0"
 Instruction "100005b54: MOVAPS XMMWORD PTR [RBP - 2368], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b5b"
 Separations "((RSP_0 -64 0x938),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x938),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x938),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x938),16) SEP (0x100008008,8); ((RSP_0 -64 0x938),16) SEP (0x100008018,8); ((RSP_0 -64 0x938),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x938),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x938),16) SEP (0x100008728,8); ((RSP_0 -64 0x938),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x938),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x938),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0"
 Instruction "100005b5b: MOVAPS XMMWORD PTR [RBP - 2352], XMM0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b62"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b62: CMP BYTE PTR [RIP + 11111], 0 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b69"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b69: JNE 4294990870 6"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 41 ##
######################################
*)

htriple "ht_10000571a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000571a: LEA RSI, [RBP - 2480] 7"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005721"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005721: MOV EDX, 4 5"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 4 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005726"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 4 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005726: MOV ECX, 4 5"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 4 ; RDX = 4 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000572b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 4 ; RDX = 4 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000572b: MOV EDI, R15D 3"
 Post  "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 4 ; RDX = 4 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000572e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000032c1) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 4 ; RDX = 4 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000572e: ExternalCall fun__pread 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__pread {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005733"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005733: CMP RAX, 4 4"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005737"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005737: JAE 4294990290 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 42 ##
######################################
*)

htriple "ht_1000059d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059d2: CMP RAX, 18446744073709551615 4"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059d6: JE 4294991048 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 43 ##
######################################
*)

htriple "ht_100005766"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005766: TEST BYTE PTR [RIP + 12159], 1 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000576d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000576d: JE 4294989697 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 44 ##
######################################
*)

htriple "ht_100005781"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005781: CMP RBX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005785"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005785: JE 4294989756 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 45 ##
######################################
*)

htriple "ht_10000576f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000576f: XOR ESI, ESI 2"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005771"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005771: CMP RBX, 18446744073709551615 4"
 Post  "RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005775"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005775: SETNE SIL 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005779"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005779: MOV RDI, R13 3"
 Post  "RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000577c"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000577c: ExternalCall fun_0x1000048e5 5"
 Post  "RAX = bot(fun_0x1000048e5) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000048e5 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 46 ##
######################################
*)

htriple "ht_100005787"
 Separations "((RSI_0 +64 96),8) SEP (RSP_0,8); ((RSI_0 +64 96),8) SEP ([0x100008008,8]_0,8); ((RSI_0 +64 96),8) SEP (0x100008008,8); ((RSI_0 +64 96),8) SEP (0x100008018,8); ((RSI_0 +64 96),8) SEP (0x1000086d4,1); ((RSI_0 +64 96),8) SEP (0x1000086f8,8); ((RSI_0 +64 96),8) SEP (0x100008728,8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 56),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 196),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1112),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1128),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1144),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1160),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1176),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1192),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1208),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1224),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 1240),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8e0),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8e4),4); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8f0),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x8f8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x908),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x918),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x928),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x938),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x948),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x958),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x968),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x978),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x988),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x998),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9a8),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9b8),16); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 0x9c8),8); ((RSI_0 +64 96),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005787: MOV RCX, QWORD PTR [R14 + 96] 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 47 ##
######################################
*)

htriple "ht_10000578b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000578b: CMP BYTE PTR [RIP + 12122], 0 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005792"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100005792: JNE 4294989756 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 48 ##
######################################
*)

htriple "ht_100005794"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "100005794: TEST BYTE PTR [RIP + 12117], 1 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000579b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000579b: JE 4294989756 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 49 ##
######################################
*)

htriple "ht_10000579d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000579d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000579f"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "10000579f: CMP BYTE PTR [RIP + 12070], 0 7"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057a6: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = 0 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057ad: CMOVNE RSI, RAX 4"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057b1: MOV RDI, R13 3"
 Post  "RAX = 0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057b4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057b4: MOV RDX, RBX 3"
 Post  "RAX = 0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057b7: ExternalCall fun_0x10000483c 5"
 Post  "RAX = bot(fun_0x10000483c) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun_0x10000483c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 50 ##
######################################
*)

htriple "ht_1000057d0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057d0: ADD RSP, 2456 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057d7"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 40),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100008008,8); ((RSP_0 -64 40),8) SEP (0x100008018,8); ((RSP_0 -64 40),8) SEP (0x1000086d4,1); ((RSP_0 -64 40),8) SEP (0x1000086f8,8); ((RSP_0 -64 40),8) SEP (0x100008728,8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 40),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057d7: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057d8"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 32),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100008008,8); ((RSP_0 -64 32),8) SEP (0x100008018,8); ((RSP_0 -64 32),8) SEP (0x1000086d4,1); ((RSP_0 -64 32),8) SEP (0x1000086f8,8); ((RSP_0 -64 32),8) SEP (0x100008728,8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 32),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057d8: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057da"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 24),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100008008,8); ((RSP_0 -64 24),8) SEP (0x100008018,8); ((RSP_0 -64 24),8) SEP (0x1000086d4,1); ((RSP_0 -64 24),8) SEP (0x1000086f8,8); ((RSP_0 -64 24),8) SEP (0x100008728,8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 24),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057da: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057dc"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 16),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100008008,8); ((RSP_0 -64 16),8) SEP (0x100008018,8); ((RSP_0 -64 16),8) SEP (0x1000086d4,1); ((RSP_0 -64 16),8) SEP (0x1000086f8,8); ((RSP_0 -64 16),8) SEP (0x100008728,8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 16),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057dc: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057de"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100008008,8); ((RSP_0 -64 8),8) SEP (0x100008018,8); ((RSP_0 -64 8),8) SEP (0x1000086d4,1); ((RSP_0 -64 8),8) SEP (0x1000086f8,8); ((RSP_0 -64 8),8) SEP (0x100008728,8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057de: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057e0"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057e0: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000057e1"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000057e1: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 51 ##
######################################
*)

htriple "ht_1000060cf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 Instruction "1000060cf: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 52 ##
######################################
*)

htriple "ht_1000057f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000057f9: LEA RDI, [RIP + 8644] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005800"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005800: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005807"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005807: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005809"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079c4 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005809: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000580e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000580e: JMP 4294990980 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 53 ##
######################################
*)

htriple "ht_1000058e9"
 Separations "((RSP_0 -64 0x958),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x958),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x958),8) SEP (0x100008008,8); ((RSP_0 -64 0x958),8) SEP (0x100008018,8); ((RSP_0 -64 0x958),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x958),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x958),8) SEP (0x100008728,8); ((RSP_0 -64 0x958),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x958),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x958),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x958),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058e9: MOV RDX, QWORD PTR [RBP - 2384] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058f0"
 Separations "((RSP_0 -64 0x900),8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058f0: MOV RCX, QWORD PTR [RBP - 2296] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058f7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058f7: CMP RDX, RCX 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058fa: JNE 4294990959 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 54 ##
######################################
*)

htriple "ht_100005817"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005817: MOV RDI, R13 3"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000581a"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000581a: XOR ESI, ESI 2"
 Post  "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000581c"
 Separations ""
 Assertions  ""
 Pre   "RAX = overwrite(8,bot(fun__fstat_INODE64),b8([0x1000086d4,1]_0)) ; RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSI = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086f8,8] = [0x1000086f8,8]_0 ; [0x100008728,8] = RDI_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000581c: ExternalCall fun_0x1000060ec 5"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000060ec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005821"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005821: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005824"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005824: JE 4294989892 2"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 55 ##
######################################
*)

htriple "ht_100005844"
 Separations "(0x100008570,8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005844: MOV R8, QWORD PTR [RIP + 11557] 7"
 Post  "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000584b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000584b: LEA RDX, [RIP + 8655] 7"
 Post  "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005852"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005852: LEA R12, [RBP - 2256] 7"
 Post  "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005859"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005859: MOV ESI, 1024 5"
 Post  "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000585e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000585e: MOV RDI, R12 3"
 Post  "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005861"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005861: MOV RCX, R13 3"
 Post  "RBX = b32(bot(fun__open)) ; RCX = RDI_0 ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005864"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RCX = RDI_0 ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005864: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RCX = RDI_0 ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005866"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RCX = RDI_0 ; RDX = 0x100007a21 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005866: ExternalCall fun__snprintf 5"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__snprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000586b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000586b: CMP EAX, 1024 5"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005870"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005870: JB 4294989973 2"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 56 ##
######################################
*)

htriple "ht_100005826"
 Separations "(bot(fun_0x1000060ec),8) SEP (RSP_0,8); (bot(fun_0x1000060ec),8) SEP ([0x100008008,8]_0,8); (bot(fun_0x1000060ec),8) SEP (0x100008008,8); (bot(fun_0x1000060ec),8) SEP (0x100008018,8); (bot(fun_0x1000060ec),8) SEP (0x1000086d4,1); (bot(fun_0x1000060ec),8) SEP (0x1000086f8,8); (bot(fun_0x1000060ec),8) SEP (0x100008728,8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 8),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 16),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 24),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 32),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 40),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 48),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 56),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 196),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1112),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1128),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1144),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1160),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1176),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1192),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1208),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1224),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 1240),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x8e0),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x8e4),4); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x8f0),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x8f8),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x908),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x918),8); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x928),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x938),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x948),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x958),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x968),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x978),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x988),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x998),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x9a8),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x9b8),16); (bot(fun_0x1000060ec),8) SEP ((RSP_0 -64 0x9c8),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005826: MOV RDX, QWORD PTR [RAX] 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005829"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005829: CMP BYTE PTR [RDX], 0 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000582c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000582c: JE 4294989892 2"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 57 ##
######################################
*)

htriple "ht_10000582e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000582e: LEA RDI, [RIP + 8646] 7"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005835"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005835: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005838"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000060ec) ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005838: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000583a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x1000079fb ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000583a: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000583f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000583f: JMP 4294989192 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 58 ##
######################################
*)

htriple "ht_100005872"
 Separations "(0x100008578,4) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005872: MOVSXD RDX, DWORD PTR [RIP + 11519] 7"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005879"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005879: SUB R12, RDX 3"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000587c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000587c: ADD R12, 1023 7"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005883"
 Separations "(0x100008570,8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005883: MOV RSI, QWORD PTR [RIP + 11494] 7"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000588a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000588a: INC RDX 3"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000588d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000588d: MOV RDI, R12 3"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005890"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005890: ExternalCall fun__memcpy 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__memcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 59 ##
######################################
*)

htriple "ht_100005895"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005895: LEA RDI, [RBP - 2256] 7"
 Post  "RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000589c"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000589c: ExternalCall fun_0x100006174 5"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x100006174 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058a1: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058a3: JE 4294989192 6"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 60 ##
######################################
*)

htriple "ht_1000058a9"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058a9: CMP BYTE PTR [RIP + 11804], 0 7"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058b0: JNE 4294989384 6"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 61 ##
######################################
*)

htriple "ht_1000058b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058b6: LEA R12, [RBP - 2256] 7"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058bd: MOV RDI, R12 3"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058c0: MOV ESI, 2561 5"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058c5: MOV EDX, 384 5"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun__open)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058ca: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058cc: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058d1: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058d4: JE 4294991066 6"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 62 ##
######################################
*)

htriple "ht_1000058da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058da: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058dd"
 Separations "(0x1000086f8,8) SEP (bot(fun_0x1000060ec),8); (0x1000086f8,8) SEP (RSP_0,8); (0x1000086f8,8) SEP ([0x100008008,8]_0,8); (0x1000086f8,8) SEP ([0x100008018,8]_0,8); (0x1000086f8,8) SEP ((RSI_0 +64 96),8); (0x1000086f8,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086f8,8) SEP ((RSP_0 -64 8),8); (0x1000086f8,8) SEP ((RSP_0 -64 16),8); (0x1000086f8,8) SEP ((RSP_0 -64 24),8); (0x1000086f8,8) SEP ((RSP_0 -64 32),8); (0x1000086f8,8) SEP ((RSP_0 -64 40),8); (0x1000086f8,8) SEP ((RSP_0 -64 48),8); (0x1000086f8,8) SEP ((RSP_0 -64 56),8); (0x1000086f8,8) SEP ((RSP_0 -64 196),8); (0x1000086f8,8) SEP ((RSP_0 -64 1112),16); (0x1000086f8,8) SEP ((RSP_0 -64 1128),16); (0x1000086f8,8) SEP ((RSP_0 -64 1144),16); (0x1000086f8,8) SEP ((RSP_0 -64 1160),16); (0x1000086f8,8) SEP ((RSP_0 -64 1176),16); (0x1000086f8,8) SEP ((RSP_0 -64 1192),16); (0x1000086f8,8) SEP ((RSP_0 -64 1208),16); (0x1000086f8,8) SEP ((RSP_0 -64 1224),16); (0x1000086f8,8) SEP ((RSP_0 -64 1240),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e4),4); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f8),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x908),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x918),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x928),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x938),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x948),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x958),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x968),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x978),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x988),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x998),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9a8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9b8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9c8),8); (0x1000086f8,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058dd: MOV QWORD PTR [RIP + 11796], R12 7"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = (RSP_0 -64 0x8d8) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000058e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = (RSP_0 -64 0x8d8) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000058e4: JMP 4294989384 5"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = (RSP_0 -64 0x8d8) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 63 ##
######################################
*)

htriple "ht_100005cda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cda: LEA RDI, [RIP + 7493] 7"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ce1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ce1: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ce8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ce8: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cea"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a26 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cea: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cef"
 Separations "(0x100008018,8) SEP (bot(fun_0x1000060ec),8); (0x100008018,8) SEP (RSP_0,8); (0x100008018,8) SEP ([0x100008008,8]_0,8); (0x100008018,8) SEP ([0x100008018,8]_0,8); (0x100008018,8) SEP ((RSI_0 +64 96),8); (0x100008018,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x100008018,8) SEP ((RSP_0 -64 8),8); (0x100008018,8) SEP ((RSP_0 -64 16),8); (0x100008018,8) SEP ((RSP_0 -64 24),8); (0x100008018,8) SEP ((RSP_0 -64 32),8); (0x100008018,8) SEP ((RSP_0 -64 40),8); (0x100008018,8) SEP ((RSP_0 -64 48),8); (0x100008018,8) SEP ((RSP_0 -64 56),8); (0x100008018,8) SEP ((RSP_0 -64 196),8); (0x100008018,8) SEP ((RSP_0 -64 1112),16); (0x100008018,8) SEP ((RSP_0 -64 1128),16); (0x100008018,8) SEP ((RSP_0 -64 1144),16); (0x100008018,8) SEP ((RSP_0 -64 1160),16); (0x100008018,8) SEP ((RSP_0 -64 1176),16); (0x100008018,8) SEP ((RSP_0 -64 1192),16); (0x100008018,8) SEP ((RSP_0 -64 1208),16); (0x100008018,8) SEP ((RSP_0 -64 1224),16); (0x100008018,8) SEP ((RSP_0 -64 1240),16); (0x100008018,8) SEP ((RSP_0 -64 0x8e0),8); (0x100008018,8) SEP ((RSP_0 -64 0x8e4),4); (0x100008018,8) SEP ((RSP_0 -64 0x8f0),8); (0x100008018,8) SEP ((RSP_0 -64 0x8f8),8); (0x100008018,8) SEP ((RSP_0 -64 0x908),8); (0x100008018,8) SEP ((RSP_0 -64 0x918),8); (0x100008018,8) SEP ((RSP_0 -64 0x928),16); (0x100008018,8) SEP ((RSP_0 -64 0x938),16); (0x100008018,8) SEP ((RSP_0 -64 0x948),16); (0x100008018,8) SEP ((RSP_0 -64 0x958),16); (0x100008018,8) SEP ((RSP_0 -64 0x968),16); (0x100008018,8) SEP ((RSP_0 -64 0x978),16); (0x100008018,8) SEP ((RSP_0 -64 0x988),16); (0x100008018,8) SEP ((RSP_0 -64 0x998),16); (0x100008018,8) SEP ((RSP_0 -64 0x9a8),16); (0x100008018,8) SEP ((RSP_0 -64 0x9b8),16); (0x100008018,8) SEP ((RSP_0 -64 0x9c8),8); (0x100008018,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cef: MOV RAX, QWORD PTR [RIP + 8994] 7"
 Post  "RAX = [0x100008018,8]_0 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cf6"
 Separations "([0x100008018,8]_0,8) SEP (RSP_0,8); ([0x100008018,8]_0,8) SEP ([0x100008008,8]_0,8); ([0x100008018,8]_0,8) SEP (0x100008008,8); ([0x100008018,8]_0,8) SEP (0x100008018,8); ([0x100008018,8]_0,8) SEP (0x1000086d4,1); ([0x100008018,8]_0,8) SEP (0x1000086f8,8); ([0x100008018,8]_0,8) SEP (0x100008728,8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 196),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1112),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1128),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1144),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1160),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1176),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1192),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1208),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1224),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 1240),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x8e0),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x8e4),4); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x8f0),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x8f8),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x908),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x918),8); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x928),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x938),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x948),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x958),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x968),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x978),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x988),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x998),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x9a8),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x9b8),16); ([0x100008018,8]_0,8) SEP ((RSP_0 -64 0x9c8),8)"
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cf6: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100008018,8]_0 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cf9"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100008018,8]_0 ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cf9: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cfe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cfe: JMP 4294989265 5"
 Post  "RAX = bot(fun__fclose) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = 1 ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 64 ##
######################################
*)

htriple "ht_100005900"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005900: MOV EDI, EBX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005902"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005902: MOV ESI, R15D 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005905"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005905: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005907"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005907: MOV ECX, 5 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RCX = 5 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000590c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RCX = 5 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000590c: ExternalCall fun__fcopyfile 5"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fcopyfile {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005911"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005911: XORPS XMM0, XMM0 3"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005914"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005914: LEA RSI, [RBP - 2336] 7"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000591b"
 Separations "((RSP_0 -64 0x928),2) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x928),16) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x928),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x928),16) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x928),16) SEP (0x100008008,8); ((RSP_0 -64 0x928),16) SEP (0x100008018,8); ((RSP_0 -64 0x928),16) SEP (0x1000086d4,1); ((RSP_0 -64 0x928),16) SEP (0x1000086f8,8); ((RSP_0 -64 0x928),16) SEP (0x100008728,8); ((RSP_0 -64 0x928),16) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x928),16) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x928),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000591b: MOVAPS XMMWORD PTR [RSI], XMM0 3"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000591e"
 Separations "((RSP_0 -64 0x918),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x918),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x918),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x918),8) SEP (0x100008008,8); ((RSP_0 -64 0x918),8) SEP (0x100008018,8); ((RSP_0 -64 0x918),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x918),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x918),8) SEP (0x100008728,8); ((RSP_0 -64 0x918),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x918),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x918),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000591e: MOV QWORD PTR [RSI + 16], 0 8"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005926"
 Separations "((RSP_0 -64 0x928),2) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x928),2) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x928),2) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x928),2) SEP (0x100008008,8); ((RSP_0 -64 0x928),2) SEP (0x100008018,8); ((RSP_0 -64 0x928),2) SEP (0x1000086d4,1); ((RSP_0 -64 0x928),2) SEP (0x1000086f8,8); ((RSP_0 -64 0x928),2) SEP (0x100008728,8); ((RSP_0 -64 0x928),2) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x928),2) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x928),2) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x928),16) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005926: MOV WORD PTR [RSI], 5 5"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000592b"
 Separations "((RSP_0 -64 0x924),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x924),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x924),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x924),4) SEP (0x100008008,8); ((RSP_0 -64 0x924),4) SEP (0x100008018,8); ((RSP_0 -64 0x924),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x924),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x924),4) SEP (0x100008728,8); ((RSP_0 -64 0x924),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x924),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x924),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000592b: MOV DWORD PTR [RSI + 4], 16384 7"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005932"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005932: LEA RDX, [RBP - 192] 7"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005939"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005939: MOV ECX, 36 5"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000593e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000593e: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005941"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005941: XOR R8D, R8D 3"
 Post  "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005944"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fcopyfile) ; RBX = b32(bot(fun__open)) ; RCX = 36 ; RDX = (RSP_0 -64 200) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005944: ExternalCall fun__fgetattrlist 5"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fgetattrlist {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005949"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005949: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000594b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000594b: JNE 4294990203 2"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 65 ##
######################################
*)

htriple "ht_100005c6f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c6f: LEA RDI, [RIP + 7628] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c76"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c76: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c7d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c7f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a42 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c7f: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 66 ##
######################################
*)

htriple "ht_10000594d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000594d: CMP DWORD PTR [RBP - 192], 36 7"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005954"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005954: JNE 4294990203 2"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 67 ##
######################################
*)

htriple "ht_10000597b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000597b: LEA RSI, [RBP - 1232] 7"
 Post  "RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005982"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005982: LEA RDX, [RBP - 2256] 7"
 Post  "RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005989"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005989: MOV EDI, R15D 3"
 Post  "RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000598c"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 0x8d8) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000598c: ExternalCall fun_0x100006287 5"
 Post  "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x100006287 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005991"
 Separations "(0x1000086f8,8) SEP (bot(fun_0x1000060ec),8); (0x1000086f8,8) SEP (RSP_0,8); (0x1000086f8,8) SEP ([0x100008008,8]_0,8); (0x1000086f8,8) SEP ([0x100008018,8]_0,8); (0x1000086f8,8) SEP ((RSI_0 +64 96),8); (0x1000086f8,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086f8,8) SEP ((RSP_0 -64 8),8); (0x1000086f8,8) SEP ((RSP_0 -64 16),8); (0x1000086f8,8) SEP ((RSP_0 -64 24),8); (0x1000086f8,8) SEP ((RSP_0 -64 32),8); (0x1000086f8,8) SEP ((RSP_0 -64 40),8); (0x1000086f8,8) SEP ((RSP_0 -64 48),8); (0x1000086f8,8) SEP ((RSP_0 -64 56),8); (0x1000086f8,8) SEP ((RSP_0 -64 196),8); (0x1000086f8,8) SEP ((RSP_0 -64 1112),16); (0x1000086f8,8) SEP ((RSP_0 -64 1128),16); (0x1000086f8,8) SEP ((RSP_0 -64 1144),16); (0x1000086f8,8) SEP ((RSP_0 -64 1160),16); (0x1000086f8,8) SEP ((RSP_0 -64 1176),16); (0x1000086f8,8) SEP ((RSP_0 -64 1192),16); (0x1000086f8,8) SEP ((RSP_0 -64 1208),16); (0x1000086f8,8) SEP ((RSP_0 -64 1224),16); (0x1000086f8,8) SEP ((RSP_0 -64 1240),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e4),4); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f8),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x908),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x918),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x928),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x938),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x948),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x958),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x968),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x978),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x988),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x998),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9a8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9b8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9c8),8); (0x1000086f8,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005991: MOV QWORD PTR [RIP + 11612], 0 11"
 Post  "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000599c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000599c: MOV EDI, EBX 2"
 Post  "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000599e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RBX = b32(bot(fun__open)) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000599e: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059a3: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059a6: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059ab"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059ab: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059ae"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059ae: JNE 4294990270 2"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 68 ##
######################################
*)

htriple "ht_100005956"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005956: LEA RDX, [RBP - 188] 7"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000595d"
 Separations "((RSP_0 -64 196),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 196),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 196),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 196),8) SEP (0x100008008,8); ((RSP_0 -64 196),8) SEP (0x100008018,8); ((RSP_0 -64 196),8) SEP (0x1000086d4,1); ((RSP_0 -64 196),8) SEP (0x1000086f8,8); ((RSP_0 -64 196),8) SEP (0x100008728,8); ((RSP_0 -64 196),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 196),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 196),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000595d: MOV QWORD PTR [RDX], 0 7"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005964"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005964: LEA RSI, [RBP - 2336] 7"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000596b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "10000596b: MOV ECX, 32 5"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005970"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005970: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005973"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005973: XOR R8D, R8D 3"
 Post  "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005976"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fgetattrlist) ; RBX = b32(bot(fun__open)) ; RCX = 32 ; RDX = (RSP_0 -64 196) ; RSI = (RSP_0 -64 0x928) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005976: ExternalCall fun__fsetattrlist 5"
 Post  "RAX = bot(fun__fsetattrlist) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = 0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__fsetattrlist {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 69 ##
######################################
*)

htriple "ht_1000059b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059b0: LEA RDI, [RIP + 7842] 7"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059b7: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059b9: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 70 ##
######################################
*)

htriple "ht_1000059be"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059be: LEA RSI, [RBP - 1232] 7"
 Post  "RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059c5"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059c5: MOV RDI, R13 3"
 Post  "RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059c8"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = RDI_0 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059c8: ExternalCall fun_0x1000063ec 5"
 Post  "RAX = bot(fun_0x1000063ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000063ec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000063ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059cd: JMP 4294991036 5"
 Post  "RAX = bot(fun_0x1000063ec) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = 0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 71 ##
######################################
*)

htriple "ht_1000059dc"
 Separations "((RSP_0 -64 0x9b5),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b5),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b5),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b5),1) SEP (0x100008008,8); ((RSP_0 -64 0x9b5),1) SEP (0x100008018,8); ((RSP_0 -64 0x9b5),1) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b5),1) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b5),1) SEP (0x100008728,8); ((RSP_0 -64 0x9b5),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b5),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b5),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059dc: MOVZX ESI, BYTE PTR [RBP - 2477] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059e3"
 Separations "((RSP_0 -64 0x9b6),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b6),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b6),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b6),1) SEP (0x100008008,8); ((RSP_0 -64 0x9b6),1) SEP (0x100008018,8); ((RSP_0 -64 0x9b6),1) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b6),1) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b6),1) SEP (0x100008728,8); ((RSP_0 -64 0x9b6),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b6),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b6),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059e3: MOVZX EDX, BYTE PTR [RBP - 2478] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059ea"
 Separations "((RSP_0 -64 0x9b7),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b7),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b7),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b7),1) SEP (0x100008008,8); ((RSP_0 -64 0x9b7),1) SEP (0x100008018,8); ((RSP_0 -64 0x9b7),1) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b7),1) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b7),1) SEP (0x100008728,8); ((RSP_0 -64 0x9b7),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b7),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b7),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059ea: MOVZX ECX, BYTE PTR [RBP - 2479] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059f1"
 Separations "((RSP_0 -64 0x9b8),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b8),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b8),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b8),1) SEP (0x100008008,8); ((RSP_0 -64 0x9b8),1) SEP (0x100008018,8); ((RSP_0 -64 0x9b8),1) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b8),1) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b8),1) SEP (0x100008728,8); ((RSP_0 -64 0x9b8),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b8),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b8),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x9b8),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b8),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059f1: MOVZX R12D, BYTE PTR [RBP - 2480] 8"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000059f9"
 Separations "((RSP_0 -64 0x925),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x925),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x925),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x925),1) SEP (0x100008008,8); ((RSP_0 -64 0x925),1) SEP (0x100008018,8); ((RSP_0 -64 0x925),1) SEP (0x1000086d4,1); ((RSP_0 -64 0x925),1) SEP (0x1000086f8,8); ((RSP_0 -64 0x925),1) SEP (0x100008728,8); ((RSP_0 -64 0x925),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x925),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x925),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "1000059f9: TEST BYTE PTR [RBP - 2333], 8 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a00"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a00: JE 4294990579 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 72 ##
######################################
*)

htriple "ht_100005cc8"
 Separations "(0x1000086d4,1) SEP (bot(fun_0x1000060ec),8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ([0x100008008,8]_0,8); (0x1000086d4,1) SEP ([0x100008018,8]_0,8); (0x1000086d4,1) SEP ((RSI_0 +64 96),8); (0x1000086d4,1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 56),8); (0x1000086d4,1) SEP ((RSP_0 -64 196),8); (0x1000086d4,1) SEP ((RSP_0 -64 1112),16); (0x1000086d4,1) SEP ((RSP_0 -64 1128),16); (0x1000086d4,1) SEP ((RSP_0 -64 1144),16); (0x1000086d4,1) SEP ((RSP_0 -64 1160),16); (0x1000086d4,1) SEP ((RSP_0 -64 1176),16); (0x1000086d4,1) SEP ((RSP_0 -64 1192),16); (0x1000086d4,1) SEP ((RSP_0 -64 1208),16); (0x1000086d4,1) SEP ((RSP_0 -64 1224),16); (0x1000086d4,1) SEP ((RSP_0 -64 1240),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e4),4); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f8),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x908),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x918),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x928),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x938),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x948),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x958),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x968),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x978),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x988),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x998),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9a8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9b8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9c8),8); (0x1000086d4,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cc8: CMP BYTE PTR [RIP + 10757], 0 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ccf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ccf: JE 4294989473 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 73 ##
######################################
*)

htriple "ht_100005a06"
 Separations "((RSP_0 -64 0x8e4),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008008,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008018,8); ((RSP_0 -64 0x8e4),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e4),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008728,8); ((RSP_0 -64 0x8e4),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e4),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e4),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a06: MOV DWORD PTR [RBP - 2268], ESI 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a0c"
 Separations "((RSP_0 -64 0x8f0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a0c: MOV QWORD PTR [RBP - 2280], RDX 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a13"
 Separations "((RSP_0 -64 0x8f8),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x8f8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f8),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f8),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a13: MOV QWORD PTR [RBP - 2288], RCX 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a1a: LEA RSI, [RBP - 1232] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a21"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a21: MOV EDX, 1024 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 1024 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a26"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 1024 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a26: MOV ECX, 10 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 10 ; RDX = 1024 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a2b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 10 ; RDX = 1024 ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a2b: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 10 ; RDX = 1024 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a2e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = 10 ; RDX = 1024 ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a2e: ExternalCall fun__pread 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__pread {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a33"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a33: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a36"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a36: JS 4294989473 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 74 ##
######################################
*)

htriple "ht_100005af3"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005af3: SHL ESI, 24 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005af6"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005af6: SHL RDX, 16 4"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005afa"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005afa: MOVSXD RAX, ESI 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005afd"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005afd: OR RAX, RDX 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b00"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b00: SHL RCX, 8 4"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b04"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b04: OR RCX, RAX 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b07"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005b07: OR R12, RCX 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 75 ##
######################################
*)

htriple "ht_100005a3c"
 Separations "((RSP_0 -64 1240),1) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 1240),1) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 1240),1) SEP (0x100008008,8); ((RSP_0 -64 1240),1) SEP (0x100008018,8); ((RSP_0 -64 1240),1) SEP (0x1000086d4,1); ((RSP_0 -64 1240),1) SEP (0x1000086f8,8); ((RSP_0 -64 1240),1) SEP (0x100008728,8); ((RSP_0 -64 1240),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 1240),1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 1240),1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 1240),16) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a3c: CMP BYTE PTR [RBP - 1232], 0 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a43"
 Separations "((RSP_0 -64 0x8f8),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x8f8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f8),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f8),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a43: MOV RCX, QWORD PTR [RBP - 2288] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a4a"
 Separations "((RSP_0 -64 0x8f0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a4a: MOV RDX, QWORD PTR [RBP - 2280] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a51"
 Separations "((RSP_0 -64 0x8e4),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008008,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008018,8); ((RSP_0 -64 0x8e4),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e4),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008728,8); ((RSP_0 -64 0x8e4),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e4),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e4),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a51: MOV ESI, DWORD PTR [RBP - 2268] 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a57"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a57: JE 4294990579 6"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 76 ##
######################################
*)

htriple "ht_100005a5d"
 Separations "((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (RSP_0,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x100008008,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x100008018,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x1000086cc,1); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x1000086d0,1); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x1000086d4,1); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x1000086f8,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP (0x100008728,8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 104),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 196),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1112),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1128),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1144),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1160),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1176),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1192),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1208),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1224),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 1240),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x8e0),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x8e4),4); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x8f0),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x8f8),4); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x8f8),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x908),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x918),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x928),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x938),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x948),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x958),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x958),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x968),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x978),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x988),8); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x988),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x998),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x9a8),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x9b2),2); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x9b8),16); ((RSP_0 -64 (1240 -64 bot(fun__pread))),1) SEP ((RSP_0 -64 0x9c8),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a5d: MOV BYTE PTR [RBP + RAX - 1232], 0 8"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a65"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a65: LEA RDI, [RBP - 1232] 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a6c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a6c: MOV ESI, 47 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a71"
 Separations "((RSP_0 -64 0x908),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x908),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x908),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x908),8) SEP (0x100008008,8); ((RSP_0 -64 0x908),8) SEP (0x100008018,8); ((RSP_0 -64 0x908),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x908),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x908),8) SEP (0x100008728,8); ((RSP_0 -64 0x908),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x908),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x908),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a71: MOV QWORD PTR [RBP - 2304], RAX 7"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 1240) ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a78: ExternalCall fun__strrchr 5"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__strrchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a7d"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a7d: MOV QWORD PTR [RBP - 2264], R12 7"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a84: LEA R12, [RAX + 1] 4"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a88"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a88: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a8b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a8b: LEA RAX, [RBP - 1232] 7"
 Post  "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a92"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (bot(fun__strrchr) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a92: CMOVE R12, RAX 4"
 Post  "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a96"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a96: MOV RDI, R13 3"
 Post  "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a99"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a99: MOV ESI, 47 5"
 Post  "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = RDI_0 ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005a9e"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 1240) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = RDI_0 ; RSI = 47 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005a9e: ExternalCall fun__strrchr 5"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__strrchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005aa3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005aa3: LEA ECX, [RAX + 1] 3"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = (b32(bot(fun__strrchr)) +32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005aa6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = (b32(bot(fun__strrchr)) +32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005aa6: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = (b32(bot(fun__strrchr)) +32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005aa9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RCX = (b32(bot(fun__strrchr)) +32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005aa9: CMOVE ECX, R13D 4"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005aad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005aad: SUB ECX, R13D 3"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ab0"
 Separations "((RSP_0 -64 0x9c8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9c8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9c8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9c8),8) SEP (0x100008008,8); ((RSP_0 -64 0x9c8),8) SEP (0x100008018,8); ((RSP_0 -64 0x9c8),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x9c8),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x9c8),8) SEP (0x100008728,8); ((RSP_0 -64 0x9c8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9c8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9c8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ab0: MOV QWORD PTR [RSP], R12 4"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ab4"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ab4: MOV R12, QWORD PTR [RBP - 2264] 7"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005abb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005abb: LEA RDX, [RIP + 7304] 7"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ac2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ac2: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ac9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ac9: MOV ESI, 1024 5"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ace"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ace: MOV R8, R13 3"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ad1"
 Separations "((RSP_0 -64 0x908),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x908),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x908),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x908),8) SEP (0x100008008,8); ((RSP_0 -64 0x908),8) SEP (0x100008018,8); ((RSP_0 -64 0x908),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x908),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x908),8) SEP (0x100008728,8); ((RSP_0 -64 0x908),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x908),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x908),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ad1: MOV R9, QWORD PTR [RBP - 2304] 7"
 Post  "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = bot(fun__pread) ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ad8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = bot(fun__pread) ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ad8: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = bot(fun__pread) ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ada"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 0x10000774a ; RDI = (RSP_0 -64 0x8d8) ; RSI = 1024 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = bot(fun__pread) ; R8 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ada: ExternalCall fun__snprintf 5"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 FunctionConstraints "PRESERVES fun__snprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005adf"
 Separations "((RSP_0 -64 0x8e4),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008008,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008018,8); ((RSP_0 -64 0x8e4),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e4),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e4),4) SEP (0x100008728,8); ((RSP_0 -64 0x8e4),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e4),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e4),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005adf: MOV ESI, DWORD PTR [RBP - 2268] 6"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ae5"
 Separations "((RSP_0 -64 0x8f0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005ae5: MOV RDX, QWORD PTR [RBP - 2280] 7"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005aec"
 Separations "((RSP_0 -64 0x8f8),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x8f8),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f8),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f8),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f8),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f8),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f8),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f8),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
 Instruction "100005aec: MOV RCX, QWORD PTR [RBP - 2288] 7"
 Post  "RAX = bot(fun__snprintf) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x908),8] = bot(fun__pread) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 77 ##
######################################
*)

htriple "ht_100005b6f"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b6f: MOV CL, BYTE PTR [RIP + 11095] 6"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b75"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b75: TEST CL, 1 3"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b78: JE 4294990870 6"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 78 ##
######################################
*)

htriple "ht_100005c16"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c16: LEA RSI, [RBP - 2480] 7"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c1d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c1d: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c20"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lseek) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c20: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c25: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c27"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c27: JNE 4294989646 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 79 ##
######################################
*)

htriple "ht_100005b7e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b7e: MOV EAX, 1 5"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b83"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b83: TEST R12B, 1 4"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b87"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b87: JNE 4294990815 2"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 80 ##
######################################
*)

htriple "ht_100005b89"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b89: TEST CL, 1 3"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b8c: JNE 4294990815 2"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 81 ##
######################################
*)

htriple "ht_100005bdf"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bdf: DEC EBX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005be1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005be1: CMP EBX, 5 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005be4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005be4: JA 4294991267 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 82 ##
######################################
*)

htriple "ht_100005b8e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b8e: LEA R12, [RBP - 2256] 7"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b95"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b95: MOV RDI, R12 3"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b98"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b98: MOV ESI, 2561 5"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005b9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005b9d: MOV EDX, 384 5"
 Post  "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ba2"
 Separations ""
 Assertions  ""
 Pre   "RAX = 1 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ba2: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ba4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDX = 384 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 0xa01 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ba4: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ba9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ba9: CMP EAX, 1 3"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bac: JNE 4294990799 2"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 83 ##
######################################
*)

htriple "ht_100005bae"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bae: MOV EDI, 1 5"
 Post  "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bb3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bb3: ExternalCall fun__dup 5"
 Post  "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__dup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bb8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bb8: MOV R12D, EAX 3"
 Post  "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bbb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bbb: MOV EDI, 1 5"
 Post  "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bc0: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bc5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bc5: MOV EAX, R12D 3"
 Post  "RAX = b32(bot(fun__dup)) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bc8"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32(bot(fun__dup)) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = b32(bot(fun__dup)) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bc8: LEA R12, [RBP - 2256] 7"
 Post  "RAX = b32(bot(fun__dup)) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 84 ##
######################################
*)

htriple "ht_100005bcf"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bcf: CMP EAX, 18446744073709551615 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bd2"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bd2: JE 4294991107 6"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 85 ##
######################################
*)

htriple "ht_100005bd8"
 Separations "(0x1000086f8,8) SEP (bot(fun_0x1000060ec),8); (0x1000086f8,8) SEP (RSP_0,8); (0x1000086f8,8) SEP ([0x100008008,8]_0,8); (0x1000086f8,8) SEP ([0x100008018,8]_0,8); (0x1000086f8,8) SEP ((RSI_0 +64 96),8); (0x1000086f8,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086f8,8) SEP ((RSP_0 -64 8),8); (0x1000086f8,8) SEP ((RSP_0 -64 16),8); (0x1000086f8,8) SEP ((RSP_0 -64 24),8); (0x1000086f8,8) SEP ((RSP_0 -64 32),8); (0x1000086f8,8) SEP ((RSP_0 -64 40),8); (0x1000086f8,8) SEP ((RSP_0 -64 48),8); (0x1000086f8,8) SEP ((RSP_0 -64 56),8); (0x1000086f8,8) SEP ((RSP_0 -64 196),8); (0x1000086f8,8) SEP ((RSP_0 -64 1112),16); (0x1000086f8,8) SEP ((RSP_0 -64 1128),16); (0x1000086f8,8) SEP ((RSP_0 -64 1144),16); (0x1000086f8,8) SEP ((RSP_0 -64 1160),16); (0x1000086f8,8) SEP ((RSP_0 -64 1176),16); (0x1000086f8,8) SEP ((RSP_0 -64 1192),16); (0x1000086f8,8) SEP ((RSP_0 -64 1208),16); (0x1000086f8,8) SEP ((RSP_0 -64 1224),16); (0x1000086f8,8) SEP ((RSP_0 -64 1240),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e4),4); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f8),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x908),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x918),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x928),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x938),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x948),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x958),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x968),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x978),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x988),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x998),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9a8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9b8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9c8),8); (0x1000086f8,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bd8: MOV QWORD PTR [RIP + 11033], R12 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = (RSP_0 -64 0x8d8) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 86 ##
######################################
*)

htriple "ht_100005d03"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d03: LEA RDI, [RIP + 6639] 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x1000076f9 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x8d8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 87 ##
######################################
*)

htriple "ht_100005bea"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bea: LEA RDX, [RIP + 1251] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bf1"
 Separations "((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (RSP_0,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ([0x100008008,8]_0,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (0x100008008,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (0x100008018,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (0x1000086d4,1); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (0x1000086f8,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP (0x100008728,8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 196),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1112),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1128),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1144),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1160),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1176),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1192),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1208),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1224),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 1240),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x8e0),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x8e4),4); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x8f0),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x8f8),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x908),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x918),8); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x928),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x938),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x948),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x958),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x968),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x978),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x988),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x998),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x9a8),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x9b8),16); ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4) SEP ((RSP_0 -64 0x9c8),8)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bf1: MOVSXD RCX, DWORD PTR [RDX + RBX * 4] 4"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bf5"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bf5: ADD RCX, RDX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005bf8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bf8: JMP RCX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 88 ##
######################################
*)

htriple "ht_100005da3"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005da3: CMP BYTE PTR [RIP + 10534], 1 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005daa"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005daa: JNE 4294991648 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 89 ##
######################################
*)

htriple "ht_100005bfa"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005bfa: CMP BYTE PTR [RIP + 10959], 1 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c01"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c01: JNE 4294991374 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 90 ##
######################################
*)

htriple "ht_100005d58"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d58: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d5b"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d5b: CMP BYTE PTR [RIP + 10606], 1 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d62"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d62: JNE 4294991399 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 91 ##
######################################
*)

htriple "ht_100005d71"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d71: CMP BYTE PTR [RIP + 10584], 1 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d78"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d78: JNE 4294991604 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 92 ##
######################################
*)

htriple "ht_100005d8a"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d8a: CMP BYTE PTR [RIP + 10559], 1 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d91"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d91: JNE 4294991626 6"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 93 ##
######################################
*)

htriple "ht_100005c07"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c07: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c0a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c0a: LEA RDI, [RIP + 7012] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007775 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c11"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007775 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c11: JMP 4294991337 5"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007775 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 94 ##
######################################
*)

htriple "ht_100005e0e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e0e: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e11"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e11: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e14"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e14: MOV ESI, EAX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e16"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e16: XOR EDX, EDX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e18"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e18: XOR ECX, ECX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e1a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e1a: XOR R8D, R8D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e1d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e1d: ExternalCall fun_0x100003bd4 5"
 Post  "RAX = bot(fun_0x100003bd4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100003bd4 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e22"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003bd4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e22: JMP 4294991687 5"
 Post  "RAX = bot(fun_0x100003bd4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 95 ##
######################################
*)

htriple "ht_100005c2d"
 Separations "((RSP_0 -64 0x9b2),2) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x9b2),2) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x9b2),2) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x9b2),2) SEP (0x100008008,8); ((RSP_0 -64 0x9b2),2) SEP (0x100008018,8); ((RSP_0 -64 0x9b2),2) SEP (0x1000086d4,1); ((RSP_0 -64 0x9b2),2) SEP (0x1000086f8,8); ((RSP_0 -64 0x9b2),2) SEP (0x100008728,8); ((RSP_0 -64 0x9b2),2) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x9b2),2) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x9b2),2) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c2d: MOVZX EDX, WORD PTR [RBP - 2474] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c34: CMP EDX, 2 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c37: JB 4294991126 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 96 ##
######################################
*)

htriple "ht_100005c3d"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c3d: TEST BYTE PTR [RIP + 10892], 1 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c44: JNE 4294991126 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 97 ##
######################################
*)

htriple "ht_100005d16"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d16: MOV RAX, QWORD PTR [RBP - 2264] 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d1d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d1d: TEST RAX, RAX 3"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d20"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d20: JE 4294991154 2"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 98 ##
######################################
*)

htriple "ht_100005c4a"
 Separations "(0x1000086d4,1) SEP (bot(fun_0x1000060ec),8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ([0x100008008,8]_0,8); (0x1000086d4,1) SEP ([0x100008018,8]_0,8); (0x1000086d4,1) SEP ((RSI_0 +64 96),8); (0x1000086d4,1) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 56),8); (0x1000086d4,1) SEP ((RSP_0 -64 196),8); (0x1000086d4,1) SEP ((RSP_0 -64 1112),16); (0x1000086d4,1) SEP ((RSP_0 -64 1128),16); (0x1000086d4,1) SEP ((RSP_0 -64 1144),16); (0x1000086d4,1) SEP ((RSP_0 -64 1160),16); (0x1000086d4,1) SEP ((RSP_0 -64 1176),16); (0x1000086d4,1) SEP ((RSP_0 -64 1192),16); (0x1000086d4,1) SEP ((RSP_0 -64 1208),16); (0x1000086d4,1) SEP ((RSP_0 -64 1224),16); (0x1000086d4,1) SEP ((RSP_0 -64 1240),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8e4),4); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f0),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x8f8),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x908),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x918),8); (0x1000086d4,1) SEP ((RSP_0 -64 0x928),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x938),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x948),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x958),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x968),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x978),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x988),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x998),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9a8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9b8),16); (0x1000086d4,1) SEP ((RSP_0 -64 0x9c8),8); (0x1000086d4,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c4a: TEST BYTE PTR [RIP + 10883], 1 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c51"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c51: JNE 4294991126 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000547a, blockId == 99 ##
######################################
*)

htriple "ht_100005c57"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c57: DEC EDX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c59"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c59: LEA RDI, [RIP + 6899] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c60"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c60: MOV RSI, R13 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c63"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c63: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c65"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun_0x1000032c1)) ; RDI = 0x100007753 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c65: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005c6a: JMP 4294989646 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 100 ##
#######################################
*)

htriple "ht_100005c84"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c84: MOV EDI, R15D 3"
 Post  "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c87"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c87: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c8c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c8c: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c8f: JNE 4294991007 2"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 101 ##
#######################################
*)

htriple "ht_100005c91"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c91: LEA RDI, [RIP + 7105] 7"
 Post  "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c98"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c98: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c9a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c9a: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 102 ##
#######################################
*)

htriple "ht_100005c9f"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005c9f: LEA RDI, [RIP + 7630] 7"
 Post  "RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ca6"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ca6: MOV RSI, R13 3"
 Post  "RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ca9"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005ca9: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cab"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__open)) ; RDI = 0x100007a74 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cab: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cb0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cb0: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cb7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RBX = b32(bot(fun__open)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cb7: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RBX = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 103 ##
#######################################
*)

htriple "ht_100005cd5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
 Instruction "100005cd5: JMP 4294989646 5"
 Post  "RAX = bot(fun__pread) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = [(RSP_0 -64 0x8e0),8]_0 ; [(RSP_0 -64 0x8e4),4] = [(RSP_0 -64 0x8e4),4]_0 ; [(RSP_0 -64 0x8f0),8] = [(RSP_0 -64 0x8f0),8]_0 ; [(RSP_0 -64 0x8f8),8] = [(RSP_0 -64 0x8f8),8]_0 ; [(RSP_0 -64 0x908),8] = [(RSP_0 -64 0x908),8]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0 ; [(RSP_0 -64 0x938),16] = [(RSP_0 -64 0x938),16]_0 ; [(RSP_0 -64 0x948),16] = [(RSP_0 -64 0x948),16]_0 ; [(RSP_0 -64 0x958),16] = [(RSP_0 -64 0x958),16]_0 ; [(RSP_0 -64 0x968),16] = [(RSP_0 -64 0x968),16]_0 ; [(RSP_0 -64 0x978),16] = [(RSP_0 -64 0x978),16]_0 ; [(RSP_0 -64 0x988),16] = [(RSP_0 -64 0x988),16]_0 ; [(RSP_0 -64 0x998),16] = [(RSP_0 -64 0x998),16]_0 ; [(RSP_0 -64 0x9a8),16] = [(RSP_0 -64 0x9a8),16]_0 ; [(RSP_0 -64 0x9b8),16] = [(RSP_0 -64 0x9b8),16]_0 ; [(RSP_0 -64 0x9c8),8] = [(RSP_0 -64 0x9c8),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 104 ##
#######################################
*)

htriple "ht_1000056ab"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000056ab: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000056ad: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000056b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000056b2: JMP 4294989646 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 105 ##
#######################################
*)

htriple "ht_100005d22"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d22: TEST BYTE PTR [RIP + 10675], 1 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d29"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d29: JNE 4294991154 2"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 106 ##
#######################################
*)

htriple "ht_100005d32"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d32: LEA RDI, [RBP - 2256] 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d39"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d39: ExternalCall fun_0x100006174 5"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100006174 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d3e: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d40"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d40: JE 4294989646 6"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 107 ##
#######################################
*)

htriple "ht_100005d2b"
 Separations "((RSP_0 -64 0x988),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x988),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x988),8) SEP (0x100008008,8); ((RSP_0 -64 0x988),8) SEP (0x100008018,8); ((RSP_0 -64 0x988),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x988),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x988),8) SEP (0x100008728,8); ((RSP_0 -64 0x988),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x988),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x988),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x988),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d2b: MOV QWORD PTR [RBP - 2432], RAX 7"
 Post  "RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 108 ##
#######################################
*)

htriple "ht_100005d46"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d46: MOV CL, BYTE PTR [RIP + 10624] 6"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d4c"
 Separations "(0x1000086d0,1) SEP ([0x100008008,8]_0,8); (0x1000086d0,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d4c: MOV R12B, BYTE PTR [RIP + 10621] 7"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d53: JMP 4294990718 5"
 Post  "RAX = bot(fun_0x100006174) ; RBX = b32(bot(fun_0x1000032c1)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 109 ##
#######################################
*)

htriple "ht_100005d68"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d68: LEA RDI, [RIP + 6685] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x10000778c ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d6f"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x10000778c ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d6f: JMP 4294991337 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x10000778c ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 110 ##
#######################################
*)

htriple "ht_100005e27"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e27: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e2a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e2a: ExternalCall fun_0x100003ec4 5"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100003ec4 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e2f: TEST RAX, RAX 3"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e32"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e32: JE 4294991886 6"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 111 ##
#######################################
*)

htriple "ht_100005de9"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005de9: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005deb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005deb: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 112 ##
#######################################
*)

htriple "ht_100005d7e"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d7e: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d81"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d81: LEA RDI, [RIP + 6772] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x1000077fc ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d88"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x1000077fc ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d88: JMP 4294991337 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x1000077fc ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 113 ##
#######################################
*)

htriple "ht_100005ef4"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ef4: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ef7"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ef7: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005efa"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005efa: MOV ESI, EAX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005efc"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005efc: XOR EDX, EDX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005efe"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005efe: XOR ECX, ECX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f00"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f00: XOR R8D, R8D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f03"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f03: ExternalCall fun_0x10000403c 5"
 Post  "RAX = bot(fun_0x10000403c) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000403c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f08"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000403c) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f08: JMP 4294991687 2"
 Post  "RAX = bot(fun_0x10000403c) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 114 ##
#######################################
*)

htriple "ht_100005d97"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d97: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d9a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d9a: LEA RDI, [RIP + 6771] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007814 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005da1"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007814 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005da1: JMP 4294991337 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = 0x100007814 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 115 ##
#######################################
*)

htriple "ht_100005f0a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f0a: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f0d"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f0d: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f10"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f10: MOV ESI, EAX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f12"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0x1000060d4 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f12: XOR EDX, EDX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f14"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f14: XOR ECX, ECX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f16"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f16: XOR R8D, R8D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f19"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f19: ExternalCall fun_0x1000044e3 5"
 Post  "RAX = bot(fun_0x1000044e3) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000044e3 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000044e3) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f1e: JMP 4294991687 2"
 Post  "RAX = bot(fun_0x1000044e3) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 116 ##
#######################################
*)

htriple "ht_100005db0"
 Separations "((RSP_0 -64 0x988),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x988),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x988),8) SEP (0x100008008,8); ((RSP_0 -64 0x988),8) SEP (0x100008018,8); ((RSP_0 -64 0x988),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x988),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x988),8) SEP (0x100008728,8); ((RSP_0 -64 0x988),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x988),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x988),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x988),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x988),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005db0: MOV RCX, QWORD PTR [RBP - 2432] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005db7"
 Separations "((RSP_0 -64 0x958),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x958),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x958),8) SEP (0x100008008,8); ((RSP_0 -64 0x958),8) SEP (0x100008018,8); ((RSP_0 -64 0x958),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x958),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x958),8) SEP (0x100008728,8); ((RSP_0 -64 0x958),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x958),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x958),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x958),16) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x958),16) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005db7: MOV RSI, QWORD PTR [RBP - 2384] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dbe"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005dbe: LEA RDX, [RBP - 2256] 7"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dc5"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005dc5: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dc8"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005dc8: ExternalCall fun_0x100002f0f 5"
 Post  "RAX = bot(fun_0x100002f0f) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100002f0f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dcd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002f0f) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005dcd: JMP 4294989646 5"
 Post  "RAX = bot(fun_0x100002f0f) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 117 ##
#######################################
*)

htriple "ht_100005f20"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f20: MOV EDI, R15D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f23"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f23: MOV R12D, EAX 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f26"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f26: MOV ESI, EAX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f28"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f28: XOR EDX, EDX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f2a"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f2a: XOR ECX, ECX 2"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f2c"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f2c: XOR R8D, R8D 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f2f"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f2f: MOV R9, R13 3"
 Post  "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f32"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RCX = 0 ; RDX = 0 ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R9 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f32: ExternalCall fun_0x10000343a 5"
 Post  "RAX = bot(fun_0x10000343a) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000343a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000343a) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f37: JMP 4294991687 2"
 Post  "RAX = bot(fun_0x10000343a) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 118 ##
#######################################
*)

htriple "ht_100005e09"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e09: JMP 4294989661 5"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 119 ##
#######################################
*)

htriple "ht_100005e38"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e38: MOV RBX, RAX 3"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e3b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e3b: MOV EDI, R12D 3"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e3e: ExternalCall fun__dup 5"
 Post  "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__dup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e43"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e43: LEA RSI, [RIP + 5626] 7"
 Post  "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e4a: MOV EDI, EAX 2"
 Post  "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RDI = b32(bot(fun__dup)) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e4c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__dup) ; RBX = bot(fun_0x100003ec4) ; RDI = b32(bot(fun__dup)) ; RSI = 0x100007444 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e4c: ExternalCall fun__fdopen 5"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fdopen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e51"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e51: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e54"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e54: JE 4294991934 6"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 120 ##
#######################################
*)

htriple "ht_10000600e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000600e: LEA RDI, [RIP + 6035] 7"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006015"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006015: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006018"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003ec4) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006018: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000601a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RDI = 0x1000077a8 ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000601a: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000601f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000601f: JMP 4294991344 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 121 ##
#######################################
*)

htriple "ht_100005e5a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e5a: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e5d"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e5d: MOV QWORD PTR [RBP - 2264], RAX 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e64"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e64: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e67"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e67: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e69"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e69: XOR ECX, ECX 2"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RCX = 0 ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RCX = 0 ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e6b: XOR R8D, R8D 3"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RCX = 0 ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RCX = 0 ; RDX = 0 ; RDI = bot(fun_0x100003ec4) ; RSI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e6e: ExternalCall fun_0x100003f54 5"
 Post  "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100003f54 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e73"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e73: MOV RDI, RBX 3"
 Post  "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e76"
 Separations "((RSP_0 -64 0x8f0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e76: MOV QWORD PTR [RBP - 2280], RBX 7"
 Post  "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e7d: MOV RBX, RAX 3"
 Post  "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e80"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100003f54) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e80: ExternalCall fun__ferror 5"
 Post  "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__ferror {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e85"
 Separations "((RSP_0 -64 0x8f8),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f8),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008008,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008018,8); ((RSP_0 -64 0x8f8),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f8),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008728,8); ((RSP_0 -64 0x8f8),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f8),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f8),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x8f8),8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e85: MOV DWORD PTR [RBP - 2288], EAX 6"
 Post  "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e8b"
 Separations "((RSP_0 -64 0x8f0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8f0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8f0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e8b: MOV RDI, QWORD PTR [RBP - 2280] 7"
 Post  "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e92"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__ferror) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e92: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e97"
 Separations "((RSP_0 -64 0x8f8),4) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8f8),4) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008008,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008018,8); ((RSP_0 -64 0x8f8),4) SEP (0x1000086d4,1); ((RSP_0 -64 0x8f8),4) SEP (0x1000086f8,8); ((RSP_0 -64 0x8f8),4) SEP (0x100008728,8); ((RSP_0 -64 0x8f8),4) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8f8),4) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8f8),4) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1); ((RSP_0 -64 0x8f8),8) SEP ([0x100008008,8]_0,8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e97: OR EAX, DWORD PTR [RBP - 2288] 6"
 Post  "RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e9d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e9d: JE 4294991557 2"
 Post  "RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 122 ##
#######################################
*)

htriple "ht_10000603e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000603e: LEA RDI, [RIP + 6007] 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006045"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006045: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000604c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fdopen) ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000604c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000604e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun_0x100003ec4) ; RDI = 0x1000077bc ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000604e: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006053"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006053: MOV RDI, RBX 3"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006056"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003ec4) ; RDI = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006056: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000605b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000605b: JMP 4294991344 5"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003ec4) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 123 ##
#######################################
*)

htriple "ht_100005e9f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e9f: LEA RDI, [RIP + 6443] 7"
 Post  "RBX = bot(fun_0x100003f54) ; RDI = 0x1000077d1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ea6"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun_0x100003f54) ; RDI = 0x1000077d1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ea6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077d1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ea8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077d1 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ea8: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ead"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ead: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eb4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005eb4: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eb9"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005eb9: MOV RDI, QWORD PTR [RBP - 2264] 7"
 Post  "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ec0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ec0: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 124 ##
#######################################
*)

htriple "ht_100005ec5"
 Separations "((RSP_0 -64 0x8e0),8) SEP (bot(fun_0x1000060ec),8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP ([0x100008018,8]_0,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008008,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008018,8); ((RSP_0 -64 0x8e0),8) SEP (0x1000086d4,1); ((RSP_0 -64 0x8e0),8) SEP (0x1000086f8,8); ((RSP_0 -64 0x8e0),8) SEP (0x100008728,8); ((RSP_0 -64 0x8e0),8) SEP ((RSI_0 +64 96),8); ((RSP_0 -64 0x8e0),8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); ((RSP_0 -64 0x8e0),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ec5: MOV RDI, QWORD PTR [RBP - 2264] 7"
 Post  "RBX = bot(fun_0x100003f54) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ecc"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun_0x100003f54) ; RDI = bot(fun__fdopen) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ecc: ExternalCall fun__fclose 5"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fclose {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ed1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ed1: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ed3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ed3: JE 4294991690 2"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 125 ##
#######################################
*)

htriple "ht_100005ed5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ed5: LEA RDI, [RIP + 6410] 7"
 Post  "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077e6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005edc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fclose) ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077e6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005edc: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077e6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ede"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun_0x100003f54) ; RDI = 0x1000077e6 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ede: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ee3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ee3: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RBX = bot(fun_0x100003f54) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005eea: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005eef: JMP 4294991344 5"
 Post  "RAX = bot(fun__unlink) ; RBX = bot(fun_0x100003f54) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x8e0),8] = bot(fun__fdopen) ; [(RSP_0 -64 0x8f0),8] = bot(fun_0x100003ec4) ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 126 ##
#######################################
*)

htriple "ht_100005f4a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f4a: MOV EDI, R15D 3"
 Post  "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f4d"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f4d: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f52"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f52: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f54"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f54: JE 4294991716 2"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 127 ##
#######################################
*)

htriple "ht_100005df0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005df0: MOV EDI, R15D 3"
 Post  "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005df3"
 Separations ""
 Assertions  ""
 Pre   "RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005df3: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005df8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005df8: MOV RBX, 18446744073709551615 7"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005dff: CMP R12D, 1 4"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e03"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005e03: JNE 4294989235 6"
 Post  "RAX = bot(fun__close) ; RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 128 ##
#######################################
*)

htriple "ht_100005f47"
 Separations ""
 Assertions  ""
 Pre   "RBX = (b32(bot(fun_0x1000032c1)) -32 1) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f47: MOV RBX, RAX 3"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 129 ##
#######################################
*)

htriple "ht_100005f56"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f56: LEA RDI, [RIP + 6375] 7"
 Post  "RAX = bot(fun__close) ; RDI = 0x100007844 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f5d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RDI = 0x100007844 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f5d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007844 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f5f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007844 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f5f: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 130 ##
#######################################
*)

htriple "ht_100005f64"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f64: CMP R12D, 1 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f68"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f68: JE 4294991748 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 131 ##
#######################################
*)

htriple "ht_100005f6a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f6a: MOV EDI, R12D 3"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f6d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f6d: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f72"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f72: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f74"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f74: JE 4294991748 2"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 132 ##
#######################################
*)

htriple "ht_100005f84"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f84: CMP RBX, 18446744073709551615 4"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f88"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f88: JE 4294991843 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 133 ##
#######################################
*)

htriple "ht_100005f76"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f76: LEA RDI, [RIP + 6364] 7"
 Post  "RAX = bot(fun__close) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f7d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f7f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007859 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f7f: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 134 ##
#######################################
*)

htriple "ht_100005f8a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f8a: CMP BYTE PTR [RIP + 10075], 0 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f91"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f91: JNE 4294989661 6"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 135 ##
#######################################
*)

htriple "ht_100005fe3"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fe3: CMP BYTE PTR [RIP + 9954], 0 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fea: JNE 4294991864 2"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 136 ##
#######################################
*)

htriple "ht_100005f97"
 Separations "(0x1000086cc,1) SEP ([0x100008008,8]_0,8); (0x1000086cc,1) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f97: CMP BYTE PTR [RIP + 10030], 0 7"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f9e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005f9e: JNE 4294989661 6"
 Post  "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 137 ##
#######################################
*)

htriple "ht_100005fa4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fa4: LEA RDI, [RBP - 2256] 7"
 Post  "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fab"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fab: MOV ESI, 2 5"
 Post  "RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb0"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fb0: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fb2: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = 0 ; RDI = (RSP_0 -64 0x8d8) ; RSI = 2 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fb4: ExternalCall fun__open 5"
 Post  "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__open {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fb9: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fbc: JE 4294991908 2"
 Post  "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 138 ##
#######################################
*)

htriple "ht_100005fbe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fbe: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fc1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fc1: LEA RSI, [RBP - 192] 7"
 Post  "RAX = bot(fun__open) ; RSI = (RSP_0 -64 200) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fc8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSI = (RSP_0 -64 200) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fc8: MOV EDI, EAX 2"
 Post  "RAX = bot(fun__open) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 200) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 200) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fca: ExternalCall fun__fstat_INODE64 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__fstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fcf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fcf: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fd1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fd1: JE 4294991968 6"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 139 ##
#######################################
*)

htriple "ht_100006024"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006024: LEA RDI, [RIP + 6234] 7"
 Post  "RAX = bot(fun__open) ; RDI = 0x100007885 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000602b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RDI = 0x100007885 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000602b: LEA RSI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__open) ; RDI = 0x100007885 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006032"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__open) ; RDI = 0x100007885 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006032: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x100007885 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006034"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x100007885 ; RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006034: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006039"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006039: JMP 4294989654 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 140 ##
#######################################
*)

htriple "ht_100005fd7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fd7: LEA RDI, [RIP + 6348] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078aa ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fde"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078aa ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fde: JMP 4294991114 5"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078aa ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 141 ##
#######################################
*)

htriple "ht_100006060"
 Separations "((RSP_0 -64 104),8) SEP ([0x100008008,8]_0,8); ((RSP_0 -64 104),8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006060: MOV RDX, QWORD PTR [RBP - 96] 4"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006064"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006064: CMP RDX, RBX 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006067"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006067: JNE 4294992037 2"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 142 ##
#######################################
*)

htriple "ht_100005d0a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d0a: LEA RSI, [RBP - 2256] 7"
 Post  "RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d11"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005d11: JMP 4294989483 5"
 Post  "RSI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 143 ##
#######################################
*)

htriple "ht_100005fec"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fec: LEA RDI, [RBP - 2256] 7"
 Post  "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ff3"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ff3: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 144 ##
#######################################
*)

htriple "ht_100005ff8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005ff8: LEA RDI, [RIP + 6256] 7"
 Post  "RDI = 0x10000786f ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fff"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x10000786f ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005fff: MOV RSI, R13 3"
 Post  "RDI = 0x10000786f ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006002"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x10000786f ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006002: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x10000786f ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006004"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x10000786f ; RSI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006004: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006009"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006009: JMP 4294989654 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 145 ##
#######################################
*)

htriple "ht_100005756"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100005756: MOV RBX, 18446744073709551615 7"
 Post  "RBX = 0xffffffffffffffff ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 146 ##
#######################################
*)

htriple "ht_100006069"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006069: LEA R12, [RBP - 2480] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006070"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006070: LEA RDX, [RBP - 2256] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006077"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006077: MOV EDI, R15D 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000607a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000607a: MOV RSI, R12 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000607d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDX = (RSP_0 -64 0x8d8) ; RDI = b32(bot(fun__open)) ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000607d: ExternalCall fun_0x100006287 5"
 Post  "RAX = bot(fun_0x100006287) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x100006287 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006082"
 Separations "(0x1000086f8,8) SEP (bot(fun_0x1000060ec),8); (0x1000086f8,8) SEP (RSP_0,8); (0x1000086f8,8) SEP ([0x100008008,8]_0,8); (0x1000086f8,8) SEP ([0x100008018,8]_0,8); (0x1000086f8,8) SEP ((RSI_0 +64 96),8); (0x1000086f8,8) SEP ((0x1000060d4 +64 ((b32(bot(fun_0x1000032c1)) -32 1) *64 4)),4); (0x1000086f8,8) SEP ((RSP_0 -64 8),8); (0x1000086f8,8) SEP ((RSP_0 -64 16),8); (0x1000086f8,8) SEP ((RSP_0 -64 24),8); (0x1000086f8,8) SEP ((RSP_0 -64 32),8); (0x1000086f8,8) SEP ((RSP_0 -64 40),8); (0x1000086f8,8) SEP ((RSP_0 -64 48),8); (0x1000086f8,8) SEP ((RSP_0 -64 56),8); (0x1000086f8,8) SEP ((RSP_0 -64 196),8); (0x1000086f8,8) SEP ((RSP_0 -64 1112),16); (0x1000086f8,8) SEP ((RSP_0 -64 1128),16); (0x1000086f8,8) SEP ((RSP_0 -64 1144),16); (0x1000086f8,8) SEP ((RSP_0 -64 1160),16); (0x1000086f8,8) SEP ((RSP_0 -64 1176),16); (0x1000086f8,8) SEP ((RSP_0 -64 1192),16); (0x1000086f8,8) SEP ((RSP_0 -64 1208),16); (0x1000086f8,8) SEP ((RSP_0 -64 1224),16); (0x1000086f8,8) SEP ((RSP_0 -64 1240),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8e4),4); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f0),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x8f8),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x908),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x918),8); (0x1000086f8,8) SEP ((RSP_0 -64 0x928),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x938),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x948),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x958),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x968),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x978),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x988),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x998),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9a8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9b8),16); (0x1000086f8,8) SEP ((RSP_0 -64 0x9c8),8); (0x1000086f8,8) SEP ((RSP_0 -64 (1240 -64 bot(fun__pread))),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006082: MOV QWORD PTR [RIP + 9835], 0 11"
 Post  "RAX = bot(fun_0x100006287) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000608d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000608d: MOV EDI, R15D 3"
 Post  "RAX = bot(fun_0x100006287) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006090"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100006287) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006090: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006095"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006095: MOV RDI, R13 3"
 Post  "RAX = bot(fun__close) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006098"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RDI = RDI_0 ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "100006098: MOV RSI, R12 3"
 Post  "RAX = bot(fun__close) ; RDI = RDI_0 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000609b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RDI = RDI_0 ; RSI = (RSP_0 -64 0x9b8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [0x1000086f8,8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "10000609b: ExternalCall fun_0x1000063ec 5"
 Post  "RAX = bot(fun_0x1000063ec) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x1000063ec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000063ec) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060a0: JMP 4294989661 5"
 Post  "RAX = bot(fun_0x1000063ec) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; R12 = (RSP_0 -64 0x9b8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 10000547a, blockId == 147 ##
#######################################
*)

htriple "ht_1000060a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060a5: LEA RDI, [RIP + 6179] 7"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060ac: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fstat_INODE64) ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060af: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x1000078cf ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060b1: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060b6: MOV EDI, R15D 3"
 Post  "RAX = bot(fun_0x10000312b) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RDI = b32(bot(fun__open)) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060b9: ExternalCall fun__close 5"
 Post  "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060be: LEA RDI, [RBP - 2256] 7"
 Post  "RAX = bot(fun__close) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__close) ; RDI = (RSP_0 -64 0x8d8) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060c5: ExternalCall fun__unlink 5"
 Post  "RAX = bot(fun__unlink) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 FunctionConstraints "PRESERVES fun__unlink {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008008,8];[0x100008018,8];[0x1000086d4,1];[0x1000086f8,8];[0x100008728,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 196),8];[(RSP_0 -64 1112),16];[(RSP_0 -64 1128),16];[(RSP_0 -64 1144),16];[(RSP_0 -64 1160),16];[(RSP_0 -64 1176),16];[(RSP_0 -64 1192),16];[(RSP_0 -64 1208),16];[(RSP_0 -64 1224),16];[(RSP_0 -64 1240),16];[(RSP_0 -64 0x8e0),8];[(RSP_0 -64 0x8e4),4];[(RSP_0 -64 0x8f0),8];[(RSP_0 -64 0x8f8),8];[(RSP_0 -64 0x908),8];[(RSP_0 -64 0x918),8];[(RSP_0 -64 0x928),16];[(RSP_0 -64 0x938),16];[(RSP_0 -64 0x948),16];[(RSP_0 -64 0x958),16];[(RSP_0 -64 0x968),16];[(RSP_0 -64 0x978),16];[(RSP_0 -64 0x988),16];[(RSP_0 -64 0x998),16];[(RSP_0 -64 0x9a8),16];[(RSP_0 -64 0x9b8),16];[(RSP_0 -64 0x9c8),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__unlink) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
 Instruction "1000060ca: JMP 4294989654 5"
 Post  "RAX = bot(fun__unlink) ; RSP = (RSP_0 -64 0x9c8) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__open)) ; R14 = RSI_0 ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008008,8] = [0x100008008,8]_0 ; [0x100008018,8] = [0x100008018,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x100008008,8]_0,8]_0 ; [(RSP_0 -64 196),8] = [(RSP_0 -64 196),8]_0 ; [(RSP_0 -64 1112),16] = [(RSP_0 -64 1112),16]_0 ; [(RSP_0 -64 1128),16] = [(RSP_0 -64 1128),16]_0 ; [(RSP_0 -64 1144),16] = [(RSP_0 -64 1144),16]_0 ; [(RSP_0 -64 1160),16] = [(RSP_0 -64 1160),16]_0 ; [(RSP_0 -64 1176),16] = [(RSP_0 -64 1176),16]_0 ; [(RSP_0 -64 1192),16] = [(RSP_0 -64 1192),16]_0 ; [(RSP_0 -64 1208),16] = [(RSP_0 -64 1208),16]_0 ; [(RSP_0 -64 1224),16] = [(RSP_0 -64 1224),16]_0 ; [(RSP_0 -64 1240),16] = [(RSP_0 -64 1240),16]_0 ; [(RSP_0 -64 0x918),8] = [(RSP_0 -64 0x918),8]_0 ; [(RSP_0 -64 0x928),16] = [(RSP_0 -64 0x928),16]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
