theory gzip_1000023c8
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000023c8, blockId == 0 ##
#####################################
*)

htriple "ht_1000023c8"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 8),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP (0x100008010,8); ((RSP_0 -64 8),8) SEP (0x100008028,8); ((RSP_0 -64 8),8) SEP (0x100008030,8); ((RSP_0 -64 8),8) SEP (0x100008560,4); ((RSP_0 -64 8),8) SEP (0x100008570,8); ((RSP_0 -64 8),8) SEP (0x100008578,4); ((RSP_0 -64 8),8) SEP (0x1000086a8,8); ((RSP_0 -64 8),8) SEP (0x1000086b0,4); ((RSP_0 -64 8),8) SEP (0x1000086c8,1); ((RSP_0 -64 8),8) SEP (0x1000086cc,1); ((RSP_0 -64 8),8) SEP (0x1000086cd,1); ((RSP_0 -64 8),8) SEP (0x1000086d0,1); ((RSP_0 -64 8),8) SEP (0x1000086d4,1); ((RSP_0 -64 8),8) SEP (0x1000086d8,1); ((RSP_0 -64 8),8) SEP (0x1000086dc,1); ((RSP_0 -64 8),8) SEP (0x1000086e0,1); ((RSP_0 -64 8),8) SEP (0x1000086e4,1); ((RSP_0 -64 8),8) SEP (0x1000086e8,1); ((RSP_0 -64 8),8) SEP (0x1000086ec,1); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 8),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023c8: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023c9: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023cc"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 16),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP (0x100008010,8); ((RSP_0 -64 16),8) SEP (0x100008028,8); ((RSP_0 -64 16),8) SEP (0x100008030,8); ((RSP_0 -64 16),8) SEP (0x100008560,4); ((RSP_0 -64 16),8) SEP (0x100008570,8); ((RSP_0 -64 16),8) SEP (0x100008578,4); ((RSP_0 -64 16),8) SEP (0x1000086a8,8); ((RSP_0 -64 16),8) SEP (0x1000086b0,4); ((RSP_0 -64 16),8) SEP (0x1000086c8,1); ((RSP_0 -64 16),8) SEP (0x1000086cc,1); ((RSP_0 -64 16),8) SEP (0x1000086cd,1); ((RSP_0 -64 16),8) SEP (0x1000086d0,1); ((RSP_0 -64 16),8) SEP (0x1000086d4,1); ((RSP_0 -64 16),8) SEP (0x1000086d8,1); ((RSP_0 -64 16),8) SEP (0x1000086dc,1); ((RSP_0 -64 16),8) SEP (0x1000086e0,1); ((RSP_0 -64 16),8) SEP (0x1000086e4,1); ((RSP_0 -64 16),8) SEP (0x1000086e8,1); ((RSP_0 -64 16),8) SEP (0x1000086ec,1); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 16),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023cc: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023ce"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 24),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP (0x100008010,8); ((RSP_0 -64 24),8) SEP (0x100008028,8); ((RSP_0 -64 24),8) SEP (0x100008030,8); ((RSP_0 -64 24),8) SEP (0x100008560,4); ((RSP_0 -64 24),8) SEP (0x100008570,8); ((RSP_0 -64 24),8) SEP (0x100008578,4); ((RSP_0 -64 24),8) SEP (0x1000086a8,8); ((RSP_0 -64 24),8) SEP (0x1000086b0,4); ((RSP_0 -64 24),8) SEP (0x1000086c8,1); ((RSP_0 -64 24),8) SEP (0x1000086cc,1); ((RSP_0 -64 24),8) SEP (0x1000086cd,1); ((RSP_0 -64 24),8) SEP (0x1000086d0,1); ((RSP_0 -64 24),8) SEP (0x1000086d4,1); ((RSP_0 -64 24),8) SEP (0x1000086d8,1); ((RSP_0 -64 24),8) SEP (0x1000086dc,1); ((RSP_0 -64 24),8) SEP (0x1000086e0,1); ((RSP_0 -64 24),8) SEP (0x1000086e4,1); ((RSP_0 -64 24),8) SEP (0x1000086e8,1); ((RSP_0 -64 24),8) SEP (0x1000086ec,1); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 24),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023ce: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023d0"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 32),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP (0x100008010,8); ((RSP_0 -64 32),8) SEP (0x100008028,8); ((RSP_0 -64 32),8) SEP (0x100008030,8); ((RSP_0 -64 32),8) SEP (0x100008560,4); ((RSP_0 -64 32),8) SEP (0x100008570,8); ((RSP_0 -64 32),8) SEP (0x100008578,4); ((RSP_0 -64 32),8) SEP (0x1000086a8,8); ((RSP_0 -64 32),8) SEP (0x1000086b0,4); ((RSP_0 -64 32),8) SEP (0x1000086c8,1); ((RSP_0 -64 32),8) SEP (0x1000086cc,1); ((RSP_0 -64 32),8) SEP (0x1000086cd,1); ((RSP_0 -64 32),8) SEP (0x1000086d0,1); ((RSP_0 -64 32),8) SEP (0x1000086d4,1); ((RSP_0 -64 32),8) SEP (0x1000086d8,1); ((RSP_0 -64 32),8) SEP (0x1000086dc,1); ((RSP_0 -64 32),8) SEP (0x1000086e0,1); ((RSP_0 -64 32),8) SEP (0x1000086e4,1); ((RSP_0 -64 32),8) SEP (0x1000086e8,1); ((RSP_0 -64 32),8) SEP (0x1000086ec,1); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 32),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023d0: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023d2"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 40),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP (0x100008010,8); ((RSP_0 -64 40),8) SEP (0x100008028,8); ((RSP_0 -64 40),8) SEP (0x100008030,8); ((RSP_0 -64 40),8) SEP (0x100008560,4); ((RSP_0 -64 40),8) SEP (0x100008570,8); ((RSP_0 -64 40),8) SEP (0x100008578,4); ((RSP_0 -64 40),8) SEP (0x1000086a8,8); ((RSP_0 -64 40),8) SEP (0x1000086b0,4); ((RSP_0 -64 40),8) SEP (0x1000086c8,1); ((RSP_0 -64 40),8) SEP (0x1000086cc,1); ((RSP_0 -64 40),8) SEP (0x1000086cd,1); ((RSP_0 -64 40),8) SEP (0x1000086d0,1); ((RSP_0 -64 40),8) SEP (0x1000086d4,1); ((RSP_0 -64 40),8) SEP (0x1000086d8,1); ((RSP_0 -64 40),8) SEP (0x1000086dc,1); ((RSP_0 -64 40),8) SEP (0x1000086e0,1); ((RSP_0 -64 40),8) SEP (0x1000086e4,1); ((RSP_0 -64 40),8) SEP (0x1000086e8,1); ((RSP_0 -64 40),8) SEP (0x1000086ec,1); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 40),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023d2: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023d4"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 48),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP (0x100008010,8); ((RSP_0 -64 48),8) SEP (0x100008028,8); ((RSP_0 -64 48),8) SEP (0x100008030,8); ((RSP_0 -64 48),8) SEP (0x100008560,4); ((RSP_0 -64 48),8) SEP (0x100008570,8); ((RSP_0 -64 48),8) SEP (0x100008578,4); ((RSP_0 -64 48),8) SEP (0x1000086a8,8); ((RSP_0 -64 48),8) SEP (0x1000086b0,4); ((RSP_0 -64 48),8) SEP (0x1000086c8,1); ((RSP_0 -64 48),8) SEP (0x1000086cc,1); ((RSP_0 -64 48),8) SEP (0x1000086cd,1); ((RSP_0 -64 48),8) SEP (0x1000086d0,1); ((RSP_0 -64 48),8) SEP (0x1000086d4,1); ((RSP_0 -64 48),8) SEP (0x1000086d8,1); ((RSP_0 -64 48),8) SEP (0x1000086dc,1); ((RSP_0 -64 48),8) SEP (0x1000086e0,1); ((RSP_0 -64 48),8) SEP (0x1000086e4,1); ((RSP_0 -64 48),8) SEP (0x1000086e8,1); ((RSP_0 -64 48),8) SEP (0x1000086ec,1); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 48),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023d4: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023d5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023d5: SUB RSP, 184 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023dc: MOV R13, RSI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RSI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023df"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RSI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023df: MOV R14D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023e2: ExternalCall fun__getprogname 5"
 Post  "RAX = bot(fun__getprogname) ; RBX = RBX_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__getprogname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getprogname) ; RBX = RBX_0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023e7: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__getprogname) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023ea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getprogname) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023ea: LEA RDI, [RIP + 19351] 7"
 Post  "RAX = bot(fun__getprogname) ; RBX = bot(fun__getprogname) ; RDI = 0x100006f88 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023f1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getprogname) ; RBX = bot(fun__getprogname) ; RDI = 0x100006f88 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023f1: ExternalCall fun__getenv 5"
 Post  "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__getenv {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023f6: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000023f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023f9: JE 4294976711 6"
 Post  "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 1 ##
#####################################
*)

htriple "ht_1000023ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000023ff: MOV R15, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002402"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002402: XOR EDX, EDX 2"
 Post  "RAX = bot(fun__getenv) ; RBX = bot(fun__getprogname) ; RDX = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 2 ##
#####################################
*)

htriple "ht_1000024c7"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun__getenv),1); ((RSP_0 -64 52),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP (0x100008010,8); ((RSP_0 -64 52),4) SEP (0x100008028,8); ((RSP_0 -64 52),4) SEP (0x100008030,8); ((RSP_0 -64 52),4) SEP (0x100008560,4); ((RSP_0 -64 52),4) SEP (0x100008570,8); ((RSP_0 -64 52),4) SEP (0x100008578,4); ((RSP_0 -64 52),4) SEP (0x1000086a8,8); ((RSP_0 -64 52),4) SEP (0x1000086b0,4); ((RSP_0 -64 52),4) SEP (0x1000086c8,1); ((RSP_0 -64 52),4) SEP (0x1000086cc,1); ((RSP_0 -64 52),4) SEP (0x1000086cd,1); ((RSP_0 -64 52),4) SEP (0x1000086d0,1); ((RSP_0 -64 52),4) SEP (0x1000086d4,1); ((RSP_0 -64 52),4) SEP (0x1000086d8,1); ((RSP_0 -64 52),4) SEP (0x1000086dc,1); ((RSP_0 -64 52),4) SEP (0x1000086e0,1); ((RSP_0 -64 52),4) SEP (0x1000086e4,1); ((RSP_0 -64 52),4) SEP (0x1000086e8,1); ((RSP_0 -64 52),4) SEP (0x1000086ec,1); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 52),4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024c7: MOV DWORD PTR [RBP - 44], R14D 4"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = b32(RDI_0) ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024cb"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = b32(RDI_0) ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024cb: JMP 4294976774 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = b32(RDI_0) ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 3 ##
#####################################
*)

htriple "ht_10000240b"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000240b: CMP CL, 32 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000240e"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000240e: JNE 4294976533 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 4 ##
#####################################
*)

htriple "ht_100002410"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002410: INC RAX 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002413"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002413: JMP 4294976516 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 5 ##
#####################################
*)

htriple "ht_100002415"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002415: TEST CL, CL 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002417"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002417: JE 4294976561 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 6 ##
#####################################
*)

htriple "ht_100002404"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 52),4); (RAX,1) SEP ((RSP_0 -64 64),8); (RAX,1) SEP ((RSP_0 -64 80),8); (RAX,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002404: MOV CL, BYTE PTR [RAX] 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002406"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002406: CMP CL, 9 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002409"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002409: JE 4294976528 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 7 ##
#####################################
*)

htriple "ht_100002419"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002419: INC EDX 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 8 ##
#####################################
*)

htriple "ht_100002431"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002431: TEST EDX, EDX 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002433"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002433: JE 4294976711 6"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000023c8, blockId == 9 ##
#####################################
*)

htriple "ht_100002420"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002420: CMP CL, 32 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002423"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002423: JE 4294976516 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 10 ##
######################################
*)

htriple "ht_100002425"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002425: TEST CL, CL 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002427"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002427: JE 4294976569 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 11 ##
######################################
*)

htriple "ht_100002429"
 Separations ""
 Assertions  "((RAX +64 1),1) SEP (RSP_0,8); ((RAX +64 1),1) SEP ((RSP_0 -64 8),8); ((RAX +64 1),1) SEP ((RSP_0 -64 16),8); ((RAX +64 1),1) SEP ((RSP_0 -64 24),8); ((RAX +64 1),1) SEP ((RSP_0 -64 32),8); ((RAX +64 1),1) SEP ((RSP_0 -64 40),8); ((RAX +64 1),1) SEP ((RSP_0 -64 48),8); ((RAX +64 1),1) SEP ((RSP_0 -64 52),4); ((RAX +64 1),1) SEP ((RSP_0 -64 64),8); ((RAX +64 1),1) SEP ((RSP_0 -64 80),8); ((RAX +64 1),1) SEP ((RSP_0 -64 88),8)"
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002429: MOV CL, BYTE PTR [RAX + 1] 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000242c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000242c: INC RAX 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000242f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000242f: JMP 4294976539 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 12 ##
######################################
*)

htriple "ht_100002439"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002439: MOV QWORD PTR [RBP - 56], RBX 4"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000243d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000243d: ADD EDX, R14D 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002440"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun__getenv),1); ((RSP_0 -64 52),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP (0x100008010,8); ((RSP_0 -64 52),4) SEP (0x100008028,8); ((RSP_0 -64 52),4) SEP (0x100008030,8); ((RSP_0 -64 52),4) SEP (0x100008560,4); ((RSP_0 -64 52),4) SEP (0x100008570,8); ((RSP_0 -64 52),4) SEP (0x100008578,4); ((RSP_0 -64 52),4) SEP (0x1000086a8,8); ((RSP_0 -64 52),4) SEP (0x1000086b0,4); ((RSP_0 -64 52),4) SEP (0x1000086c8,1); ((RSP_0 -64 52),4) SEP (0x1000086cc,1); ((RSP_0 -64 52),4) SEP (0x1000086cd,1); ((RSP_0 -64 52),4) SEP (0x1000086d0,1); ((RSP_0 -64 52),4) SEP (0x1000086d4,1); ((RSP_0 -64 52),4) SEP (0x1000086d8,1); ((RSP_0 -64 52),4) SEP (0x1000086dc,1); ((RSP_0 -64 52),4) SEP (0x1000086e0,1); ((RSP_0 -64 52),4) SEP (0x1000086e4,1); ((RSP_0 -64 52),4) SEP (0x1000086e8,1); ((RSP_0 -64 52),4) SEP (0x1000086ec,1); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 52),4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002440: MOV DWORD PTR [RBP - 44], EDX 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002443"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002443: MOVSXD RAX, EDX 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002446"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002446: LEA RDI, [RAX * 8 + 8] 8"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000244e"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000244e: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002453"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002453: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002456"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002456: JE 4294977989 6"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 13 ##
######################################
*)

htriple "ht_10000241b"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000241b: CMP CL, 9 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000241e"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000241e: JE 4294976516 2"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 52),4] = [(RSP_0 -64 52),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 14 ##
######################################
*)

htriple "ht_10000245c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = b32(RDI_0) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000245c: MOV R14, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000245f"
 Separations "(RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP (0x100008010,8); (RSI_0,8) SEP (0x100008028,8); (RSI_0,8) SEP (0x100008030,8); (RSI_0,8) SEP (0x100008560,4); (RSI_0,8) SEP (0x100008570,8); (RSI_0,8) SEP (0x100008578,4); (RSI_0,8) SEP (0x1000086a8,8); (RSI_0,8) SEP (0x1000086b0,4); (RSI_0,8) SEP (0x1000086c8,1); (RSI_0,8) SEP (0x1000086cc,1); (RSI_0,8) SEP (0x1000086cd,1); (RSI_0,8) SEP (0x1000086d0,1); (RSI_0,8) SEP (0x1000086d4,1); (RSI_0,8) SEP (0x1000086d8,1); (RSI_0,8) SEP (0x1000086dc,1); (RSI_0,8) SEP (0x1000086e0,1); (RSI_0,8) SEP (0x1000086e4,1); (RSI_0,8) SEP (0x1000086e8,1); (RSI_0,8) SEP (0x1000086ec,1); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 52),4); (RSI_0,8) SEP ((RSP_0 -64 64),8); (RSI_0,8) SEP ((RSP_0 -64 80),8); (RSI_0,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000245f: MOV RAX, QWORD PTR [R13] 4"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002463"
 Separations "(bot(fun__malloc),8) SEP (RSP_0,8); (bot(fun__malloc),8) SEP (0x100008010,8); (bot(fun__malloc),8) SEP (0x100008028,8); (bot(fun__malloc),8) SEP (0x100008030,8); (bot(fun__malloc),8) SEP (0x100008560,4); (bot(fun__malloc),8) SEP (0x100008570,8); (bot(fun__malloc),8) SEP (0x100008578,4); (bot(fun__malloc),8) SEP (0x1000086a8,8); (bot(fun__malloc),8) SEP (0x1000086b0,4); (bot(fun__malloc),8) SEP (0x1000086c8,1); (bot(fun__malloc),8) SEP (0x1000086cc,1); (bot(fun__malloc),8) SEP (0x1000086cd,1); (bot(fun__malloc),8) SEP (0x1000086d0,1); (bot(fun__malloc),8) SEP (0x1000086d4,1); (bot(fun__malloc),8) SEP (0x1000086d8,1); (bot(fun__malloc),8) SEP (0x1000086dc,1); (bot(fun__malloc),8) SEP (0x1000086e0,1); (bot(fun__malloc),8) SEP (0x1000086e4,1); (bot(fun__malloc),8) SEP (0x1000086e8,1); (bot(fun__malloc),8) SEP (0x1000086ec,1); (bot(fun__malloc),8) SEP (0x1000086f4,4); (bot(fun__malloc),8) SEP ((RSI_0 +64 8),8); (bot(fun__malloc),8) SEP ((RSI_0 +64 16),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 8),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 16),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 24),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 32),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 40),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 48),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 52),4); (bot(fun__malloc),8) SEP ((RSP_0 -64 64),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 80),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 88),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 228),2)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002463: MOV QWORD PTR [R14], RAX 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002466"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002466: MOV R12D, 1 6"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; R12 = 1 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008010,8] = [0x100008010,8]_0 ; [0x100008028,8] = [0x100008028,8]_0 ; [0x100008030,8] = [0x100008030,8]_0 ; [0x100008560,4] = [0x100008560,4]_0 ; [0x100008570,8] = [0x100008570,8]_0 ; [0x100008578,4] = [0x100008578,4]_0 ; [0x1000086a8,8] = [0x1000086a8,8]_0 ; [0x1000086b0,4] = [0x1000086b0,4]_0 ; [0x1000086c8,1] = [0x1000086c8,1]_0 ; [0x1000086cc,1] = [0x1000086cc,1]_0 ; [0x1000086cd,1] = [0x1000086cd,1]_0 ; [0x1000086d0,1] = [0x1000086d0,1]_0 ; [0x1000086d4,1] = [0x1000086d4,1]_0 ; [0x1000086d8,1] = [0x1000086d8,1]_0 ; [0x1000086dc,1] = [0x1000086dc,1]_0 ; [0x1000086e0,1] = [0x1000086e0,1]_0 ; [0x1000086e4,1] = [0x1000086e4,1]_0 ; [0x1000086e8,1] = [0x1000086e8,1]_0 ; [0x1000086ec,1] = [0x1000086ec,1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 15 ##
######################################
*)

htriple "ht_1000029c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029c5: LEA RDI, [RIP + 18184] 7"
 Post  "RAX = bot(fun__malloc) ; RDI = 0x1000070d4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 16 ##
######################################
*)

htriple "ht_100002478"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002478: CMP AL, 32 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000247a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000247a: JNE 4294976641 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 17 ##
######################################
*)

htriple "ht_10000247c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000247c: INC RDI 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000247f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000247f: JMP 4294976626 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 18 ##
######################################
*)

htriple "ht_100002481"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002481: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002483"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002483: JE 4294976720 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 19 ##
######################################
*)

htriple "ht_100002472"
 Separations ""
 Assertions  "(RDI,1) SEP (RSP_0,8); (RDI,1) SEP ((RSP_0 -64 8),8); (RDI,1) SEP ((RSP_0 -64 16),8); (RDI,1) SEP ((RSP_0 -64 24),8); (RDI,1) SEP ((RSP_0 -64 32),8); (RDI,1) SEP ((RSP_0 -64 40),8); (RDI,1) SEP ((RSP_0 -64 48),8); (RDI,1) SEP ((RSP_0 -64 52),4); (RDI,1) SEP ((RSP_0 -64 64),8); (RDI,1) SEP ((RSP_0 -64 80),8); (RDI,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002472: MOV AL, BYTE PTR [RDI] 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002474"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002474: CMP AL, 9 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002476"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002476: JE 4294976636 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 20 ##
######################################
*)

htriple "ht_100002485"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002485: LEA R12, [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002489"
 Separations ""
 Assertions  "((R14 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002489: MOV QWORD PTR [R14 + RBX * 8], RDI 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000248d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000248d: MOV R15, RDI 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 21 ##
######################################
*)

htriple "ht_1000024d0"
 Separations "((RSI_0 +64 8),8) SEP (bot(fun__malloc),8); ((RSI_0 +64 8),8) SEP (RSP_0,8); ((RSI_0 +64 8),8) SEP (0x100008010,8); ((RSI_0 +64 8),8) SEP (0x100008028,8); ((RSI_0 +64 8),8) SEP (0x100008030,8); ((RSI_0 +64 8),8) SEP (0x100008560,4); ((RSI_0 +64 8),8) SEP (0x100008570,8); ((RSI_0 +64 8),8) SEP (0x100008578,4); ((RSI_0 +64 8),8) SEP (0x1000086a8,8); ((RSI_0 +64 8),8) SEP (0x1000086b0,4); ((RSI_0 +64 8),8) SEP (0x1000086c8,1); ((RSI_0 +64 8),8) SEP (0x1000086cc,1); ((RSI_0 +64 8),8) SEP (0x1000086cd,1); ((RSI_0 +64 8),8) SEP (0x1000086d0,1); ((RSI_0 +64 8),8) SEP (0x1000086d4,1); ((RSI_0 +64 8),8) SEP (0x1000086d8,1); ((RSI_0 +64 8),8) SEP (0x1000086dc,1); ((RSI_0 +64 8),8) SEP (0x1000086e0,1); ((RSI_0 +64 8),8) SEP (0x1000086e4,1); ((RSI_0 +64 8),8) SEP (0x1000086e8,1); ((RSI_0 +64 8),8) SEP (0x1000086ec,1); ((RSI_0 +64 8),8) SEP ((bot(fun__malloc) +64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 40),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 52),4); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RSI_0 +64 8),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024d0: MOV RAX, QWORD PTR [R13 + 8] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024d4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024d4: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024d7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024d7: JE 4294976756 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 22 ##
######################################
*)

htriple "ht_100002497"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002497: CMP AL, 32 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002499"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002499: JE 4294976676 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 23 ##
######################################
*)

htriple "ht_1000024a4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024a4: MOV RSI, R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024a7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024a7: SUB RSI, RDI 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024aa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024aa: ExternalCall fun__strndup 5"
 Post  "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strndup {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024af"
 Separations ""
 Assertions  "((R14 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024af: MOV QWORD PTR [R14 + RBX * 8], RAX 4"
 Post  "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024b3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024b3: INC R15 3"
 Post  "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024b6: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024b9: JNE 4294976620 2"
 Post  "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 24 ##
######################################
*)

htriple "ht_10000249b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000249b: INC R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000249e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000249e: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024a0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024a0: JNE 4294976656 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 25 ##
######################################
*)

htriple "ht_100002490"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 52),4); (R15,1) SEP ((RSP_0 -64 64),8); (R15,1) SEP ((RSP_0 -64 80),8); (R15,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002490: MOV AL, BYTE PTR [R15] 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002493"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002493: CMP AL, 9 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002495"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002495: JE 4294976676 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 26 ##
######################################
*)

htriple "ht_1000024a2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024a2: JMP 4294976717 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024cd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024cd: MOV RBX, R12 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 27 ##
######################################
*)

htriple "ht_10000246c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000246c: MOV RBX, R12 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000246f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000246f: MOV RDI, R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 28 ##
######################################
*)

htriple "ht_1000024bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strndup) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024bb: LEA RDI, [RIP + 19481] 7"
 Post  "RAX = bot(fun__strndup) ; RDI = 0x1000070db ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strndup) ; RDI = 0x1000070db ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024c2: JMP 4294977996 5"
 Post  "RAX = bot(fun__strndup) ; RDI = 0x1000070db ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 29 ##
######################################
*)

htriple "ht_1000024d9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024d9: MOVSXD RBX, EBX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024dc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = RSI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024dc: ADD R13, 16 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = (RSI_0 +64 16) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 30 ##
######################################
*)

htriple "ht_1000024f4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024f4: MOVSXD RAX, EBX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024f7"
 Separations ""
 Assertions  "((R14 +64 (RAX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 80),8); ((R14 +64 (RAX *64 8)),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024f7: MOV QWORD PTR [R14 + RAX * 8], 0 8"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024ff"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024ff: MOV R13, R14 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002502"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002502: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; R13 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 31 ##
######################################
*)

htriple "ht_1000024e0"
 Separations ""
 Assertions  "((R14 +64 (RBX *64 8)),8) SEP (RSP_0,8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 8),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 16),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 24),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 32),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 40),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 48),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 52),4); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 64),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 80),8); ((R14 +64 (RBX *64 8)),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024e0: MOV QWORD PTR [R14 + RBX * 8], RAX 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024e4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024e4: INC RBX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024e7"
 Separations ""
 Assertions  "(R13,8) SEP (RSP_0,8); (R13,8) SEP ((RSP_0 -64 8),8); (R13,8) SEP ((RSP_0 -64 16),8); (R13,8) SEP ((RSP_0 -64 24),8); (R13,8) SEP ((RSP_0 -64 32),8); (R13,8) SEP ((RSP_0 -64 40),8); (R13,8) SEP ((RSP_0 -64 48),8); (R13,8) SEP ((RSP_0 -64 52),4); (R13,8) SEP ((RSP_0 -64 64),8); (R13,8) SEP ((RSP_0 -64 80),8); (R13,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024e7: MOV RAX, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024eb: ADD R13, 8 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024ef"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024ef: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000024f2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000024f2: JNE 4294976736 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun__getprogname) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 32 ##
######################################
*)

htriple "ht_100002506"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002506: LEA RSI, [RIP + 1467] 7"
 Post  "RBX = bot(fun__getprogname) ; RSI = 0x100002ac8 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000250d"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSI = 0x100002ac8 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000250d: MOV EDI, 2 5"
 Post  "RBX = bot(fun__getprogname) ; RDI = 2 ; RSI = 0x100002ac8 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002512"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RDI = 2 ; RSI = 0x100002ac8 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002512: ExternalCall fun__signal 5"
 Post  "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__signal {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002517"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002517: LEA RSI, [RIP + 19055] 7"
 Post  "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f8d ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000251e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f8d ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000251e: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f8d ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002521"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__signal) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f8d ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002521: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002526"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002526: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002528"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002528: JE 4294976855 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 33 ##
######################################
*)

htriple "ht_10000252a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000252a: LEA RSI, [RIP + 19043] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002531"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002531: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002534"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002534: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002539"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002539: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000253b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000253b: JE 4294976848 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 34 ##
######################################
*)

htriple "ht_100002557"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002557: MOV BYTE PTR [RIP + 24938], 1 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 35 ##
######################################
*)

htriple "ht_10000253d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000253d: LEA RSI, [RIP + 19029] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f99 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002544"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f99 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002544: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f99 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002547"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f99 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002547: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000254c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000254c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000254e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000254e: JNE 4294976862 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 36 ##
######################################
*)

htriple "ht_100002550"
 Separations "(0x1000086cc,1) SEP (bot(fun__getenv),1); (0x1000086cc,1) SEP (bot(fun__malloc),8); (0x1000086cc,1) SEP (RSI_0,8); (0x1000086cc,1) SEP (RSP_0,8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cc,1) SEP ((RSI_0 +64 8),8); (0x1000086cc,1) SEP ((RSI_0 +64 16),8); (0x1000086cc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cc,1) SEP ((RSP_0 -64 8),8); (0x1000086cc,1) SEP ((RSP_0 -64 16),8); (0x1000086cc,1) SEP ((RSP_0 -64 24),8); (0x1000086cc,1) SEP ((RSP_0 -64 32),8); (0x1000086cc,1) SEP ((RSP_0 -64 40),8); (0x1000086cc,1) SEP ((RSP_0 -64 48),8); (0x1000086cc,1) SEP ((RSP_0 -64 52),4); (0x1000086cc,1) SEP ((RSP_0 -64 64),8); (0x1000086cc,1) SEP ((RSP_0 -64 80),8); (0x1000086cc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002550: MOV BYTE PTR [RIP + 24949], 1 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 37 ##
######################################
*)

htriple "ht_10000255e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000255e: LEA RSI, [RIP + 18991] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002565"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002565: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002568"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RDI = bot(fun__getprogname) ; RSI = 0x100006f94 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002568: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000256d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000256d: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000256f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000256f: JNE 4294976888 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 38 ##
######################################
*)

htriple "ht_100002571"
 Separations "(0x1000086cd,1) SEP (bot(fun__getenv),1); (0x1000086cd,1) SEP (bot(fun__malloc),8); (0x1000086cd,1) SEP (RSI_0,8); (0x1000086cd,1) SEP (RSP_0,8); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cd,1) SEP ((RSI_0 +64 8),8); (0x1000086cd,1) SEP ((RSI_0 +64 16),8); (0x1000086cd,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cd,1) SEP ((RSP_0 -64 8),8); (0x1000086cd,1) SEP ((RSP_0 -64 16),8); (0x1000086cd,1) SEP ((RSP_0 -64 24),8); (0x1000086cd,1) SEP ((RSP_0 -64 32),8); (0x1000086cd,1) SEP ((RSP_0 -64 40),8); (0x1000086cd,1) SEP ((RSP_0 -64 48),8); (0x1000086cd,1) SEP ((RSP_0 -64 52),4); (0x1000086cd,1) SEP ((RSP_0 -64 64),8); (0x1000086cd,1) SEP ((RSP_0 -64 80),8); (0x1000086cd,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002571: MOV BYTE PTR [RIP + 24917], 1 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cd,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 39 ##
######################################
*)

htriple "ht_100002578"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002578: LEA R14, [RIP + 18976] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = 0x100006f9f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000257f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = 0x100006f9f ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000257f: LEA R12, [RIP + 23866] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002586"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002586: LEA R15, [RIP + 1223] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 40 ##
######################################
*)

htriple "ht_1000025a6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025a6: LEA ECX, [RAX - 97] 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025a9: CMP ECX, 21 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025ac: JA 4294977033 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 41 ##
######################################
*)

htriple "ht_1000025d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025d4: CMP EAX, 75 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025d7: JG 4294977008 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 42 ##
######################################
*)

htriple "ht_1000025ae"
 Separations "((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (RSP_0,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008010,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008028,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008030,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008560,4); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008570,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x100008578,4); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086a8,8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086b0,4); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086c8,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086cc,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086cd,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086d0,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086d4,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086d8,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086dc,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086e0,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086e4,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086e8,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP (0x1000086ec,1); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025ae: MOVSXD RAX, DWORD PTR [R15 + RCX * 4] 4"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025b2"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025b2: ADD RAX, R15 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025b5"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025b5: JMP RAX 2"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 43 ##
######################################
*)

htriple "ht_100002609"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002609: CMP EAX, 83 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000260c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000260c: JNE 4294978069 6"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 44 ##
######################################
*)

htriple "ht_1000025b7"
 Separations "(0x100008010,8) SEP (bot(fun__getenv),1); (0x100008010,8) SEP (bot(fun__malloc),8); (0x100008010,8) SEP (RSI_0,8); (0x100008010,8) SEP (RSP_0,8); (0x100008010,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008010,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008010,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008010,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008010,8) SEP ((bot(fun__malloc) +64 8),8); (0x100008010,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008010,8) SEP ((RSI_0 +64 8),8); (0x100008010,8) SEP ((RSI_0 +64 16),8); (0x100008010,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008010,8) SEP ((RSP_0 -64 8),8); (0x100008010,8) SEP ((RSP_0 -64 16),8); (0x100008010,8) SEP ((RSP_0 -64 24),8); (0x100008010,8) SEP ((RSP_0 -64 32),8); (0x100008010,8) SEP ((RSP_0 -64 40),8); (0x100008010,8) SEP ((RSP_0 -64 48),8); (0x100008010,8) SEP ((RSP_0 -64 52),4); (0x100008010,8) SEP ((RSP_0 -64 64),8); (0x100008010,8) SEP ((RSP_0 -64 80),8); (0x100008010,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025b7: MOV RAX, QWORD PTR [RIP + 23122] 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025be"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025be: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025c1"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025c1: LEA RSI, [RIP + 18930] 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025c8"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025c8: MOV RDX, RBX 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RDX = bot(fun__getprogname) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025cb"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RDX = bot(fun__getprogname) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025cb: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RDX = bot(fun__getprogname) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RDX = bot(fun__getprogname) ; RSI = 0x100006fba ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025cd: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025d2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025d2: JMP 4294976909 2"
 Post  "RAX = bot(fun__fprintf) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 45 ##
######################################
*)

htriple "ht_10000264c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000264c: MOV AL, 1 2"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000264e"
 Separations "(0x1000086cc,1) SEP (bot(fun__getenv),1); (0x1000086cc,1) SEP (bot(fun__malloc),8); (0x1000086cc,1) SEP (RSI_0,8); (0x1000086cc,1) SEP (RSP_0,8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cc,1) SEP ((RSI_0 +64 8),8); (0x1000086cc,1) SEP ((RSI_0 +64 16),8); (0x1000086cc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cc,1) SEP ((RSP_0 -64 8),8); (0x1000086cc,1) SEP ((RSP_0 -64 16),8); (0x1000086cc,1) SEP ((RSP_0 -64 24),8); (0x1000086cc,1) SEP ((RSP_0 -64 32),8); (0x1000086cc,1) SEP ((RSP_0 -64 40),8); (0x1000086cc,1) SEP ((RSP_0 -64 48),8); (0x1000086cc,1) SEP ((RSP_0 -64 52),4); (0x1000086cc,1) SEP ((RSP_0 -64 64),8); (0x1000086cc,1) SEP ((RSP_0 -64 80),8); (0x1000086cc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000264e: MOV BYTE PTR [RIP + 24696], AL 6"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002654"
 Separations "(0x1000086ec,1) SEP (bot(fun__getenv),1); (0x1000086ec,1) SEP (bot(fun__malloc),8); (0x1000086ec,1) SEP (RSI_0,8); (0x1000086ec,1) SEP (RSP_0,8); (0x1000086ec,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086ec,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086ec,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086ec,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086ec,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086ec,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086ec,1) SEP ((RSI_0 +64 8),8); (0x1000086ec,1) SEP ((RSI_0 +64 16),8); (0x1000086ec,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086ec,1) SEP ((RSP_0 -64 8),8); (0x1000086ec,1) SEP ((RSP_0 -64 16),8); (0x1000086ec,1) SEP ((RSP_0 -64 24),8); (0x1000086ec,1) SEP ((RSP_0 -64 32),8); (0x1000086ec,1) SEP ((RSP_0 -64 40),8); (0x1000086ec,1) SEP ((RSP_0 -64 48),8); (0x1000086ec,1) SEP ((RSP_0 -64 52),4); (0x1000086ec,1) SEP ((RSP_0 -64 64),8); (0x1000086ec,1) SEP ((RSP_0 -64 80),8); (0x1000086ec,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002654: MOV BYTE PTR [RIP + 24722], AL 6"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000265a"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [0x1000086ec,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000265a: JMP 4294977148 2"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [0x1000086ec,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 46 ##
######################################
*)

htriple "ht_10000265c"
 Separations "(0x1000086e4,1) SEP (bot(fun__getenv),1); (0x1000086e4,1) SEP (bot(fun__malloc),8); (0x1000086e4,1) SEP (RSI_0,8); (0x1000086e4,1) SEP (RSP_0,8); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e4,1) SEP ((RSI_0 +64 8),8); (0x1000086e4,1) SEP ((RSI_0 +64 16),8); (0x1000086e4,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e4,1) SEP ((RSP_0 -64 8),8); (0x1000086e4,1) SEP ((RSP_0 -64 16),8); (0x1000086e4,1) SEP ((RSP_0 -64 24),8); (0x1000086e4,1) SEP ((RSP_0 -64 32),8); (0x1000086e4,1) SEP ((RSP_0 -64 40),8); (0x1000086e4,1) SEP ((RSP_0 -64 48),8); (0x1000086e4,1) SEP ((RSP_0 -64 52),4); (0x1000086e4,1) SEP ((RSP_0 -64 64),8); (0x1000086e4,1) SEP ((RSP_0 -64 80),8); (0x1000086e4,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000265c: MOV BYTE PTR [RIP + 24705], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002663"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002663: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 47 ##
######################################
*)

htriple "ht_100002668"
 Separations "(0x1000086cc,1) SEP (bot(fun__getenv),1); (0x1000086cc,1) SEP (bot(fun__malloc),8); (0x1000086cc,1) SEP (RSI_0,8); (0x1000086cc,1) SEP (RSP_0,8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cc,1) SEP ((RSI_0 +64 8),8); (0x1000086cc,1) SEP ((RSI_0 +64 16),8); (0x1000086cc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cc,1) SEP ((RSP_0 -64 8),8); (0x1000086cc,1) SEP ((RSP_0 -64 16),8); (0x1000086cc,1) SEP ((RSP_0 -64 24),8); (0x1000086cc,1) SEP ((RSP_0 -64 32),8); (0x1000086cc,1) SEP ((RSP_0 -64 40),8); (0x1000086cc,1) SEP ((RSP_0 -64 48),8); (0x1000086cc,1) SEP ((RSP_0 -64 52),4); (0x1000086cc,1) SEP ((RSP_0 -64 64),8); (0x1000086cc,1) SEP ((RSP_0 -64 80),8); (0x1000086cc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002668: MOV BYTE PTR [RIP + 24669], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000266f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000266f: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086cc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 48 ##
######################################
*)

htriple "ht_100002674"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002674: MOV AL, 1 2"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002676"
 Separations "(0x1000086d0,1) SEP (bot(fun__getenv),1); (0x1000086d0,1) SEP (bot(fun__malloc),8); (0x1000086d0,1) SEP (RSI_0,8); (0x1000086d0,1) SEP (RSP_0,8); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086d0,1) SEP ((RSI_0 +64 8),8); (0x1000086d0,1) SEP ((RSI_0 +64 16),8); (0x1000086d0,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086d0,1) SEP ((RSP_0 -64 8),8); (0x1000086d0,1) SEP ((RSP_0 -64 16),8); (0x1000086d0,1) SEP ((RSP_0 -64 24),8); (0x1000086d0,1) SEP ((RSP_0 -64 32),8); (0x1000086d0,1) SEP ((RSP_0 -64 40),8); (0x1000086d0,1) SEP ((RSP_0 -64 48),8); (0x1000086d0,1) SEP ((RSP_0 -64 52),4); (0x1000086d0,1) SEP ((RSP_0 -64 64),8); (0x1000086d0,1) SEP ((RSP_0 -64 80),8); (0x1000086d0,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002676: MOV BYTE PTR [RIP + 24660], AL 6"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 49 ##
######################################
*)

htriple "ht_100002687"
 Separations "(0x1000086dc,1) SEP (bot(fun__getenv),1); (0x1000086dc,1) SEP (bot(fun__malloc),8); (0x1000086dc,1) SEP (RSI_0,8); (0x1000086dc,1) SEP (RSP_0,8); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086dc,1) SEP ((RSI_0 +64 8),8); (0x1000086dc,1) SEP ((RSI_0 +64 16),8); (0x1000086dc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086dc,1) SEP ((RSP_0 -64 8),8); (0x1000086dc,1) SEP ((RSP_0 -64 16),8); (0x1000086dc,1) SEP ((RSP_0 -64 24),8); (0x1000086dc,1) SEP ((RSP_0 -64 32),8); (0x1000086dc,1) SEP ((RSP_0 -64 40),8); (0x1000086dc,1) SEP ((RSP_0 -64 48),8); (0x1000086dc,1) SEP ((RSP_0 -64 52),4); (0x1000086dc,1) SEP ((RSP_0 -64 64),8); (0x1000086dc,1) SEP ((RSP_0 -64 80),8); (0x1000086dc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002687: MOV BYTE PTR [RIP + 24654], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000268e"
 Separations "(0x1000086e0,1) SEP (bot(fun__getenv),1); (0x1000086e0,1) SEP (bot(fun__malloc),8); (0x1000086e0,1) SEP (RSI_0,8); (0x1000086e0,1) SEP (RSP_0,8); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e0,1) SEP ((RSI_0 +64 8),8); (0x1000086e0,1) SEP ((RSI_0 +64 16),8); (0x1000086e0,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e0,1) SEP ((RSP_0 -64 8),8); (0x1000086e0,1) SEP ((RSP_0 -64 16),8); (0x1000086e0,1) SEP ((RSP_0 -64 24),8); (0x1000086e0,1) SEP ((RSP_0 -64 32),8); (0x1000086e0,1) SEP ((RSP_0 -64 40),8); (0x1000086e0,1) SEP ((RSP_0 -64 48),8); (0x1000086e0,1) SEP ((RSP_0 -64 52),4); (0x1000086e0,1) SEP ((RSP_0 -64 64),8); (0x1000086e0,1) SEP ((RSP_0 -64 80),8); (0x1000086e0,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000268e: MOV BYTE PTR [RIP + 24651], 0 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 1 ; [0x1000086e0,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002695"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 1 ; [0x1000086e0,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002695: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 1 ; [0x1000086e0,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 50 ##
######################################
*)

htriple "ht_10000269a"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000269a: MOV BYTE PTR [RIP + 24615], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026a1"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026a1: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 51 ##
######################################
*)

htriple "ht_1000026a6"
 Separations "(0x1000086d8,1) SEP (bot(fun__getenv),1); (0x1000086d8,1) SEP (bot(fun__malloc),8); (0x1000086d8,1) SEP (RSI_0,8); (0x1000086d8,1) SEP (RSP_0,8); (0x1000086d8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086d8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086d8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086d8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086d8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086d8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086d8,1) SEP ((RSI_0 +64 8),8); (0x1000086d8,1) SEP ((RSI_0 +64 16),8); (0x1000086d8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086d8,1) SEP ((RSP_0 -64 8),8); (0x1000086d8,1) SEP ((RSP_0 -64 16),8); (0x1000086d8,1) SEP ((RSP_0 -64 24),8); (0x1000086d8,1) SEP ((RSP_0 -64 32),8); (0x1000086d8,1) SEP ((RSP_0 -64 40),8); (0x1000086d8,1) SEP ((RSP_0 -64 48),8); (0x1000086d8,1) SEP ((RSP_0 -64 52),4); (0x1000086d8,1) SEP ((RSP_0 -64 64),8); (0x1000086d8,1) SEP ((RSP_0 -64 80),8); (0x1000086d8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026a6: MOV BYTE PTR [RIP + 24619], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026ad"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026ad: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 52 ##
######################################
*)

htriple "ht_1000026b2"
 Separations "(0x1000086e8,1) SEP (bot(fun__getenv),1); (0x1000086e8,1) SEP (bot(fun__malloc),8); (0x1000086e8,1) SEP (RSI_0,8); (0x1000086e8,1) SEP (RSP_0,8); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e8,1) SEP ((RSI_0 +64 8),8); (0x1000086e8,1) SEP ((RSI_0 +64 16),8); (0x1000086e8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e8,1) SEP ((RSP_0 -64 8),8); (0x1000086e8,1) SEP ((RSP_0 -64 16),8); (0x1000086e8,1) SEP ((RSP_0 -64 24),8); (0x1000086e8,1) SEP ((RSP_0 -64 32),8); (0x1000086e8,1) SEP ((RSP_0 -64 40),8); (0x1000086e8,1) SEP ((RSP_0 -64 48),8); (0x1000086e8,1) SEP ((RSP_0 -64 52),4); (0x1000086e8,1) SEP ((RSP_0 -64 64),8); (0x1000086e8,1) SEP ((RSP_0 -64 80),8); (0x1000086e8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026b2: MOV BYTE PTR [RIP + 24623], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026b9"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026b9: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086e8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 53 ##
######################################
*)

htriple "ht_1000026ca"
 Separations "(0x1000086d4,1) SEP (bot(fun__getenv),1); (0x1000086d4,1) SEP (bot(fun__malloc),8); (0x1000086d4,1) SEP (RSI_0,8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086d4,1) SEP ((RSI_0 +64 8),8); (0x1000086d4,1) SEP ((RSI_0 +64 16),8); (0x1000086d4,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 52),4); (0x1000086d4,1) SEP ((RSP_0 -64 64),8); (0x1000086d4,1) SEP ((RSP_0 -64 80),8); (0x1000086d4,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026ca: MOV BYTE PTR [RIP + 24579], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026d1"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026d1: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086d4,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 54 ##
######################################
*)

htriple "ht_100002a1f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a1f: ExternalCall fun_0x100002b55 5"
 Post  "RAX = bot(fun_0x100002b55) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100002b55 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 55 ##
######################################
*)

htriple "ht_10000258d"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun__getenv),1); ((RSP_0 -64 52),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP (0x100008010,8); ((RSP_0 -64 52),4) SEP (0x100008028,8); ((RSP_0 -64 52),4) SEP (0x100008030,8); ((RSP_0 -64 52),4) SEP (0x100008560,4); ((RSP_0 -64 52),4) SEP (0x100008570,8); ((RSP_0 -64 52),4) SEP (0x100008578,4); ((RSP_0 -64 52),4) SEP (0x1000086a8,8); ((RSP_0 -64 52),4) SEP (0x1000086b0,4); ((RSP_0 -64 52),4) SEP (0x1000086c8,1); ((RSP_0 -64 52),4) SEP (0x1000086cc,1); ((RSP_0 -64 52),4) SEP (0x1000086cd,1); ((RSP_0 -64 52),4) SEP (0x1000086d0,1); ((RSP_0 -64 52),4) SEP (0x1000086d4,1); ((RSP_0 -64 52),4) SEP (0x1000086d8,1); ((RSP_0 -64 52),4) SEP (0x1000086dc,1); ((RSP_0 -64 52),4) SEP (0x1000086e0,1); ((RSP_0 -64 52),4) SEP (0x1000086e4,1); ((RSP_0 -64 52),4) SEP (0x1000086e8,1); ((RSP_0 -64 52),4) SEP (0x1000086ec,1); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 52),4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000258d: MOV EDI, DWORD PTR [RBP - 44] 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002590"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002590: MOV RSI, R13 3"
 Post  "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002593"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002593: MOV RDX, R14 3"
 Post  "RBX = bot(fun__getprogname) ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002596"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002596: MOV RCX, R12 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = 0x1000082c0 ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002599"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = 0x1000082c0 ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002599: XOR R8D, R8D 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = 0x1000082c0 ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000259c"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = 0x1000082c0 ; RDX = 0x100006f9f ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000259c: ExternalCall fun__getopt_long 5"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__getopt_long {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025a1: CMP EAX, 82 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025a4: JLE 4294976980 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 56 ##
######################################
*)

htriple "ht_1000025d9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025d9: LEA ECX, [RAX - 49] 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025dc: CMP ECX, 9 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025df: JAE 4294977267 6"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 57 ##
######################################
*)

htriple "ht_1000025f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025f0: CMP EAX, 78 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025f3: JNE 4294978059 6"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 58 ##
######################################
*)

htriple "ht_1000025e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025e5: ADD EAX, 4294967248 3"
 Post  "RAX = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025e8"
 Separations "(0x100008560,4) SEP (bot(fun__getenv),1); (0x100008560,4) SEP (bot(fun__malloc),8); (0x100008560,4) SEP (RSI_0,8); (0x100008560,4) SEP (RSP_0,8); (0x100008560,4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008560,4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008560,4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008560,4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008560,4) SEP ((bot(fun__malloc) +64 8),8); (0x100008560,4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008560,4) SEP ((RSI_0 +64 8),8); (0x100008560,4) SEP ((RSI_0 +64 16),8); (0x100008560,4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008560,4) SEP ((RSP_0 -64 8),8); (0x100008560,4) SEP ((RSP_0 -64 16),8); (0x100008560,4) SEP ((RSP_0 -64 24),8); (0x100008560,4) SEP ((RSP_0 -64 32),8); (0x100008560,4) SEP ((RSP_0 -64 40),8); (0x100008560,4) SEP ((RSP_0 -64 48),8); (0x100008560,4) SEP ((RSP_0 -64 52),4); (0x100008560,4) SEP ((RSP_0 -64 64),8); (0x100008560,4) SEP ((RSP_0 -64 80),8); (0x100008560,4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025e8: MOV DWORD PTR [RIP + 24434], EAX 6"
 Post  "RAX = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000025ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025ee: JMP 4294976909 2"
 Post  "RAX = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008560,4] = (b32(bot(fun__getopt_long)) +32 0xffffffd0) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 59 ##
######################################
*)

htriple "ht_1000026f3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026f3: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026f6: JNE 4294978079 6"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 60 ##
######################################
*)

htriple "ht_1000025f9"
 Separations "(0x1000086dc,1) SEP (bot(fun__getenv),1); (0x1000086dc,1) SEP (bot(fun__malloc),8); (0x1000086dc,1) SEP (RSI_0,8); (0x1000086dc,1) SEP (RSP_0,8); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086dc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086dc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086dc,1) SEP ((RSI_0 +64 8),8); (0x1000086dc,1) SEP ((RSI_0 +64 16),8); (0x1000086dc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086dc,1) SEP ((RSP_0 -64 8),8); (0x1000086dc,1) SEP ((RSP_0 -64 16),8); (0x1000086dc,1) SEP ((RSP_0 -64 24),8); (0x1000086dc,1) SEP ((RSP_0 -64 32),8); (0x1000086dc,1) SEP ((RSP_0 -64 40),8); (0x1000086dc,1) SEP ((RSP_0 -64 48),8); (0x1000086dc,1) SEP ((RSP_0 -64 52),4); (0x1000086dc,1) SEP ((RSP_0 -64 64),8); (0x1000086dc,1) SEP ((RSP_0 -64 80),8); (0x1000086dc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000025f9: MOV BYTE PTR [RIP + 24796], 0 7"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002600"
 Separations "(0x1000086e0,1) SEP (bot(fun__getenv),1); (0x1000086e0,1) SEP (bot(fun__malloc),8); (0x1000086e0,1) SEP (RSI_0,8); (0x1000086e0,1) SEP (RSP_0,8); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e0,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e0,1) SEP ((RSI_0 +64 8),8); (0x1000086e0,1) SEP ((RSI_0 +64 16),8); (0x1000086e0,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e0,1) SEP ((RSP_0 -64 8),8); (0x1000086e0,1) SEP ((RSP_0 -64 16),8); (0x1000086e0,1) SEP ((RSP_0 -64 24),8); (0x1000086e0,1) SEP ((RSP_0 -64 32),8); (0x1000086e0,1) SEP ((RSP_0 -64 40),8); (0x1000086e0,1) SEP ((RSP_0 -64 48),8); (0x1000086e0,1) SEP ((RSP_0 -64 52),4); (0x1000086e0,1) SEP ((RSP_0 -64 64),8); (0x1000086e0,1) SEP ((RSP_0 -64 80),8); (0x1000086e0,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002600: MOV BYTE PTR [RIP + 24793], 1 7"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 0 ; [0x1000086e0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002607"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 0 ; [0x1000086e0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002607: JMP 4294976909 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086dc,1] = 0 ; [0x1000086e0,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 61 ##
######################################
*)

htriple "ht_100002a0b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a0b: CMP EAX, 76 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a0e: JNE 4294978079 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 62 ##
######################################
*)

htriple "ht_100002612"
 Separations "(0x100008028,8) SEP (bot(fun__getenv),1); (0x100008028,8) SEP (bot(fun__malloc),8); (0x100008028,8) SEP (RSI_0,8); (0x100008028,8) SEP (RSP_0,8); (0x100008028,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008028,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008028,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008028,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008028,8) SEP ((bot(fun__malloc) +64 8),8); (0x100008028,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008028,8) SEP ((RSI_0 +64 8),8); (0x100008028,8) SEP ((RSI_0 +64 16),8); (0x100008028,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008028,8) SEP ((RSP_0 -64 8),8); (0x100008028,8) SEP ((RSP_0 -64 16),8); (0x100008028,8) SEP ((RSP_0 -64 24),8); (0x100008028,8) SEP ((RSP_0 -64 32),8); (0x100008028,8) SEP ((RSP_0 -64 40),8); (0x100008028,8) SEP ((RSP_0 -64 48),8); (0x100008028,8) SEP ((RSP_0 -64 52),4); (0x100008028,8) SEP ((RSP_0 -64 64),8); (0x100008028,8) SEP ((RSP_0 -64 80),8); (0x100008028,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002612: MOV RAX, QWORD PTR [RIP + 23055] 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002619"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 52),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002619: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000261c"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000261c: MOV QWORD PTR [RBP - 56], RDI 4"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002620"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002620: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002625"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002625: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002627"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002627: JE 4294977238 6"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 63 ##
######################################
*)

htriple "ht_100002a15"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a15: CMP EAX, 86 3"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a18"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a18: JNE 4294978079 2"
 Post  "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 64 ##
######################################
*)

htriple "ht_10000262d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000262d: CMP EAX, 31 3"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002630"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002630: JGE 4294978084 6"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 65 ##
######################################
*)

htriple "ht_1000026d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026d6: LEA RAX, [RIP + 18729] 7"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026dd"
 Separations "(0x1000086a8,8) SEP (bot(fun__getenv),1); (0x1000086a8,8) SEP (bot(fun__malloc),8); (0x1000086a8,8) SEP (RSI_0,8); (0x1000086a8,8) SEP (RSP_0,8); (0x1000086a8,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086a8,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086a8,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086a8,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086a8,8) SEP ((bot(fun__malloc) +64 8),8); (0x1000086a8,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086a8,8) SEP ((RSI_0 +64 8),8); (0x1000086a8,8) SEP ((RSI_0 +64 16),8); (0x1000086a8,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086a8,8) SEP ((RSP_0 -64 8),8); (0x1000086a8,8) SEP ((RSP_0 -64 16),8); (0x1000086a8,8) SEP ((RSP_0 -64 24),8); (0x1000086a8,8) SEP ((RSP_0 -64 32),8); (0x1000086a8,8) SEP ((RSP_0 -64 40),8); (0x1000086a8,8) SEP ((RSP_0 -64 48),8); (0x1000086a8,8) SEP ((RSP_0 -64 52),4); (0x1000086a8,8) SEP ((RSP_0 -64 64),8); (0x1000086a8,8) SEP ((RSP_0 -64 80),8); (0x1000086a8,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026dd: MOV QWORD PTR [RIP + 24516], RAX 7"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086a8,8] = 0x100007006 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026e4"
 Separations "(0x1000086b0,4) SEP (bot(fun__getenv),1); (0x1000086b0,4) SEP (bot(fun__malloc),8); (0x1000086b0,4) SEP (RSI_0,8); (0x1000086b0,4) SEP (RSP_0,8); (0x1000086b0,4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086b0,4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086b0,4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086b0,4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086b0,4) SEP ((bot(fun__malloc) +64 8),8); (0x1000086b0,4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086b0,4) SEP ((RSI_0 +64 8),8); (0x1000086b0,4) SEP ((RSI_0 +64 16),8); (0x1000086b0,4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086b0,4) SEP ((RSP_0 -64 8),8); (0x1000086b0,4) SEP ((RSP_0 -64 16),8); (0x1000086b0,4) SEP ((RSP_0 -64 24),8); (0x1000086b0,4) SEP ((RSP_0 -64 32),8); (0x1000086b0,4) SEP ((RSP_0 -64 40),8); (0x1000086b0,4) SEP ((RSP_0 -64 48),8); (0x1000086b0,4) SEP ((RSP_0 -64 52),4); (0x1000086b0,4) SEP ((RSP_0 -64 64),8); (0x1000086b0,4) SEP ((RSP_0 -64 80),8); (0x1000086b0,4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086a8,8] = 0x100007006 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026e4: MOV DWORD PTR [RIP + 24514], 0 10"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086a8,8] = 0x100007006 ; [0x1000086b0,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000026ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086a8,8] = 0x100007006 ; [0x1000086b0,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026ee: JMP 4294976909 5"
 Post  "RAX = 0x100007006 ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086a8,8] = 0x100007006 ; [0x1000086b0,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 66 ##
######################################
*)

htriple "ht_100002636"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002636: MOV RCX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000263a"
 Separations "(0x100008570,8) SEP (bot(fun__getenv),1); (0x100008570,8) SEP (bot(fun__malloc),8); (0x100008570,8) SEP (RSI_0,8); (0x100008570,8) SEP (RSP_0,8); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008570,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008570,8) SEP ((bot(fun__malloc) +64 8),8); (0x100008570,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008570,8) SEP ((RSI_0 +64 8),8); (0x100008570,8) SEP ((RSI_0 +64 16),8); (0x100008570,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008570,8) SEP ((RSP_0 -64 8),8); (0x100008570,8) SEP ((RSP_0 -64 16),8); (0x100008570,8) SEP ((RSP_0 -64 24),8); (0x100008570,8) SEP ((RSP_0 -64 32),8); (0x100008570,8) SEP ((RSP_0 -64 40),8); (0x100008570,8) SEP ((RSP_0 -64 48),8); (0x100008570,8) SEP ((RSP_0 -64 52),4); (0x100008570,8) SEP ((RSP_0 -64 64),8); (0x100008570,8) SEP ((RSP_0 -64 80),8); (0x100008570,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000263a: MOV QWORD PTR [RIP + 24367], RCX 7"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002641"
 Separations "(0x100008578,4) SEP (bot(fun__getenv),1); (0x100008578,4) SEP (bot(fun__malloc),8); (0x100008578,4) SEP (RSI_0,8); (0x100008578,4) SEP (RSP_0,8); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008578,4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008578,4) SEP ((bot(fun__malloc) +64 8),8); (0x100008578,4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008578,4) SEP ((RSI_0 +64 8),8); (0x100008578,4) SEP ((RSI_0 +64 16),8); (0x100008578,4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008578,4) SEP ((RSP_0 -64 8),8); (0x100008578,4) SEP ((RSP_0 -64 16),8); (0x100008578,4) SEP ((RSP_0 -64 24),8); (0x100008578,4) SEP ((RSP_0 -64 32),8); (0x100008578,4) SEP ((RSP_0 -64 40),8); (0x100008578,4) SEP ((RSP_0 -64 48),8); (0x100008578,4) SEP ((RSP_0 -64 52),4); (0x100008578,4) SEP ((RSP_0 -64 64),8); (0x100008578,4) SEP ((RSP_0 -64 80),8); (0x100008578,4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002641: MOV DWORD PTR [RIP + 24369], EAX 6"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008578,4] = b32(bot(fun__strlen)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002647"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008578,4] = b32(bot(fun__strlen)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002647: JMP 4294976909 5"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100008578,4] = b32(bot(fun__strlen)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 67 ##
######################################
*)

htriple "ht_100002a24"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a24: LEA RSI, [RIP + 17850] 7"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a2b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a2b: MOV EDI, 1 5"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a30"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a30: MOV RDX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a34"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a34: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a36"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__getprogname) ; RDI = 1 ; RSI = 0x100006fe5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a36: ExternalCall fun__errx 5"
 Post  "RAX = bot(fun__errx) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__errx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 68 ##
######################################
*)

htriple "ht_10000267c"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000267c: MOV BYTE PTR [RIP + 24646], AL 6"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002682"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002682: JMP 4294976909 5"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x1000086c8,1] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 69 ##
######################################
*)

htriple "ht_1000026fc"
 Separations "(0x100008030,8) SEP (bot(fun__getenv),1); (0x100008030,8) SEP (bot(fun__malloc),8); (0x100008030,8) SEP (RSI_0,8); (0x100008030,8) SEP (RSP_0,8); (0x100008030,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008030,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008030,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008030,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008030,8) SEP ((bot(fun__malloc) +64 8),8); (0x100008030,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008030,8) SEP ((RSI_0 +64 8),8); (0x100008030,8) SEP ((RSI_0 +64 16),8); (0x100008030,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008030,8) SEP ((RSP_0 -64 8),8); (0x100008030,8) SEP ((RSP_0 -64 16),8); (0x100008030,8) SEP ((RSP_0 -64 24),8); (0x100008030,8) SEP ((RSP_0 -64 32),8); (0x100008030,8) SEP ((RSP_0 -64 40),8); (0x100008030,8) SEP ((RSP_0 -64 48),8); (0x100008030,8) SEP ((RSP_0 -64 52),4); (0x100008030,8) SEP ((RSP_0 -64 64),8); (0x100008030,8) SEP ((RSP_0 -64 80),8); (0x100008030,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000026fc: MOV RAX, QWORD PTR [RIP + 22829] 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002703"
 Separations ""
 Assertions  "(RAX,4) SEP (RSP_0,8); (RAX,4) SEP ((RSP_0 -64 8),8); (RAX,4) SEP ((RSP_0 -64 16),8); (RAX,4) SEP ((RSP_0 -64 24),8); (RAX,4) SEP ((RSP_0 -64 32),8); (RAX,4) SEP ((RSP_0 -64 40),8); (RAX,4) SEP ((RSP_0 -64 48),8); (RAX,4) SEP ((RSP_0 -64 52),4); (RAX,4) SEP ((RSP_0 -64 64),8); (RAX,4) SEP ((RSP_0 -64 80),8); (RAX,4) SEP ((RSP_0 -64 88),8)"
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002703: MOVSXD RAX, DWORD PTR [RAX] 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002706"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun__getenv),1); ((RSP_0 -64 52),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP (0x100008010,8); ((RSP_0 -64 52),4) SEP (0x100008028,8); ((RSP_0 -64 52),4) SEP (0x100008030,8); ((RSP_0 -64 52),4) SEP (0x100008560,4); ((RSP_0 -64 52),4) SEP (0x100008570,8); ((RSP_0 -64 52),4) SEP (0x100008578,4); ((RSP_0 -64 52),4) SEP (0x1000086a8,8); ((RSP_0 -64 52),4) SEP (0x1000086b0,4); ((RSP_0 -64 52),4) SEP (0x1000086c8,1); ((RSP_0 -64 52),4) SEP (0x1000086cc,1); ((RSP_0 -64 52),4) SEP (0x1000086cd,1); ((RSP_0 -64 52),4) SEP (0x1000086d0,1); ((RSP_0 -64 52),4) SEP (0x1000086d4,1); ((RSP_0 -64 52),4) SEP (0x1000086d8,1); ((RSP_0 -64 52),4) SEP (0x1000086dc,1); ((RSP_0 -64 52),4) SEP (0x1000086e0,1); ((RSP_0 -64 52),4) SEP (0x1000086e4,1); ((RSP_0 -64 52),4) SEP (0x1000086e8,1); ((RSP_0 -64 52),4) SEP (0x1000086ec,1); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 52),4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002706: SUB DWORD PTR [RBP - 44], EAX 3"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002709"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002709: JE 4294978107 6"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 70 ##
######################################
*)

htriple "ht_10000270f"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000270f: LEA RBX, [R13 + RAX * 8] 5"
 Post  "RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002714"
 Separations ""
 Assertions  "(RBX,8) SEP (RSP_0,8); (RBX,8) SEP ((RSP_0 -64 8),8); (RBX,8) SEP ((RSP_0 -64 16),8); (RBX,8) SEP ((RSP_0 -64 24),8); (RBX,8) SEP ((RSP_0 -64 32),8); (RBX,8) SEP ((RSP_0 -64 40),8); (RBX,8) SEP ((RSP_0 -64 48),8); (RBX,8) SEP ((RSP_0 -64 52),4); (RBX,8) SEP ((RSP_0 -64 64),8); (RBX,8) SEP ((RSP_0 -64 80),8); (RBX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002714: MOV R14, QWORD PTR [RBX] 3"
 Post  "RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 71 ##
######################################
*)

htriple "ht_100002a3b"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a3b: CMP BYTE PTR [RIP + 23686], 1 7"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a42"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a42: JNE 4294978123 2"
 Post  "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 72 ##
######################################
*)

htriple "ht_10000271d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000271d: CMP BYTE PTR [R14 + 1], 0 5"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002722"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002722: JE 4294977453 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 73 ##
######################################
*)

htriple "ht_100002728"
 Separations "(0x1000086cd,1) SEP (bot(fun__getenv),1); (0x1000086cd,1) SEP (bot(fun__malloc),8); (0x1000086cd,1) SEP (RSI_0,8); (0x1000086cd,1) SEP (RSP_0,8); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cd,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cd,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cd,1) SEP ((RSI_0 +64 8),8); (0x1000086cd,1) SEP ((RSI_0 +64 16),8); (0x1000086cd,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cd,1) SEP ((RSP_0 -64 8),8); (0x1000086cd,1) SEP ((RSP_0 -64 16),8); (0x1000086cd,1) SEP ((RSP_0 -64 24),8); (0x1000086cd,1) SEP ((RSP_0 -64 32),8); (0x1000086cd,1) SEP ((RSP_0 -64 40),8); (0x1000086cd,1) SEP ((RSP_0 -64 48),8); (0x1000086cd,1) SEP ((RSP_0 -64 52),4); (0x1000086cd,1) SEP ((RSP_0 -64 64),8); (0x1000086cd,1) SEP ((RSP_0 -64 80),8); (0x1000086cd,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002728: CMP BYTE PTR [RIP + 24478], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000272f"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000272f: MOV QWORD PTR [RBP - 56], RBX 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002733"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002733: JNE 4294977445 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 74 ##
######################################
*)

htriple "ht_1000027ad"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027ad: CMP BYTE PTR [RIP + 24340], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027b4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027b4: JNE 4294977472 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 75 ##
######################################
*)

htriple "ht_100002735"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002735: LEA RDI, [RIP + 20311] 7"
 Post  "RDI = 0x100007693 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000273c"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007693 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000273c: LEA RSI, [RIP + 20313] 7"
 Post  "RDI = 0x100007693 ; RSI = 0x10000769c ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002743"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x100007693 ; RSI = 0x10000769c ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002743: ExternalCall fun__compat_mode 5"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__compat_mode {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002748"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002748: TEST AL, AL 2"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000274a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000274a: JE 4294977445 2"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 76 ##
######################################
*)

htriple "ht_1000027a5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027a5: XOR R15D, R15D 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027a8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027a8: MOV R13, R14 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027ab"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027ab: JMP 4294977485 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 77 ##
######################################
*)

htriple "ht_10000274c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000274c: MOV RDI, R14 3"
 Post  "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000274f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000274f: MOV ESI, 46 5"
 Post  "RAX = bot(fun__compat_mode) ; RSI = 46 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002754"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__compat_mode) ; RSI = 46 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002754: ExternalCall fun__strrchr 5"
 Post  "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strrchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002759"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002759: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000275c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000275c: JE 4294977393 2"
 Post  "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 78 ##
######################################
*)

htriple "ht_10000275e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000275e: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__strrchr) ; RDI = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002761"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RDI = bot(fun__strrchr) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002761: LEA RSI, [RIP + 18789] 7"
 Post  "RAX = bot(fun__strrchr) ; RDI = bot(fun__strrchr) ; RSI = 0x1000070cd ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002768"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strrchr) ; RDI = bot(fun__strrchr) ; RSI = 0x1000070cd ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002768: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000276d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000276d: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000276f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000276f: JE 4294977445 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 79 ##
######################################
*)

htriple "ht_100002771"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002771: MOV RDI, R14 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002774"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002774: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002779"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002779: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000277c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000277c: LEA RDI, [RAX + 3] 4"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__strlen) +64 3) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002780"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__strlen) +64 3) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002780: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002785"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002785: MOV R15, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002788"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002788: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000278b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000278b: MOV RSI, R14 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000278e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000278e: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002791"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002791: ExternalCall fun__memcpy 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__memcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002796"
 Separations "((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (RSP_0,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008010,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008028,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008030,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008560,4); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008570,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x100008578,4); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086a8,8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086b0,4); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086c8,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086cc,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086cd,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086d0,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086d4,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086d8,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086dc,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086e0,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086e4,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086e8,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086ec,1); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP (0x1000086f4,4); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 8),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 16),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 24),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 32),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 40),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 48),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 52),4); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 64),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 80),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 88),8); ((bot(fun__malloc) +64 bot(fun__strlen)),2) SEP ((RSP_0 -64 228),2)"
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002796: MOV WORD PTR [R15 + RBX], 23086 7"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000279d"
 Separations "((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (RSP_0,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008010,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008028,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008030,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008560,4); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008570,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x100008578,4); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086a8,8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086b0,4); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086c8,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086cc,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086cd,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086d0,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086d4,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086d8,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086dc,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086e0,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086e4,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086e8,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086ec,1); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP (0x1000086f4,4); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 8),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 16),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 24),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 32),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 40),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 48),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 52),4); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 64),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 80),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 88),8); ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1) SEP ((RSP_0 -64 228),2)"
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000279d: MOV BYTE PTR [R15 + RBX + 2], 0 6"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027a3: JMP 4294977482 2"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 80 ##
######################################
*)

htriple "ht_1000027b6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027b6: ExternalCall fun_0x100002b9d 5"
 Post  "RAX = bot(fun_0x100002b9d) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x100002b9d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002b9d) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027bb: JMP 4294977697 5"
 Post  "RAX = bot(fun_0x100002b9d) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 81 ##
######################################
*)

htriple "ht_1000027c0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027c0: ExternalCall fun_0x100002e38 5"
 Post  "RAX = bot(fun_0x100002e38) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x100002e38 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002e38) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027c5: JMP 4294977697 5"
 Post  "RAX = bot(fun_0x100002e38) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 82 ##
######################################
*)

htriple "ht_1000028a1"
 Separations ""
 Assertions  "((RBX +64 8),8) SEP (RSP_0,8); ((RBX +64 8),8) SEP ((RSP_0 -64 8),8); ((RBX +64 8),8) SEP ((RSP_0 -64 16),8); ((RBX +64 8),8) SEP ((RSP_0 -64 24),8); ((RBX +64 8),8) SEP ((RSP_0 -64 32),8); ((RBX +64 8),8) SEP ((RSP_0 -64 40),8); ((RBX +64 8),8) SEP ((RSP_0 -64 48),8); ((RBX +64 8),8) SEP ((RSP_0 -64 52),4); ((RBX +64 8),8) SEP ((RSP_0 -64 64),8); ((RBX +64 8),8) SEP ((RSP_0 -64 80),8); ((RBX +64 8),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028a1: MOV R14, QWORD PTR [RBX + 8] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028a5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028a5: ADD RBX, 8 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028a9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028a9: TEST R14, R14 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028ac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028ac: JNE 4294977303 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 83 ##
######################################
*)

htriple "ht_1000027cd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027cd: MOV RDI, R13 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027d0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027d0: LEA RSI, [RBP - 224] 7"
 Post  "RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027d7"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027d7: ExternalCall fun__stat_INODE64 5"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__stat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027dc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027dc: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027de: JNE 4294977553 2"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 84 ##
######################################
*)

htriple "ht_1000027e0"
 Separations "(0x1000086d4,1) SEP (bot(fun__getenv),1); (0x1000086d4,1) SEP (bot(fun__malloc),8); (0x1000086d4,1) SEP (RSI_0,8); (0x1000086d4,1) SEP (RSP_0,8); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086d4,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086d4,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086d4,1) SEP ((RSI_0 +64 8),8); (0x1000086d4,1) SEP ((RSI_0 +64 16),8); (0x1000086d4,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086d4,1) SEP ((RSP_0 -64 8),8); (0x1000086d4,1) SEP ((RSP_0 -64 16),8); (0x1000086d4,1) SEP ((RSP_0 -64 24),8); (0x1000086d4,1) SEP ((RSP_0 -64 32),8); (0x1000086d4,1) SEP ((RSP_0 -64 40),8); (0x1000086d4,1) SEP ((RSP_0 -64 48),8); (0x1000086d4,1) SEP ((RSP_0 -64 52),4); (0x1000086d4,1) SEP ((RSP_0 -64 64),8); (0x1000086d4,1) SEP ((RSP_0 -64 80),8); (0x1000086d4,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027e0: CMP BYTE PTR [RIP + 24301], 0 7"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027e7: JNE 4294977719 6"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 85 ##
######################################
*)

htriple "ht_100002811"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002811: TEST R15, R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002814"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002814: JNE 4294977660 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 86 ##
######################################
*)

htriple "ht_1000027ed"
 Separations "(0x1000086cc,1) SEP (bot(fun__getenv),1); (0x1000086cc,1) SEP (bot(fun__malloc),8); (0x1000086cc,1) SEP (RSI_0,8); (0x1000086cc,1) SEP (RSP_0,8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086cc,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086cc,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086cc,1) SEP ((RSI_0 +64 8),8); (0x1000086cc,1) SEP ((RSI_0 +64 16),8); (0x1000086cc,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086cc,1) SEP ((RSP_0 -64 8),8); (0x1000086cc,1) SEP ((RSP_0 -64 16),8); (0x1000086cc,1) SEP ((RSP_0 -64 24),8); (0x1000086cc,1) SEP ((RSP_0 -64 32),8); (0x1000086cc,1) SEP ((RSP_0 -64 40),8); (0x1000086cc,1) SEP ((RSP_0 -64 48),8); (0x1000086cc,1) SEP ((RSP_0 -64 52),4); (0x1000086cc,1) SEP ((RSP_0 -64 64),8); (0x1000086cc,1) SEP ((RSP_0 -64 80),8); (0x1000086cc,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027ed: TEST BYTE PTR [RIP + 24280], 1 7"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027f4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027f4: JNE 4294977719 6"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 87 ##
######################################
*)

htriple "ht_1000028b7"
 Separations "((RSP_0 -64 228),2) SEP (bot(fun__malloc),8); ((RSP_0 -64 228),2) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 228),2) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 228),2) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028b7: MOVZX EAX, WORD PTR [RBP - 220] 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028be"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028be: AND EAX, 61440 5"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028c3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028c3: CMP EAX, 32768 5"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028c8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028c8: JE 4294977916 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 88 ##
######################################
*)

htriple "ht_1000027fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027fa: MOV RDI, R13 3"
 Post  "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000027fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027fd: LEA RSI, [RBP - 224] 7"
 Post  "RAX = bot(fun__stat_INODE64) ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002804"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__stat_INODE64) ; RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002804: ExternalCall fun__lstat_INODE64 5"
 Post  "RAX = bot(fun__lstat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__lstat_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002809"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lstat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002809: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__lstat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000280b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__lstat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000280b: JE 4294977719 6"
 Post  "RAX = bot(fun__lstat_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 89 ##
######################################
*)

htriple "ht_100002816"
 Separations "(0x1000086c8,1) SEP (bot(fun__getenv),1); (0x1000086c8,1) SEP (bot(fun__malloc),8); (0x1000086c8,1) SEP (RSI_0,8); (0x1000086c8,1) SEP (RSP_0,8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086c8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086c8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086c8,1) SEP ((RSI_0 +64 8),8); (0x1000086c8,1) SEP ((RSI_0 +64 16),8); (0x1000086c8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086c8,1) SEP ((RSP_0 -64 8),8); (0x1000086c8,1) SEP ((RSP_0 -64 16),8); (0x1000086c8,1) SEP ((RSP_0 -64 24),8); (0x1000086c8,1) SEP ((RSP_0 -64 32),8); (0x1000086c8,1) SEP ((RSP_0 -64 40),8); (0x1000086c8,1) SEP ((RSP_0 -64 48),8); (0x1000086c8,1) SEP ((RSP_0 -64 52),4); (0x1000086c8,1) SEP ((RSP_0 -64 64),8); (0x1000086c8,1) SEP ((RSP_0 -64 80),8); (0x1000086c8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002816: TEST BYTE PTR [RIP + 24235], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000281d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000281d: JE 4294977660 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 90 ##
######################################
*)

htriple "ht_10000287c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000287c: LEA RDI, [RIP + 20002] 7"
 Post  "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002883"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002883: MOV RSI, R14 3"
 Post  "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002886"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002886: MOV RDX, R13 3"
 Post  "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002889"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002889: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000288b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x1000076a5 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000288b: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 91 ##
######################################
*)

htriple "ht_10000281f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000281f: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002824"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002824: CMP DWORD PTR [RAX], 2 3"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002827"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002827: JNE 4294977660 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 92 ##
######################################
*)

htriple "ht_100002829"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002829: MOV RDI, R13 3"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000282c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000282c: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002831"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002831: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002834"
 Separations "(0x100008578,4) SEP (bot(fun__getenv),1); (0x100008578,4) SEP (bot(fun__malloc),8); (0x100008578,4) SEP (RSI_0,8); (0x100008578,4) SEP (RSP_0,8); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008578,4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008578,4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008578,4) SEP ((bot(fun__malloc) +64 8),8); (0x100008578,4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008578,4) SEP ((RSI_0 +64 8),8); (0x100008578,4) SEP ((RSI_0 +64 16),8); (0x100008578,4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008578,4) SEP ((RSP_0 -64 8),8); (0x100008578,4) SEP ((RSP_0 -64 16),8); (0x100008578,4) SEP ((RSP_0 -64 24),8); (0x100008578,4) SEP ((RSP_0 -64 32),8); (0x100008578,4) SEP ((RSP_0 -64 40),8); (0x100008578,4) SEP ((RSP_0 -64 48),8); (0x100008578,4) SEP ((RSP_0 -64 52),4); (0x100008578,4) SEP ((RSP_0 -64 64),8); (0x100008578,4) SEP ((RSP_0 -64 80),8); (0x100008578,4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002834: MOVSXD R12, DWORD PTR [RIP + 23869] 7"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000283b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000283b: LEA RDI, [RAX + R12 + 1] 5"
 Post  "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002840"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002840: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002845"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002845: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002848"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002848: JE 4294977989 6"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 93 ##
######################################
*)

htriple "ht_10000284e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000284e: MOV R15, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002851"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002851: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002854"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002854: MOV RSI, R13 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002857"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002857: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000285a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000285a: ExternalCall fun__memcpy 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__memcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000285f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000285f: MOV RDI, R15 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002862"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002862: ADD RDI, RBX 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002865"
 Separations "(0x100008570,8) SEP (bot(fun__getenv),1); (0x100008570,8) SEP (bot(fun__malloc),8); (0x100008570,8) SEP (RSI_0,8); (0x100008570,8) SEP (RSP_0,8); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x100008570,8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x100008570,8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x100008570,8) SEP ((bot(fun__malloc) +64 8),8); (0x100008570,8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x100008570,8) SEP ((RSI_0 +64 8),8); (0x100008570,8) SEP ((RSI_0 +64 16),8); (0x100008570,8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x100008570,8) SEP ((RSP_0 -64 8),8); (0x100008570,8) SEP ((RSP_0 -64 16),8); (0x100008570,8) SEP ((RSP_0 -64 24),8); (0x100008570,8) SEP ((RSP_0 -64 32),8); (0x100008570,8) SEP ((RSP_0 -64 40),8); (0x100008570,8) SEP ((RSP_0 -64 48),8); (0x100008570,8) SEP ((RSP_0 -64 52),4); (0x100008570,8) SEP ((RSP_0 -64 64),8); (0x100008570,8) SEP ((RSP_0 -64 80),8); (0x100008570,8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002865: MOV RSI, QWORD PTR [RIP + 23812] 7"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000286c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000286c: INC R12 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000286f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000286f: MOV RDX, R12 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002872"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RDI = (bot(fun__malloc) +64 bot(fun__strlen)) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002872: ExternalCall fun__memcpy 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__memcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002877"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002877: JMP 4294977482 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 94 ##
######################################
*)

htriple "ht_1000027ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000027ca: MOV R13, R15 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__strlen) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__malloc) ; R13 = bot(fun__malloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 95 ##
######################################
*)

htriple "ht_100002899"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002899: MOV RDI, R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000289c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000289c: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 96 ##
######################################
*)

htriple "ht_100002717"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002717: CMP BYTE PTR [R14], 45 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000271b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000271b: JNE 4294977320 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 97 ##
######################################
*)

htriple "ht_1000028b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028b2: JMP 4294978003 5"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029d3"
 Separations "((RSP_0 -64 52),4) SEP (bot(fun__getenv),1); ((RSP_0 -64 52),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 52),4) SEP (RSI_0,8); ((RSP_0 -64 52),4) SEP (0x100008010,8); ((RSP_0 -64 52),4) SEP (0x100008028,8); ((RSP_0 -64 52),4) SEP (0x100008030,8); ((RSP_0 -64 52),4) SEP (0x100008560,4); ((RSP_0 -64 52),4) SEP (0x100008570,8); ((RSP_0 -64 52),4) SEP (0x100008578,4); ((RSP_0 -64 52),4) SEP (0x1000086a8,8); ((RSP_0 -64 52),4) SEP (0x1000086b0,4); ((RSP_0 -64 52),4) SEP (0x1000086c8,1); ((RSP_0 -64 52),4) SEP (0x1000086cc,1); ((RSP_0 -64 52),4) SEP (0x1000086cd,1); ((RSP_0 -64 52),4) SEP (0x1000086d0,1); ((RSP_0 -64 52),4) SEP (0x1000086d4,1); ((RSP_0 -64 52),4) SEP (0x1000086d8,1); ((RSP_0 -64 52),4) SEP (0x1000086dc,1); ((RSP_0 -64 52),4) SEP (0x1000086e0,1); ((RSP_0 -64 52),4) SEP (0x1000086e4,1); ((RSP_0 -64 52),4) SEP (0x1000086e8,1); ((RSP_0 -64 52),4) SEP (0x1000086ec,1); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 52),4) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 52),4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 52),4) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 52),4) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029d3: CMP DWORD PTR [RBP - 44], 2 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029d7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029d7: JL 4294978048 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 98 ##
######################################
*)

htriple "ht_1000028ce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028ce: MOVZX EAX, AX 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028d1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028d1: CMP EAX, 16384 5"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028d6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028d6: JNE 4294977936 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000023c8, blockId == 99 ##
######################################
*)

htriple "ht_10000297c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000297c: MOV RDI, R13 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000297f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000297f: LEA RSI, [RBP - 224] 7"
 Post  "RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002986"
 Separations ""
 Assertions  ""
 Pre   "RSI = (RSP_0 -64 232) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002986: ExternalCall fun_0x10000547a 5"
 Post  "RAX = bot(fun_0x10000547a) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x10000547a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000298b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000547a) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000298b: JMP 4294977680 5"
 Post  "RAX = bot(fun_0x10000547a) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 100 ##
#######################################
*)

htriple "ht_1000028dc"
 Separations "(0x1000086e8,1) SEP (bot(fun__getenv),1); (0x1000086e8,1) SEP (bot(fun__malloc),8); (0x1000086e8,1) SEP (RSI_0,8); (0x1000086e8,1) SEP (RSP_0,8); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e8,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e8,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e8,1) SEP ((RSI_0 +64 8),8); (0x1000086e8,1) SEP ((RSI_0 +64 16),8); (0x1000086e8,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e8,1) SEP ((RSP_0 -64 8),8); (0x1000086e8,1) SEP ((RSP_0 -64 16),8); (0x1000086e8,1) SEP ((RSP_0 -64 24),8); (0x1000086e8,1) SEP ((RSP_0 -64 32),8); (0x1000086e8,1) SEP ((RSP_0 -64 40),8); (0x1000086e8,1) SEP ((RSP_0 -64 48),8); (0x1000086e8,1) SEP ((RSP_0 -64 52),4); (0x1000086e8,1) SEP ((RSP_0 -64 64),8); (0x1000086e8,1) SEP ((RSP_0 -64 80),8); (0x1000086e8,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028dc: CMP BYTE PTR [RIP + 24069], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028e3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028e3: JNE 4294977945 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 101 ##
#######################################
*)

htriple "ht_100002990"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002990: LEA RDI, [RIP + 19764] 7"
 Post  "RDI = 0x1000076cb ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002997"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x1000076cb ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002997: JMP 4294977952 2"
 Post  "RDI = 0x1000076cb ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 102 ##
#######################################
*)

htriple "ht_1000028e9"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 88),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 88),8) SEP (RSI_0,8); ((RSP_0 -64 88),8) SEP (0x100008010,8); ((RSP_0 -64 88),8) SEP (0x100008028,8); ((RSP_0 -64 88),8) SEP (0x100008030,8); ((RSP_0 -64 88),8) SEP (0x100008560,4); ((RSP_0 -64 88),8) SEP (0x100008570,8); ((RSP_0 -64 88),8) SEP (0x100008578,4); ((RSP_0 -64 88),8) SEP (0x1000086a8,8); ((RSP_0 -64 88),8) SEP (0x1000086b0,4); ((RSP_0 -64 88),8) SEP (0x1000086c8,1); ((RSP_0 -64 88),8) SEP (0x1000086cc,1); ((RSP_0 -64 88),8) SEP (0x1000086cd,1); ((RSP_0 -64 88),8) SEP (0x1000086d0,1); ((RSP_0 -64 88),8) SEP (0x1000086d4,1); ((RSP_0 -64 88),8) SEP (0x1000086d8,1); ((RSP_0 -64 88),8) SEP (0x1000086dc,1); ((RSP_0 -64 88),8) SEP (0x1000086e0,1); ((RSP_0 -64 88),8) SEP (0x1000086e4,1); ((RSP_0 -64 88),8) SEP (0x1000086e8,1); ((RSP_0 -64 88),8) SEP (0x1000086ec,1); ((RSP_0 -64 88),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 88),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 88),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 88),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028e9: MOV QWORD PTR [RBP - 80], R13 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028ed"
 Separations "((RSP_0 -64 80),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 80),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 80),8) SEP (RSI_0,8); ((RSP_0 -64 80),8) SEP (0x100008010,8); ((RSP_0 -64 80),8) SEP (0x100008028,8); ((RSP_0 -64 80),8) SEP (0x100008030,8); ((RSP_0 -64 80),8) SEP (0x100008560,4); ((RSP_0 -64 80),8) SEP (0x100008570,8); ((RSP_0 -64 80),8) SEP (0x100008578,4); ((RSP_0 -64 80),8) SEP (0x1000086a8,8); ((RSP_0 -64 80),8) SEP (0x1000086b0,4); ((RSP_0 -64 80),8) SEP (0x1000086c8,1); ((RSP_0 -64 80),8) SEP (0x1000086cc,1); ((RSP_0 -64 80),8) SEP (0x1000086cd,1); ((RSP_0 -64 80),8) SEP (0x1000086d0,1); ((RSP_0 -64 80),8) SEP (0x1000086d4,1); ((RSP_0 -64 80),8) SEP (0x1000086d8,1); ((RSP_0 -64 80),8) SEP (0x1000086dc,1); ((RSP_0 -64 80),8) SEP (0x1000086e0,1); ((RSP_0 -64 80),8) SEP (0x1000086e4,1); ((RSP_0 -64 80),8) SEP (0x1000086e8,1); ((RSP_0 -64 80),8) SEP (0x1000086ec,1); ((RSP_0 -64 80),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 80),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 80),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000028ed: MOV QWORD PTR [RBP - 72], 0 8"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028f5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000028f5: LEA RDI, [RBP - 80] 4"
 Post  "RDI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028f9"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 88) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000028f9: MOV ESI, 20 5"
 Post  "RDI = (RSP_0 -64 88) ; RSI = 20 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000028fe"
 Separations ""
 Assertions  ""
 Pre   "RDI = (RSP_0 -64 88) ; RSI = 20 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000028fe: XOR EDX, EDX 2"
 Post  "RDX = 0 ; RDI = (RSP_0 -64 88) ; RSI = 20 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002900"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0 ; RDI = (RSP_0 -64 88) ; RSI = 20 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002900: ExternalCall fun__fts_open_INODE64 5"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun__fts_open_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002905"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002905: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002908"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002908: JE 4294977967 6"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 103 ##
#######################################
*)

htriple "ht_100002999"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002999: LEA RDI, [RIP + 19737] 7"
 Post  "RDI = 0x1000076b9 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 104 ##
#######################################
*)

htriple "ht_10000290e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000290e: MOV R14, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002911"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002911: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002914"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002914: ExternalCall fun__fts_read_INODE64 5"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun__fts_read_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002919"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002919: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000291c"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000291c: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002920"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002920: JE 4294977903 2"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 105 ##
#######################################
*)

htriple "ht_1000029af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000029af: LEA RDI, [RIP + 19758] 7"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000029b6: MOV RSI, R13 3"
 Post  "RAX = bot(fun__fts_open_INODE64) ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_open_INODE64) ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000029b9: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0x1000076e4 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000029bb: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029c0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "1000029c0: JMP 4294977680 5"
 Post  "RAX = bot(fun__warn) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 106 ##
#######################################
*)

htriple "ht_100002922"
 Separations "((bot(fun__fts_read_INODE64) +64 88),4) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008010,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008028,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008030,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008560,4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008570,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x100008578,4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086a8,8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086b0,4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086c8,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086cc,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086cd,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086d0,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086d4,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086d8,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086dc,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086e0,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086e4,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086e8,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP (0x1000086ec,1); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 80),8); ((bot(fun__fts_read_INODE64) +64 88),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002922: MOV ECX, DWORD PTR [RAX + 88] 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002925"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002925: ADD ECX, 18446744073709551612 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002928"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002928: CMP CX, 6 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000292c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000292c: JA 4294977890 2"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 107 ##
#######################################
*)

htriple "ht_10000296f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000296f: MOV RDI, R14 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002972"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002972: ExternalCall fun__fts_close_INODE64 5"
 Post  "RAX = bot(fun__fts_close_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun__fts_close_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002977"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_close_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002977: JMP 4294977684 5"
 Post  "RAX = bot(fun__fts_close_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 108 ##
#######################################
*)

htriple "ht_10000292e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000292e: MOVZX ECX, CX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002931"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002931: LEA RDX, [RIP + 372] 7"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002938"
 Separations ""
 Assertions  "((0x100002aac +64 (RCX *64 4)),4) SEP (RSP_0,8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 52),4); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100002aac +64 (RCX *64 4)),4) SEP ((RSP_0 -64 88),8)"
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002938: MOVSXD RCX, DWORD PTR [RDX + RCX * 4] 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000293c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000293c: ADD RCX, RDX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000293f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000293f: JMP RCX 2"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 109 ##
#######################################
*)

htriple "ht_100002962"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002962: MOV RDI, R14 3"
 Post  "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002965"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__fts_open_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002965: ExternalCall fun__fts_read_INODE64 5"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun__fts_read_INODE64 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000296a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000296a: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000296d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000296d: JNE 4294977826 2"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 110 ##
#######################################
*)

htriple "ht_100002941"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008010,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008028,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008030,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008560,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008570,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008578,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086b0,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086cc,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086cd,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d4,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086dc,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e4,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086ec,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002941: MOV RSI, QWORD PTR [RAX + 48] 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002945"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002945: LEA RDI, [RIP + 19546] 7"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000294c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000294c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = 0x100002aac ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000294e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = 0x100002aac ; RDI = 0x1000075a6 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000294e: ExternalCall fun_0x1000031f6 5"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun_0x1000031f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002953"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002953: JMP 4294977890 2"
 Post  "RAX = bot(fun_0x1000031f6) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 111 ##
#######################################
*)

htriple "ht_100002955"
 Separations "((bot(fun__fts_read_INODE64) +64 48),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008010,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008028,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008030,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008560,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008570,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x100008578,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086a8,8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086b0,4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086c8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086cc,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086cd,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d4,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086d8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086dc,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e0,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e4,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086e8,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP (0x1000086ec,1); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 80),8); ((bot(fun__fts_read_INODE64) +64 48),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002955: MOV RDI, QWORD PTR [RAX + 48] 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002959"
 Separations "((bot(fun__fts_read_INODE64) +64 96),8) SEP (RSP_0,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008010,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008028,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008030,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008560,4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008570,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x100008578,4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086a8,8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086b0,4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086c8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086cc,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086cd,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086d0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086d4,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086d8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086dc,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086e0,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086e4,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086e8,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP (0x1000086ec,1); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 8),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 16),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 24),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 32),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 40),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 48),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 52),4); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 64),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 80),8); ((bot(fun__fts_read_INODE64) +64 96),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100002959: MOV RSI, QWORD PTR [RAX + 96] 4"
 Post  "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000295d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fts_read_INODE64) ; RDX = 0x100002aac ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "10000295d: ExternalCall fun_0x10000547a 5"
 Post  "RAX = bot(fun_0x10000547a) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__fts_open_INODE64) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
 FunctionConstraints "PRESERVES fun_0x10000547a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 112 ##
#######################################
*)

htriple "ht_100002894"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002894: TEST R15, R15 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002897"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002897: JE 4294977697 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 113 ##
#######################################
*)

htriple "ht_100002890"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__getenv),1); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP (0x100008010,8); ((RSP_0 -64 64),8) SEP (0x100008028,8); ((RSP_0 -64 64),8) SEP (0x100008030,8); ((RSP_0 -64 64),8) SEP (0x100008560,4); ((RSP_0 -64 64),8) SEP (0x100008570,8); ((RSP_0 -64 64),8) SEP (0x100008578,4); ((RSP_0 -64 64),8) SEP (0x1000086a8,8); ((RSP_0 -64 64),8) SEP (0x1000086b0,4); ((RSP_0 -64 64),8) SEP (0x1000086c8,1); ((RSP_0 -64 64),8) SEP (0x1000086cc,1); ((RSP_0 -64 64),8) SEP (0x1000086cd,1); ((RSP_0 -64 64),8) SEP (0x1000086d0,1); ((RSP_0 -64 64),8) SEP (0x1000086d4,1); ((RSP_0 -64 64),8) SEP (0x1000086d8,1); ((RSP_0 -64 64),8) SEP (0x1000086dc,1); ((RSP_0 -64 64),8) SEP (0x1000086e0,1); ((RSP_0 -64 64),8) SEP (0x1000086e4,1); ((RSP_0 -64 64),8) SEP (0x1000086e8,1); ((RSP_0 -64 64),8) SEP (0x1000086ec,1); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 48),8); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 88),4); ((RSP_0 -64 64),8) SEP ((bot(fun__fts_read_INODE64) +64 96),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RSI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002890: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 114 ##
#######################################
*)

htriple "ht_1000029a0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029a0: MOV RSI, R13 3"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029a3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029a3: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029a5: ExternalCall fun_0x10000312b 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x10000312b {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029aa: JMP 4294977680 5"
 Post  "RAX = bot(fun_0x10000312b) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 115 ##
#######################################
*)

htriple "ht_1000029cc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029cc: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029ce: ExternalCall fun_0x10000309a 5"
 Post  "RAX = bot(fun_0x10000309a) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x10000309a {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 116 ##
#######################################
*)

htriple "ht_1000029d9"
 Separations "(0x1000086d0,1) SEP (bot(fun__getenv),1); (0x1000086d0,1) SEP (bot(fun__malloc),8); (0x1000086d0,1) SEP (RSI_0,8); (0x1000086d0,1) SEP (RSP_0,8); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086d0,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086d0,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086d0,1) SEP ((RSI_0 +64 8),8); (0x1000086d0,1) SEP ((RSI_0 +64 16),8); (0x1000086d0,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086d0,1) SEP ((RSP_0 -64 8),8); (0x1000086d0,1) SEP ((RSP_0 -64 16),8); (0x1000086d0,1) SEP ((RSP_0 -64 24),8); (0x1000086d0,1) SEP ((RSP_0 -64 32),8); (0x1000086d0,1) SEP ((RSP_0 -64 40),8); (0x1000086d0,1) SEP ((RSP_0 -64 48),8); (0x1000086d0,1) SEP ((RSP_0 -64 52),4); (0x1000086d0,1) SEP ((RSP_0 -64 64),8); (0x1000086d0,1) SEP ((RSP_0 -64 80),8); (0x1000086d0,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029d9: TEST BYTE PTR [RIP + 23792], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029e0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029e0: JE 4294978048 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 117 ##
#######################################
*)

htriple "ht_100002a00"
 Separations "(0x1000086f4,4) SEP (bot(fun__malloc),8); (0x1000086f4,4) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086f4,4) SEP ((bot(fun__malloc) +64 8),8); (0x1000086f4,4) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002a00: MOV EDI, DWORD PTR [RIP + 23790] 6"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a06"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100002a06: ExternalCall fun__exit 5"
 Post  "RAX = bot(fun__exit) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__exit {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[0x100008560,4];[0x100008570,8];[0x100008578,4];[0x1000086a8,8];[0x1000086b0,4];[0x1000086c8,1];[0x1000086cc,1];[0x1000086cd,1];[0x1000086d0,1];[0x1000086d4,1];[0x1000086d8,1];[0x1000086dc,1];[0x1000086e0,1];[0x1000086e4,1];[0x1000086e8,1];[0x1000086ec,1];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 118 ##
#######################################
*)

htriple "ht_1000029e2"
 Separations "(0x1000086e4,1) SEP (bot(fun__getenv),1); (0x1000086e4,1) SEP (bot(fun__malloc),8); (0x1000086e4,1) SEP (RSI_0,8); (0x1000086e4,1) SEP (RSP_0,8); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 48),8); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 88),4); (0x1000086e4,1) SEP ((bot(fun__fts_read_INODE64) +64 96),8); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 bot(fun__strlen)),2); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 8),8); (0x1000086e4,1) SEP ((bot(fun__malloc) +64 (bot(fun__strlen) +64 2)),1); (0x1000086e4,1) SEP ((RSI_0 +64 8),8); (0x1000086e4,1) SEP ((RSI_0 +64 16),8); (0x1000086e4,1) SEP ((0x100002a54 +64 ((b32(bot(fun__getopt_long)) -32 97) *64 4)),4); (0x1000086e4,1) SEP ((RSP_0 -64 8),8); (0x1000086e4,1) SEP ((RSP_0 -64 16),8); (0x1000086e4,1) SEP ((RSP_0 -64 24),8); (0x1000086e4,1) SEP ((RSP_0 -64 32),8); (0x1000086e4,1) SEP ((RSP_0 -64 40),8); (0x1000086e4,1) SEP ((RSP_0 -64 48),8); (0x1000086e4,1) SEP ((RSP_0 -64 52),4); (0x1000086e4,1) SEP ((RSP_0 -64 64),8); (0x1000086e4,1) SEP ((RSP_0 -64 80),8); (0x1000086e4,1) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029e2: TEST BYTE PTR [RIP + 23803], 1 7"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029e9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029e9: JNE 4294978048 2"
 Post  "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 119 ##
#######################################
*)

htriple "ht_1000029eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029eb: LEA RDX, [RIP + 17941] 7"
 Post  "RDX = 0x100007007 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029f2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x100007007 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029f2: MOV EDI, 4294967295 5"
 Post  "RDX = 0x100007007 ; RDI = 0xffffffff ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029f7"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x100007007 ; RDI = 0xffffffff ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029f7: XOR ESI, ESI 2"
 Post  "RDX = 0x100007007 ; RDI = 0xffffffff ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029f9"
 Separations ""
 Assertions  ""
 Pre   "RDX = 0x100007007 ; RDI = 0xffffffff ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029f9: XOR ECX, ECX 2"
 Post  "RCX = 0 ; RDX = 0x100007007 ; RDI = 0xffffffff ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000029fb"
 Separations ""
 Assertions  ""
 Pre   "RCX = 0 ; RDX = 0x100007007 ; RDI = 0xffffffff ; RSI = 0 ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "1000029fb: ExternalCall fun_0x100002f0f 5"
 Post  "RAX = bot(fun_0x100002f0f) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x100002f0f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 120 ##
#######################################
*)

htriple "ht_100002a10"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a10: ExternalCall fun_0x100002b11 5"
 Post  "RAX = bot(fun_0x100002b11) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100002b11 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 121 ##
#######################################
*)

htriple "ht_100002a1a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt_long) ; RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 97) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a1a: ExternalCall fun_0x100002ae7 5"
 Post  "RAX = bot(fun_0x100002ae7) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100002ae7 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 122 ##
#######################################
*)

htriple "ht_100002a44"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a44: ExternalCall fun_0x100002b9d 5"
 Post  "RAX = bot(fun_0x100002b9d) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100002b9d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a49"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002b9d) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a49: JMP 4294978048 2"
 Post  "RAX = bot(fun_0x100002b9d) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 1000023c8, blockId == 123 ##
#######################################
*)

htriple "ht_100002a4b"
 Separations ""
 Assertions  ""
 Pre   "RBX = bot(fun__getprogname) ; RCX = (b32(bot(fun__getopt_long)) -32 49) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a4b: ExternalCall fun_0x100002e38 5"
 Post  "RAX = bot(fun_0x100002e38) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100002e38 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100008010,8];[0x100008028,8];[0x100008030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 52),4];[(RSP_0 -64 64),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002a50"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002e38) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100002a50: JMP 4294978048 2"
 Post  "RAX = bot(fun_0x100002e38) ; RBX = bot(fun__getprogname) ; RSP = (RSP_0 -64 232) ; RBP = (RSP_0 -64 8) ; R15 = 0x100002a54 ; R14 = 0x100006f9f ; R12 = 0x1000082c0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
