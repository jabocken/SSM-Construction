theory od_100002c48
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100002c48, blockId == 0 ##
#####################################
*)

htriple "ht_100002c48"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 8),8) SEP (0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100008200,8); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c48: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c49"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c49: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c4c"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 16),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 16),8) SEP (0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100008200,8); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c4c: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c4e"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 24),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 24),8) SEP (0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100008200,8); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c4e: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c50"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 32),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 32),8) SEP (0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100008200,8); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c50: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c52"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 40),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 40),8) SEP (0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100008200,8); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c52: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c54"
 Separations "((RSP_0 -64 48),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 48),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 48),8) SEP (0,8); ((RSP_0 -64 48),8) SEP (0x100004000,8); ((RSP_0 -64 48),8) SEP (0x100008200,8); ((RSP_0 -64 48),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 48),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 48),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 48),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c54: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c55"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c55: SUB RSP, 56 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c59"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 80),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 80),8) SEP (0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100008200,8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c59: MOV QWORD PTR [RBP - 72], RDI 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c5d"
 Separations "((RDI_0 +64 8),8) SEP (RSP_0,8); ((RDI_0 +64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RDI_0 +64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RDI_0 +64 8),8) SEP (0,8); ((RDI_0 +64 8),8) SEP (0x100004000,8); ((RDI_0 +64 8),8) SEP (0x1000081d8,4); ((RDI_0 +64 8),8) SEP (0x100008200,8); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 8),4); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 12),4); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 16),8); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 24),8); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 50),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 51),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 56),4); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c5d: MOV R13, QWORD PTR [RDI + 8] 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c61"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c61: TEST R13, R13 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c64"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c64: JE 4294979907 6"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 1 ##
#####################################
*)

htriple "ht_100002c6a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c6a: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c6c"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 72),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 72),8) SEP (0,8); ((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008200,8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c6c: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c70"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c70: MOV RSI, QWORD PTR [RIP + 5001] 7"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = [0x100004000,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c77"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = [0x100004000,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
 Instruction "100002c77: XOR R12D, R12D 3"
 Post  "RAX = 0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = [0x100004000,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [(RDI_0 +64 8),8]_0 ; R12 = 0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0,8] = [0,8]_0 ; [0x100004000,8] = [0x100004000,8]_0 ; [0x100008200,8] = [0x100008200,8]_0 ; [(RDI_0 +64 8),8] = [(RDI_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 8),8] = [([(RDI_0 +64 8),8]_0 +64 8),8]_0 ; [([(RDI_0 +64 8),8]_0 +64 32),8] = [([(RDI_0 +64 8),8]_0 +64 32),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 50),1] = [(RSP_0 -64 50),1]_0 ; [(RSP_0 -64 51),1] = [(RSP_0 -64 51),1]_0 ; [(RSP_0 -64 56),4] = [(RSP_0 -64 56),4]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = RDI_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 2 ##
#####################################
*)

htriple "ht_100003143"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003143: ADD RSP, 56 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003147"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 40),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 40),8) SEP (0,8); ((RSP_0 -64 40),8) SEP (0x100004000,8); ((RSP_0 -64 40),8) SEP (0x100008200,8); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 40),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003147: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003148"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 32),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 32),8) SEP (0,8); ((RSP_0 -64 32),8) SEP (0x100004000,8); ((RSP_0 -64 32),8) SEP (0x100008200,8); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 32),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003148: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314a"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 24),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 24),8) SEP (0,8); ((RSP_0 -64 24),8) SEP (0x100004000,8); ((RSP_0 -64 24),8) SEP (0x100008200,8); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 24),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000314a: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314c"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 16),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 16),8) SEP (0,8); ((RSP_0 -64 16),8) SEP (0x100004000,8); ((RSP_0 -64 16),8) SEP (0x100008200,8); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 16),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000314c: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000314e"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 8),8) SEP (0,8); ((RSP_0 -64 8),8) SEP (0x100004000,8); ((RSP_0 -64 8),8) SEP (0x100008200,8); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 8),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000314e: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003150"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003150: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003151"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003151: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 3 ##
#####################################
*)

htriple "ht_100002c88"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c88: LEA RBX, [R13 + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c8c"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP (0,8); ((RSP_0 -64 56),4) SEP (0x100004000,8); ((RSP_0 -64 56),4) SEP (0x100008200,8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c8c: MOV DWORD PTR [RBP - 48], 0 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c93"
 Separations "((RSP_0 -64 96),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 96),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 96),8) SEP (0,8); ((RSP_0 -64 96),8) SEP (0x100004000,8); ((RSP_0 -64 96),8) SEP (0x100008200,8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c93: MOV QWORD PTR [RBP - 88], RBX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 4 ##
#####################################
*)

htriple "ht_100003066"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003066: CMP DWORD PTR [R13 + 24], 0 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000306b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000306b: JNE 4294979719 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 5 ##
#####################################
*)

htriple "ht_100002caf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002caf: MOV R15, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cb2: CMP QWORD PTR [RBX], 0 4"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cb6: MOV RCX, R12 3"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cb9: MOV RAX, R12 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cbc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cbc: CMOVE RAX, RBX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cc0"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 50),1); (RAX,8) SEP ((RSP_0 -64 51),1); (RAX,8) SEP ((RSP_0 -64 56),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8); (RAX,8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cc0: MOV QWORD PTR [RAX], R15 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cc3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cc3: LEA R12, [R14 + 1] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cc7"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 64),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 64),8) SEP (0,8); ((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008200,8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cc7: MOV QWORD PTR [RBP - 56], R14 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 6 ##
#####################################
*)

htriple "ht_100003152"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003152: ExternalCall fun_0x1000033d6 5"
 Post  "RAX = bot(fun_0x1000033d6) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000033d6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 7 ##
#####################################
*)

htriple "ht_100002cd6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cd6: CMP AL, 37 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cd8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cd8: JE 4294978786 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 8 ##
#####################################
*)

htriple "ht_10000304c"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 64),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 64),8) SEP (0,8); ((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008200,8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000304c: MOV RAX, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003050"
 Separations "((bot(fun__calloc) +64 24),8) SEP (RSP_0,8); ((bot(fun__calloc) +64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 24),8) SEP (0,8); ((bot(fun__calloc) +64 24),8) SEP (0x100004000,8); ((bot(fun__calloc) +64 24),8) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 24),8) SEP (0x100008200,8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003050: MOV QWORD PTR [R15 + 24], RAX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003054"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003054: MOV DWORD PTR [R15 + 8], 1024 8"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000305c"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000305c: MOV RSI, QWORD PTR [RIP + 3997] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003063"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003063: MOV R12, RCX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100002c48, blockId == 9 ##
#####################################
*)

htriple "ht_100002cda"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cda: INC R14 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cdd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cdd: INC R12 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ce0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ce0: JMP 4294978763 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 10 ##
######################################
*)

htriple "ht_100002ce2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ce2: CMP DWORD PTR [R13 + 24], 0 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ce7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ce7: LEA RBX, [RIP + 4701] 7"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cee"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cee: JE 4294978838 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 11 ##
######################################
*)

htriple "ht_100002ccb"
 Separations ""
 Assertions  "(R14,1) SEP (RSP_0,8); (R14,1) SEP ((RSP_0 -64 8),8); (R14,1) SEP ((RSP_0 -64 16),8); (R14,1) SEP ((RSP_0 -64 24),8); (R14,1) SEP ((RSP_0 -64 32),8); (R14,1) SEP ((RSP_0 -64 40),8); (R14,1) SEP ((RSP_0 -64 48),8); (R14,1) SEP ((RSP_0 -64 49),1); (R14,1) SEP ((RSP_0 -64 50),1); (R14,1) SEP ((RSP_0 -64 51),1); (R14,1) SEP ((RSP_0 -64 56),4); (R14,1) SEP ((RSP_0 -64 64),8); (R14,1) SEP ((RSP_0 -64 72),8); (R14,1) SEP ((RSP_0 -64 80),8); (R14,1) SEP ((RSP_0 -64 88),8); (R14,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ccb: MOV AL, BYTE PTR [R14] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cce: TEST AL, AL 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cd0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cd0: JE 4294979660 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 12 ##
######################################
*)

htriple "ht_100002cf0"
 Separations ""
 Assertions  "((R14 +64 1),1) SEP (RSP_0,8); ((R14 +64 1),1) SEP ((RSP_0 -64 8),8); ((R14 +64 1),1) SEP ((RSP_0 -64 16),8); ((R14 +64 1),1) SEP ((RSP_0 -64 24),8); ((R14 +64 1),1) SEP ((RSP_0 -64 32),8); ((R14 +64 1),1) SEP ((RSP_0 -64 40),8); ((R14 +64 1),1) SEP ((RSP_0 -64 48),8); ((R14 +64 1),1) SEP ((RSP_0 -64 49),1); ((R14 +64 1),1) SEP ((RSP_0 -64 50),1); ((R14 +64 1),1) SEP ((RSP_0 -64 51),1); ((R14 +64 1),1) SEP ((RSP_0 -64 56),4); ((R14 +64 1),1) SEP ((RSP_0 -64 64),8); ((R14 +64 1),1) SEP ((RSP_0 -64 72),8); ((R14 +64 1),1) SEP ((RSP_0 -64 80),8); ((R14 +64 1),1) SEP ((RSP_0 -64 88),8); ((R14 +64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cf0: MOVZX ESI, BYTE PTR [R14 + 1] 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cf5"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cf5: INC R14 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cf8"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cf8: LEA RDI, [RIP + 4683] 7"
 Post  "RBX = 0x100003f4b ; RDI = 0x100003f4a ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002cff"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x100003f4a ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002cff: ExternalCall fun__index 5"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__index {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d04: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d07"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d07: JNE 4294978800 2"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 13 ##
######################################
*)

htriple "ht_100002d16"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 49),1); (R12,1) SEP ((RSP_0 -64 50),1); (R12,1) SEP ((RSP_0 -64 51),1); (R12,1) SEP ((RSP_0 -64 56),4); (R12,1) SEP ((RSP_0 -64 64),8); (R12,1) SEP ((RSP_0 -64 72),8); (R12,1) SEP ((RSP_0 -64 80),8); (R12,1) SEP ((RSP_0 -64 88),8); (R12,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d16: MOVZX ESI, BYTE PTR [R12] 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d1b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d1b: MOV RDI, RBX 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d1e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d1e: ExternalCall fun__index 5"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__index {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d23"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d23: INC R12 3"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d26"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d26: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d29"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d29: JNE 4294978838 2"
 Post  "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 14 ##
######################################
*)

htriple "ht_100002d09"
 Separations ""
 Assertions  "(R14,1) SEP (RSP_0,8); (R14,1) SEP ((RSP_0 -64 8),8); (R14,1) SEP ((RSP_0 -64 16),8); (R14,1) SEP ((RSP_0 -64 24),8); (R14,1) SEP ((RSP_0 -64 32),8); (R14,1) SEP ((RSP_0 -64 40),8); (R14,1) SEP ((RSP_0 -64 48),8); (R14,1) SEP ((RSP_0 -64 49),1); (R14,1) SEP ((RSP_0 -64 50),1); (R14,1) SEP ((RSP_0 -64 51),1); (R14,1) SEP ((RSP_0 -64 56),4); (R14,1) SEP ((RSP_0 -64 64),8); (R14,1) SEP ((RSP_0 -64 72),8); (R14,1) SEP ((RSP_0 -64 80),8); (R14,1) SEP ((RSP_0 -64 88),8); (R14,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d09: MOV AL, BYTE PTR [R14] 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d0c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d0c: MOV ECX, 1 5"
 Post  "RBX = 0x100003f4b ; RCX = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d11"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d11: MOV R12, R14 3"
 Post  "RBX = 0x100003f4b ; RCX = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d14"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d14: JMP 4294978934 2"
 Post  "RBX = 0x100003f4b ; RCX = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 15 ##
######################################
*)

htriple "ht_100002d2b"
 Separations ""
 Assertions  "((R12 -64 1),1) SEP (RSP_0,8); ((R12 -64 1),1) SEP ((RSP_0 -64 8),8); ((R12 -64 1),1) SEP ((RSP_0 -64 16),8); ((R12 -64 1),1) SEP ((RSP_0 -64 24),8); ((R12 -64 1),1) SEP ((RSP_0 -64 32),8); ((R12 -64 1),1) SEP ((RSP_0 -64 40),8); ((R12 -64 1),1) SEP ((RSP_0 -64 48),8); ((R12 -64 1),1) SEP ((RSP_0 -64 49),1); ((R12 -64 1),1) SEP ((RSP_0 -64 50),1); ((R12 -64 1),1) SEP ((RSP_0 -64 51),1); ((R12 -64 1),1) SEP ((RSP_0 -64 56),4); ((R12 -64 1),1) SEP ((RSP_0 -64 64),8); ((R12 -64 1),1) SEP ((RSP_0 -64 72),8); ((R12 -64 1),1) SEP ((RSP_0 -64 80),8); ((R12 -64 1),1) SEP ((RSP_0 -64 88),8); ((R12 -64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RAX = bot(fun__index) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d2b: MOV AL, BYTE PTR [R12 - 1] 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d30"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d30: XOR ECX, ECX 2"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d32"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d32: CMP AL, 46 2"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d34"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d34: JNE 4294978931 2"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 16 ##
######################################
*)

htriple "ht_100002d36"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 49),1); (R12,1) SEP ((RSP_0 -64 50),1); (R12,1) SEP ((RSP_0 -64 51),1); (R12,1) SEP ((RSP_0 -64 56),4); (R12,1) SEP ((RSP_0 -64 64),8); (R12,1) SEP ((RSP_0 -64 72),8); (R12,1) SEP ((RSP_0 -64 80),8); (R12,1) SEP ((RSP_0 -64 88),8); (R12,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d36: MOVZX EAX, BYTE PTR [R12] 5"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d3b"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d3b: MOV RDX, QWORD PTR [RIP + 4798] 7"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d42"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d42: TEST BYTE PTR [RDX + RAX * 4 + 61], 4 5"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d47"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d47: JE 4294978934 2"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 17 ##
######################################
*)

htriple "ht_100002d73"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d73: DEC R12 3"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 18 ##
######################################
*)

htriple "ht_100002d49"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d49: MOV RDI, R12 3"
 Post  "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d4c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d4c: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d51"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 72),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 72),8) SEP (0,8); ((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008200,8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d51: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d55"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d55: MOV RCX, QWORD PTR [RIP + 4772] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 19 ##
######################################
*)

htriple "ht_100002d76"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d76: LEA R8, [R12 + 1] 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d7b"
 Separations "((RSP_0 -64 51),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 51),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 51),1) SEP (0,8); ((RSP_0 -64 51),1) SEP (0x100004000,8); ((RSP_0 -64 51),1) SEP (0x100008200,8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d7b: MOV BYTE PTR [RBP - 43], AL 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d7e"
 Separations "((RSP_0 -64 50),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 50),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 50),1) SEP (0,8); ((RSP_0 -64 50),1) SEP (0x100004000,8); ((RSP_0 -64 50),1) SEP (0x100008200,8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d7e: MOV BYTE PTR [RBP - 42], 0 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d82"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d82: MOVSX EDX, AL 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d85"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d85: CMP EDX, 94 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d88"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 88),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 88),8) SEP (0,8); ((RSP_0 -64 88),8) SEP (0x100004000,8); ((RSP_0 -64 88),8) SEP (0x100008200,8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d88: MOV QWORD PTR [RBP - 80], R13 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d8c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d8c: JLE 4294979046 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 20 ##
######################################
*)

htriple "ht_100002d5c"
 Separations ""
 Assertions  "((R12 +64 1),1) SEP (RSP_0,8); ((R12 +64 1),1) SEP ((RSP_0 -64 8),8); ((R12 +64 1),1) SEP ((RSP_0 -64 16),8); ((R12 +64 1),1) SEP ((RSP_0 -64 24),8); ((R12 +64 1),1) SEP ((RSP_0 -64 32),8); ((R12 +64 1),1) SEP ((RSP_0 -64 40),8); ((R12 +64 1),1) SEP ((RSP_0 -64 48),8); ((R12 +64 1),1) SEP ((RSP_0 -64 49),1); ((R12 +64 1),1) SEP ((RSP_0 -64 50),1); ((R12 +64 1),1) SEP ((RSP_0 -64 51),1); ((R12 +64 1),1) SEP ((RSP_0 -64 56),4); ((R12 +64 1),1) SEP ((RSP_0 -64 64),8); ((R12 +64 1),1) SEP ((RSP_0 -64 72),8); ((R12 +64 1),1) SEP ((RSP_0 -64 80),8); ((R12 +64 1),1) SEP ((RSP_0 -64 88),8); ((R12 +64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d5c: MOVZX EAX, BYTE PTR [R12 + 1] 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d62"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d62: INC R12 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d65"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d65: TEST BYTE PTR [RCX + RAX * 4 + 61], 4 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d6a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d6a: JNE 4294978908 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 21 ##
######################################
*)

htriple "ht_100002d6c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d6c: MOV ECX, 2 5"
 Post  "RBX = 0x100003f4b ; RCX = 2 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d71"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 2 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d71: JMP 4294978934 2"
 Post  "RBX = 0x100003f4b ; RCX = 2 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),8] = bot(fun__atoi) ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 22 ##
######################################
*)

htriple "ht_100002d8e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d8e: ADD EDX, 18446744073709551521 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d91"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d91: CMP EDX, 25 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d94"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d94: JA 4294979932 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 23 ##
######################################
*)

htriple "ht_100002de6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002de6: CMP EDX, 69 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002de9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002de9: JE 4294979056 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 24 ##
######################################
*)

htriple "ht_100002d9a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d9a: MOV ESI, 32 5"
 Post  "RBX = 0x100003f4b ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002d9f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002d9f: LEA RDI, [RIP + 1014] 7"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002da6"
 Separations ""
 Assertions  "((0x10000319c +64 (RDX *64 4)),4) SEP (RSP_0,8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 49),1); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 50),1); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 51),1); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 56),4); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x10000319c +64 (RDX *64 4)),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002da6: MOVSXD RDX, DWORD PTR [RDI + RDX * 4] 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002daa"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002daa: ADD RDX, RDI 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dad"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dad: JMP RDX 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 25 ##
######################################
*)

htriple "ht_10000315c"
 Separations ""
 Assertions  "((R12 +64 1),1) SEP (RSP_0,8); ((R12 +64 1),1) SEP ((RSP_0 -64 8),8); ((R12 +64 1),1) SEP ((RSP_0 -64 16),8); ((R12 +64 1),1) SEP ((RSP_0 -64 24),8); ((R12 +64 1),1) SEP ((RSP_0 -64 32),8); ((R12 +64 1),1) SEP ((RSP_0 -64 40),8); ((R12 +64 1),1) SEP ((RSP_0 -64 48),8); ((R12 +64 1),1) SEP ((RSP_0 -64 49),1); ((R12 +64 1),1) SEP ((RSP_0 -64 50),1); ((R12 +64 1),1) SEP ((RSP_0 -64 51),1); ((R12 +64 1),1) SEP ((RSP_0 -64 56),4); ((R12 +64 1),1) SEP ((RSP_0 -64 64),8); ((R12 +64 1),1) SEP ((RSP_0 -64 72),8); ((R12 +64 1),1) SEP ((RSP_0 -64 80),8); ((R12 +64 1),1) SEP ((RSP_0 -64 88),8); ((R12 +64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000315c: MOV BYTE PTR [R12 + 1], 0 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003162"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003162: JMP 4294979962 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 26 ##
######################################
*)

htriple "ht_100002daf"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002daf: LEA R8, [R12 + 2] 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002db4"
 Separations ""
 Assertions  "((R12 +64 1),1) SEP (RSP_0,8); ((R12 +64 1),1) SEP ((RSP_0 -64 8),8); ((R12 +64 1),1) SEP ((RSP_0 -64 16),8); ((R12 +64 1),1) SEP ((RSP_0 -64 24),8); ((R12 +64 1),1) SEP ((RSP_0 -64 32),8); ((R12 +64 1),1) SEP ((RSP_0 -64 40),8); ((R12 +64 1),1) SEP ((RSP_0 -64 48),8); ((R12 +64 1),1) SEP ((RSP_0 -64 49),1); ((R12 +64 1),1) SEP ((RSP_0 -64 50),1); ((R12 +64 1),1) SEP ((RSP_0 -64 51),1); ((R12 +64 1),1) SEP ((RSP_0 -64 56),4); ((R12 +64 1),1) SEP ((RSP_0 -64 64),8); ((R12 +64 1),1) SEP ((RSP_0 -64 72),8); ((R12 +64 1),1) SEP ((RSP_0 -64 80),8); ((R12 +64 1),1) SEP ((RSP_0 -64 88),8); ((R12 +64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002db4: MOV AL, BYTE PTR [R12 + 1] 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002db9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002db9: CMP AL, 109 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dbb"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dbb: JG 4294979284 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 27 ##
######################################
*)

htriple "ht_100002df0"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002df0: MOV DWORD PTR [R15 + 8], 16 8"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002df8"
 Separations ""
 Assertions  "((R13 +64 24),4) SEP (RSP_0,8); ((R13 +64 24),4) SEP ((RSP_0 -64 8),8); ((R13 +64 24),4) SEP ((RSP_0 -64 16),8); ((R13 +64 24),4) SEP ((RSP_0 -64 24),8); ((R13 +64 24),4) SEP ((RSP_0 -64 32),8); ((R13 +64 24),4) SEP ((RSP_0 -64 40),8); ((R13 +64 24),4) SEP ((RSP_0 -64 48),8); ((R13 +64 24),4) SEP ((RSP_0 -64 49),1); ((R13 +64 24),4) SEP ((RSP_0 -64 50),1); ((R13 +64 24),4) SEP ((RSP_0 -64 51),1); ((R13 +64 24),4) SEP ((RSP_0 -64 56),4); ((R13 +64 24),4) SEP ((RSP_0 -64 64),8); ((R13 +64 24),4) SEP ((RSP_0 -64 72),8); ((R13 +64 24),4) SEP ((RSP_0 -64 80),8); ((R13 +64 24),4) SEP ((RSP_0 -64 88),8); ((R13 +64 24),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002df8: MOV ECX, DWORD PTR [R13 + 24] 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dfc"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dfc: ROL ECX, 30 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dff"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dff: CMP ECX, 4 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e02"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e02: JA 4294979940 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 28 ##
######################################
*)

htriple "ht_100002e30"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e30: MOV DWORD PTR [R15 + 8], 128 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e38"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e38: CMP ECX, 1 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e3b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e3b: JE 4294979313 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 29 ##
######################################
*)

htriple "ht_100002e63"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e63: MOV ESI, 512 5"
 Post  "RBX = 0x100003f4b ; RSI = 512 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 30 ##
######################################
*)

htriple "ht_100002e68"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e68: MOV DWORD PTR [R15 + 8], ESI 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e6c"
 Separations "((RSP_0 -64 49),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 49),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 49),1) SEP (0,8); ((RSP_0 -64 49),1) SEP (0x100004000,8); ((RSP_0 -64 49),1) SEP (0x100008200,8); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e6c: MOV BYTE PTR [RBP - 41], 0 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e70"
 Separations "((RSP_0 -64 50),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 50),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 50),1) SEP (0,8); ((RSP_0 -64 50),1) SEP (0x100004000,8); ((RSP_0 -64 50),1) SEP (0x100008200,8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e70: MOV BYTE PTR [RBP - 42], AL 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e73"
 Separations "((RSP_0 -64 51),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 51),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 51),1) SEP (0,8); ((RSP_0 -64 51),1) SEP (0x100004000,8); ((RSP_0 -64 51),1) SEP (0x100008200,8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e73: MOV BYTE PTR [RBP - 43], 113 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e77"
 Separations ""
 Assertions  "((R13 +64 24),4) SEP (RSP_0,8); ((R13 +64 24),4) SEP ((RSP_0 -64 8),8); ((R13 +64 24),4) SEP ((RSP_0 -64 16),8); ((R13 +64 24),4) SEP ((RSP_0 -64 24),8); ((R13 +64 24),4) SEP ((RSP_0 -64 32),8); ((R13 +64 24),4) SEP ((RSP_0 -64 40),8); ((R13 +64 24),4) SEP ((RSP_0 -64 48),8); ((R13 +64 24),4) SEP ((RSP_0 -64 49),1); ((R13 +64 24),4) SEP ((RSP_0 -64 50),1); ((R13 +64 24),4) SEP ((RSP_0 -64 51),1); ((R13 +64 24),4) SEP ((RSP_0 -64 56),4); ((R13 +64 24),4) SEP ((RSP_0 -64 64),8); ((R13 +64 24),4) SEP ((RSP_0 -64 72),8); ((R13 +64 24),4) SEP ((RSP_0 -64 80),8); ((R13 +64 24),4) SEP ((RSP_0 -64 88),8); ((R13 +64 24),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e77: MOV EAX, DWORD PTR [R13 + 24] 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e7b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e7b: CMP RAX, 8 4"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e7f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e7f: JA 4294979940 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 31 ##
######################################
*)

htriple "ht_100002ebc"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ebc: MOV DWORD PTR [R15 + 8], 8 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ec4"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ec4: CMP DWORD PTR [R13 + 24], 1 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ec9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ec9: JBE 4294979482 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 32 ##
######################################
*)

htriple "ht_100002dc1"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dc1: CMP AL, 65 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dc3"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dc3: JE 4294979339 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 33 ##
######################################
*)

htriple "ht_100002ed4"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ed4: CMP AL, 110 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ed6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ed6: JE 4294979415 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 34 ##
######################################
*)

htriple "ht_100002dc9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dc9: CMP AL, 97 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dcb"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dcb: JE 4294979351 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 35 ##
######################################
*)

htriple "ht_100002f0b"
 Separations "(0x100008200,8) SEP (RSP_0,8); (0x100008200,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100008200,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100008200,8) SEP ((bot(fun__calloc) +64 8),4); (0x100008200,8) SEP ((bot(fun__calloc) +64 12),4); (0x100008200,8) SEP ((bot(fun__calloc) +64 16),8); (0x100008200,8) SEP ((bot(fun__calloc) +64 24),8); (0x100008200,8) SEP ((RDI_0 +64 8),8); (0x100008200,8) SEP ((RDI_0 +64 16),4); (0x100008200,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100008200,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100008200,8) SEP ((RSP_0 -64 8),8); (0x100008200,8) SEP ((RSP_0 -64 16),8); (0x100008200,8) SEP ((RSP_0 -64 24),8); (0x100008200,8) SEP ((RSP_0 -64 32),8); (0x100008200,8) SEP ((RSP_0 -64 40),8); (0x100008200,8) SEP ((RSP_0 -64 48),8); (0x100008200,8) SEP ((RSP_0 -64 49),1); (0x100008200,8) SEP ((RSP_0 -64 50),1); (0x100008200,8) SEP ((RSP_0 -64 51),1); (0x100008200,8) SEP ((RSP_0 -64 56),4); (0x100008200,8) SEP ((RSP_0 -64 64),8); (0x100008200,8) SEP ((RSP_0 -64 72),8); (0x100008200,8) SEP ((RSP_0 -64 80),8); (0x100008200,8) SEP ((RSP_0 -64 88),8); (0x100008200,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f0b: MOV QWORD PTR [RIP + 21230], R13 7"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f12"
 Separations ""
 Assertions  "((R13 +64 16),1) SEP (RSP_0,8); ((R13 +64 16),1) SEP ((RSP_0 -64 8),8); ((R13 +64 16),1) SEP ((RSP_0 -64 16),8); ((R13 +64 16),1) SEP ((RSP_0 -64 24),8); ((R13 +64 16),1) SEP ((RSP_0 -64 32),8); ((R13 +64 16),1) SEP ((RSP_0 -64 40),8); ((R13 +64 16),1) SEP ((RSP_0 -64 48),8); ((R13 +64 16),1) SEP ((RSP_0 -64 49),1); ((R13 +64 16),1) SEP ((RSP_0 -64 50),1); ((R13 +64 16),1) SEP ((RSP_0 -64 51),1); ((R13 +64 16),1) SEP ((RSP_0 -64 56),4); ((R13 +64 16),1) SEP ((RSP_0 -64 64),8); ((R13 +64 16),1) SEP ((RSP_0 -64 72),8); ((R13 +64 16),1) SEP ((RSP_0 -64 80),8); ((R13 +64 16),1) SEP ((RSP_0 -64 88),8); ((R13 +64 16),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f12: OR BYTE PTR [R13 + 16], 1 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 36 ##
######################################
*)

htriple "ht_100002dd1"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dd1: CMP AL, 99 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dd3"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dd3: JNE 4294979956 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 37 ##
######################################
*)

htriple "ht_100002f17"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f17: MOV DWORD PTR [R15 + 8], 1 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f1f"
 Separations ""
 Assertions  "((R12 +64 2),1) SEP (RSP_0,8); ((R12 +64 2),1) SEP ((RSP_0 -64 8),8); ((R12 +64 2),1) SEP ((RSP_0 -64 16),8); ((R12 +64 2),1) SEP ((RSP_0 -64 24),8); ((R12 +64 2),1) SEP ((RSP_0 -64 32),8); ((R12 +64 2),1) SEP ((RSP_0 -64 40),8); ((R12 +64 2),1) SEP ((RSP_0 -64 48),8); ((R12 +64 2),1) SEP ((RSP_0 -64 49),1); ((R12 +64 2),1) SEP ((RSP_0 -64 50),1); ((R12 +64 2),1) SEP ((RSP_0 -64 51),1); ((R12 +64 2),1) SEP ((RSP_0 -64 56),4); ((R12 +64 2),1) SEP ((RSP_0 -64 64),8); ((R12 +64 2),1) SEP ((RSP_0 -64 72),8); ((R12 +64 2),1) SEP ((RSP_0 -64 80),8); ((R12 +64 2),1) SEP ((RSP_0 -64 88),8); ((R12 +64 2),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f1f: MOV AL, BYTE PTR [R12 + 2] 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f24"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f24: LEA ECX, [RAX - 100] 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f27"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f27: CMP CL, 20 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f2a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f2a: JA 4294979948 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 38 ##
######################################
*)

htriple "ht_100002dd9"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dd9: MOV DWORD PTR [R15 + 8], 4 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002de1"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002de1: JMP 4294979471 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 39 ##
######################################
*)

htriple "ht_100003174"
 Separations ""
 Assertions  "((R12 +64 2),1) SEP (RSP_0,8); ((R12 +64 2),1) SEP ((RSP_0 -64 8),8); ((R12 +64 2),1) SEP ((RSP_0 -64 16),8); ((R12 +64 2),1) SEP ((RSP_0 -64 24),8); ((R12 +64 2),1) SEP ((RSP_0 -64 32),8); ((R12 +64 2),1) SEP ((RSP_0 -64 40),8); ((R12 +64 2),1) SEP ((RSP_0 -64 48),8); ((R12 +64 2),1) SEP ((RSP_0 -64 49),1); ((R12 +64 2),1) SEP ((RSP_0 -64 50),1); ((R12 +64 2),1) SEP ((RSP_0 -64 51),1); ((R12 +64 2),1) SEP ((RSP_0 -64 56),4); ((R12 +64 2),1) SEP ((RSP_0 -64 64),8); ((R12 +64 2),1) SEP ((RSP_0 -64 72),8); ((R12 +64 2),1) SEP ((RSP_0 -64 80),8); ((R12 +64 2),1) SEP ((RSP_0 -64 88),8); ((R12 +64 2),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003174: MOV BYTE PTR [R12 + 2], 0 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 40 ##
######################################
*)

htriple "ht_100002deb"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002deb: CMP EDX, 71 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002dee"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002dee: JNE 4294979162 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 41 ##
######################################
*)

htriple "ht_100002e5a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e5a: CMP EDX, 88 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e5d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e5d: JNE 4294979932 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 42 ##
######################################
*)

htriple "ht_100002e08"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e08: LEA RDX, [RIP + 1013] 7"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e0f"
 Separations ""
 Assertions  "((0x100003204 +64 (RCX *64 4)),4) SEP (RSP_0,8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 49),1); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 50),1); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 51),1); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 56),4); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x100003204 +64 (RCX *64 4)),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e0f: MOVSXD RCX, DWORD PTR [RDX + RCX * 4] 4"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e13"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e13: ADD RCX, RDX 3"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e16"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e16: JMP RCX 2"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 43 ##
######################################
*)

htriple "ht_100003164"
 Separations ""
 Assertions  "((R12 +64 1),1) SEP (RSP_0,8); ((R12 +64 1),1) SEP ((RSP_0 -64 8),8); ((R12 +64 1),1) SEP ((RSP_0 -64 16),8); ((R12 +64 1),1) SEP ((RSP_0 -64 24),8); ((R12 +64 1),1) SEP ((RSP_0 -64 32),8); ((R12 +64 1),1) SEP ((RSP_0 -64 40),8); ((R12 +64 1),1) SEP ((RSP_0 -64 48),8); ((R12 +64 1),1) SEP ((RSP_0 -64 49),1); ((R12 +64 1),1) SEP ((RSP_0 -64 50),1); ((R12 +64 1),1) SEP ((RSP_0 -64 51),1); ((R12 +64 1),1) SEP ((RSP_0 -64 56),4); ((R12 +64 1),1) SEP ((RSP_0 -64 64),8); ((R12 +64 1),1) SEP ((RSP_0 -64 72),8); ((R12 +64 1),1) SEP ((RSP_0 -64 80),8); ((R12 +64 1),1) SEP ((RSP_0 -64 88),8); ((R12 +64 1),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003164: MOV BYTE PTR [R12 + 1], 0 6"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000316a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000316a: JMP 4294979976 2"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 44 ##
######################################
*)

htriple "ht_100002e95"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e95: MOV DWORD PTR [R15 + 12], 4 8"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e9d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e9d: JMP 4294979490 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 45 ##
######################################
*)

htriple "ht_100002ea2"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ea2: MOV DWORD PTR [R15 + 12], 8 8"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eaa"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002eaa: JMP 4294979490 5"
 Post  "RBX = 0x100003f4b ; RDX = 0x100003204 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 46 ##
######################################
*)

htriple "ht_100002e41"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e41: CMP ECX, 2 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e44"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e44: JE 4294979326 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 47 ##
######################################
*)

htriple "ht_100002ef1"
 Separations ""
 Assertions  "((R13 +64 24),4) SEP (RSP_0,8); ((R13 +64 24),4) SEP ((RSP_0 -64 8),8); ((R13 +64 24),4) SEP ((RSP_0 -64 16),8); ((R13 +64 24),4) SEP ((RSP_0 -64 24),8); ((R13 +64 24),4) SEP ((RSP_0 -64 32),8); ((R13 +64 24),4) SEP ((RSP_0 -64 40),8); ((R13 +64 24),4) SEP ((RSP_0 -64 48),8); ((R13 +64 24),4) SEP ((RSP_0 -64 49),1); ((R13 +64 24),4) SEP ((RSP_0 -64 50),1); ((R13 +64 24),4) SEP ((RSP_0 -64 51),1); ((R13 +64 24),4) SEP ((RSP_0 -64 56),4); ((R13 +64 24),4) SEP ((RSP_0 -64 64),8); ((R13 +64 24),4) SEP ((RSP_0 -64 72),8); ((R13 +64 24),4) SEP ((RSP_0 -64 80),8); ((R13 +64 24),4) SEP ((RSP_0 -64 88),8); ((R13 +64 24),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ef1: MOV EAX, DWORD PTR [R13 + 24] 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ef5"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ef5: MOV DWORD PTR [R15 + 12], EAX 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ef9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ef9: JMP 4294979490 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 48 ##
######################################
*)

htriple "ht_100002e4a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e4a: TEST ECX, ECX 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e4c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e4c: MOV R14, R15 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e4f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e4f: JNE 4294979493 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 49 ##
######################################
*)

htriple "ht_100002efe"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 72),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 72),8) SEP (0,8); ((RSP_0 -64 72),8) SEP (0x100004000,8); ((RSP_0 -64 72),8) SEP (0x100008200,8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 72),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002efe: MOV RAX, QWORD PTR [RBP - 64] 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f02"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f02: MOV DWORD PTR [R15 + 12], EAX 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f06"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f06: JMP 4294979490 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 50 ##
######################################
*)

htriple "ht_100002e55"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e55: JMP 4294979927 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003157"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003157: ExternalCall fun_0x100003256 5"
 Post  "RAX = bot(fun_0x100003256) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x100003256 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 51 ##
######################################
*)

htriple "ht_100002fa5"
 Separations ""
 Assertions  "(R8,1) SEP (RSP_0,8); (R8,1) SEP ((RSP_0 -64 8),8); (R8,1) SEP ((RSP_0 -64 16),8); (R8,1) SEP ((RSP_0 -64 24),8); (R8,1) SEP ((RSP_0 -64 32),8); (R8,1) SEP ((RSP_0 -64 40),8); (R8,1) SEP ((RSP_0 -64 48),8); (R8,1) SEP ((RSP_0 -64 49),1); (R8,1) SEP ((RSP_0 -64 50),1); (R8,1) SEP ((RSP_0 -64 51),1); (R8,1) SEP ((RSP_0 -64 56),4); (R8,1) SEP ((RSP_0 -64 64),8); (R8,1) SEP ((RSP_0 -64 72),8); (R8,1) SEP ((RSP_0 -64 80),8); (R8,1) SEP ((RSP_0 -64 88),8); (R8,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fa5: MOV R13B, BYTE PTR [R8] 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fa8"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 49),1); (R12,1) SEP ((RSP_0 -64 50),1); (R12,1) SEP ((RSP_0 -64 51),1); (R12,1) SEP ((RSP_0 -64 56),4); (R12,1) SEP ((RSP_0 -64 64),8); (R12,1) SEP ((RSP_0 -64 72),8); (R12,1) SEP ((RSP_0 -64 80),8); (R12,1) SEP ((RSP_0 -64 88),8); (R12,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fa8: MOV BYTE PTR [R12], 0 5"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fad"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 64),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 64),8) SEP (0,8); ((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008200,8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fad: MOV RBX, QWORD PTR [RBP - 56] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fb1: MOV RDI, RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fb4: MOV R15, R8 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fb7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fb7: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fbc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fbc: LEA RSI, [RAX + 2] 4"
 Post  "RAX = bot(fun__strlen) ; RSI = (bot(fun__strlen) +64 2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSI = (bot(fun__strlen) +64 2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fc0: MOV EDI, 1 5"
 Post  "RAX = bot(fun__strlen) ; RDI = 1 ; RSI = (bot(fun__strlen) +64 2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fc5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RDI = 1 ; RSI = (bot(fun__strlen) +64 2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fc5: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fca"
 Separations "((bot(fun__calloc) +64 24),8) SEP (RSP_0,8); ((bot(fun__calloc) +64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 24),8) SEP (0,8); ((bot(fun__calloc) +64 24),8) SEP (0x100004000,8); ((bot(fun__calloc) +64 24),8) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 24),8) SEP (0x100008200,8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fca: MOV QWORD PTR [R14 + 24], RAX 4"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fce: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fd1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fd1: JE 4294979984 6"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 52 ##
######################################
*)

htriple "ht_100002e85"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e85: LEA RCX, [RIP + 908] 7"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e8c"
 Separations ""
 Assertions  "((0x100003218 +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 49),1); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 50),1); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 51),1); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 56),4); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8); ((0x100003218 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e8c: MOVSXD RAX, DWORD PTR [RCX + RAX * 4] 4"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e90"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e90: ADD RAX, RCX 3"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002e93"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002e93: JMP RAX 2"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 53 ##
######################################
*)

htriple "ht_100002eaf"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002eaf: MOV DWORD PTR [R15 + 12], 2 8"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eb7"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002eb7: JMP 4294979490 5"
 Post  "RBX = 0x100003f4b ; RCX = 0x100003218 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 54 ##
######################################
*)

htriple "ht_100002f9a"
 Separations "((bot(fun__calloc) +64 12),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 12),4) SEP (0,8); ((bot(fun__calloc) +64 12),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 12),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 12),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 12),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 12),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f9a: MOV DWORD PTR [R15 + 12], 1 8"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 55 ##
######################################
*)

htriple "ht_100002fa2"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fa2: MOV R14, R15 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 56 ##
######################################
*)

htriple "ht_100002ecf"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ecf: JMP 4294979940 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 57 ##
######################################
*)

htriple "ht_100002ed8"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ed8: CMP AL, 112 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eda"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002eda: JNE 4294979455 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 58 ##
######################################
*)

htriple "ht_100002f57"
 Separations "(0x100008200,8) SEP (RSP_0,8); (0x100008200,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100008200,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100008200,8) SEP ((bot(fun__calloc) +64 8),4); (0x100008200,8) SEP ((bot(fun__calloc) +64 12),4); (0x100008200,8) SEP ((bot(fun__calloc) +64 16),8); (0x100008200,8) SEP ((bot(fun__calloc) +64 24),8); (0x100008200,8) SEP ((RDI_0 +64 8),8); (0x100008200,8) SEP ((RDI_0 +64 16),4); (0x100008200,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100008200,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100008200,8) SEP ((RSP_0 -64 8),8); (0x100008200,8) SEP ((RSP_0 -64 16),8); (0x100008200,8) SEP ((RSP_0 -64 24),8); (0x100008200,8) SEP ((RSP_0 -64 32),8); (0x100008200,8) SEP ((RSP_0 -64 40),8); (0x100008200,8) SEP ((RSP_0 -64 48),8); (0x100008200,8) SEP ((RSP_0 -64 49),1); (0x100008200,8) SEP ((RSP_0 -64 50),1); (0x100008200,8) SEP ((RSP_0 -64 51),1); (0x100008200,8) SEP ((RSP_0 -64 56),4); (0x100008200,8) SEP ((RSP_0 -64 64),8); (0x100008200,8) SEP ((RSP_0 -64 72),8); (0x100008200,8) SEP ((RSP_0 -64 80),8); (0x100008200,8) SEP ((RSP_0 -64 88),8); (0x100008200,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f57: MOV QWORD PTR [RIP + 21154], R13 7"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f5e"
 Separations ""
 Assertions  "((R13 +64 16),4) SEP (RSP_0,8); ((R13 +64 16),4) SEP ((RSP_0 -64 8),8); ((R13 +64 16),4) SEP ((RSP_0 -64 16),8); ((R13 +64 16),4) SEP ((RSP_0 -64 24),8); ((R13 +64 16),4) SEP ((RSP_0 -64 32),8); ((R13 +64 16),4) SEP ((RSP_0 -64 40),8); ((R13 +64 16),4) SEP ((RSP_0 -64 48),8); ((R13 +64 16),4) SEP ((RSP_0 -64 49),1); ((R13 +64 16),4) SEP ((RSP_0 -64 50),1); ((R13 +64 16),4) SEP ((RSP_0 -64 51),1); ((R13 +64 16),4) SEP ((RSP_0 -64 56),4); ((R13 +64 16),4) SEP ((RSP_0 -64 64),8); ((R13 +64 16),4) SEP ((RSP_0 -64 72),8); ((R13 +64 16),4) SEP ((RSP_0 -64 80),8); ((R13 +64 16),4) SEP ((RSP_0 -64 88),8); ((R13 +64 16),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f5e: MOV DWORD PTR [R13 + 16], 1 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f66"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f66: MOV DWORD PTR [R15 + 8], 1024 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f6e"
 Separations "((RSP_0 -64 51),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 51),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 51),1) SEP (0,8); ((RSP_0 -64 51),1) SEP (0x100004000,8); ((RSP_0 -64 51),1) SEP (0x100008200,8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f6e: MOV BYTE PTR [RBP - 43], 0 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f72"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f72: LEA RAX, [RIP + 3891] 7"
 Post  "RAX = 0x100003eac ; RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f79"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 64),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 64),8) SEP (0,8); ((RSP_0 -64 64),8) SEP (0x100004000,8); ((RSP_0 -64 64),8) SEP (0x100008200,8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = 0x100003eac ; RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f79: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = 0x100003eac ; RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 64),8] = 0x100003eac ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100003eac ; RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 64),8] = 0x100003eac ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f7d: JMP 4294979490 2"
 Post  "RAX = 0x100003eac ; RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 0 ; [(RSP_0 -64 64),8] = 0x100003eac ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 59 ##
######################################
*)

htriple "ht_100002ee0"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ee0: MOV DWORD PTR [R15 + 8], 64 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ee8"
 Separations "((RSP_0 -64 51),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 51),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 51),1) SEP (0,8); ((RSP_0 -64 51),1) SEP (0x100004000,8); ((RSP_0 -64 51),1) SEP (0x100008200,8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ee8: MOV BYTE PTR [RBP - 43], 99 4"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 99 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002eec"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 99 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002eec: JMP 4294979471 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 99 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 60 ##
######################################
*)

htriple "ht_100002f7f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f7f: CMP AL, 117 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f81"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f81: JNE 4294979956 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 61 ##
######################################
*)

htriple "ht_100002f8f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f8f: CMP DWORD PTR [R13 + 24], 1 5"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f94"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f94: JA 4294979970 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 62 ##
######################################
*)

htriple "ht_100002f30"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f30: MOVZX ECX, CL 3"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f33"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f33: MOV EDX, 1050625 5"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f38"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f38: BT RDX, RCX 4"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f3c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f3c: JAE 4294979948 6"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 63 ##
######################################
*)

htriple "ht_10000316c"
 Separations ""
 Assertions  "((R12 +64 3),1) SEP (RSP_0,8); ((R12 +64 3),1) SEP ((RSP_0 -64 8),8); ((R12 +64 3),1) SEP ((RSP_0 -64 16),8); ((R12 +64 3),1) SEP ((RSP_0 -64 24),8); ((R12 +64 3),1) SEP ((RSP_0 -64 32),8); ((R12 +64 3),1) SEP ((RSP_0 -64 40),8); ((R12 +64 3),1) SEP ((RSP_0 -64 48),8); ((R12 +64 3),1) SEP ((RSP_0 -64 49),1); ((R12 +64 3),1) SEP ((RSP_0 -64 50),1); ((R12 +64 3),1) SEP ((RSP_0 -64 51),1); ((R12 +64 3),1) SEP ((RSP_0 -64 56),4); ((R12 +64 3),1) SEP ((RSP_0 -64 64),8); ((R12 +64 3),1) SEP ((RSP_0 -64 72),8); ((R12 +64 3),1) SEP ((RSP_0 -64 80),8); ((R12 +64 3),1) SEP ((RSP_0 -64 88),8); ((R12 +64 3),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000316c: MOV BYTE PTR [R12 + 3], 0 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003172"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003172: JMP 4294979962 2"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 64 ##
######################################
*)

htriple "ht_100002f42"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f42: MOV R14, R15 3"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f45"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f45: LEA R8, [R12 + 3] 5"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f4a"
 Separations "((RSP_0 -64 51),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 51),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 51),1) SEP (0,8); ((RSP_0 -64 51),1) SEP (0x100004000,8); ((RSP_0 -64 51),1) SEP (0x100008200,8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 51),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 51),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 51),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f4a: MOV BYTE PTR [RBP - 43], 113 4"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f4e"
 Separations "((RSP_0 -64 50),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 50),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 50),1) SEP (0,8); ((RSP_0 -64 50),1) SEP (0x100004000,8); ((RSP_0 -64 50),1) SEP (0x100008200,8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 50),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 50),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 50),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f4e: MOV BYTE PTR [RBP - 42], AL 3"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f51"
 Separations "((RSP_0 -64 49),1) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 49),1) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 49),1) SEP (0,8); ((RSP_0 -64 49),1) SEP (0x100004000,8); ((RSP_0 -64 49),1) SEP (0x100008200,8); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 49),1) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f51: MOV BYTE PTR [RBP - 41], 0 4"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002f55"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f55: JMP 4294979493 2"
 Post  "RBX = 0x100003f4b ; RDX = 0x100801 ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = 0 ; [(RSP_0 -64 51),1] = 113 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 65 ##
######################################
*)

htriple "ht_100002f87"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002f87: MOV DWORD PTR [R15 + 8], 256 8"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 66 ##
######################################
*)

htriple "ht_100003182"
 Separations ""
 Assertions  "((R12 +64 2),1) SEP (RSP_0,8); ((R12 +64 2),1) SEP ((RSP_0 -64 8),8); ((R12 +64 2),1) SEP ((RSP_0 -64 16),8); ((R12 +64 2),1) SEP ((RSP_0 -64 24),8); ((R12 +64 2),1) SEP ((RSP_0 -64 32),8); ((R12 +64 2),1) SEP ((RSP_0 -64 40),8); ((R12 +64 2),1) SEP ((RSP_0 -64 48),8); ((R12 +64 2),1) SEP ((RSP_0 -64 49),1); ((R12 +64 2),1) SEP ((RSP_0 -64 50),1); ((R12 +64 2),1) SEP ((RSP_0 -64 51),1); ((R12 +64 2),1) SEP ((RSP_0 -64 56),4); ((R12 +64 2),1) SEP ((RSP_0 -64 64),8); ((R12 +64 2),1) SEP ((RSP_0 -64 72),8); ((R12 +64 2),1) SEP ((RSP_0 -64 80),8); ((R12 +64 2),1) SEP ((RSP_0 -64 88),8); ((R12 +64 2),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003182: MOV BYTE PTR [R12 + 2], 0 6"
 Post  "RBX = 0x100003f4b ; RDI = 0x10000319c ; RSI = 32 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 67 ##
######################################
*)

htriple "ht_100002fd7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fd7: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fda"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fda: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__calloc) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fdd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RDI = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fdd: ExternalCall fun__strcpy 5"
 Post  "RAX = bot(fun__strcpy) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__strcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe2"
 Separations "((bot(fun__calloc) +64 24),8) SEP (RSP_0,8); ((bot(fun__calloc) +64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 24),8) SEP (0,8); ((bot(fun__calloc) +64 24),8) SEP (0x100004000,8); ((bot(fun__calloc) +64 24),8) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 24),8) SEP (0x100008200,8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcpy) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fe2: MOV RDI, QWORD PTR [R14 + 24] 4"
 Post  "RAX = bot(fun__strcpy) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fe6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcpy) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fe6: LEA RSI, [RBP - 43] 4"
 Post  "RAX = bot(fun__strcpy) ; RSI = (RSP_0 -64 51) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fea"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcpy) ; RSI = (RSP_0 -64 51) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fea: ExternalCall fun__strcat 5"
 Post  "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__strcat {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002fef"
 Separations ""
 Assertions  "(R15,1) SEP (RSP_0,8); (R15,1) SEP ((RSP_0 -64 8),8); (R15,1) SEP ((RSP_0 -64 16),8); (R15,1) SEP ((RSP_0 -64 24),8); (R15,1) SEP ((RSP_0 -64 32),8); (R15,1) SEP ((RSP_0 -64 40),8); (R15,1) SEP ((RSP_0 -64 48),8); (R15,1) SEP ((RSP_0 -64 49),1); (R15,1) SEP ((RSP_0 -64 50),1); (R15,1) SEP ((RSP_0 -64 51),1); (R15,1) SEP ((RSP_0 -64 56),4); (R15,1) SEP ((RSP_0 -64 64),8); (R15,1) SEP ((RSP_0 -64 72),8); (R15,1) SEP ((RSP_0 -64 80),8); (R15,1) SEP ((RSP_0 -64 88),8); (R15,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002fef: MOV BYTE PTR [R15], R13B 3"
 Post  "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ff2: SUB R12, RBX 3"
 Post  "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff5"
 Separations "((bot(fun__calloc) +64 24),8) SEP (RSP_0,8); ((bot(fun__calloc) +64 24),8) SEP ([(RDI_0 +64 8),8]_0,8); ((bot(fun__calloc) +64 24),8) SEP (0,8); ((bot(fun__calloc) +64 24),8) SEP (0x100004000,8); ((bot(fun__calloc) +64 24),8) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 24),8) SEP (0x100008200,8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 24),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 24),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ff5: ADD R12, QWORD PTR [R14 + 24] 4"
 Post  "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ff9"
 Separations "((bot(fun__calloc) +64 16),8) SEP (RSP_0,8); ((bot(fun__calloc) +64 16),8) SEP (0,8); ((bot(fun__calloc) +64 16),8) SEP (0x100004000,8); ((bot(fun__calloc) +64 16),8) SEP (0x1000081d8,4); ((bot(fun__calloc) +64 16),8) SEP (0x100008200,8); ((bot(fun__calloc) +64 16),8) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 16),8) SEP ((RDI_0 +64 16),4); ((bot(fun__calloc) +64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 16),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 16),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ff9: MOV QWORD PTR [R14 + 16], R12 4"
 Post  "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ffd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ffd: MOV RCX, R14 3"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003000"
 Separations "((bot(fun__calloc) +64 8),4) SEP (RSP_0,8); ((bot(fun__calloc) +64 8),4) SEP (0,8); ((bot(fun__calloc) +64 8),4) SEP (0x100004000,8); ((bot(fun__calloc) +64 8),4) SEP (0x100008200,8); ((bot(fun__calloc) +64 8),4) SEP ((RDI_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((bot(fun__calloc) +64 8),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 8),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 16),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 24),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 32),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 40),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 48),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 49),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 50),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 51),1); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 56),4); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 64),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 72),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 80),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 88),8); ((bot(fun__calloc) +64 8),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003000: TEST BYTE PTR [R14 + 8], 1 5"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003005"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003005: MOV R14, R15 3"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003008"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003008: JNE 4294979627 2"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 68 ##
######################################
*)

htriple "ht_100003190"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003190: ExternalCall fun_0x1000033e6 5"
 Post  "RAX = bot(fun_0x1000033e6) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000033e6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 69 ##
######################################
*)

htriple "ht_10000300a"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 88),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 88),8) SEP (0,8); ((RSP_0 -64 88),8) SEP (0x100004000,8); ((RSP_0 -64 88),8) SEP (0x100008200,8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000300a: MOV R13, QWORD PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000300e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000300e: CMP DWORD PTR [R13 + 24], 0 5"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003013"
 Separations "((RSP_0 -64 96),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 96),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 96),8) SEP (0,8); ((RSP_0 -64 96),8) SEP (0x100004000,8); ((RSP_0 -64 96),8) SEP (0x100008200,8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003013: MOV RBX, QWORD PTR [RBP - 88] 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003017"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003017: JE 4294979635 2"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 70 ##
######################################
*)

htriple "ht_10000302b"
 Separations "((RSP_0 -64 96),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 96),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 96),8) SEP (0,8); ((RSP_0 -64 96),8) SEP (0x100004000,8); ((RSP_0 -64 96),8) SEP (0x100008200,8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 96),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 96),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000302b: MOV RBX, QWORD PTR [RBP - 88] 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000302f"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 88),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 88),8) SEP (0,8); ((RSP_0 -64 88),8) SEP (0x100004000,8); ((RSP_0 -64 88),8) SEP (0x100008200,8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 88),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000302f: MOV R13, QWORD PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 71 ##
######################################
*)

htriple "ht_100003019"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP (0,8); ((RSP_0 -64 56),4) SEP (0x100004000,8); ((RSP_0 -64 56),4) SEP (0x100008200,8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003019: CMP DWORD PTR [RBP - 48], 0 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000301d"
 Separations "((RSP_0 -64 56),4) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 56),4) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 56),4) SEP (0,8); ((RSP_0 -64 56),4) SEP (0x100004000,8); ((RSP_0 -64 56),4) SEP (0x100008200,8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 56),4) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 56),4) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 56),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000301d: MOV DWORD PTR [RBP - 48], 1 7"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003024"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003024: JE 4294979635 2"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 72 ##
######################################
*)

htriple "ht_100003033"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003033: CMP BYTE PTR [R14], 0 4"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003037"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003037: MOV R12, RCX 3"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000303a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000303a: JNE 4294978711 6"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 73 ##
######################################
*)

htriple "ht_100003026"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003026: JMP 4294979989 5"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003195"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003195: ExternalCall fun_0x1000033f6 5"
 Post  "RAX = bot(fun_0x1000033f6) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),4] = 1 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x1000033f6 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 74 ##
######################################
*)

htriple "ht_100002c97"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c97: MOV EDI, 1 5"
 Post  "RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c9c"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c9c: MOV ESI, 176 5"
 Post  "RDI = 1 ; RSI = 176 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca1"
 Separations ""
 Assertions  ""
 Pre   "RDI = 1 ; RSI = 176 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ca1: ExternalCall fun__calloc 5"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__calloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ca6: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002ca9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002ca9: JE 4294979922 6"
 Post  "RAX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 75 ##
######################################
*)

htriple "ht_100003040"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003040: MOV R12, RCX 3"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003043"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003043: MOV RSI, QWORD PTR [RIP + 4022] 7"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000304a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000304a: JMP 4294979686 2"
 Post  "RAX = bot(fun__strcat) ; RCX = bot(fun__calloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R12 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 76 ##
######################################
*)

htriple "ht_10000306d"
 Separations ""
 Assertions  "((R13 +64 8),8) SEP (RSP_0,8); ((R13 +64 8),8) SEP ((RSP_0 -64 8),8); ((R13 +64 8),8) SEP ((RSP_0 -64 16),8); ((R13 +64 8),8) SEP ((RSP_0 -64 24),8); ((R13 +64 8),8) SEP ((RSP_0 -64 32),8); ((R13 +64 8),8) SEP ((RSP_0 -64 40),8); ((R13 +64 8),8) SEP ((RSP_0 -64 48),8); ((R13 +64 8),8) SEP ((RSP_0 -64 49),1); ((R13 +64 8),8) SEP ((RSP_0 -64 50),1); ((R13 +64 8),8) SEP ((RSP_0 -64 51),1); ((R13 +64 8),8) SEP ((RSP_0 -64 56),4); ((R13 +64 8),8) SEP ((RSP_0 -64 64),8); ((R13 +64 8),8) SEP ((RSP_0 -64 72),8); ((R13 +64 8),8) SEP ((RSP_0 -64 80),8); ((R13 +64 8),8) SEP ((RSP_0 -64 88),8); ((R13 +64 8),8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000306d: MOV RAX, QWORD PTR [R13 + 8] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003071"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003071: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003074"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003074: JE 4294979719 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 77 ##
######################################
*)

htriple "ht_100003087"
 Separations ""
 Assertions  "(R13,8) SEP (RSP_0,8); (R13,8) SEP ((RSP_0 -64 8),8); (R13,8) SEP ((RSP_0 -64 16),8); (R13,8) SEP ((RSP_0 -64 24),8); (R13,8) SEP ((RSP_0 -64 32),8); (R13,8) SEP ((RSP_0 -64 40),8); (R13,8) SEP ((RSP_0 -64 48),8); (R13,8) SEP ((RSP_0 -64 49),1); (R13,8) SEP ((RSP_0 -64 50),1); (R13,8) SEP ((RSP_0 -64 51),1); (R13,8) SEP ((RSP_0 -64 56),4); (R13,8) SEP ((RSP_0 -64 64),8); (R13,8) SEP ((RSP_0 -64 72),8); (R13,8) SEP ((RSP_0 -64 80),8); (R13,8) SEP ((RSP_0 -64 88),8); (R13,8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003087: MOV R13, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000308b: TEST R13, R13 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000308e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000308e: JNE 4294978682 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 78 ##
######################################
*)

htriple "ht_100003076"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003076: XOR ECX, ECX 2"
 Post  "RCX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 79 ##
######################################
*)

htriple "ht_100003078"
 Separations ""
 Assertions  "((RAX +64 12),4) SEP (RSP_0,8); ((RAX +64 12),4) SEP ((RSP_0 -64 8),8); ((RAX +64 12),4) SEP ((RSP_0 -64 16),8); ((RAX +64 12),4) SEP ((RSP_0 -64 24),8); ((RAX +64 12),4) SEP ((RSP_0 -64 32),8); ((RAX +64 12),4) SEP ((RSP_0 -64 40),8); ((RAX +64 12),4) SEP ((RSP_0 -64 48),8); ((RAX +64 12),4) SEP ((RSP_0 -64 49),1); ((RAX +64 12),4) SEP ((RSP_0 -64 50),1); ((RAX +64 12),4) SEP ((RSP_0 -64 51),1); ((RAX +64 12),4) SEP ((RSP_0 -64 56),4); ((RAX +64 12),4) SEP ((RSP_0 -64 64),8); ((RAX +64 12),4) SEP ((RSP_0 -64 72),8); ((RAX +64 12),4) SEP ((RSP_0 -64 80),8); ((RAX +64 12),4) SEP ((RSP_0 -64 88),8); ((RAX +64 12),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003078: ADD ECX, DWORD PTR [RAX + 12] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000307b"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 50),1); (RAX,8) SEP ((RSP_0 -64 51),1); (RAX,8) SEP ((RSP_0 -64 56),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8); (RAX,8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000307b: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000307e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000307e: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003081"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003081: JNE 4294979704 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 80 ##
######################################
*)

htriple "ht_100003083"
 Separations ""
 Assertions  "((R13 +64 24),4) SEP (RSP_0,8); ((R13 +64 24),4) SEP ((RSP_0 -64 8),8); ((R13 +64 24),4) SEP ((RSP_0 -64 16),8); ((R13 +64 24),4) SEP ((RSP_0 -64 24),8); ((R13 +64 24),4) SEP ((RSP_0 -64 32),8); ((R13 +64 24),4) SEP ((RSP_0 -64 40),8); ((R13 +64 24),4) SEP ((RSP_0 -64 48),8); ((R13 +64 24),4) SEP ((RSP_0 -64 49),1); ((R13 +64 24),4) SEP ((RSP_0 -64 50),1); ((R13 +64 24),4) SEP ((RSP_0 -64 51),1); ((R13 +64 24),4) SEP ((RSP_0 -64 56),4); ((R13 +64 24),4) SEP ((RSP_0 -64 64),8); ((R13 +64 24),4) SEP ((RSP_0 -64 72),8); ((R13 +64 24),4) SEP ((RSP_0 -64 80),8); ((R13 +64 24),4) SEP ((RSP_0 -64 88),8); ((R13 +64 24),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003083: MOV DWORD PTR [R13 + 24], ECX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 81 ##
######################################
*)

htriple "ht_100002c7a"
 Separations ""
 Assertions  "((R13 +64 32),8) SEP (RSP_0,8); ((R13 +64 32),8) SEP ((RSP_0 -64 8),8); ((R13 +64 32),8) SEP ((RSP_0 -64 16),8); ((R13 +64 32),8) SEP ((RSP_0 -64 24),8); ((R13 +64 32),8) SEP ((RSP_0 -64 32),8); ((R13 +64 32),8) SEP ((RSP_0 -64 40),8); ((R13 +64 32),8) SEP ((RSP_0 -64 48),8); ((R13 +64 32),8) SEP ((RSP_0 -64 49),1); ((R13 +64 32),8) SEP ((RSP_0 -64 50),1); ((R13 +64 32),8) SEP ((RSP_0 -64 51),1); ((R13 +64 32),8) SEP ((RSP_0 -64 56),4); ((R13 +64 32),8) SEP ((RSP_0 -64 64),8); ((R13 +64 32),8) SEP ((RSP_0 -64 72),8); ((R13 +64 32),8) SEP ((RSP_0 -64 80),8); ((R13 +64 32),8) SEP ((RSP_0 -64 88),8); ((R13 +64 32),8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c7a: MOV R14, QWORD PTR [R13 + 32] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c7e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c7e: CMP BYTE PTR [R14], 0 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100002c82"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100002c82: JE 4294979686 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 82 ##
######################################
*)

htriple "ht_100003094"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 80),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 80),8) SEP (0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100008200,8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003094: MOV RAX, QWORD PTR [RBP - 72] 4"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003098"
 Separations "((RDI_0 +64 8),8) SEP (RSP_0,8); ((RDI_0 +64 8),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RDI_0 +64 8),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RDI_0 +64 8),8) SEP (0,8); ((RDI_0 +64 8),8) SEP (0x100004000,8); ((RDI_0 +64 8),8) SEP (0x1000081d8,4); ((RDI_0 +64 8),8) SEP (0x100008200,8); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 8),4); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 12),4); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 16),8); ((RDI_0 +64 8),8) SEP ((bot(fun__calloc) +64 24),8); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RDI_0 +64 8),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 50),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 51),1); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 56),4); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 8),8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003098: MOV R12, QWORD PTR [RAX + 8] 4"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000309c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000309c: TEST R12, R12 3"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000309f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000309f: JE 4294979907 6"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 83 ##
######################################
*)

htriple "ht_1000030a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030a5: LEA R14, [RIP + 20780] 7"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030ac: MOV R15D, 16384 6"
 Post  "RAX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 84 ##
######################################
*)

htriple "ht_1000030b9"
 Separations "(0x1000081d8,4) SEP ((bot(fun__calloc) +64 8),4); (0x1000081d8,4) SEP ((bot(fun__calloc) +64 12),4); (0x1000081d8,4) SEP ((bot(fun__calloc) +64 16),8); (0x1000081d8,4) SEP ((bot(fun__calloc) +64 24),8); (0x1000081d8,4) SEP ((RDI_0 +64 8),8); (0x1000081d8,4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x1000081d8,4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030b9: MOV EAX, DWORD PTR [R14] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030bc"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 8),8]_0,8); ((RSP_0 -64 80),8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); ((RSP_0 -64 80),8) SEP (0,8); ((RSP_0 -64 80),8) SEP (0x100004000,8); ((RSP_0 -64 80),8) SEP (0x100008200,8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 8),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 12),4); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 16),8); ((RSP_0 -64 80),8) SEP ((bot(fun__calloc) +64 24),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),4); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030bc: MOV RCX, QWORD PTR [RBP - 72] 4"
 Post  "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030c0"
 Separations "((RDI_0 +64 16),4) SEP (RSP_0,8); ((RDI_0 +64 16),4) SEP (0,8); ((RDI_0 +64 16),4) SEP (0x100004000,8); ((RDI_0 +64 16),4) SEP (0x100008200,8); ((RDI_0 +64 16),4) SEP ((bot(fun__calloc) +64 8),4); ((RDI_0 +64 16),4) SEP ((bot(fun__calloc) +64 12),4); ((RDI_0 +64 16),4) SEP ((bot(fun__calloc) +64 16),8); ((RDI_0 +64 16),4) SEP ((bot(fun__calloc) +64 24),8); ((RDI_0 +64 16),4) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); ((RDI_0 +64 16),4) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 50),1); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 51),1); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 56),4); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 16),4) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030c0: SUB EAX, DWORD PTR [RCX + 16] 3"
 Post  "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030c3"
 Separations ""
 Assertions  ""
 Pre   "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030c3: JLE 4294979806 2"
 Post  "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 85 ##
######################################
*)

htriple "ht_1000030de"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030de: CMP DWORD PTR [R12 + 20], 2 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030e4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030e4: JL 4294979894 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 86 ##
######################################
*)

htriple "ht_1000030c5"
 Separations ""
 Assertions  ""
 Pre   "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030c5: TEST BYTE PTR [R12 + 16], 2 6"
 Post  "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030cb"
 Separations ""
 Assertions  ""
 Pre   "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030cb: JNE 4294979806 2"
 Post  "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 87 ##
######################################
*)

htriple "ht_1000030cd"
 Separations ""
 Assertions  "((R12 +64 24),4) SEP (RSP_0,8); ((R12 +64 24),4) SEP ((RSP_0 -64 8),8); ((R12 +64 24),4) SEP ((RSP_0 -64 16),8); ((R12 +64 24),4) SEP ((RSP_0 -64 24),8); ((R12 +64 24),4) SEP ((RSP_0 -64 32),8); ((R12 +64 24),4) SEP ((RSP_0 -64 40),8); ((R12 +64 24),4) SEP ((RSP_0 -64 48),8); ((R12 +64 24),4) SEP ((RSP_0 -64 49),1); ((R12 +64 24),4) SEP ((RSP_0 -64 50),1); ((R12 +64 24),4) SEP ((RSP_0 -64 51),1); ((R12 +64 24),4) SEP ((RSP_0 -64 56),4); ((R12 +64 24),4) SEP ((RSP_0 -64 64),8); ((R12 +64 24),4) SEP ((RSP_0 -64 72),8); ((R12 +64 24),4) SEP ((RSP_0 -64 80),8); ((R12 +64 24),4) SEP ((RSP_0 -64 88),8); ((R12 +64 24),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RCX = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030cd: MOV ECX, DWORD PTR [R12 + 24] 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030d2: TEST ECX, ECX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030d4: JE 4294979806 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 88 ##
######################################
*)

htriple "ht_1000030d6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030d6: CDQ  1"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030d7: IDIV ECX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030d9"
 Separations ""
 Assertions  "((R12 +64 20),4) SEP (RSP_0,8); ((R12 +64 20),4) SEP ((RSP_0 -64 8),8); ((R12 +64 20),4) SEP ((RSP_0 -64 16),8); ((R12 +64 20),4) SEP ((RSP_0 -64 24),8); ((R12 +64 20),4) SEP ((RSP_0 -64 32),8); ((R12 +64 20),4) SEP ((RSP_0 -64 40),8); ((R12 +64 20),4) SEP ((RSP_0 -64 48),8); ((R12 +64 20),4) SEP ((RSP_0 -64 49),1); ((R12 +64 20),4) SEP ((RSP_0 -64 50),1); ((R12 +64 20),4) SEP ((RSP_0 -64 51),1); ((R12 +64 20),4) SEP ((RSP_0 -64 56),4); ((R12 +64 20),4) SEP ((RSP_0 -64 64),8); ((R12 +64 20),4) SEP ((RSP_0 -64 72),8); ((R12 +64 20),4) SEP ((RSP_0 -64 80),8); ((R12 +64 20),4) SEP ((RSP_0 -64 88),8); ((R12 +64 20),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030d9: ADD DWORD PTR [R12 + 20], EAX 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 89 ##
######################################
*)

htriple "ht_1000030e6"
 Separations ""
 Assertions  "((R12 +64 8),8) SEP (RSP_0,8); ((R12 +64 8),8) SEP ((RSP_0 -64 8),8); ((R12 +64 8),8) SEP ((RSP_0 -64 16),8); ((R12 +64 8),8) SEP ((RSP_0 -64 24),8); ((R12 +64 8),8) SEP ((RSP_0 -64 32),8); ((R12 +64 8),8) SEP ((RSP_0 -64 40),8); ((R12 +64 8),8) SEP ((RSP_0 -64 48),8); ((R12 +64 8),8) SEP ((RSP_0 -64 49),1); ((R12 +64 8),8) SEP ((RSP_0 -64 50),1); ((R12 +64 8),8) SEP ((RSP_0 -64 51),1); ((R12 +64 8),8) SEP ((RSP_0 -64 56),4); ((R12 +64 8),8) SEP ((RSP_0 -64 64),8); ((R12 +64 8),8) SEP ((RSP_0 -64 72),8); ((R12 +64 8),8) SEP ((RSP_0 -64 80),8); ((R12 +64 8),8) SEP ((RSP_0 -64 88),8); ((R12 +64 8),8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030e6: MOV RAX, QWORD PTR [R12 + 8] 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 90 ##
######################################
*)

htriple "ht_100003136"
 Separations ""
 Assertions  "(R12,8) SEP (RSP_0,8); (R12,8) SEP ((RSP_0 -64 8),8); (R12,8) SEP ((RSP_0 -64 16),8); (R12,8) SEP ((RSP_0 -64 24),8); (R12,8) SEP ((RSP_0 -64 32),8); (R12,8) SEP ((RSP_0 -64 40),8); (R12,8) SEP ((RSP_0 -64 48),8); (R12,8) SEP ((RSP_0 -64 49),1); (R12,8) SEP ((RSP_0 -64 50),1); (R12,8) SEP ((RSP_0 -64 51),1); (R12,8) SEP ((RSP_0 -64 56),4); (R12,8) SEP ((RSP_0 -64 64),8); (R12,8) SEP ((RSP_0 -64 72),8); (R12,8) SEP ((RSP_0 -64 80),8); (R12,8) SEP ((RSP_0 -64 88),8); (R12,8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003136: MOV R12, QWORD PTR [R12] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000313a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000313a: TEST R12, R12 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000313d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000313d: JNE 4294979762 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 91 ##
######################################
*)

htriple "ht_1000030eb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030eb: MOV R13, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030ee"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 50),1); (RAX,8) SEP ((RSP_0 -64 51),1); (RAX,8) SEP ((RSP_0 -64 56),4); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8); (RAX,8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030ee: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030f1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030f1: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030f4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030f4: JNE 4294979819 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 92 ##
######################################
*)

htriple "ht_1000030f6"
 Separations ""
 Assertions  "((R13 +64 24),8) SEP (RSP_0,8); ((R13 +64 24),8) SEP ((RSP_0 -64 8),8); ((R13 +64 24),8) SEP ((RSP_0 -64 16),8); ((R13 +64 24),8) SEP ((RSP_0 -64 24),8); ((R13 +64 24),8) SEP ((RSP_0 -64 32),8); ((R13 +64 24),8) SEP ((RSP_0 -64 40),8); ((R13 +64 24),8) SEP ((RSP_0 -64 48),8); ((R13 +64 24),8) SEP ((RSP_0 -64 49),1); ((R13 +64 24),8) SEP ((RSP_0 -64 50),1); ((R13 +64 24),8) SEP ((RSP_0 -64 51),1); ((R13 +64 24),8) SEP ((RSP_0 -64 56),4); ((R13 +64 24),8) SEP ((RSP_0 -64 64),8); ((R13 +64 24),8) SEP ((RSP_0 -64 72),8); ((R13 +64 24),8) SEP ((RSP_0 -64 80),8); ((R13 +64 24),8) SEP ((RSP_0 -64 88),8); ((R13 +64 24),8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030f6: MOV RBX, QWORD PTR [R13 + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030fa"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 49),1); (RBX,1) SEP ((RSP_0 -64 50),1); (RBX,1) SEP ((RSP_0 -64 51),1); (RBX,1) SEP ((RSP_0 -64 56),4); (RBX,1) SEP ((RSP_0 -64 64),8); (RBX,1) SEP ((RSP_0 -64 72),8); (RBX,1) SEP ((RSP_0 -64 80),8); (RBX,1) SEP ((RSP_0 -64 88),8); (RBX,1) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030fa: MOV CL, BYTE PTR [RBX] 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030fc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030fc: TEST CL, CL 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030fe"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030fe: JE 4294979894 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 93 ##
######################################
*)

htriple "ht_100003100"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003100: DEC RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 94 ##
######################################
*)

htriple "ht_10000310a"
 Separations ""
 Assertions  "((RSI +64 ((RDI *64 4) +64 60)),4) SEP (RSP_0,8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 8),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 16),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 24),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 32),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 40),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 48),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 49),1); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 50),1); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 51),1); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 56),4); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 64),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 72),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 80),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 88),8); ((RSI +64 ((RDI *64 4) +64 60)),4) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000310a: MOV EAX, DWORD PTR [RSI + RDI * 4 + 60] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000310e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000310e: AND EAX, R15D 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003111"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003111: JMP 4294979876 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 95 ##
######################################
*)

htriple "ht_100003113"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003113: MOV ESI, 16384 5"
 Post  "RSI = 0x4000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003118"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x4000 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003118: ExternalCall fun____maskrune 5"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun____maskrune {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000311d"
 Separations "(0x100004000,8) SEP (RSP_0,8); (0x100004000,8) SEP ([(RDI_0 +64 8),8]_0,8); (0x100004000,8) SEP ([([(RDI_0 +64 8),8]_0 +64 32),8]_0,1); (0x100004000,8) SEP ((bot(fun__calloc) +64 8),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 12),4); (0x100004000,8) SEP ((bot(fun__calloc) +64 16),8); (0x100004000,8) SEP ((bot(fun__calloc) +64 24),8); (0x100004000,8) SEP ((RDI_0 +64 8),8); (0x100004000,8) SEP ((RDI_0 +64 16),4); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 8),8); (0x100004000,8) SEP (([(RDI_0 +64 8),8]_0 +64 32),8); (0x100004000,8) SEP ((RSP_0 -64 8),8); (0x100004000,8) SEP ((RSP_0 -64 16),8); (0x100004000,8) SEP ((RSP_0 -64 24),8); (0x100004000,8) SEP ((RSP_0 -64 32),8); (0x100004000,8) SEP ((RSP_0 -64 40),8); (0x100004000,8) SEP ((RSP_0 -64 48),8); (0x100004000,8) SEP ((RSP_0 -64 49),1); (0x100004000,8) SEP ((RSP_0 -64 50),1); (0x100004000,8) SEP ((RSP_0 -64 51),1); (0x100004000,8) SEP ((RSP_0 -64 56),4); (0x100004000,8) SEP ((RSP_0 -64 64),8); (0x100004000,8) SEP ((RSP_0 -64 72),8); (0x100004000,8) SEP ((RSP_0 -64 80),8); (0x100004000,8) SEP ((RSP_0 -64 88),8); (0x100004000,8) SEP ((RSP_0 -64 96),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000311d: MOV RSI, QWORD PTR [RIP + 3804] 7"
 Post  "RAX = bot(fun____maskrune) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 96 ##
######################################
*)

htriple "ht_100003124"
 Separations ""
 Assertions  "((RBX +64 2),1) SEP (RSP_0,8); ((RBX +64 2),1) SEP ((RSP_0 -64 8),8); ((RBX +64 2),1) SEP ((RSP_0 -64 16),8); ((RBX +64 2),1) SEP ((RSP_0 -64 24),8); ((RBX +64 2),1) SEP ((RSP_0 -64 32),8); ((RBX +64 2),1) SEP ((RSP_0 -64 40),8); ((RBX +64 2),1) SEP ((RSP_0 -64 48),8); ((RBX +64 2),1) SEP ((RSP_0 -64 49),1); ((RBX +64 2),1) SEP ((RSP_0 -64 50),1); ((RBX +64 2),1) SEP ((RSP_0 -64 51),1); ((RBX +64 2),1) SEP ((RSP_0 -64 56),4); ((RBX +64 2),1) SEP ((RSP_0 -64 64),8); ((RBX +64 2),1) SEP ((RSP_0 -64 72),8); ((RBX +64 2),1) SEP ((RSP_0 -64 80),8); ((RBX +64 2),1) SEP ((RSP_0 -64 88),8); ((RBX +64 2),1) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003124: MOV CL, BYTE PTR [RBX + 2] 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003127"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003127: INC RBX 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000312a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000312a: TEST CL, CL 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000312c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000312c: JNE 4294979843 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 97 ##
######################################
*)

htriple "ht_100003103"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003103: MOVZX EDI, CL 3"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003106"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003106: TEST CL, CL 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003108"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003108: JS 4294979859 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 98 ##
######################################
*)

htriple "ht_10000312e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000312e: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100003130"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003130: JE 4294979894 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100002c48, blockId == 99 ##
######################################
*)

htriple "ht_100003132"
 Separations ""
 Assertions  "((R13 +64 32),8) SEP (RSP_0,8); ((R13 +64 32),8) SEP ((RSP_0 -64 8),8); ((R13 +64 32),8) SEP ((RSP_0 -64 16),8); ((R13 +64 32),8) SEP ((RSP_0 -64 24),8); ((R13 +64 32),8) SEP ((RSP_0 -64 32),8); ((R13 +64 32),8) SEP ((RSP_0 -64 40),8); ((R13 +64 32),8) SEP ((RSP_0 -64 48),8); ((R13 +64 32),8) SEP ((RSP_0 -64 49),1); ((R13 +64 32),8) SEP ((RSP_0 -64 50),1); ((R13 +64 32),8) SEP ((RSP_0 -64 51),1); ((R13 +64 32),8) SEP ((RSP_0 -64 56),4); ((R13 +64 32),8) SEP ((RSP_0 -64 64),8); ((R13 +64 32),8) SEP ((RSP_0 -64 72),8); ((R13 +64 32),8) SEP ((RSP_0 -64 80),8); ((R13 +64 32),8) SEP ((RSP_0 -64 88),8); ((R13 +64 32),8) SEP ((RSP_0 -64 96),8)"
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003132: MOV QWORD PTR [R13 + 32], RBX 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002c48, blockId == 100 ##
#######################################
*)

htriple "ht_1000030b2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030b2: CMP QWORD PTR [R12], 0 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000030b7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "1000030b7: JNE 4294979806 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = 0x4000 ; R14 = 0x1000081d8 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002c48, blockId == 101 ##
#######################################
*)

htriple "ht_10000317a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000317a: MOV RDI, R12 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000317d"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000317d: ExternalCall fun_0x10000326d 5"
 Post  "RAX = bot(fun_0x10000326d) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 50),1] = 0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x10000326d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#######################################
## Entry = 100002c48, blockId == 102 ##
#######################################
*)

htriple "ht_100003188"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "100003188: MOV RDI, R12 3"
 Post  "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000318b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 Instruction "10000318b: ExternalCall fun_0x10000323c 5"
 Post  "RAX = bot(fun_0x10000323c) ; RBX = 0x100003f4b ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__calloc) ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = RDI_0"
 FunctionConstraints "PRESERVES fun_0x10000323c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004000,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 50),1];[(RSP_0 -64 51),1];[(RSP_0 -64 56),4];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
