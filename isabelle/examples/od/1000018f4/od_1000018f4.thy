theory od_1000018f4
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin


(*
#####################################
## Entry = 1000018f4, blockId == 0 ##
#####################################
*)

htriple "ht_1000018f4"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 8),8) SEP (0x100004028,8); ((RSP_0 -64 8),8) SEP (0x100004030,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x1000081f0,8); ((RSP_0 -64 8),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018f4: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000018f5"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018f5: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000018f8"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 16),8) SEP (0x100004028,8); ((RSP_0 -64 16),8) SEP (0x100004030,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x1000081f0,8); ((RSP_0 -64 16),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018f8: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000018fa"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 24),8) SEP (0x100004028,8); ((RSP_0 -64 24),8) SEP (0x100004030,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x1000081f0,8); ((RSP_0 -64 24),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018fa: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000018fc"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 32),8) SEP (0x100004028,8); ((RSP_0 -64 32),8) SEP (0x100004030,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x1000081f0,8); ((RSP_0 -64 32),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018fc: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000018fe"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 40),8) SEP (0x100004028,8); ((RSP_0 -64 40),8) SEP (0x100004030,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x1000081f0,8); ((RSP_0 -64 40),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "1000018fe: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001900"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 48),8) SEP (RSI_0,8); ((RSP_0 -64 48),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 48),8) SEP (0x100004028,8); ((RSP_0 -64 48),8) SEP (0x100004030,8); ((RSP_0 -64 48),8) SEP (0x100008180,4); ((RSP_0 -64 48),8) SEP (0x100008184,4); ((RSP_0 -64 48),8) SEP (0x1000081f0,8); ((RSP_0 -64 48),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100001900: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001901"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100001901: SUB RSP, 24 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001905"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100001905: MOV R15D, EDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001908"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004028,8); ((RSP_0 -64 64),8) SEP (0x100004030,8); ((RSP_0 -64 64),8) SEP (0x100008180,4); ((RSP_0 -64 64),8) SEP (0x100008184,4); ((RSP_0 -64 64),8) SEP (0x1000081f0,8); ((RSP_0 -64 64),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0"
 Instruction "100001908: MOV QWORD PTR [RBP - 56], RSI 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000190c"
 Separations "(RSI_0,8) SEP (bot(fun__rindex),1); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([RSI_0,8]_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP ([0x100004030,8]_0,4); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000190c: MOV RBX, QWORD PTR [RSI] 3"
 Post  "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000190f"
 Separations "([RSI_0,8]_0,8) SEP (bot(fun__rindex),1); ([RSI_0,8]_0,8) SEP (RSI_0,8); ([RSI_0,8]_0,8) SEP (RSP_0,8); ([RSI_0,8]_0,8) SEP ([0x100004028,8]_0,8); ([RSI_0,8]_0,8) SEP ([0x100004030,8]_0,4); ([RSI_0,8]_0,8) SEP (0x100004028,8); ([RSI_0,8]_0,8) SEP (0x100004030,8); ([RSI_0,8]_0,8) SEP (0x100008180,4); ([RSI_0,8]_0,8) SEP (0x100008184,4); ([RSI_0,8]_0,8) SEP (0x1000081f0,8); ([RSI_0,8]_0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 8),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 16),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 24),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 32),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 40),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 48),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 56),8); ([RSI_0,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000190f: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [[RSI_0,8]_0,8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001912"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [[RSI_0,8]_0,8]_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001912: MOV ESI, 104 5"
 Post  "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [[RSI_0,8]_0,8]_0 ; RSI = 104 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001917"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = [RSI_0,8]_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = [[RSI_0,8]_0,8]_0 ; RSI = 104 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSI_0,8] = [RSI_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[RSI_0,8]_0,8] = [[RSI_0,8]_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [0x1000081f0,8] = [0x1000081f0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001917: ExternalCall fun__rindex 5"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__rindex {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000191c"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 56),8) SEP (0x100004028,8); ((RSP_0 -64 56),8) SEP (0x100004030,8); ((RSP_0 -64 56),8) SEP (0x100008180,4); ((RSP_0 -64 56),8) SEP (0x100008184,4); ((RSP_0 -64 56),8) SEP (0x1000081f0,8); ((RSP_0 -64 56),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000191c: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001920"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001920: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001923"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001923: JE 4294973788 2"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 1 ##
#####################################
*)

htriple "ht_100001925"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001925: LEA RSI, [RIP + 8583] 7"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSI = 0x100003ab3 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000192c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RSI = 0x100003ab3 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000192c: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RDI = bot(fun__rindex) ; RSI = 0x100003ab3 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000192f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__rindex) ; RBX = [RSI_0,8]_0 ; RDI = bot(fun__rindex) ; RSI = 0x100003ab3 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000192f: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001934"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001934: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001936"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001936: JNE 4294973788 2"
 Post  "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 2 ##
#####################################
*)

htriple "ht_10000195c"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000195c: LEA R12, [RIP + 8609] 7"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001963"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001963: LEA R13, [RIP + 598] 7"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 3 ##
#####################################
*)

htriple "ht_100001938"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001938: LEA RDI, [RIP + 8567] 7"
 Post  "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ab6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000193f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ab6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = [0x100008180,4]_0 ; [0x100008184,4] = [0x100008184,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000193f: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001944"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001944: LEA RDI, [RIP + 8567] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ac2 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000194b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ac2 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000194b: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001950"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001950: LEA RDI, [RIP + 8598] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003aed ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001957"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003aed ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001957: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 4 ##
#####################################
*)

htriple "ht_10000197d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000197d: ADD EAX, 4294967198 3"
 Post  "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001980"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001980: CMP EAX, 22 3"
 Post  "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001983"
 Separations ""
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001983: JA 4294973802 2"
 Post  "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 5 ##
#####################################
*)

htriple "ht_1000019a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019a9: CMP EAX, 18446744073709551615 3"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019ac: JE 4294974295 6"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 6 ##
#####################################
*)

htriple "ht_10000196a"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000196a: MOV EDI, R15D 3"
 Post  "RBX = [RSI_0,8]_0 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000196d"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = b32(RDI_0) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000196d: MOV RSI, RBX 3"
 Post  "RBX = [RSI_0,8]_0 ; RDI = b32(RDI_0) ; RSI = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001970"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = b32(RDI_0) ; RSI = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001970: MOV RDX, R12 3"
 Post  "RBX = [RSI_0,8]_0 ; RDX = 0x100003b04 ; RDI = b32(RDI_0) ; RSI = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001973"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDX = 0x100003b04 ; RDI = b32(RDI_0) ; RSI = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001973: ExternalCall fun__getopt 5"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__getopt {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001978"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001978: CMP EAX, 97 3"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000197b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000197b: JLE 4294973865 2"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 7 ##
#####################################
*)

htriple "ht_100001985"
 Separations "((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (RSI_0,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (RSP_0,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ([RSI_0,8]_0,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (0x100004028,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (0x100004030,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (0x100008180,4); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (0x100008184,4); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP (0x1000081f0,8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 56),8); ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = (b32(bot(fun__getopt)) +32 0xffffff9e) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001985: MOVSXD RAX, DWORD PTR [R13 + RAX * 4] 5"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000198a"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000198a: ADD RAX, R13 3"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000198d"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000198d: JMP RAX 2"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 8 ##
#####################################
*)

htriple "ht_10000198f"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000198f: LEA RDI, [RIP + 8574] 7"
 Post  "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001996"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001996: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000199b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "10000199b: LEA RDI, [RIP + 8574] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b20 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019a2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b20 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019a2: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019a7: JMP 4294973802 2"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000018f4, blockId == 9 ##
#####################################
*)

htriple "ht_1000019e1"
 Separations "(0x100004028,8) SEP (bot(fun__rindex),1); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([RSI_0,8]_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ([0x100004030,8]_0,4); (0x100004028,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8); (0x100004028,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019e1: MOV RAX, QWORD PTR [RIP + 9792] 7"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019e8"
 Separations "([0x100004028,8]_0,8) SEP (RSI_0,8); ([0x100004028,8]_0,8) SEP (RSP_0,8); ([0x100004028,8]_0,8) SEP ([RSI_0,8]_0,8); ([0x100004028,8]_0,8) SEP (0x100004028,8); ([0x100004028,8]_0,8) SEP (0x100004030,8); ([0x100004028,8]_0,8) SEP (0x100008180,4); ([0x100004028,8]_0,8) SEP (0x100008184,4); ([0x100004028,8]_0,8) SEP (0x1000081f0,8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019e8: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019eb: ExternalCall fun_0x100002630 5"
 Post  "RAX = bot(fun_0x100002630) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x100002630 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019f0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100002630) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019f0: JMP 4294973802 5"
 Post  "RAX = bot(fun_0x100002630) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 10 ##
######################################
*)

htriple "ht_100001a12"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a12: LEA RDI, [RIP + 8443] 7"
 Post  "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a19"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a19: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a1e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a1e: LEA RDI, [RIP + 8503] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b5c ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a25"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b5c ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a25: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a2a: JMP 4294973802 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 11 ##
######################################
*)

htriple "ht_100001a2f"
 Separations "(0x100004028,8) SEP (bot(fun__rindex),1); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([RSI_0,8]_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ([0x100004030,8]_0,4); (0x100004028,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8); (0x100004028,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a2f: MOV RAX, QWORD PTR [RIP + 9714] 7"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a36"
 Separations "([0x100004028,8]_0,8) SEP (RSI_0,8); ([0x100004028,8]_0,8) SEP (RSP_0,8); ([0x100004028,8]_0,8) SEP ([RSI_0,8]_0,8); ([0x100004028,8]_0,8) SEP (0x100004028,8); ([0x100004028,8]_0,8) SEP (0x100004030,8); ([0x100004028,8]_0,8) SEP (0x100008180,4); ([0x100004028,8]_0,8) SEP (0x100008184,4); ([0x100004028,8]_0,8) SEP (0x1000081f0,8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a36: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a39"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a39: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a3e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a3e: JMP 4294973802 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 12 ##
######################################
*)

htriple "ht_100001a43"
 Separations "(0x100004028,8) SEP (bot(fun__rindex),1); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([RSI_0,8]_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ([0x100004030,8]_0,4); (0x100004028,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8); (0x100004028,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a43: MOV RAX, QWORD PTR [RIP + 9694] 7"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a4a"
 Separations "([0x100004028,8]_0,8) SEP (RSI_0,8); ([0x100004028,8]_0,8) SEP (RSP_0,8); ([0x100004028,8]_0,8) SEP ([RSI_0,8]_0,8); ([0x100004028,8]_0,8) SEP (0x100004028,8); ([0x100004028,8]_0,8) SEP (0x100004030,8); ([0x100004028,8]_0,8) SEP (0x100008180,4); ([0x100004028,8]_0,8) SEP (0x100008184,4); ([0x100004028,8]_0,8) SEP (0x1000081f0,8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a4a: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a4d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a4d: LEA RSI, [RBP - 48] 4"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a51"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a51: XOR EDX, EDX 2"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RDX = 0 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a53"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RDX = 0 ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a53: ExternalCall fun__strtoll 5"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__strtoll {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a58"
 Separations "(0x1000081f0,8) SEP (bot(fun__rindex),1); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([RSI_0,8]_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ([0x100004030,8]_0,4); (0x1000081f0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8); (0x1000081f0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a58: MOV QWORD PTR [RIP + 26513], RAX 7"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a5f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a5f: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a62"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a62: JS 4294974373 6"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 13 ##
######################################
*)

htriple "ht_100001a9a"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a9a: LEA RDI, [RIP + 8307] 7"
 Post  "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001aa1"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001aa1: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001aa6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001aa6: LEA RDI, [RIP + 8337] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b3e ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001aad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b3e ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001aad: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ab2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ab2: JMP 4294973802 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 14 ##
######################################
*)

htriple "ht_100001ab7"
 Separations "(0x100004028,8) SEP (bot(fun__rindex),1); (0x100004028,8) SEP (RSI_0,8); (0x100004028,8) SEP (RSP_0,8); (0x100004028,8) SEP ([RSI_0,8]_0,8); (0x100004028,8) SEP ([0x100004028,8]_0,8); (0x100004028,8) SEP ([0x100004030,8]_0,4); (0x100004028,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100004028,8) SEP ((RSP_0 -64 8),8); (0x100004028,8) SEP ((RSP_0 -64 16),8); (0x100004028,8) SEP ((RSP_0 -64 24),8); (0x100004028,8) SEP ((RSP_0 -64 32),8); (0x100004028,8) SEP ((RSP_0 -64 40),8); (0x100004028,8) SEP ((RSP_0 -64 48),8); (0x100004028,8) SEP ((RSP_0 -64 56),8); (0x100004028,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ab7: MOV RAX, QWORD PTR [RIP + 9578] 7"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001abe"
 Separations "([0x100004028,8]_0,8) SEP (RSI_0,8); ([0x100004028,8]_0,8) SEP (RSP_0,8); ([0x100004028,8]_0,8) SEP ([RSI_0,8]_0,8); ([0x100004028,8]_0,8) SEP (0x100004028,8); ([0x100004028,8]_0,8) SEP (0x100004030,8); ([0x100004028,8]_0,8) SEP (0x100008180,4); ([0x100004028,8]_0,8) SEP (0x100008184,4); ([0x100004028,8]_0,8) SEP (0x1000081f0,8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x100004028,8]_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001abe: MOV R14, QWORD PTR [RAX] 3"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ac1"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ac1: MOV RDI, R14 3"
 Post  "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ac4"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x100004028,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ac4: ExternalCall fun__atoi 5"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__atoi {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ac9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ac9: LEA RCX, [RIP + 26292] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ad0"
 Separations "(0x100008184,4) SEP (bot(fun__rindex),1); (0x100008184,4) SEP (RSI_0,8); (0x100008184,4) SEP (RSP_0,8); (0x100008184,4) SEP ([RSI_0,8]_0,8); (0x100008184,4) SEP ([0x100004028,8]_0,8); (0x100008184,4) SEP ([0x100004030,8]_0,4); (0x100008184,4) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100008184,4) SEP ((RSP_0 -64 8),8); (0x100008184,4) SEP ((RSP_0 -64 16),8); (0x100008184,4) SEP ((RSP_0 -64 24),8); (0x100008184,4) SEP ((RSP_0 -64 32),8); (0x100008184,4) SEP ((RSP_0 -64 40),8); (0x100008184,4) SEP ((RSP_0 -64 48),8); (0x100008184,4) SEP ((RSP_0 -64 56),8); (0x100008184,4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ad0: MOV DWORD PTR [RCX], EAX 2"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ad2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ad2: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ad4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ad4: JNS 4294973802 6"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 15 ##
######################################
*)

htriple "ht_100001adf"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001adf: LEA RDI, [RIP + 8238] 7"
 Post  "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ae6"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ae6: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001aeb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001aeb: LEA RDI, [RIP + 8350] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b90 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001af2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b90 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001af2: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001af7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001af7: JMP 4294973802 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 16 ##
######################################
*)

htriple "ht_100001afc"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001afc: LEA RAX, [RIP + 26237] 7"
 Post  "RAX = 0x100008180 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b03"
 Separations "(0x100008180,4) SEP (bot(fun__rindex),1); (0x100008180,4) SEP (RSI_0,8); (0x100008180,4) SEP (RSP_0,8); (0x100008180,4) SEP ([RSI_0,8]_0,8); (0x100008180,4) SEP ([0x100004028,8]_0,8); (0x100008180,4) SEP ([0x100004030,8]_0,4); (0x100008180,4) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100008180,4) SEP ((RSP_0 -64 8),8); (0x100008180,4) SEP ((RSP_0 -64 16),8); (0x100008180,4) SEP ((RSP_0 -64 24),8); (0x100008180,4) SEP ((RSP_0 -64 32),8); (0x100008180,4) SEP ((RSP_0 -64 40),8); (0x100008180,4) SEP ((RSP_0 -64 48),8); (0x100008180,4) SEP ((RSP_0 -64 56),8); (0x100008180,4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = 0x100008180 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b03: MOV DWORD PTR [RAX], 0 6"
 Post  "RAX = 0x100008180 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b09"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x100008180 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b09: JMP 4294973802 5"
 Post  "RAX = 0x100008180 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008180,4] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 17 ##
######################################
*)

htriple "ht_1000019b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019b2: CMP EAX, 67 3"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019b5: JNE 4294974252 6"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 18 ##
######################################
*)

htriple "ht_100001b57"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b57: LEA RAX, [RIP + 26242] 7"
 Post  "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b5e: CMP QWORD PTR [RAX], 0 4"
 Post  "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b62"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b62: JNE 4294974332 2"
 Post  "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 19 ##
######################################
*)

htriple "ht_1000019bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019bb: LEA RDI, [RIP + 8436] 7"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ab6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ab6 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019c2: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019c7: LEA RDI, [RIP + 8436] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ac2 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019ce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003ac2 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019ce: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019d3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019d3: LEA RDI, [RIP + 8467] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003aed ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019da"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003aed ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019da: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000019df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "1000019df: JMP 4294973802 2"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 20 ##
######################################
*)

htriple "ht_100001b2c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b2c: CMP EAX, 63 3"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b2f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b2f: JNE 4294973802 6"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 21 ##
######################################
*)

htriple "ht_100001a68"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 56),8) SEP (RSI_0,8); ((RSP_0 -64 56),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 56),8) SEP (0x100004028,8); ((RSP_0 -64 56),8) SEP (0x100004030,8); ((RSP_0 -64 56),8) SEP (0x100008180,4); ((RSP_0 -64 56),8) SEP (0x100008184,4); ((RSP_0 -64 56),8) SEP (0x1000081f0,8); ((RSP_0 -64 56),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a68: MOV RCX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RCX = bot(fun__rindex) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a6c"
 Separations "(bot(fun__rindex),1) SEP (RSI_0,8); (bot(fun__rindex),1) SEP (RSP_0,8); (bot(fun__rindex),1) SEP ([RSI_0,8]_0,8); (bot(fun__rindex),1) SEP (0x100004028,8); (bot(fun__rindex),1) SEP (0x100004030,8); (bot(fun__rindex),1) SEP (0x100008180,4); (bot(fun__rindex),1) SEP (0x100008184,4); (bot(fun__rindex),1) SEP (0x1000081f0,8); (bot(fun__rindex),1) SEP ((RSP_0 -64 8),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 16),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 24),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 32),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 40),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 48),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 56),8); (bot(fun__rindex),1) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RCX = bot(fun__rindex) ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a6c: MOVSX ECX, BYTE PTR [RCX] 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a6f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a6f: CMP ECX, 106 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a72"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a72: JG 4294974222 6"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 22 ##
######################################
*)

htriple "ht_100001ba5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ba5: ExternalCall fun_0x100003322 5"
 Post  "RAX = bot(fun_0x100003322) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x100003322 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 23 ##
######################################
*)

htriple "ht_100001a78"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a78: CMP ECX, 98 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a7b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a7b: JE 4294974263 6"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 24 ##
######################################
*)

htriple "ht_100001b0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b0e: CMP ECX, 107 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b11"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b11: JE 4294974279 2"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 25 ##
######################################
*)

htriple "ht_100001a81"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a81: CMP ECX, 103 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a84: JNE 4294973802 6"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 26 ##
######################################
*)

htriple "ht_100001b37"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b37: SHL RAX, 9 4"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b3b"
 Separations "(0x1000081f0,8) SEP (bot(fun__rindex),1); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([RSI_0,8]_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ([0x100004030,8]_0,4); (0x1000081f0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8); (0x1000081f0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 512) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b3b: MOV QWORD PTR [RIP + 26286], RAX 7"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b42"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 512) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b42: JMP 4294973802 5"
 Post  "RAX = (bot(fun__strtoll) *64 512) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 512) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 27 ##
######################################
*)

htriple "ht_100001a8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a8a: SHL RAX, 30 4"
 Post  "RAX = (bot(fun__strtoll) *64 0x40000000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a8e"
 Separations "(0x1000081f0,8) SEP (bot(fun__rindex),1); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([RSI_0,8]_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ([0x100004030,8]_0,4); (0x1000081f0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8); (0x1000081f0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x40000000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a8e: MOV QWORD PTR [RIP + 26459], RAX 7"
 Post  "RAX = (bot(fun__strtoll) *64 0x40000000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x40000000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001a95"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x40000000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x40000000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001a95: JMP 4294973802 5"
 Post  "RAX = (bot(fun__strtoll) *64 0x40000000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x40000000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 28 ##
######################################
*)

htriple "ht_100001ada"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ada: JMP 4294974378 5"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001baa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001baa: LEA RSI, [RIP + 8138] 7"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001bb1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001bb1: MOV EDI, 1 5"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001bb6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001bb6: MOV RDX, R14 3"
 Post  "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001bb9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__atoi) ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001bb9: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001bbb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [RSI_0,8]_0 ; RCX = 0x100008184 ; RDI = 1 ; RSI = 0x100003b7b ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001bbb: ExternalCall fun__errx 5"
 Post  "RAX = bot(fun__errx) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x100008184,4] = b32(bot(fun__atoi)) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__errx {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[0x100008180,4];[0x100008184,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 29 ##
######################################
*)

htriple "ht_100001b13"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b13: CMP ECX, 109 3"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b16"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b16: JNE 4294973802 6"
 Post  "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 30 ##
######################################
*)

htriple "ht_100001b47"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b47: SHL RAX, 10 4"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b4b"
 Separations "(0x1000081f0,8) SEP (bot(fun__rindex),1); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([RSI_0,8]_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ([0x100004030,8]_0,4); (0x1000081f0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8); (0x1000081f0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 1024) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b4b: MOV QWORD PTR [RIP + 26270], RAX 7"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b52"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 1024) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b52: JMP 4294973802 5"
 Post  "RAX = (bot(fun__strtoll) *64 1024) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 1024) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 31 ##
######################################
*)

htriple "ht_100001b1c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strtoll) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b1c: SHL RAX, 20 4"
 Post  "RAX = (bot(fun__strtoll) *64 0x100000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b20"
 Separations "(0x1000081f0,8) SEP (bot(fun__rindex),1); (0x1000081f0,8) SEP (RSI_0,8); (0x1000081f0,8) SEP (RSP_0,8); (0x1000081f0,8) SEP ([RSI_0,8]_0,8); (0x1000081f0,8) SEP ([0x100004028,8]_0,8); (0x1000081f0,8) SEP ([0x100004030,8]_0,4); (0x1000081f0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x1000081f0,8) SEP ((RSP_0 -64 8),8); (0x1000081f0,8) SEP ((RSP_0 -64 16),8); (0x1000081f0,8) SEP ((RSP_0 -64 24),8); (0x1000081f0,8) SEP ((RSP_0 -64 32),8); (0x1000081f0,8) SEP ((RSP_0 -64 40),8); (0x1000081f0,8) SEP ((RSP_0 -64 48),8); (0x1000081f0,8) SEP ((RSP_0 -64 56),8); (0x1000081f0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x100000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = bot(fun__strtoll) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b20: MOV QWORD PTR [RIP + 26313], RAX 7"
 Post  "RAX = (bot(fun__strtoll) *64 0x100000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x100000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b27"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strtoll) *64 0x100000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x100000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b27: JMP 4294973802 5"
 Post  "RAX = (bot(fun__strtoll) *64 0x100000) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [0x1000081f0,8] = (bot(fun__strtoll) *64 0x100000) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 32 ##
######################################
*)

htriple "ht_100001b35"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b35: JMP 4294974368 2"
 Post  "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001ba0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getopt) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001ba0: ExternalCall fun_0x100001c1c 5"
 Post  "RAX = bot(fun_0x100001c1c) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x100001c1c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 33 ##
######################################
*)

htriple "ht_100001b64"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b64: LEA RDI, [RIP + 8105] 7"
 Post  "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b6b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x1000081e0 ; RBX = [RSI_0,8]_0 ; RDI = 0x100003b14 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b6b: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b70"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b70: LEA RDI, [RIP + 8298] 7"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003be1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b77"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RDI = 0x100003be1 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b77: ExternalCall fun_0x10000275d 5"
 Post  "RAX = bot(fun_0x10000275d) ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000275d {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004028,8];[0x100004030,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 64),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000018f4, blockId == 34 ##
######################################
*)

htriple "ht_100001b7c"
 Separations "(0x100004030,8) SEP (bot(fun__rindex),1); (0x100004030,8) SEP (RSI_0,8); (0x100004030,8) SEP (RSP_0,8); (0x100004030,8) SEP ([RSI_0,8]_0,8); (0x100004030,8) SEP ([0x100004028,8]_0,8); (0x100004030,8) SEP ([0x100004030,8]_0,4); (0x100004030,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (0x100004030,8) SEP ((RSP_0 -64 8),8); (0x100004030,8) SEP ((RSP_0 -64 16),8); (0x100004030,8) SEP ((RSP_0 -64 24),8); (0x100004030,8) SEP ((RSP_0 -64 32),8); (0x100004030,8) SEP ((RSP_0 -64 40),8); (0x100004030,8) SEP ((RSP_0 -64 48),8); (0x100004030,8) SEP ((RSP_0 -64 56),8); (0x100004030,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b7c: MOV RAX, QWORD PTR [RIP + 9389] 7"
 Post  "RAX = [0x100004030,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b83"
 Separations "([0x100004030,8]_0,4) SEP (RSI_0,8); ([0x100004030,8]_0,4) SEP (RSP_0,8); ([0x100004030,8]_0,4) SEP ([RSI_0,8]_0,8); ([0x100004030,8]_0,4) SEP (0x100004028,8); ([0x100004030,8]_0,4) SEP (0x100004030,8); ([0x100004030,8]_0,4) SEP (0x100008180,4); ([0x100004030,8]_0,4) SEP (0x100008184,4); ([0x100004030,8]_0,4) SEP (0x1000081f0,8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 8),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 16),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 24),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 32),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 40),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 48),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 56),8); ([0x100004030,8]_0,4) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RAX = [0x100004030,8]_0 ; RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b83: MOVSXD RAX, DWORD PTR [RAX] 3"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b86"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b86: SHL RAX, 3 4"
 Post  "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b8a"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 64),8) SEP (RSI_0,8); ((RSP_0 -64 64),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 64),8) SEP (0x100004028,8); ((RSP_0 -64 64),8) SEP (0x100004030,8); ((RSP_0 -64 64),8) SEP (0x100008180,4); ((RSP_0 -64 64),8) SEP (0x100008184,4); ((RSP_0 -64 64),8) SEP (0x1000081f0,8); ((RSP_0 -64 64),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b8a: MOV RCX, QWORD PTR [RBP - 56] 4"
 Post  "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b8e"
 Separations "(RSI_0,8) SEP (bot(fun__rindex),1); (RSI_0,8) SEP (RSP_0,8); (RSI_0,8) SEP ([RSI_0,8]_0,8); (RSI_0,8) SEP ([0x100004028,8]_0,8); (RSI_0,8) SEP ([0x100004030,8]_0,4); (RSI_0,8) SEP (0x100004028,8); (RSI_0,8) SEP (0x100004030,8); (RSI_0,8) SEP (0x100008180,4); (RSI_0,8) SEP (0x100008184,4); (RSI_0,8) SEP (0x1000081f0,8); (RSI_0,8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4); (RSI_0,8) SEP ((RSP_0 -64 8),8); (RSI_0,8) SEP ((RSP_0 -64 16),8); (RSI_0,8) SEP ((RSP_0 -64 24),8); (RSI_0,8) SEP ((RSP_0 -64 32),8); (RSI_0,8) SEP ((RSP_0 -64 40),8); (RSI_0,8) SEP ((RSP_0 -64 48),8); (RSI_0,8) SEP ((RSP_0 -64 56),8); (RSI_0,8) SEP ((RSP_0 -64 64),8)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b8e: ADD QWORD PTR [RCX], RAX 3"
 Post  "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b91"
 Separations ""
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 72) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b91: ADD RSP, 24 4"
 Post  "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b95"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 40),8) SEP (RSI_0,8); ((RSP_0 -64 40),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 40),8) SEP (0x100004028,8); ((RSP_0 -64 40),8) SEP (0x100004030,8); ((RSP_0 -64 40),8) SEP (0x100008180,4); ((RSP_0 -64 40),8) SEP (0x100008184,4); ((RSP_0 -64 40),8) SEP (0x1000081f0,8); ((RSP_0 -64 40),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = [RSI_0,8]_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b95: POP RBX 1"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b96"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 32),8) SEP (RSI_0,8); ((RSP_0 -64 32),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 32),8) SEP (0x100004028,8); ((RSP_0 -64 32),8) SEP (0x100004030,8); ((RSP_0 -64 32),8) SEP (0x100008180,4); ((RSP_0 -64 32),8) SEP (0x100008184,4); ((RSP_0 -64 32),8) SEP (0x1000081f0,8); ((RSP_0 -64 32),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = 0x100003b04 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b96: POP R12 2"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b98"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 24),8) SEP (RSI_0,8); ((RSP_0 -64 24),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 24),8) SEP (0x100004028,8); ((RSP_0 -64 24),8) SEP (0x100004030,8); ((RSP_0 -64 24),8) SEP (0x100008180,4); ((RSP_0 -64 24),8) SEP (0x100008184,4); ((RSP_0 -64 24),8) SEP (0x1000081f0,8); ((RSP_0 -64 24),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = 0x100001bc0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b98: POP R13 2"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b9a"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 16),8) SEP (RSI_0,8); ((RSP_0 -64 16),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 16),8) SEP (0x100004028,8); ((RSP_0 -64 16),8) SEP (0x100004030,8); ((RSP_0 -64 16),8) SEP (0x100008180,4); ((RSP_0 -64 16),8) SEP (0x100008184,4); ((RSP_0 -64 16),8) SEP (0x1000081f0,8); ((RSP_0 -64 16),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b9a: POP R14 2"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b9c"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun__rindex),1); ((RSP_0 -64 8),8) SEP (RSI_0,8); ((RSP_0 -64 8),8) SEP ([RSI_0,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100004028,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x100004030,8]_0,4); ((RSP_0 -64 8),8) SEP (0x100004028,8); ((RSP_0 -64 8),8) SEP (0x100004030,8); ((RSP_0 -64 8),8) SEP (0x100008180,4); ((RSP_0 -64 8),8) SEP (0x100008184,4); ((RSP_0 -64 8),8) SEP (0x1000081f0,8); ((RSP_0 -64 8),8) SEP ((0x100001bc0 +64 ((b32(bot(fun__getopt)) +32 0xffffff9e) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = b32(RDI_0) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b9c: POP R15 2"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b9e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b9e: POP RBP 1"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001b9f"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RCX = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
 Instruction "100001b9f: RET  1"
 Post  "RBX = RBX_0 ; RCX = RSI_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004028,8] = [0x100004028,8]_0 ; [0x100004030,8] = [0x100004030,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = bot(fun__rindex) ; [(RSP_0 -64 64),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
