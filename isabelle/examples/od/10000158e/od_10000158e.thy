theory od_10000158e
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 10000158e, blockId == 0 ##
#####################################
*)

htriple "ht_10000158e"
 Separations "((RSP_0 -64 8),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004020,8); ((RSP_0 -64 8),8) SEP (0x1000081c0,8); ((RSP_0 -64 8),8) SEP (0x1000081c8,4); ((RSP_0 -64 8),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000158e: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000158f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000158f: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001592"
 Separations "((RSP_0 -64 16),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004020,8); ((RSP_0 -64 16),8) SEP (0x1000081c0,8); ((RSP_0 -64 16),8) SEP (0x1000081c8,4); ((RSP_0 -64 16),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001592: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001594"
 Separations "((RSP_0 -64 24),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004020,8); ((RSP_0 -64 24),8) SEP (0x1000081c0,8); ((RSP_0 -64 24),8) SEP (0x1000081c8,4); ((RSP_0 -64 24),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001594: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001596"
 Separations "((RSP_0 -64 32),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004020,8); ((RSP_0 -64 32),8) SEP (0x1000081c0,8); ((RSP_0 -64 32),8) SEP (0x1000081c8,4); ((RSP_0 -64 32),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001596: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001598"
 Separations "((RSP_0 -64 40),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004020,8); ((RSP_0 -64 40),8) SEP (0x1000081c0,8); ((RSP_0 -64 40),8) SEP (0x1000081c8,4); ((RSP_0 -64 40),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "100001598: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000159a"
 Separations "((RSP_0 -64 48),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 48),8) SEP (0x100004020,8); ((RSP_0 -64 48),8) SEP (0x1000081c0,8); ((RSP_0 -64 48),8) SEP (0x1000081c8,4); ((RSP_0 -64 48),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000159a: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000159b"
 Separations "((RSP_0 -64 56),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 56),8) SEP (0x100004020,8); ((RSP_0 -64 56),8) SEP (0x1000081c0,8); ((RSP_0 -64 56),8) SEP (0x1000081c8,4); ((RSP_0 -64 56),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0"
 Instruction "10000159b: PUSH RAX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000159c"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000159c: TEST RDI, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000159f"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000159f: JE 4294972860 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 1 ##
#####################################
*)

htriple "ht_1000015a1"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015a1: MOV QWORD PTR [RIP + 27672], RDI 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = RDI_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 2 ##
#####################################
*)

htriple "ht_1000015bc"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015bc: MOV RAX, QWORD PTR [RIP + 27645] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015c3"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081c0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015c3: LEA RBX, [RIP + 27686] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ca: LEA R12, [RIP + 9431] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015d1"
 Separations "(0x100004020,8) SEP (RSP_0,8); (0x100004020,8) SEP ([0x100004020,8]_0,8); (0x100004020,8) SEP ([0x1000081c0,8]_0,8); (0x100004020,8) SEP ((RSP_0 -64 8),8); (0x100004020,8) SEP ((RSP_0 -64 16),8); (0x100004020,8) SEP ((RSP_0 -64 24),8); (0x100004020,8) SEP ((RSP_0 -64 32),8); (0x100004020,8) SEP ((RSP_0 -64 40),8); (0x100004020,8) SEP ((RSP_0 -64 48),8); (0x100004020,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015d1: MOV R13, QWORD PTR [RIP + 10824] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015d8: LEA R15, [RIP + 9415] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = R14_0 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015df"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = R14_0 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015df: LEA R14, [RIP + 27650] 7"
 Post  "RAX = [0x1000081c0,8]_0 ; RBX = 0x1000081f0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x100004020,8]_0,8] = [[0x100004020,8]_0,8]_0 ; [[0x1000081c0,8]_0,8] = [[0x1000081c0,8]_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c0,8] = [0x1000081c0,8]_0 ; [0x1000081c8,4] = [0x1000081c8,4]_0 ; [0x1000081e8,4] = [0x1000081e8,4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 3 ##
#####################################
*)

htriple "ht_1000015ee"
 Separations "([0x100004020,8]_0,8) SEP (RSP_0,8); ([0x100004020,8]_0,8) SEP ([0x1000081c0,8]_0,8); ([0x100004020,8]_0,8) SEP (0x100004020,8); ([0x100004020,8]_0,8) SEP (0x1000081c0,8); ([0x100004020,8]_0,8) SEP (0x1000081c8,4); ([0x100004020,8]_0,8) SEP (0x1000081e8,4); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x100004020,8]_0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ee: MOV RDX, QWORD PTR [R13] 4"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015f2"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015f2: MOV RSI, R15 3"
 Post  "RBX = 0x1000081f0 ; RSI = 0x100003aa6 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015f5"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSI = 0x100003aa6 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015f5: ExternalCall fun__freopen 5"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun__freopen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x1000081c0,8];[0x1000081c8,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015fa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015fa: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015fd: JE 4294973030 2"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 4 ##
#####################################
*)

htriple "ht_100001620"
 Separations "(0x1000081c8,4) SEP (RSP_0,8); (0x1000081c8,4) SEP ([0x100004020,8]_0,8); (0x1000081c8,4) SEP ([0x1000081c0,8]_0,8); (0x1000081c8,4) SEP ((RSP_0 -64 8),8); (0x1000081c8,4) SEP ((RSP_0 -64 16),8); (0x1000081c8,4) SEP ((RSP_0 -64 24),8); (0x1000081c8,4) SEP ((RSP_0 -64 32),8); (0x1000081c8,4) SEP ((RSP_0 -64 40),8); (0x1000081c8,4) SEP ((RSP_0 -64 48),8); (0x1000081c8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001620: MOV EAX, DWORD PTR [RIP + 27554] 6"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001626"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001626: LEA ECX, [RAX + 1] 3"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001629"
 Separations "(0x1000081c8,4) SEP (RSP_0,8); (0x1000081c8,4) SEP ([0x100004020,8]_0,8); (0x1000081c8,4) SEP ([0x1000081c0,8]_0,8); (0x1000081c8,4) SEP ((RSP_0 -64 8),8); (0x1000081c8,4) SEP ((RSP_0 -64 16),8); (0x1000081c8,4) SEP ((RSP_0 -64 24),8); (0x1000081c8,4) SEP ((RSP_0 -64 32),8); (0x1000081c8,4) SEP ((RSP_0 -64 40),8); (0x1000081c8,4) SEP ((RSP_0 -64 48),8); (0x1000081c8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001629: MOV DWORD PTR [RIP + 27545], ECX 6"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000162f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000162f: TEST EAX, EAX 2"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001631"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001631: JNE 4294973084 2"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 5 ##
#####################################
*)

htriple "ht_1000015ff"
 Separations "(0x1000081c8,4) SEP (RSP_0,8); (0x1000081c8,4) SEP ([0x100004020,8]_0,8); (0x1000081c8,4) SEP ([0x1000081c0,8]_0,8); (0x1000081c8,4) SEP ((RSP_0 -64 8),8); (0x1000081c8,4) SEP ((RSP_0 -64 16),8); (0x1000081c8,4) SEP ((RSP_0 -64 24),8); (0x1000081c8,4) SEP ((RSP_0 -64 32),8); (0x1000081c8,4) SEP ((RSP_0 -64 40),8); (0x1000081c8,4) SEP ((RSP_0 -64 48),8); (0x1000081c8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ff: MOV DWORD PTR [RIP + 27583], 1 10"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001609"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001609: CMP QWORD PTR [RBX], 0 4"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000160d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000160d: JE 4294972995 2"
 Post  "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 6 ##
#####################################
*)

htriple "ht_100001666"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001666: MOV RAX, QWORD PTR [RIP + 27475] 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000166d"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000166d: MOV RSI, QWORD PTR [RAX] 3"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001670"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001670: LEA RDI, [RIP + 9224] 7"
 Post  "RBX = 0x1000081f0 ; RDI = 0x100003a7f ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001677"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RDI = 0x100003a7f ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001677: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0x1000081f0 ; RDI = 0x100003a7f ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001679"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0x1000081f0 ; RDI = 0x100003a7f ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001679: ExternalCall fun__warn 5"
 Post  "RAX = bot(fun__warn) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun__warn {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[0x1000081c0,8];[0x1000081c8,4];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000167e"
 Separations "(0x1000081e8,4) SEP (RSP_0,8); (0x1000081e8,4) SEP ([0x100004020,8]_0,8); (0x1000081e8,4) SEP ([0x1000081c0,8]_0,8); (0x1000081e8,4) SEP ((RSP_0 -64 8),8); (0x1000081e8,4) SEP ((RSP_0 -64 16),8); (0x1000081e8,4) SEP ((RSP_0 -64 24),8); (0x1000081e8,4) SEP ((RSP_0 -64 32),8); (0x1000081e8,4) SEP ((RSP_0 -64 40),8); (0x1000081e8,4) SEP ((RSP_0 -64 48),8); (0x1000081e8,4) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000167e: MOV DWORD PTR [R14], 1 7"
 Post  "RAX = bot(fun__warn) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001685"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__warn) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001685: MOV RAX, QWORD PTR [RIP + 27444] 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000168c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000168c: ADD RAX, 8 4"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001690"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001690: MOV QWORD PTR [RIP + 27433], RAX 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001697"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001697: JMP 4294972902 5"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081e8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 7 ##
#####################################
*)

htriple "ht_10000160f"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__freopen) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000160f: MOV RAX, QWORD PTR [RIP + 27562] 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001616"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001616: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001619"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001619: MOV ESI, 1 5"
 Post  "RBX = 0x1000081f0 ; RSI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000161e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000161e: JMP 4294972990 2"
 Post  "RBX = 0x1000081f0 ; RSI = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [0x1000081c8,4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 8 ##
#####################################
*)

htriple "ht_100001643"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001643: MOV RAX, QWORD PTR [RIP + 27510] 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000164a"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000164a: CMP QWORD PTR [RAX], 0 4"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000164e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000164e: JE 4294973019 2"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 10000158e, blockId == 9 ##
#####################################
*)

htriple "ht_100001633"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001633: XOR ESI, ESI 2"
 Post  "RBX = 0x1000081f0 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001635"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001635: CMP QWORD PTR [RBX], 0 4"
 Post  "RBX = 0x1000081f0 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001639"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001639: MOV RDI, R12 3"
 Post  "RBX = 0x1000081f0 ; RDI = 0x100003aa8 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000163c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RDI = 0x100003aa8 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000163c: JE 4294972995 2"
 Post  "RBX = 0x1000081f0 ; RDI = 0x100003aa8 ; RSI = 0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 10 ##
######################################
*)

htriple "ht_10000169c"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000169c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000169e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000169e: JMP 4294972845 5"
 Post  "RAX = 0 ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 11 ##
######################################
*)

htriple "ht_10000163e"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000163e: ExternalCall fun_0x10000172e 5"
 Post  "RAX = bot(fun_0x10000172e) ; RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 FunctionConstraints "PRESERVES fun_0x10000172e {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x100004020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 12 ##
######################################
*)

htriple "ht_100001650"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001650: ADD RAX, 8 4"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100001654"
 Separations "(0x1000081c0,8) SEP (RSP_0,8); (0x1000081c0,8) SEP ([0x100004020,8]_0,8); (0x1000081c0,8) SEP ([0x1000081c0,8]_0,8); (0x1000081c0,8) SEP ((RSP_0 -64 8),8); (0x1000081c0,8) SEP ((RSP_0 -64 16),8); (0x1000081c0,8) SEP ((RSP_0 -64 24),8); (0x1000081c0,8) SEP ((RSP_0 -64 32),8); (0x1000081c0,8) SEP ((RSP_0 -64 40),8); (0x1000081c0,8) SEP ((RSP_0 -64 48),8); (0x1000081c0,8) SEP ((RSP_0 -64 56),8)"
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001654: MOV QWORD PTR [RIP + 27493], RAX 7"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 13 ##
######################################
*)

htriple "ht_10000165b"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000165b: CMP QWORD PTR [RBX], 0 4"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000165f"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "10000165f: JNE 4294972902 2"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 14 ##
######################################
*)

htriple "ht_1000015e6"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 56),8)"
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015e6: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015e9"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015e9: TEST RDI, RDI 3"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015ec"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ec: JE 4294972960 2"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 15 ##
######################################
*)

htriple "ht_100001661"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "100001661: JMP 4294972840 5"
 Post  "RBX = 0x1000081f0 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; R15 = 0x100003aa6 ; R14 = 0x1000081e8 ; R13 = [0x100004020,8]_0 ; R12 = 0x100003aa8 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 16 ##
######################################
*)

htriple "ht_1000015a8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015a8: MOV EAX, 1 5"
 Post  "RAX = 1 ; RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 10000158e, blockId == 17 ##
######################################
*)

htriple "ht_1000015ad"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 56) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ad: ADD RSP, 8 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015b1"
 Separations "((RSP_0 -64 40),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 40),8) SEP (0x100004020,8); ((RSP_0 -64 40),8) SEP (0x1000081c0,8); ((RSP_0 -64 40),8) SEP (0x1000081c8,4); ((RSP_0 -64 40),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015b1: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015b2"
 Separations "((RSP_0 -64 32),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 32),8) SEP (0x100004020,8); ((RSP_0 -64 32),8) SEP (0x1000081c0,8); ((RSP_0 -64 32),8) SEP (0x1000081c8,4); ((RSP_0 -64 32),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015b2: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015b4"
 Separations "((RSP_0 -64 24),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 24),8) SEP (0x100004020,8); ((RSP_0 -64 24),8) SEP (0x1000081c0,8); ((RSP_0 -64 24),8) SEP (0x1000081c8,4); ((RSP_0 -64 24),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015b4: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015b6"
 Separations "((RSP_0 -64 16),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 16),8) SEP (0x100004020,8); ((RSP_0 -64 16),8) SEP (0x1000081c0,8); ((RSP_0 -64 16),8) SEP (0x1000081c8,4); ((RSP_0 -64 16),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015b6: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015b8"
 Separations "((RSP_0 -64 8),8) SEP ([0x100004020,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x1000081c0,8]_0,8); ((RSP_0 -64 8),8) SEP (0x100004020,8); ((RSP_0 -64 8),8) SEP (0x1000081c0,8); ((RSP_0 -64 8),8) SEP (0x1000081c8,4); ((RSP_0 -64 8),8) SEP (0x1000081e8,4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015b8: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015ba"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015ba: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000015bb"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
 Instruction "1000015bb: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x100004020,8] = [0x100004020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = RAX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
