/usr/bin/tar:
(__TEXT,__text) section
100004324:	push	rbp
100004325:	mov	rbp, rsp
100004328:	mov	rdx, rsi
10000432b:	xor	esi, esi
10000432d:	pop	rbp
10000432e:	jmp	0x100004333
100004333:	push	rbp
100004334:	mov	rbp, rsp
100004337:	push	r15
100004339:	push	r14
10000433b:	push	r12
10000433d:	push	rbx
10000433e:	mov	r12, rdx
100004341:	mov	r14d, esi
100004344:	mov	r15, rdi
100004347:	mov	rdi, qword ptr [rdi + 0x8]
10000434b:	movsxd	rsi, dword ptr [r15 + 0x10]
10000434f:	shl	rsi, 0x4
100004353:	add	rsi, 0x10
100004357:	call	0x10000a20a ## symbol stub for: _realloc
10000435c:	test	rax, rax
10000435f:	je	0x100004396
100004361:	mov	rbx, rax
100004364:	mov	rdi, r12
100004367:	call	0x10000a258 ## symbol stub for: _strdup
10000436c:	test	rax, rax
10000436f:	je	0x100004396
100004371:	mov	qword ptr [r15 + 0x8], rbx
100004375:	movsxd	rcx, dword ptr [r15 + 0x10]
100004379:	lea	edx, [rcx + 0x1]
10000437c:	shl	rcx, 0x4
100004380:	mov	dword ptr [rbx + rcx], r14d
100004384:	mov	qword ptr [rbx + rcx + 0x8], rax
100004389:	mov	dword ptr [r15 + 0x10], edx
10000438d:	pop	rbx
10000438e:	pop	r12
100004390:	pop	r14
100004392:	pop	r15
100004394:	pop	rbp
100004395:	ret
100004396:	lea	rdx, [rip + 0x6623] ## literal pool for: "No memory"
10000439d:	mov	edi, 0x1
1000043a2:	xor	esi, esi
1000043a4:	xor	eax, eax
1000043a6:	call	0x100009ac2
1000043ab:	push	rbp
1000043ac:	mov	rbp, rsp
1000043af:	mov	rdx, rsi
1000043b2:	mov	esi, 0x1
1000043b7:	pop	rbp
1000043b8:	jmp	0x100004333
1000043bd:	push	rbp
1000043be:	mov	rbp, rsp
1000043c1:	push	r15
1000043c3:	push	r14
1000043c5:	push	r13
1000043c7:	push	r12
1000043c9:	push	rbx
1000043ca:	push	rax
1000043cb:	mov	eax, dword ptr [rdi + 0x10]
1000043ce:	test	eax, eax
1000043d0:	jle	0x100004414
1000043d2:	mov	r14, rsi
1000043d5:	mov	r12, rdi
1000043d8:	xor	r13d, r13d
1000043db:	mov	ebx, 0x8
1000043e0:	xor	r15d, r15d
1000043e3:	mov	rcx, qword ptr [r12 + 0x8]
1000043e8:	cmp	dword ptr [rcx + rbx - 0x8], 0x0
1000043ed:	je	0x100004403
1000043ef:	mov	rsi, qword ptr [rcx + rbx]
1000043f3:	mov	rdi, r14
1000043f6:	call	0x10000a0a8 ## symbol stub for: _archive_read_support_filter_program
1000043fb:	inc	r15d
1000043fe:	mov	eax, dword ptr [r12 + 0x10]
100004403:	inc	r13
100004406:	movsxd	rcx, eax
100004409:	add	rbx, 0x10
10000440d:	cmp	r13, rcx
100004410:	jl	0x1000043e3
100004412:	jmp	0x100004417
100004414:	xor	r15d, r15d
100004417:	mov	eax, r15d
10000441a:	add	rsp, 0x8
10000441e:	pop	rbx
10000441f:	pop	r12
100004421:	pop	r13
100004423:	pop	r14
100004425:	pop	r15
100004427:	pop	rbp
100004428:	ret
100004429:	push	rbp
10000442a:	mov	rbp, rsp
10000442d:	push	r15
10000442f:	push	r14
100004431:	push	r13
100004433:	push	r12
100004435:	push	rbx
100004436:	push	rax
100004437:	cmp	dword ptr [rdi + 0x10], 0x0
10000443b:	jle	0x100004488
10000443d:	mov	r14, rdx
100004440:	mov	r15, rsi
100004443:	mov	r12, rdi
100004446:	mov	ebx, 0x8
10000444b:	xor	r13d, r13d
10000444e:	mov	rax, qword ptr [r12 + 0x8]
100004453:	cmp	dword ptr [rax + rbx - 0x8], 0x0
100004458:	mov	rsi, qword ptr [rax + rbx]
10000445c:	mov	rdi, r15
10000445f:	je	0x100004468
100004461:	call	0x10000a0d2 ## symbol stub for: _archive_write_add_filter_program
100004466:	jmp	0x10000446d
100004468:	call	0x10000a0cc ## symbol stub for: _archive_write_add_filter_by_name
10000446d:	cmp	eax, -0x15
100004470:	jle	0x10000448c
100004472:	inc	r13
100004475:	movsxd	rax, dword ptr [r12 + 0x10]
10000447a:	add	rbx, 0x10
10000447e:	cmp	r13, rax
100004481:	jl	0x10000444e
100004483:	mov	eax, r13d
100004486:	jmp	0x100004498
100004488:	xor	eax, eax
10000448a:	jmp	0x100004498
10000448c:	mov	rcx, qword ptr [r12 + 0x8]
100004491:	mov	rcx, qword ptr [rcx + rbx]
100004495:	mov	qword ptr [r14], rcx
100004498:	add	rsp, 0x8
10000449c:	pop	rbx
10000449d:	pop	r12
10000449f:	pop	r13
1000044a1:	pop	r14
1000044a3:	pop	r15
1000044a5:	pop	rbp
1000044a6:	ret
1000044a7:	push	rbp
1000044a8:	mov	rbp, rsp
1000044ab:	push	r14
1000044ad:	push	rbx
1000044ae:	mov	r14, rdi
1000044b1:	mov	rdi, rsi
1000044b4:	call	0x10000a258 ## symbol stub for: _strdup
1000044b9:	test	rax, rax
1000044bc:	je	0x1000044d1
1000044be:	mov	rbx, rax
1000044c1:	mov	rdi, qword ptr [r14]
1000044c4:	call	0x10000a1a4 ## symbol stub for: _free
1000044c9:	mov	qword ptr [r14], rbx
1000044cc:	pop	rbx
1000044cd:	pop	r14
1000044cf:	pop	rbp
1000044d0:	ret
1000044d1:	lea	rdx, [rip + 0x64e8] ## literal pool for: "No memory"
1000044d8:	mov	edi, 0x1
1000044dd:	xor	esi, esi
1000044df:	xor	eax, eax
1000044e1:	call	0x100009ac2
1000044e6:	push	rbp
1000044e7:	mov	rbp, rsp
1000044ea:	mov	rax, qword ptr [rdi]
1000044ed:	pop	rbp
1000044ee:	ret
1000044ef:	push	rbp
1000044f0:	mov	rbp, rsp
1000044f3:	push	rbx
1000044f4:	push	rax
1000044f5:	mov	rbx, rdi
1000044f8:	mov	rdi, qword ptr [rdi + 0x8]
1000044fc:	mov	esi, dword ptr [rbx + 0x10]
1000044ff:	call	0x10000451a
100004504:	mov	rdi, qword ptr [rbx]
100004507:	call	0x10000a1a4 ## symbol stub for: _free
10000450c:	mov	rdi, rbx
10000450f:	add	rsp, 0x8
100004513:	pop	rbx
100004514:	pop	rbp
100004515:	jmp	0x10000a1a4 ## symbol stub for: _free
10000451a:	push	rbp
10000451b:	mov	rbp, rsp
10000451e:	push	r15
100004520:	push	r14
100004522:	push	rbx
100004523:	push	rax
100004524:	mov	r14, rdi
100004527:	test	esi, esi
100004529:	jle	0x100004547
10000452b:	mov	r15d, esi
10000452e:	shl	r15, 0x4
100004532:	xor	ebx, ebx
100004534:	mov	rdi, qword ptr [r14 + rbx + 0x8]
100004539:	call	0x10000a1a4 ## symbol stub for: _free
10000453e:	add	rbx, 0x10
100004542:	cmp	r15, rbx
100004545:	jne	0x100004534
100004547:	mov	rdi, r14
10000454a:	add	rsp, 0x8
10000454e:	pop	rbx
10000454f:	pop	r14
100004551:	pop	r15
100004553:	pop	rbp
100004554:	jmp	0x10000a1a4 ## symbol stub for: _free
100004559:	push	rbp
10000455a:	mov	rbp, rsp
10000455d:	mov	edi, 0x1
100004562:	mov	esi, 0x18
100004567:	pop	rbp
100004568:	jmp	0x10000a14a ## symbol stub for: _calloc
10000456d:	push	rbp
10000456e:	mov	rbp, rsp
100004571:	push	r15
100004573:	push	r14
100004575:	push	r13
100004577:	push	r12
100004579:	push	rbx
10000457a:	sub	rsp, 0x18
10000457e:	mov	r12, rdi
100004581:	mov	rdi, rsi
100004584:	call	0x10000a258 ## symbol stub for: _strdup
100004589:	test	rax, rax
10000458c:	je	0x10000474e
100004592:	mov	rbx, rax
100004595:	mov	rax, qword ptr [r12 + 0x8]
10000459a:	mov	qword ptr [rbp - 0x38], rax
10000459e:	mov	r15d, dword ptr [r12 + 0x10]
1000045a3:	mov	qword ptr [r12 + 0x8], 0x0
1000045ac:	mov	dword ptr [r12 + 0x10], 0x0
1000045b5:	mov	rdi, rbx
1000045b8:	mov	esi, 0x2e
1000045bd:	call	0x10000a276 ## symbol stub for: _strrchr
1000045c2:	test	rax, rax
1000045c5:	je	0x1000046aa
1000045cb:	mov	r14, rax
1000045ce:	lea	r13, [rip + 0x7a5b]
1000045d5:	mov	rdi, r13
1000045d8:	mov	rsi, r14
1000045db:	call	0x100004763
1000045e0:	test	rax, rax
1000045e3:	je	0x100004610
1000045e5:	mov	rdi, r12
1000045e8:	xor	esi, esi
1000045ea:	mov	rdx, rax
1000045ed:	call	0x100004333
1000045f2:	mov	byte ptr [r14], 0x0
1000045f6:	mov	rdi, rbx
1000045f9:	mov	esi, 0x2e
1000045fe:	call	0x10000a276 ## symbol stub for: _strrchr
100004603:	mov	r14, rax
100004606:	test	rax, rax
100004609:	jne	0x1000045d5
10000460b:	jmp	0x1000046aa
100004610:	lea	rdi, [rip + 0x7ad9]
100004617:	mov	rsi, r14
10000461a:	call	0x100004763
10000461f:	test	rax, rax
100004622:	jne	0x100004699
100004624:	mov	dword ptr [rbp - 0x2c], r15d
100004628:	lea	rdi, [rip + 0x7b71]
10000462f:	mov	rsi, r14
100004632:	call	0x100004763
100004637:	test	rax, rax
10000463a:	je	0x1000046a6
10000463c:	mov	r15, rax
10000463f:	mov	byte ptr [r14], 0x0
100004643:	mov	rdi, rbx
100004646:	call	0x10000a26a ## symbol stub for: _strlen
10000464b:	mov	r14, rax
10000464e:	mov	rdi, r15
100004651:	call	0x10000a26a ## symbol stub for: _strlen
100004656:	lea	rsi, [r14 + rax + 0x1]
10000465b:	mov	rdi, rbx
10000465e:	call	0x10000a20a ## symbol stub for: _realloc
100004663:	test	rax, rax
100004666:	je	0x10000474e
10000466c:	mov	rbx, rax
10000466f:	mov	rdi, rax
100004672:	mov	rsi, r15
100004675:	call	0x10000a23a ## symbol stub for: _strcat
10000467a:	mov	rdi, rbx
10000467d:	mov	esi, 0x2e
100004682:	call	0x10000a276 ## symbol stub for: _strrchr
100004687:	mov	r14, rax
10000468a:	test	rax, rax
10000468d:	mov	r15d, dword ptr [rbp - 0x2c]
100004691:	jne	0x1000045d5
100004697:	jmp	0x1000046aa
100004699:	mov	rdi, r12
10000469c:	mov	rsi, rax
10000469f:	call	0x1000044a7
1000046a4:	jmp	0x1000046aa
1000046a6:	mov	r15d, dword ptr [rbp - 0x2c]
1000046aa:	lea	r14, [r12 + 0x8]
1000046af:	mov	rdi, rbx
1000046b2:	call	0x10000a1a4 ## symbol stub for: _free
1000046b7:	cmp	qword ptr [r14], 0x0
1000046bb:	je	0x10000471d
1000046bd:	mov	rdi, qword ptr [rbp - 0x38]
1000046c1:	mov	esi, r15d
1000046c4:	call	0x10000451a
1000046c9:	movsxd	r15, dword ptr [r12 + 0x10]
1000046ce:	mov	rdi, r15
1000046d1:	shl	rdi, 0x4
1000046d5:	call	0x10000a1c8 ## symbol stub for: _malloc
1000046da:	test	rax, rax
1000046dd:	je	0x10000474e
1000046df:	mov	rbx, rax
1000046e2:	mov	r8d, r15d
1000046e5:	test	r8d, r8d
1000046e8:	jle	0x10000472f
1000046ea:	mov	ecx, r8d
1000046ed:	mov	rdi, qword ptr [r14]
1000046f0:	shl	r8, 0x4
1000046f4:	dec	ecx
1000046f6:	xor	edx, edx
1000046f8:	mov	esi, ecx
1000046fa:	shl	rsi, 0x4
1000046fe:	mov	rax, qword ptr [rdi + rsi]
100004702:	mov	rsi, qword ptr [rdi + rsi + 0x8]
100004707:	mov	qword ptr [rbx + rdx + 0x8], rsi
10000470c:	mov	qword ptr [rbx + rdx], rax
100004710:	add	rdx, 0x10
100004714:	dec	ecx
100004716:	cmp	r8, rdx
100004719:	jne	0x1000046f8
10000471b:	jmp	0x100004732
10000471d:	mov	rax, qword ptr [rbp - 0x38]
100004721:	mov	qword ptr [r12 + 0x8], rax
100004726:	mov	dword ptr [r12 + 0x10], r15d
10000472b:	xor	eax, eax
10000472d:	jmp	0x10000473f
10000472f:	mov	rdi, qword ptr [r14]
100004732:	call	0x10000a1a4 ## symbol stub for: _free
100004737:	mov	qword ptr [r14], rbx
10000473a:	mov	eax, 0x1
10000473f:	add	rsp, 0x18
100004743:	pop	rbx
100004744:	pop	r12
100004746:	pop	r13
100004748:	pop	r14
10000474a:	pop	r15
10000474c:	pop	rbp
10000474d:	ret
10000474e:	lea	rdx, [rip + 0x626b] ## literal pool for: "No memory"
100004755:	mov	edi, 0x1
10000475a:	xor	esi, esi
10000475c:	xor	eax, eax
10000475e:	call	0x100009ac2
100004763:	push	rbp
100004764:	mov	rbp, rsp
100004767:	push	r15
100004769:	push	r14
10000476b:	push	rbx
10000476c:	push	rax
10000476d:	test	rsi, rsi
100004770:	je	0x1000047a1
100004772:	mov	rbx, rdi
100004775:	mov	rdi, qword ptr [rdi]
100004778:	test	rdi, rdi
10000477b:	je	0x1000047a1
10000477d:	mov	r15, rsi
100004780:	add	rbx, 0x10
100004784:	xor	r14d, r14d
100004787:	mov	rsi, r15
10000478a:	call	0x10000a246 ## symbol stub for: _strcmp
10000478f:	test	eax, eax
100004791:	je	0x1000047a6
100004793:	mov	rdi, qword ptr [rbx]
100004796:	add	rbx, 0x10
10000479a:	test	rdi, rdi
10000479d:	jne	0x100004787
10000479f:	jmp	0x1000047aa
1000047a1:	xor	r14d, r14d
1000047a4:	jmp	0x1000047aa
1000047a6:	mov	r14, qword ptr [rbx - 0x8]
1000047aa:	mov	rax, r14
1000047ad:	add	rsp, 0x8
1000047b1:	pop	rbx
1000047b2:	pop	r14
1000047b4:	pop	r15
1000047b6:	pop	rbp
1000047b7:	ret
1000047b8:	push	rbp
1000047b9:	mov	rbp, rsp
1000047bc:	mov	eax, dword ptr [rip + 0xbdbe]
1000047c2:	mov	dword ptr [rip + 0xbdb4], 0x0
1000047cc:	pop	rbp
1000047cd:	ret
1000047ce:	push	rbp
1000047cf:	mov	rbp, rsp
1000047d2:	push	r15
1000047d4:	push	r14
1000047d6:	push	r13
1000047d8:	push	r12
1000047da:	push	rbx
1000047db:	sub	rsp, 0x158
1000047e2:	mov	r15, rsi
1000047e5:	mov	r14d, edi
1000047e8:	mov	rax, qword ptr [rip + 0x7819] ## literal pool symbol address: ___stack_chk_guard
1000047ef:	mov	rax, qword ptr [rax]
1000047f2:	mov	qword ptr [rbp - 0x30], rax
1000047f6:	lea	rbx, [rbp - 0x168]
1000047fd:	mov	esi, 0x128
100004802:	mov	rdi, rbx
100004805:	call	0x100009e80 ## symbol stub for: ___bzero
10000480a:	mov	eax, 0xffffffff
10000480f:	mov	dword ptr [rbx + 0x88], eax
100004815:	mov	dword ptr [rbx + 0x34], eax
100004818:	mov	dword ptr [rbx + 0x40], eax
10000481b:	mov	dword ptr [rbx + 0x24], 0x0
100004822:	lea	rax, [rip + 0x128f]
100004829:	lea	rsi, [rbp - 0x40]
10000482d:	mov	qword ptr [rsi], rax
100004830:	mov	qword ptr [rsi + 0x8], 0x0
100004838:	mov	edi, 0x1d
10000483d:	xor	edx, edx
10000483f:	call	0x10000a228 ## symbol stub for: _sigaction
100004844:	test	eax, eax
100004846:	jne	0x100005864
10000484c:	lea	rsi, [rbp - 0x40]
100004850:	mov	edi, 0x1e
100004855:	xor	edx, edx
100004857:	call	0x10000a228 ## symbol stub for: _sigaction
10000485c:	test	eax, eax
10000485e:	jne	0x100005874
100004864:	lea	rsi, [rbp - 0x40]
100004868:	mov	qword ptr [rsi], 0x1
10000486f:	mov	edi, 0xd
100004874:	xor	edx, edx
100004876:	call	0x10000a228 ## symbol stub for: _sigaction
10000487b:	mov	rdi, qword ptr [r15]
10000487e:	lea	rsi, [rip + 0x62b9] ## literal pool for: "bsdtar"
100004885:	call	0x100009977
10000488a:	lea	rsi, [rip + 0x62b4] ## literal pool for: ""
100004891:	xor	edi, edi
100004893:	call	0x10000a222 ## symbol stub for: _setlocale
100004898:	test	rax, rax
10000489b:	jne	0x1000048ad
10000489d:	lea	rsi, [rip + 0x62a2] ## literal pool for: "Failed to set default locale"
1000048a4:	xor	edi, edi
1000048a6:	xor	eax, eax
1000048a8:	call	0x1000099ad
1000048ad:	mov	edi, 0x39
1000048b2:	call	0x10000a1e6 ## symbol stub for: _nl_langinfo
1000048b7:	cmp	byte ptr [rax], 0x64
1000048ba:	sete	byte ptr [rbp - 0x100]
1000048c1:	call	0x10000a1b6 ## symbol stub for: _geteuid
1000048c6:	mov	dword ptr [rbp - 0xb8], eax
1000048cc:	movabs	rcx, -0xffffd800
1000048d6:	mov	qword ptr [rbp - 0x150], rcx
1000048dd:	test	eax, eax
1000048df:	mov	eax, 0x23e7
1000048e4:	mov	ecx, 0x2304
1000048e9:	cmove	ecx, eax
1000048ec:	mov	dword ptr [rbp - 0x140], ecx
1000048f2:	mov	r12d, dword ptr [rbp - 0x13c]
1000048f9:	mov	ebx, r12d
1000048fc:	or	ebx, 0x4
1000048ff:	mov	dword ptr [rbp - 0x13c], ebx
100004905:	lea	rdi, [rip + 0x6257] ## literal pool for: "COPYFILE_DISABLE"
10000490c:	call	0x10000a1b0 ## symbol stub for: _getenv
100004911:	test	rax, rax
100004914:	je	0x100004924
100004916:	and	r12d, -0x5
10000491a:	mov	dword ptr [rbp - 0x13c], r12d
100004921:	mov	ebx, r12d
100004924:	or	ebx, 0x20
100004927:	mov	dword ptr [rbp - 0x13c], ebx
10000492d:	call	0x100009fe2 ## symbol stub for: _archive_match_new
100004932:	mov	qword ptr [rbp - 0x70], rax
100004936:	test	rax, rax
100004939:	je	0x100005686
10000493f:	call	0x100004559
100004944:	mov	qword ptr [rbp - 0xf8], rax
10000494b:	test	rax, rax
10000494e:	je	0x100005686
100004954:	lea	rdi, [rbp - 0x168]
10000495b:	mov	qword ptr [rdi + 0x90], r15
100004962:	mov	dword ptr [rdi + 0x8c], r14d
100004969:	call	0x100005c50
10000496e:	cmp	eax, -0x1
100004971:	je	0x1000050af
100004977:	xor	ecx, ecx
100004979:	mov	qword ptr [rbp - 0x178], rcx
100004980:	lea	rbx, [rip + 0xf19]
100004987:	xor	r15d, r15d
10000498a:	xor	ecx, ecx
10000498c:	mov	qword ptr [rbp - 0x170], rcx
100004993:	xor	r13d, r13d
100004996:	xor	r12d, r12d
100004999:	xor	r14d, r14d
10000499c:	lea	ecx, [rax - 0x1]
10000499f:	cmp	ecx, 0x79
1000049a2:	ja	0x10000565d
1000049a8:	movsxd	rcx, dword ptr [rbx + 4*rcx]
1000049ac:	add	rcx, rbx
1000049af:	jmp	rcx
1000049b1:	test	r14b, r14b
1000049b4:	jne	0x100005699
1000049ba:	lea	ecx, [rax - 0x11]
1000049bd:	cmp	ecx, 0x4
1000049c0:	ja	0x10000508f
1000049c6:	lea	rax, [rip + 0x10bb]
1000049cd:	movsxd	rcx, dword ptr [rax + 4*rcx]
1000049d1:	add	rcx, rax
1000049d4:	jmp	rcx
1000049d6:	lea	r13, [rip + 0x601d] ## literal pool for: "lrzip"
1000049dd:	mov	r14b, 0x11
1000049e0:	jmp	0x100004f56
1000049e5:	or	byte ptr [rbp - 0x143], 0x40
1000049ec:	jmp	0x100004f56
1000049f1:	mov	rax, qword ptr [rbp - 0xd0]
1000049f8:	mov	qword ptr [rbp - 0x158], rax
1000049ff:	jmp	0x100004f56
100004a04:	test	r14b, r14b
100004a07:	jne	0x1000056b2
100004a0d:	lea	r13, [rip + 0x5fc7] ## literal pool for: "bzip2"
100004a14:	mov	r14b, 0x6a
100004a17:	jmp	0x100004f56
100004a1c:	movsx	r8d, byte ptr [rbp - 0x110]
100004a24:	test	r8d, r8d
100004a27:	je	0x100004a33
100004a29:	cmp	r8b, 0x72
100004a2d:	jne	0x1000056d1
100004a33:	mov	byte ptr [rbp - 0x110], 0x72
100004a3a:	jmp	0x100004f56
100004a3f:	mov	rdi, qword ptr [rbp - 0xd0]
100004a46:	call	0x10000a144 ## symbol stub for: _atoi
100004a4b:	lea	ecx, [rax - 0x1]
100004a4e:	cmp	ecx, 0x2000
100004a54:	jae	0x1000056ec
100004a5a:	shl	eax, 0x9
100004a5d:	mov	dword ptr [rbp - 0x150], eax
100004a63:	mov	dword ptr [rbp - 0x14c], eax
100004a69:	jmp	0x100004f56
100004a6e:	mov	rsi, qword ptr [rbp - 0xd0]
100004a75:	cmp	byte ptr [rsi], 0x0
100004a78:	je	0x1000056f8
100004a7e:	lea	rdi, [rbp - 0x168]
100004a85:	call	0x1000077cd
100004a8a:	jmp	0x100004f56
100004a8f:	or	byte ptr [rbp - 0x140], 0x8
100004a96:	jmp	0x100004f56
100004a9b:	movsx	r8d, byte ptr [rbp - 0x110]
100004aa3:	test	r8d, r8d
100004aa6:	je	0x100004ab2
100004aa8:	cmp	r8b, 0x74
100004aac:	jne	0x100005704
100004ab2:	mov	byte ptr [rbp - 0x110], 0x74
100004ab9:	inc	dword ptr [rbp - 0x148]
100004abf:	jmp	0x100004f56
100004ac4:	or	dword ptr [rbp - 0x140], 0x20e2
100004ace:	jmp	0x100004f56
100004ad3:	or	byte ptr [rbp - 0x143], 0x10
100004ada:	jmp	0x100004f56
100004adf:	and	byte ptr [rbp - 0x140], 0x7f
100004ae6:	or	byte ptr [rbp - 0x13c], 0x10
100004aed:	or	byte ptr [rbp - 0x143], -0x80
100004af4:	jmp	0x100004f56
100004af9:	mov	byte ptr [rbp - 0x10f], 0x4c
100004b00:	mov	al, 0x1
100004b02:	mov	qword ptr [rbp - 0x178], rax
100004b09:	jmp	0x100004f56
100004b0e:	and	dword ptr [rbp - 0x140], 0xffffdf1d
100004b18:	jmp	0x100004f56
100004b1d:	movsx	r8d, byte ptr [rbp - 0x110]
100004b25:	test	r8d, r8d
100004b28:	je	0x100004b34
100004b2a:	cmp	r8b, 0x63
100004b2e:	jne	0x10000571f
100004b34:	mov	byte ptr [rbp - 0x110], 0x63
100004b3b:	jmp	0x100004f56
100004b40:	mov	rdi, qword ptr [rbp - 0xf8]
100004b47:	lea	rsi, [rip + 0x6134] ## literal pool for: "pax"
100004b4e:	jmp	0x100004da6
100004b53:	mov	rdx, qword ptr [rbp - 0xd0]
100004b5a:	mov	rdi, qword ptr [rbp - 0x70]
100004b5e:	mov	esi, 0x201
100004b63:	jmp	0x100004ed9
100004b68:	mov	rdx, qword ptr [rbp - 0xd0]
100004b6f:	mov	rdi, qword ptr [rbp - 0x70]
100004b73:	mov	esi, 0x101
100004b78:	jmp	0x100004f49
100004b7d:	mov	rdi, qword ptr [rbp - 0xd0]
100004b84:	call	0x10000a144 ## symbol stub for: _atoi
100004b89:	test	eax, eax
100004b8b:	js	0x10000573a
100004b91:	mov	dword ptr [rbp - 0x128], eax
100004b97:	jmp	0x100004f56
100004b9c:	mov	byte ptr [rbp - 0x10f], 0x4c
100004ba3:	jmp	0x100004f56
100004ba8:	or	byte ptr [rbp - 0x144], 0x20
100004baf:	jmp	0x100004f56
100004bb4:	mov	rdx, qword ptr [rbp - 0xd0]
100004bbb:	mov	rdi, qword ptr [rbp - 0x70]
100004bbf:	mov	esi, 0x102
100004bc4:	jmp	0x100004ed9
100004bc9:	movsx	r8d, byte ptr [rbp - 0x110]
100004bd1:	test	r8d, r8d
100004bd4:	je	0x100004be0
100004bd6:	cmp	r8b, 0x75
100004bda:	jne	0x100005746
100004be0:	mov	byte ptr [rbp - 0x110], 0x75
100004be7:	jmp	0x100004f56
100004bec:	and	byte ptr [rbp - 0x13c], -0x5
100004bf3:	and	byte ptr [rbp - 0x13f], -0x21
100004bfa:	or	byte ptr [rbp - 0x142], 0x20
100004c01:	jmp	0x100004f56
100004c06:	mov	rax, qword ptr [rbp - 0xd0]
100004c0d:	mov	qword ptr [rbp - 0x120], rax
100004c14:	jmp	0x100004f56
100004c19:	and	byte ptr [rbp - 0x13f], -0x4
100004c20:	or	byte ptr [rbp - 0x144], 0x2
100004c27:	jmp	0x100004f56
100004c2c:	test	r14b, r14b
100004c2f:	jne	0x100005761
100004c35:	lea	r13, [rip + 0x5d91] ## literal pool for: "compress"
100004c3c:	mov	r14b, 0x5a
100004c3f:	jmp	0x100004f56
100004c44:	and	byte ptr [rbp - 0x140], -0x41
100004c4b:	or	byte ptr [rbp - 0x13c], 0x40
100004c52:	or	byte ptr [rbp - 0x142], 0x8
100004c59:	jmp	0x100004f56
100004c5e:	and	byte ptr [rbp - 0x140], -0x2
100004c65:	jmp	0x100004f56
100004c6a:	or	byte ptr [rbp - 0x144], 0x10
100004c71:	jmp	0x100004f56
100004c76:	mov	rsi, qword ptr [rbp - 0xd0]
100004c7d:	mov	rdi, qword ptr [rbp - 0x70]
100004c81:	xor	edx, edx
100004c83:	call	0x100009fb8 ## symbol stub for: _archive_match_exclude_pattern_from_file
100004c88:	jmp	0x100004f4e
100004c8d:	or	byte ptr [rbp - 0x144], 0x4
100004c94:	jmp	0x100004f56
100004c99:	mov	rdi, qword ptr [rbp - 0xd0]
100004ca0:	call	0x10000a144 ## symbol stub for: _atoi
100004ca5:	test	eax, eax
100004ca7:	js	0x100005780
100004cad:	mov	dword ptr [rbp - 0x134], eax
100004cb3:	jmp	0x100004f56
100004cb8:	or	byte ptr [rbp - 0x13e], 0x2
100004cbf:	jmp	0x100004f56
100004cc4:	test	r14b, r14b
100004cc7:	jne	0x10000578c
100004ccd:	lea	r13, [rip + 0x5d1b] ## literal pool for: "grzip"
100004cd4:	mov	r14b, 0xb
100004cd7:	jmp	0x100004f56
100004cdc:	or	byte ptr [rbp - 0x13c], 0x8
100004ce3:	jmp	0x100004f56
100004ce8:	test	r12b, r12b
100004ceb:	jne	0x100005822
100004cf1:	lea	rax, [rip + 0x5ee1] ## literal pool for: "b64encode"
100004cf8:	mov	qword ptr [rbp - 0x170], rax
100004cff:	mov	r12b, 0x2
100004d02:	jmp	0x100004f56
100004d07:	or	byte ptr [rbp - 0x13c], 0x4
100004d0e:	or	byte ptr [rbp - 0x13f], 0x20
100004d15:	or	byte ptr [rbp - 0x142], 0x40
100004d1c:	jmp	0x100004f56
100004d21:	or	byte ptr [rbp - 0x13f], 0x10
100004d28:	jmp	0x100004f56
100004d2d:	or	byte ptr [rbp - 0x140], 0x10
100004d34:	or	byte ptr [rbp - 0x143], 0x20
100004d3b:	jmp	0x100004f56
100004d40:	or	byte ptr [rbp - 0x144], 0x1
100004d47:	jmp	0x100004f56
100004d4c:	or	byte ptr [rbp - 0x144], 0x8
100004d53:	jmp	0x100004f56
100004d58:	or	byte ptr [rbp - 0x13f], 0x8
100004d5f:	jmp	0x100004f56
100004d64:	or	byte ptr [rbp - 0x140], 0x20
100004d6b:	and	byte ptr [rbp - 0x13c], -0x21
100004d72:	or	byte ptr [rbp - 0x142], 0x4
100004d79:	jmp	0x100004f56
100004d7e:	or	byte ptr [rbp - 0x140], 0x40
100004d85:	and	byte ptr [rbp - 0x13c], -0x41
100004d8c:	or	byte ptr [rbp - 0x142], 0x10
100004d93:	jmp	0x100004f56
100004d98:	mov	rdi, qword ptr [rbp - 0xf8]
100004d9f:	mov	rsi, qword ptr [rbp - 0xd0]
100004da6:	call	0x1000044a7
100004dab:	jmp	0x100004f56
100004db0:	mov	rdx, qword ptr [rbp - 0xd0]
100004db7:	mov	rdi, qword ptr [rbp - 0x70]
100004dbb:	mov	esi, 0x201
100004dc0:	jmp	0x100004f49
100004dc5:	mov	rsi, qword ptr [rbp - 0xd0]
100004dcc:	mov	rdi, qword ptr [rbp - 0x70]
100004dd0:	call	0x100009fb2 ## symbol stub for: _archive_match_exclude_pattern
100004dd5:	test	eax, eax
100004dd7:	je	0x100004f56
100004ddd:	jmp	0x1000057ab
100004de2:	or	byte ptr [rbp - 0x13f], 0x40
100004de9:	jmp	0x100004f56
100004dee:	and	byte ptr [rbp - 0x140], -0x21
100004df5:	or	byte ptr [rbp - 0x13c], 0x20
100004dfc:	or	byte ptr [rbp - 0x142], 0x2
100004e03:	jmp	0x100004f56
100004e08:	or	byte ptr [rbp - 0x140], 0x1
100004e0f:	jmp	0x100004f56
100004e14:	or	byte ptr [rbp - 0x13f], -0x80
100004e1b:	jmp	0x100004f56
100004e20:	mov	rdx, qword ptr [rbp - 0xd0]
100004e27:	mov	rdi, qword ptr [rbp - 0x70]
100004e2b:	mov	esi, 0x101
100004e30:	jmp	0x100004ed9
100004e35:	mov	rdx, qword ptr [rbp - 0xd0]
100004e3c:	mov	rdi, qword ptr [rbp - 0x70]
100004e40:	mov	esi, 0x102
100004e45:	jmp	0x100004f49
100004e4a:	mov	rax, qword ptr [rbp - 0xd0]
100004e51:	mov	qword ptr [rbp - 0x108], rax
100004e58:	jmp	0x100004f56
100004e5d:	test	r14b, r14b
100004e60:	jne	0x1000057bb
100004e66:	lea	r13, [rip + 0x5bcb] ## literal pool for: "xz"
100004e6d:	mov	r14b, 0x4a
100004e70:	jmp	0x100004f56
100004e75:	or	byte ptr [rbp - 0x143], 0x8
100004e7c:	jmp	0x100004f56
100004e81:	test	r14b, r14b
100004e84:	jne	0x1000057da
100004e8a:	lea	r13, [rip + 0x5b54] ## literal pool for: "gzip"
100004e91:	mov	r14b, 0x7a
100004e94:	jmp	0x100004f56
100004e99:	mov	rax, qword ptr [rbp - 0xd0]
100004ea0:	mov	qword ptr [rbp - 0x130], rax
100004ea7:	jmp	0x100004f56
100004eac:	mov	rsi, qword ptr [rbp - 0xd0]
100004eb3:	mov	rdi, qword ptr [rbp - 0x70]
100004eb7:	call	0x100009fd6 ## symbol stub for: _archive_match_include_pattern
100004ebc:	test	eax, eax
100004ebe:	je	0x100004f56
100004ec4:	jmp	0x1000057f6
100004ec9:	mov	rdx, qword ptr [rbp - 0xd0]
100004ed0:	mov	rdi, qword ptr [rbp - 0x70]
100004ed4:	mov	esi, 0x202
100004ed9:	call	0x100009fd0 ## symbol stub for: _archive_match_include_file_time
100004ede:	jmp	0x100004f4e
100004ee0:	mov	byte ptr [rbp - 0x10f], 0x48
100004ee7:	jmp	0x100004f56
100004ee9:	or	byte ptr [rbp - 0x13c], 0x2
100004ef0:	jmp	0x100004f56
100004ef2:	and	byte ptr [rbp - 0x140], -0x5
100004ef9:	jmp	0x100004f56
100004efb:	or	byte ptr [rbp - 0x143], 0x1
100004f02:	jmp	0x100004f56
100004f04:	lea	rax, [rip + 0x5c3a] ## literal pool for: ""
100004f0b:	mov	qword ptr [rbp - 0x120], rax
100004f12:	mov	qword ptr [rbp - 0x130], rax
100004f19:	or	byte ptr [rbp - 0x143], 0x2
100004f20:	jmp	0x100004f56
100004f22:	or	byte ptr [rbp - 0x140], -0x80
100004f29:	and	byte ptr [rbp - 0x13c], -0x11
100004f30:	or	byte ptr [rbp - 0x142], 0x1
100004f37:	jmp	0x100004f56
100004f39:	mov	rdx, qword ptr [rbp - 0xd0]
100004f40:	mov	rdi, qword ptr [rbp - 0x70]
100004f44:	mov	esi, 0x202
100004f49:	call	0x100009fca ## symbol stub for: _archive_match_include_date
100004f4e:	test	eax, eax
100004f50:	jne	0x100005667
100004f56:	lea	rdi, [rbp - 0x168]
100004f5d:	call	0x100005c50
100004f62:	cmp	eax, -0x1
100004f65:	jne	0x10000499c
100004f6b:	jmp	0x100005097
100004f70:	call	0x100009e86 ## symbol stub for: ___error
100004f75:	mov	dword ptr [rax], 0x0
100004f7b:	mov	rdi, qword ptr [rbp - 0xd0]
100004f82:	xor	esi, esi
100004f84:	xor	edx, edx
100004f86:	call	0x10000a27c ## symbol stub for: _strtol
100004f8b:	mov	dword ptr [rbp - 0x138], eax
100004f91:	call	0x100009e86 ## symbol stub for: ___error
100004f96:	cmp	dword ptr [rax], 0x0
100004f99:	je	0x100004f56
100004f9b:	jmp	0x100005806
100004fa0:	or	byte ptr [rbp - 0x144], -0x80
100004fa7:	jmp	0x100004f56
100004fa9:	or	byte ptr [rbp - 0x143], 0x4
100004fb0:	jmp	0x100004f56
100004fb2:	mov	rax, qword ptr [rbp - 0xd0]
100004fb9:	mov	qword ptr [rbp - 0x118], rax
100004fc0:	jmp	0x100004f56
100004fc2:	lea	rdi, [rbp - 0x168]
100004fc9:	mov	rsi, qword ptr [rdi + 0x98]
100004fd0:	call	0x100006aeb
100004fd5:	jmp	0x100004f56
100004fda:	test	r12b, r12b
100004fdd:	jne	0x100005822
100004fe3:	lea	rax, [rip + 0x5a41] ## literal pool for: "uuencode"
100004fea:	mov	qword ptr [rbp - 0x170], rax
100004ff1:	mov	r12b, 0x33
100004ff4:	jmp	0x100004f56
100004ff9:	mov	r15, qword ptr [rbp - 0xd0]
100005000:	jmp	0x100004f56
100005005:	mov	rax, qword ptr [rbp - 0xd0]
10000500c:	mov	qword ptr [rbp - 0x168], rax
100005013:	jmp	0x100004f56
100005018:	test	r14b, r14b
10000501b:	jne	0x10000582b
100005021:	lea	r13, [rip + 0x59b3] ## literal pool for: "bzip2"
100005028:	mov	r14b, 0x79
10000502b:	jmp	0x100004f56
100005030:	movsx	r8d, byte ptr [rbp - 0x110]
100005038:	test	r8d, r8d
10000503b:	je	0x100005047
10000503d:	cmp	r8b, 0x78
100005041:	jne	0x100005847
100005047:	mov	byte ptr [rbp - 0x110], 0x78
10000504e:	jmp	0x100004f56
100005053:	lea	r13, [rip + 0x59bd] ## literal pool for: "lzop"
10000505a:	mov	r14b, 0x15
10000505d:	jmp	0x100004f56
100005062:	lea	r13, [rip + 0x599b] ## literal pool for: "lzip"
100005069:	mov	r14b, 0x13
10000506c:	jmp	0x100004f56
100005071:	lea	r13, [rip + 0x59aa] ## literal pool for: "lzma"
100005078:	mov	r14b, 0x14
10000507b:	jmp	0x100004f56
100005080:	lea	r13, [rip + 0x5987] ## literal pool for: "lz4"
100005087:	mov	r14b, 0x12
10000508a:	jmp	0x100004f56
10000508f:	mov	r14d, eax
100005092:	jmp	0x100004f56
100005097:	mov	al, byte ptr [rbp - 0x110]
10000509d:	cmp	byte ptr [rbp - 0x178], 0x0
1000050a4:	je	0x1000050ca
1000050a6:	test	al, al
1000050a8:	jne	0x1000050ca
1000050aa:	call	0x100005ac8
1000050af:	mov	al, byte ptr [rbp - 0x110]
1000050b5:	xor	r15d, r15d
1000050b8:	xor	ecx, ecx
1000050ba:	mov	qword ptr [rbp - 0x170], rcx
1000050c1:	xor	r13d, r13d
1000050c4:	xor	r12d, r12d
1000050c7:	xor	r14d, r14d
1000050ca:	test	al, al
1000050cc:	je	0x100005889
1000050d2:	test	byte ptr [rbp - 0x144], 0x1
1000050d9:	je	0x1000050f5
1000050db:	lea	rsi, [rip + 0x5c16] ## literal pool for: "-a"
1000050e2:	lea	rdx, [rip + 0x5c12] ## literal pool for: "c"
1000050e9:	lea	rdi, [rbp - 0x168]
1000050f0:	call	0x100005c13
1000050f5:	test	byte ptr [rbp - 0x13c], 0x8
1000050fc:	je	0x100005118
1000050fe:	lea	rsi, [rip + 0x5bf8] ## literal pool for: "--one-file-system"
100005105:	lea	rdx, [rip + 0x5c03] ## literal pool for: "cru"
10000510c:	lea	rdi, [rbp - 0x168]
100005113:	call	0x100005c13
100005118:	test	byte ptr [rbp - 0x144], 0x8
10000511f:	je	0x10000513b
100005121:	lea	rsi, [rip + 0x5beb] ## literal pool for: "--fast-read"
100005128:	lea	rdx, [rip + 0x5bf0] ## literal pool for: "xt"
10000512f:	lea	rdi, [rbp - 0x168]
100005136:	call	0x100005c13
10000513b:	mov	eax, dword ptr [rbp - 0x140]
100005141:	test	ax, ax
100005144:	jns	0x100005166
100005146:	lea	rsi, [rip + 0x5bd5] ## literal pool for: "--hfsCompression"
10000514d:	lea	rdx, [rip + 0x5bdf] ## literal pool for: "x"
100005154:	lea	rbx, [rbp - 0x168]
10000515b:	mov	rdi, rbx
10000515e:	call	0x100005c13
100005163:	mov	eax, dword ptr [rbx + 0x28]
100005166:	bt	eax, 0xe
10000516a:	jae	0x100005186
10000516c:	lea	rsi, [rip + 0x5bc2] ## literal pool for: "--nopreserveHFSCompression"
100005173:	lea	rdx, [rip + 0x5bb9] ## literal pool for: "x"
10000517a:	lea	rdi, [rbp - 0x168]
100005181:	call	0x100005c13
100005186:	test	byte ptr [rbp - 0x13c], 0x2
10000518d:	je	0x1000051a9
10000518f:	lea	rsi, [rip + 0x5bba] ## literal pool for: "--nodump"
100005196:	lea	rdx, [rip + 0x5b72] ## literal pool for: "cru"
10000519d:	lea	rdi, [rbp - 0x168]
1000051a4:	call	0x100005c13
1000051a9:	mov	eax, dword ptr [rbp - 0x144]
1000051af:	bt	eax, 0x12
1000051b3:	jae	0x1000051d5
1000051b5:	lea	rsi, [rip + 0x5b9d] ## literal pool for: "--acls"
1000051bc:	lea	rdx, [rip + 0x5b9d] ## literal pool for: "crux"
1000051c3:	lea	rbx, [rbp - 0x168]
1000051ca:	mov	rdi, rbx
1000051cd:	call	0x100005c13
1000051d2:	mov	eax, dword ptr [rbx + 0x24]
1000051d5:	bt	eax, 0x11
1000051d9:	jae	0x1000051fb
1000051db:	lea	rsi, [rip + 0x5b83] ## literal pool for: "--no-acls"
1000051e2:	lea	rdx, [rip + 0x5b77] ## literal pool for: "crux"
1000051e9:	lea	rbx, [rbp - 0x168]
1000051f0:	mov	rdi, rbx
1000051f3:	call	0x100005c13
1000051f8:	mov	eax, dword ptr [rbx + 0x24]
1000051fb:	bt	eax, 0x10
1000051ff:	jae	0x100005221
100005201:	lea	rsi, [rip + 0x5b67] ## literal pool for: "--xattrs"
100005208:	lea	rdx, [rip + 0x5b51] ## literal pool for: "crux"
10000520f:	lea	rbx, [rbp - 0x168]
100005216:	mov	rdi, rbx
100005219:	call	0x100005c13
10000521e:	mov	eax, dword ptr [rbx + 0x24]
100005221:	test	ax, ax
100005224:	jns	0x100005246
100005226:	lea	rsi, [rip + 0x5b4b] ## literal pool for: "--no-xattrs"
10000522d:	lea	rdx, [rip + 0x5b2c] ## literal pool for: "crux"
100005234:	lea	rbx, [rbp - 0x168]
10000523b:	mov	rdi, rbx
10000523e:	call	0x100005c13
100005243:	mov	eax, dword ptr [rbx + 0x24]
100005246:	bt	eax, 0x14
10000524a:	jae	0x10000526c
10000524c:	lea	rsi, [rip + 0x5b31] ## literal pool for: "--fflags"
100005253:	lea	rdx, [rip + 0x5b06] ## literal pool for: "crux"
10000525a:	lea	rbx, [rbp - 0x168]
100005261:	mov	rdi, rbx
100005264:	call	0x100005c13
100005269:	mov	eax, dword ptr [rbx + 0x24]
10000526c:	bt	eax, 0x13
100005270:	jae	0x100005292
100005272:	lea	rsi, [rip + 0x5b14] ## literal pool for: "--no-fflags"
100005279:	lea	rdx, [rip + 0x5ae0] ## literal pool for: "crux"
100005280:	lea	rbx, [rbp - 0x168]
100005287:	mov	rdi, rbx
10000528a:	call	0x100005c13
10000528f:	mov	eax, dword ptr [rbx + 0x24]
100005292:	bt	eax, 0x16
100005296:	jae	0x1000052b8
100005298:	lea	rsi, [rip + 0x5afa] ## literal pool for: "--mac-metadata"
10000529f:	lea	rdx, [rip + 0x5aba] ## literal pool for: "crux"
1000052a6:	lea	rbx, [rbp - 0x168]
1000052ad:	mov	rdi, rbx
1000052b0:	call	0x100005c13
1000052b5:	mov	eax, dword ptr [rbx + 0x24]
1000052b8:	bt	eax, 0x15
1000052bc:	jae	0x1000052de
1000052be:	lea	rsi, [rip + 0x5ae3] ## literal pool for: "--no-mac-metadata"
1000052c5:	lea	rdx, [rip + 0x5a94] ## literal pool for: "crux"
1000052cc:	lea	rbx, [rbp - 0x168]
1000052d3:	mov	rdi, rbx
1000052d6:	call	0x100005c13
1000052db:	mov	eax, dword ptr [rbx + 0x24]
1000052de:	bt	eax, 0xa
1000052e2:	jae	0x100005336
1000052e4:	movsx	ecx, byte ptr [rbp - 0x110]
1000052eb:	cmp	ecx, 0x78
1000052ee:	je	0x10000530a
1000052f0:	cmp	ecx, 0x63
1000052f3:	jne	0x10000531c
1000052f5:	mov	rdi, qword ptr [rbp - 0xf8]
1000052fc:	lea	rsi, [rip + 0x5ab7] ## literal pool for: "ustar"
100005303:	call	0x1000044a7
100005308:	jmp	0x100005336
10000530a:	or	eax, 0x40
10000530d:	mov	dword ptr [rbp - 0x144], eax
100005313:	and	byte ptr [rbp - 0x140], -0x2
10000531a:	jmp	0x100005336
10000531c:	lea	rsi, [rip + 0x5a9d] ## literal pool for: "-o"
100005323:	lea	rdx, [rip + 0x5a99] ## literal pool for: "xc"
10000532a:	lea	rdi, [rbp - 0x168]
100005331:	call	0x100005c13
100005336:	mov	eax, dword ptr [rbp - 0x144]
10000533c:	test	al, al
10000533e:	jns	0x100005360
100005340:	lea	rsi, [rip + 0x5a7f] ## literal pool for: "-n"
100005347:	lea	rdx, [rip + 0x59c1] ## literal pool for: "cru"
10000534e:	lea	rbx, [rbp - 0x168]
100005355:	mov	rdi, rbx
100005358:	call	0x100005c13
10000535d:	mov	eax, dword ptr [rbx + 0x24]
100005360:	bt	eax, 0xb
100005364:	jae	0x100005386
100005366:	lea	rsi, [rip + 0x5a5c] ## literal pool for: "-O"
10000536d:	lea	rdx, [rip + 0x59ab] ## literal pool for: "xt"
100005374:	lea	rbx, [rbp - 0x168]
10000537b:	mov	rdi, rbx
10000537e:	call	0x100005c13
100005383:	mov	eax, dword ptr [rbx + 0x24]
100005386:	bt	eax, 0xd
10000538a:	jae	0x1000053ac
10000538c:	lea	rsi, [rip + 0x5a39] ## literal pool for: "-U"
100005393:	lea	rdx, [rip + 0x5999] ## literal pool for: "x"
10000539a:	lea	rbx, [rbp - 0x168]
1000053a1:	mov	rdi, rbx
1000053a4:	call	0x100005c13
1000053a9:	mov	eax, dword ptr [rbx + 0x24]
1000053ac:	bt	eax, 0xe
1000053b0:	jae	0x1000053d2
1000053b2:	lea	rsi, [rip + 0x5a16] ## literal pool for: "--check-links"
1000053b9:	lea	rdx, [rip + 0x5a1d] ## literal pool for: "cr"
1000053c0:	lea	rbx, [rbp - 0x168]
1000053c7:	mov	rdi, rbx
1000053ca:	call	0x100005c13
1000053cf:	mov	eax, dword ptr [rbx + 0x24]
1000053d2:	test	al, 0x1
1000053d4:	je	0x1000053fd
1000053d6:	mov	rsi, qword ptr [rbp - 0x168]
1000053dd:	mov	rdi, qword ptr [rbp - 0xf8]
1000053e4:	call	0x10000456d
1000053e9:	xor	ecx, ecx
1000053eb:	test	eax, eax
1000053ed:	movzx	r14d, r14b
1000053f1:	cmovne	r14d, ecx
1000053f5:	movzx	r12d, r12b
1000053f9:	cmovne	r12d, ecx
1000053fd:	test	r15, r15
100005400:	je	0x100005430
100005402:	lea	rsi, [rip + 0x59d7] ## literal pool for: "--use-compress-program"
100005409:	lea	rdx, [rip + 0x59e7] ## literal pool for: "cxt"
100005410:	lea	rbx, [rbp - 0x168]
100005417:	mov	rdi, rbx
10000541a:	call	0x100005c13
10000541f:	mov	rdi, qword ptr [rbx + 0x70]
100005423:	mov	rsi, r15
100005426:	call	0x1000043ab
10000542b:	jmp	0x1000054dd
100005430:	test	r14b, r14b
100005433:	je	0x10000548d
100005435:	movsx	eax, r14b
100005439:	add	eax, -0x4a
10000543c:	cmp	eax, 0x30
10000543f:	ja	0x100005639
100005445:	movabs	rcx, 0x1800100010001
10000544f:	bt	rcx, rax
100005453:	jae	0x100005639
100005459:	mov	word ptr [rbp - 0x40], 0x3f2d
10000545f:	mov	byte ptr [rbp - 0x3e], 0x0
100005463:	mov	byte ptr [rbp - 0x3f], r14b
100005467:	lea	rdx, [rip + 0x5989] ## literal pool for: "cxt"
10000546e:	lea	rbx, [rbp - 0x168]
100005475:	lea	rsi, [rbp - 0x40]
100005479:	mov	rdi, rbx
10000547c:	call	0x100005c13
100005481:	mov	rdi, qword ptr [rbx + 0x70]
100005485:	mov	rsi, r13
100005488:	call	0x100004324
10000548d:	test	r12b, r12b
100005490:	je	0x1000054dd
100005492:	lea	r14, [rbp - 0x40]
100005496:	mov	byte ptr [r14 + 0x2], 0x0
10000549b:	mov	word ptr [r14], 0x2d2d
1000054a1:	mov	edx, 0x10
1000054a6:	mov	rdi, r14
1000054a9:	mov	rbx, qword ptr [rbp - 0x170]
1000054b0:	mov	rsi, rbx
1000054b3:	call	0x100009e9e ## symbol stub for: ___strcat_chk
1000054b8:	lea	rdx, [rip + 0x5938] ## literal pool for: "cxt"
1000054bf:	lea	r15, [rbp - 0x168]
1000054c6:	mov	rdi, r15
1000054c9:	mov	rsi, r14
1000054cc:	call	0x100005c13
1000054d1:	mov	rdi, qword ptr [r15 + 0x70]
1000054d5:	mov	rsi, rbx
1000054d8:	call	0x100004324
1000054dd:	mov	rdi, qword ptr [rbp - 0xf8]
1000054e4:	call	0x1000044e6
1000054e9:	test	rax, rax
1000054ec:	je	0x100005508
1000054ee:	lea	rsi, [rip + 0x5909] ## literal pool for: "--format"
1000054f5:	lea	rdx, [rip + 0x5813] ## literal pool for: "cru"
1000054fc:	lea	rdi, [rbp - 0x168]
100005503:	call	0x100005c13
100005508:	mov	al, byte ptr [rbp - 0x10f]
10000550e:	test	al, al
100005510:	je	0x100005535
100005512:	lea	rsi, [rbp - 0x40]
100005516:	mov	word ptr [rsi], 0x3f2d
10000551b:	mov	byte ptr [rsi + 0x2], 0x0
10000551f:	mov	byte ptr [rsi + 0x1], al
100005522:	lea	rdx, [rip + 0x57e6] ## literal pool for: "cru"
100005529:	lea	rdi, [rbp - 0x168]
100005530:	call	0x100005c13
100005535:	mov	rdi, qword ptr [rbp - 0x168]
10000553c:	test	rdi, rdi
10000553f:	je	0x10000555c
100005541:	lea	rsi, [rip + 0x58bf] ## literal pool for: "-"
100005548:	call	0x10000a246 ## symbol stub for: _strcmp
10000554d:	test	eax, eax
10000554f:	jne	0x10000555c
100005551:	mov	qword ptr [rbp - 0x168], 0x0
10000555c:	movsx	ecx, byte ptr [rbp - 0x110]
100005563:	lea	eax, [rcx - 0x72]
100005566:	cmp	eax, 0x6
100005569:	ja	0x100005589
10000556b:	lea	rcx, [rip + 0x52a]
100005572:	movsxd	rax, dword ptr [rcx + 4*rax]
100005576:	add	rax, rcx
100005579:	jmp	rax
10000557b:	lea	rdi, [rbp - 0x168]
100005582:	call	0x100008bab
100005587:	jmp	0x1000055c4
100005589:	cmp	ecx, 0x63
10000558c:	jne	0x1000055c4
10000558e:	lea	rdi, [rbp - 0x168]
100005595:	call	0x100008102
10000559a:	jmp	0x1000055c4
10000559c:	lea	rdi, [rbp - 0x168]
1000055a3:	call	0x100008fab
1000055a8:	jmp	0x1000055c4
1000055aa:	lea	rdi, [rbp - 0x168]
1000055b1:	call	0x100006887
1000055b6:	jmp	0x1000055c4
1000055b8:	lea	rdi, [rbp - 0x168]
1000055bf:	call	0x100006094
1000055c4:	lea	rbx, [rbp - 0x168]
1000055cb:	mov	rdi, qword ptr [rbx + 0xf8]
1000055d2:	call	0x100009fc4 ## symbol stub for: _archive_match_free
1000055d7:	mov	rdi, rbx
1000055da:	call	0x100007158
1000055df:	mov	rdi, qword ptr [rbx + 0x70]
1000055e3:	call	0x1000044ef
1000055e8:	mov	rdi, qword ptr [rbx + 0x120]
1000055ef:	call	0x100007d30
1000055f4:	cmp	dword ptr [rbx + 0xb4], 0x0
1000055fb:	je	0x100005615
1000055fd:	lea	rsi, [rip + 0x5805] ## literal pool for: "Error exit delayed from previous errors."
100005604:	xor	edi, edi
100005606:	xor	eax, eax
100005608:	call	0x1000099ad
10000560d:	mov	eax, dword ptr [rbp - 0xb4]
100005613:	jmp	0x100005617
100005615:	xor	eax, eax
100005617:	mov	rcx, qword ptr [rip + 0x69ea] ## literal pool symbol address: ___stack_chk_guard
10000561e:	mov	rcx, qword ptr [rcx]
100005621:	cmp	rcx, qword ptr [rbp - 0x30]
100005625:	jne	0x100005658
100005627:	add	rsp, 0x158
10000562e:	pop	rbx
10000562f:	pop	r12
100005631:	pop	r13
100005633:	pop	r14
100005635:	pop	r15
100005637:	pop	rbp
100005638:	ret
100005639:	lea	rdi, [rbp - 0x40]
10000563d:	mov	byte ptr [rdi + 0x2], 0x0
100005641:	mov	word ptr [rdi], 0x2d2d
100005646:	mov	edx, 0x10
10000564b:	mov	rsi, r13
10000564e:	call	0x100009e9e ## symbol stub for: ___strcat_chk
100005653:	jmp	0x100005467
100005658:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
10000565d:	call	0x100005b8a
100005662:	call	0x100005b62
100005667:	mov	rdi, qword ptr [rbp - 0x70]
10000566b:	call	0x100009f82 ## symbol stub for: _archive_error_string
100005670:	lea	rdx, [rip + 0x5600] ## literal pool for: "Error : %s"
100005677:	mov	edi, 0x1
10000567c:	xor	esi, esi
10000567e:	mov	rcx, rax
100005681:	jmp	0x10000581b
100005686:	call	0x100009e86 ## symbol stub for: ___error
10000568b:	mov	esi, dword ptr [rax]
10000568d:	lea	rdx, [rip + 0x54e0] ## literal pool for: "Out of memory"
100005694:	jmp	0x100005882
100005699:	movsx	r8d, r14b
10000569d:	lea	rdx, [rip + 0x5591] ## literal pool for: "Can't specify both -%c and -%c"
1000056a4:	mov	edi, 0x1
1000056a9:	xor	esi, esi
1000056ab:	mov	ecx, eax
1000056ad:	jmp	0x10000585d
1000056b2:	movsx	r8d, r14b
1000056b6:	lea	rdx, [rip + 0x5578] ## literal pool for: "Can't specify both -%c and -%c"
1000056bd:	mov	edi, 0x1
1000056c2:	mov	esi, 0x0
1000056c7:	mov	ecx, 0x6a
1000056cc:	jmp	0x10000585d
1000056d1:	lea	rdx, [rip + 0x555d] ## literal pool for: "Can't specify both -%c and -%c"
1000056d8:	mov	edi, 0x1
1000056dd:	mov	esi, 0x0
1000056e2:	mov	ecx, 0x72
1000056e7:	jmp	0x10000585d
1000056ec:	lea	rdx, [rip + 0x548f] ## literal pool for: "Argument to -b is out of range (1..8192)"
1000056f3:	jmp	0x100005890
1000056f8:	lea	rdx, [rip + 0x54e4] ## literal pool for: "Meaningless option: -C ''"
1000056ff:	jmp	0x100005890
100005704:	lea	rdx, [rip + 0x552a] ## literal pool for: "Can't specify both -%c and -%c"
10000570b:	mov	edi, 0x1
100005710:	mov	esi, 0x0
100005715:	mov	ecx, 0x74
10000571a:	jmp	0x10000585d
10000571f:	lea	rdx, [rip + 0x550f] ## literal pool for: "Can't specify both -%c and -%c"
100005726:	mov	edi, 0x1
10000572b:	mov	esi, 0x0
100005730:	mov	ecx, 0x63
100005735:	jmp	0x10000585d
10000573a:	lea	rdx, [rip + 0x556d] ## literal pool for: "Argument to --uid must be positive"
100005741:	jmp	0x100005890
100005746:	lea	rdx, [rip + 0x54e8] ## literal pool for: "Can't specify both -%c and -%c"
10000574d:	mov	edi, 0x1
100005752:	mov	esi, 0x0
100005757:	mov	ecx, 0x75
10000575c:	jmp	0x10000585d
100005761:	movsx	r8d, r14b
100005765:	lea	rdx, [rip + 0x54c9] ## literal pool for: "Can't specify both -%c and -%c"
10000576c:	mov	edi, 0x1
100005771:	mov	esi, 0x0
100005776:	mov	ecx, 0x5a
10000577b:	jmp	0x10000585d
100005780:	lea	rdx, [rip + 0x548b] ## literal pool for: "Argument to --gid must be positive"
100005787:	jmp	0x100005890
10000578c:	movsx	r8d, r14b
100005790:	lea	rdx, [rip + 0x549e] ## literal pool for: "Can't specify both -%c and -%c"
100005797:	mov	edi, 0x1
10000579c:	mov	esi, 0x0
1000057a1:	mov	ecx, 0xb
1000057a6:	jmp	0x10000585d
1000057ab:	mov	rcx, qword ptr [rbp - 0xd0]
1000057b2:	lea	rdx, [rip + 0x5444] ## literal pool for: "Couldn't exclude %s\n"
1000057b9:	jmp	0x100005814
1000057bb:	movsx	r8d, r14b
1000057bf:	lea	rdx, [rip + 0x546f] ## literal pool for: "Can't specify both -%c and -%c"
1000057c6:	mov	edi, 0x1
1000057cb:	mov	esi, 0x0
1000057d0:	mov	ecx, 0x4a
1000057d5:	jmp	0x10000585d
1000057da:	movsx	r8d, r14b
1000057de:	lea	rdx, [rip + 0x5450] ## literal pool for: "Can't specify both -%c and -%c"
1000057e5:	mov	edi, 0x1
1000057ea:	mov	esi, 0x0
1000057ef:	mov	ecx, 0x7a
1000057f4:	jmp	0x10000585d
1000057f6:	mov	rcx, qword ptr [rbp - 0xd0]
1000057fd:	lea	rdx, [rip + 0x5450] ## literal pool for: "Failed to add %s to inclusion list"
100005804:	jmp	0x100005814
100005806:	mov	rcx, qword ptr [rbp - 0xd0]
10000580d:	lea	rdx, [rip + 0x5472] ## literal pool for: "Invalid --strip-components argument: %s"
100005814:	mov	edi, 0x1
100005819:	xor	esi, esi
10000581b:	xor	eax, eax
10000581d:	call	0x100009ac2
100005822:	lea	rdx, [rip + 0x5382] ## literal pool for: "Can't specify both --uuencode and --b64encode"
100005829:	jmp	0x100005890
10000582b:	movsx	r8d, r14b
10000582f:	lea	rdx, [rip + 0x53ff] ## literal pool for: "Can't specify both -%c and -%c"
100005836:	mov	edi, 0x1
10000583b:	mov	esi, 0x0
100005840:	mov	ecx, 0x79
100005845:	jmp	0x10000585d
100005847:	lea	rdx, [rip + 0x53e7] ## literal pool for: "Can't specify both -%c and -%c"
10000584e:	mov	edi, 0x1
100005853:	mov	esi, 0x0
100005858:	mov	ecx, 0x78
10000585d:	xor	eax, eax
10000585f:	call	0x100009ac2
100005864:	call	0x100009e86 ## symbol stub for: ___error
100005869:	mov	esi, dword ptr [rax]
10000586b:	lea	rdx, [rip + 0x5298] ## literal pool for: "sigaction(SIGINFO) failed"
100005872:	jmp	0x100005882
100005874:	call	0x100009e86 ## symbol stub for: ___error
100005879:	mov	esi, dword ptr [rax]
10000587b:	lea	rdx, [rip + 0x52a2] ## literal pool for: "sigaction(SIGUSR1) failed"
100005882:	mov	edi, 0x1
100005887:	jmp	0x100005897
100005889:	lea	rdx, [rip + 0x5441] ## literal pool for: "Must specify one of -c, -r, -t, -u, -x"
100005890:	mov	edi, 0x1
100005895:	xor	esi, esi
100005897:	xor	eax, eax
100005899:	call	0x100009ac2
10000589e:	nop
	.byte 0xc4 #bad opcode
1000058a1:	hlt
	.byte 0xff #bad opcode
1000058a3:	dec	dword ptr [rax - 0xc]
	.byte 0xff #bad opcode
1000058a7:	inc	dword ptr [rbp - 0xf]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058ac:	in	eax, dx
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
1000058af:	call	[rax]
1000058b1:	hlt
	.byte 0xff #bad opcode
1000058b3:	jmp	qword ptr [rip - 0x2100000b]
1000058b9:	hlt
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058bc:	clc
1000058bd:	hlt
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058c0:	stc
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058c4:	stc
1000058c5:	cmc
	.byte 0xff #bad opcode
1000058c7:	jmp	qword ptr [rsp + 8*rsi]
	.byte 0xff #bad opcode
1000058cb:	dec	dword ptr [rdx]
1000058cd:	clc
	.byte 0xff #bad opcode
1000058cf:	push	qword ptr [rbp + 8*rsi - 0x1]
1000058d3:	dec	edx
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
1000058d7:	dec	dword ptr [rsi + 8*rsi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058dc:	mov	eax, 0x11fffff4
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000058e3:	call	qword ptr [rcx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000058e7:	call	qword ptr [rcx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000058eb:	call	qword ptr [rcx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000058ef:	call	qword ptr [rcx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000058f3:	jmp	qword ptr [rdi - 0xc]
	.byte 0xff #bad opcode
1000058f7:	call	qword ptr [rax]
1000058f9:	cmc
	.byte 0xff #bad opcode
1000058fb:	push	qword ptr [rbx - 0x3700000e]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100005903:	inc	dword ptr [rax + 0x49fffff5]
100005909:	idiv	bh
10000590b:	inc	dword ptr [rdx - 0xb]
	.byte 0xff #bad opcode
10000590f:	dec	dword ptr [rsi - 0xb]
	.byte 0xff #bad opcode
100005913:	jmp	qword ptr [rbx + 8*rsi - 0xcb30001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000591c:	mov	esi, 0x6efffff3
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0x3f #bad opcode
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100005927:	call	[rbx - 0xa]
	.byte 0xff #bad opcode
10000592b:	jmp	qword ptr [rsi + 8*rsi - 0x1]
10000592f:	call	[rcx + 0x29fffff6]
100005935:	idiv	bh
100005937:	call	qword ptr [rbp + 0x14fffff5]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005940:	cmp	al, -0xc
	.byte 0xff #bad opcode
100005943:	jmp	[rdx + 0x12fffff5]
100005949:	idiv	edi
10000594b:	jmp	qword ptr [rax + 0x68fffff2]
100005951:	cmc
	.byte 0xff #bad opcode
100005953:	call	rax
100005955:	idiv	bh
100005957:	push	qword ptr [rbx]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdd #bad opcode
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
10000595f:	jmp	qword ptr [rsi - 0xd]
	.byte 0xff #bad opcode
100005963:	call	[rcx - 0x9]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005968:	cmp	dh, bh
	.byte 0xff #bad opcode
10000596b:	inc	edx
10000596d:	std
	.byte 0xff #bad opcode
10000596f:	inc	dword ptr [rdx - 0x4200000a]
100005975:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005978:	mov	ebp, 0xbdfffffd
10000597d:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005980:	mov	ebp, 0xbdfffffd
100005985:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005988:	mov	ebp, 0xbdfffffd
10000598d:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005990:	mov	ebp, 0xbdfffffd
100005995:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005998:	mov	ebp, 0xbdfffffd
10000599d:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059a0:	mov	ebp, 0xb6fffffd
1000059a5:	idiv	bh
1000059a7:	dec	esi
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059ac:	mov	ebp, 0xbdfffffd
1000059b1:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059b4:	mov	ebp, 0xbdfffffd
1000059b9:	std
	.byte 0xff #bad opcode
1000059bb:	inc	dword ptr [rax - 0xa]
	.byte 0xff #bad opcode
1000059bf:	call	qword ptr [rcx - 0xf]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059c4:	mov	ebp, 0xbdfffff5
1000059c9:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059cc:	cld
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059d0:	mov	ebp, 0xbdfffffd
1000059d5:	std
	.byte 0xff #bad opcode
1000059d7:	call	rbp
1000059d9:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059dc:	jns	0x1000059d1
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059e0:	mov	ebp, 0xbdfffffd
1000059e5:	std
	.byte 0xff #bad opcode
1000059e7:	inc	dword ptr [rcx + 0x51fffff4]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
1000059ef:	dec	dword ptr [rbp - 0x4200000c]
1000059f5:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059f8:	mov	ebp, 0xd6fffffd
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a00:	mov	ebp, 0x8cfffffd
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a08:	mov	ebp, 0xbdfffffd
100005a0d:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a10:	mov	ebp, 0xbdfffffd
100005a15:	std
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a18:	mov	ebp, 0xbdfffffd
100005a1d:	std
	.byte 0xff #bad opcode
100005a1f:	jmp	qword ptr [rax - 0x6000000c]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a28:	jge	0x100005a1c
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a2c:	mov	ebp, 0xbdfffffd
100005a31:	std
	.byte 0xff #bad opcode
100005a33:	jmp	qword ptr [rbp - 0x9]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a38:	mov	ebp, 0x59fffffd
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a40:	mov	ebp, 0x64fffffd
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a48:	out	dx, eax
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
100005a4b:	inc	dword ptr [rbp - 0xf]
	.byte 0xff #bad opcode
100005a4f:	call	qword ptr [rdx - 0xa]
	.byte 0xff #bad opcode
100005a53:	inc	dword ptr [rax]
100005a55:	idiv	edi
100005a57:	dec	dword ptr [rcx]
100005a59:	idiv	edi
100005a5b:	jmp	qword ptr [rdx + 8*rsi]
	.byte 0xff #bad opcode
100005a5f:	jmp	[rsp + 8*rsi - 0xe830001]
	.byte 0xff #bad opcode
100005a67:	jmp	qword ptr [rdx]
100005a69:	idiv	edi
	.byte 0xff #bad opcode
100005a6c:	sti
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
100005a6f:	jmp	[rcx]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100005a73:	call	[rcx]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100005a77:	dec	dword ptr [rax]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100005a7b:	call	qword ptr [rax + 0x78fffff7]
100005a81:	idiv	edi
100005a83:	jmp	rcx
100005a85:	cmc
	.byte 0xff #bad opcode
100005a87:	dec	dword ptr [rsi - 0x11]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a8c:	clc
100005a8d:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xda #bad opcode
100005a91:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005a94:	jmp	0xcc005a8e
100005a99:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdf #bad opcode
100005a9d:	cli
	.byte 0xff #bad opcode
100005a9f:	jmp	[rax]
100005aa1:	sti
	.byte 0xff #bad opcode
100005aa3:	call	[rbx + 8*rdi]
	.byte 0xff #bad opcode
100005aa7:	inc	dword ptr [rax]
100005aa9:	sti
	.byte 0xff #bad opcode
100005aab:	jmp	[rax]
100005aad:	sti
	.byte 0xff #bad opcode
100005aaf:	jmp	[rax]
100005ab1:	sti
	.byte 0xff #bad opcode
100005ab3:	dec	dword ptr [rsi]
100005ab5:	sti
	.byte 0xff #bad opcode
100005ab7:	call	qword ptr [rbp + 0x48]
100005aba:	mov	ebp, esp
100005abc:	mov	dword ptr [rip + 0xaaba], 0x1
100005ac6:	pop	rbp
100005ac7:	ret
100005ac8:	push	rbp
100005ac9:	mov	rbp, rsp
100005acc:	push	r15
100005ace:	push	r14
100005ad0:	push	rbx
100005ad1:	push	rax
100005ad2:	call	0x10000996a
100005ad7:	mov	r14, rax
100005ada:	mov	rax, qword ptr [rip + 0x652f] ## literal pool symbol address: ___stderrp
100005ae1:	mov	rdi, qword ptr [rax]
100005ae4:	call	0x10000a180 ## symbol stub for: _fflush
100005ae9:	lea	rsi, [rip + 0x504e] ## literal pool for: "bsdtar"
100005af0:	mov	rdi, r14
100005af3:	call	0x10000a246 ## symbol stub for: _strcmp
100005af8:	test	eax, eax
100005afa:	lea	rax, [rip + 0x5044] ## literal pool for: ""
100005b01:	lea	rdx, [rip + 0x5406] ## literal pool for: "(bsdtar)"
100005b08:	cmove	rdx, rax
100005b0c:	lea	rdi, [rip + 0x5404] ## literal pool for: "%s%s: manipulate archive files\n"
100005b13:	mov	rsi, r14
100005b16:	xor	eax, eax
100005b18:	call	0x10000a1f2 ## symbol stub for: _printf
100005b1d:	lea	rbx, [rip + 0x5413] ## literal pool for: "First option must be a mode specifier:\n  -c Create  -r Add/Replace  -t List  -u Update  -x Extract\nCommon Options:\n  -b #  Use # 512-byte records per I/O block\n  -f <filename>  Location of archive\n  -v    Verbose\n  -w    Interactive\nCreate: %p -c [options] [<file> | <dir> | @<archive> | -C <dir> ]\n  <file>, <dir>  add these items to archive\n  -z, -j, -J, --lzma  Compress archive with gzip/bzip2/xz/lzma\n  --format {ustar|pax|cpio|shar}  Select archive format\n  --exclude <pattern>  Skip files that match pattern\n  -C <dir>  Change to <dir> before processing remaining files\n  @<archive>  Add entries from <archive> to output\nList: %p -t [options] [<patterns>]\n  <patterns>  If specified, list only entries that match\nExtract: %p -x [options] [<patterns>]\n  <patterns>  If specified, extract only entries that match\n  -k    Keep (don't overwrite) existing files\n  -m    Don't restore modification times\n  -O    Write entries to stdout, don't restore to disk\n  -p    Restore permissions (including ACLs, owner, file flags)\n"
100005b24:	mov	r15, qword ptr [rip + 0x64f5] ## literal pool symbol address: ___stdoutp
100005b2b:	movsx	edi, byte ptr [rbx]
100005b2e:	test	edi, edi
100005b30:	je	0x100005b5d
100005b32:	cmp	dil, 0x25
100005b36:	jne	0x100005b53
100005b38:	cmp	byte ptr [rbx + 0x1], 0x70
100005b3c:	jne	0x100005b4e
100005b3e:	inc	rbx
100005b41:	mov	rsi, qword ptr [r15]
100005b44:	mov	rdi, r14
100005b47:	call	0x10000a198 ## symbol stub for: _fputs
100005b4c:	jmp	0x100005b58
100005b4e:	mov	edi, 0x25
100005b53:	call	0x10000a1f8 ## symbol stub for: _putchar
100005b58:	inc	rbx
100005b5b:	jmp	0x100005b2b
100005b5d:	call	0x100005b62
100005b62:	push	rbp
100005b63:	mov	rbp, rsp
100005b66:	call	0x10000a0c6 ## symbol stub for: _archive_version_details
100005b6b:	lea	rdi, [rip + 0x5386] ## literal pool for: "bsdtar %s - %s\n"
100005b72:	lea	rsi, [rip + 0x538f] ## literal pool for: "3.3.2"
100005b79:	mov	rdx, rax
100005b7c:	xor	eax, eax
100005b7e:	call	0x10000a1f2 ## symbol stub for: _printf
100005b83:	xor	edi, edi
100005b85:	call	0x10000a168 ## symbol stub for: _exit
100005b8a:	push	rbp
100005b8b:	mov	rbp, rsp
100005b8e:	push	r14
100005b90:	push	rbx
100005b91:	call	0x10000996a
100005b96:	mov	rbx, rax
100005b99:	mov	r14, qword ptr [rip + 0x6470] ## literal pool symbol address: ___stderrp
100005ba0:	mov	rcx, qword ptr [r14]
100005ba3:	lea	rdi, [rip + 0x5288] ## literal pool for: "Usage:\n"
100005baa:	mov	esi, 0x7
100005baf:	mov	edx, 0x1
100005bb4:	call	0x10000a1aa ## symbol stub for: _fwrite
100005bb9:	mov	rdi, qword ptr [r14]
100005bbc:	lea	rsi, [rip + 0x5277] ## literal pool for: "  List:    %s -tf <archive-filename>\n"
100005bc3:	mov	rdx, rbx
100005bc6:	xor	eax, eax
100005bc8:	call	0x10000a18c ## symbol stub for: _fprintf
100005bcd:	mov	rdi, qword ptr [r14]
100005bd0:	lea	rsi, [rip + 0x5289] ## literal pool for: "  Extract: %s -xf <archive-filename>\n"
100005bd7:	mov	rdx, rbx
100005bda:	xor	eax, eax
100005bdc:	call	0x10000a18c ## symbol stub for: _fprintf
100005be1:	mov	rdi, qword ptr [r14]
100005be4:	lea	rsi, [rip + 0x529b] ## literal pool for: "  Create:  %s -cf <archive-filename> [filenames...]\n"
100005beb:	mov	rdx, rbx
100005bee:	xor	eax, eax
100005bf0:	call	0x10000a18c ## symbol stub for: _fprintf
100005bf5:	mov	rdi, qword ptr [r14]
100005bf8:	lea	rsi, [rip + 0x52bc] ## literal pool for: "  Help:    %s --help\n"
100005bff:	mov	rdx, rbx
100005c02:	xor	eax, eax
100005c04:	call	0x10000a18c ## symbol stub for: _fprintf
100005c09:	mov	edi, 0x1
100005c0e:	call	0x10000a168 ## symbol stub for: _exit
100005c13:	push	rbp
100005c14:	mov	rbp, rsp
100005c17:	push	r14
100005c19:	push	rbx
100005c1a:	mov	r14, rsi
100005c1d:	movsx	ebx, byte ptr [rdi + 0x58]
100005c21:	mov	rdi, rdx
100005c24:	mov	esi, ebx
100005c26:	call	0x10000a240 ## symbol stub for: _strchr
100005c2b:	test	rax, rax
100005c2e:	je	0x100005c35
100005c30:	pop	rbx
100005c31:	pop	r14
100005c33:	pop	rbp
100005c34:	ret
100005c35:	lea	rdx, [rip + 0x5295] ## literal pool for: "Option %s is not permitted in mode -%c"
100005c3c:	mov	edi, 0x1
100005c41:	xor	esi, esi
100005c43:	mov	rcx, r14
100005c46:	mov	r8d, ebx
100005c49:	xor	eax, eax
100005c4b:	call	0x100009ac2
100005c50:	push	rbp
100005c51:	mov	rbp, rsp
100005c54:	push	r15
100005c56:	push	r14
100005c58:	push	r13
100005c5a:	push	r12
100005c5c:	push	rbx
100005c5d:	sub	rsp, 0x28
100005c61:	mov	r15, rdi
100005c64:	mov	eax, dword ptr [rdi + 0x78]
100005c67:	lea	r13, [rip + 0x412]
100005c6e:	lea	rcx, [rip + 0x5186] ## literal pool for: "--"
100005c75:	mov	qword ptr [rbp - 0x38], rcx
100005c79:	mov	r14d, 0x3f
100005c7f:	mov	qword ptr [r15 + 0x98], 0x0
100005c8a:	cmp	eax, 0x4
100005c8d:	ja	0x100005e39
100005c93:	mov	eax, eax
100005c95:	movsxd	rax, dword ptr [r13 + 4*rax]
100005c9a:	add	rax, r13
100005c9d:	jmp	rax
100005c9f:	mov	rcx, qword ptr [r15 + 0x90]
100005ca6:	lea	rax, [rcx + 0x8]
100005caa:	mov	qword ptr [r15 + 0x90], rax
100005cb1:	mov	eax, dword ptr [r15 + 0x8c]
100005cb8:	lea	edx, [rax - 0x1]
100005cbb:	mov	dword ptr [r15 + 0x8c], edx
100005cc2:	mov	rdx, qword ptr [rcx + 0x8]
100005cc6:	test	rdx, rdx
100005cc9:	je	0x100005e33
100005ccf:	cmp	byte ptr [rdx], 0x2d
100005cd2:	je	0x100005d19
100005cd4:	mov	dword ptr [r15 + 0x78], 0x1
100005cdc:	lea	rdx, [rcx + 0x10]
100005ce0:	mov	qword ptr [r15 + 0x90], rdx
100005ce7:	mov	rcx, qword ptr [rcx + 0x8]
100005ceb:	mov	qword ptr [r15 + 0x80], rcx
100005cf2:	add	eax, -0x2
100005cf5:	mov	dword ptr [r15 + 0x8c], eax
100005cfc:	mov	rax, qword ptr [r15 + 0x80]
100005d03:	lea	rcx, [rax + 0x1]
100005d07:	mov	qword ptr [r15 + 0x80], rcx
100005d0e:	movsx	ebx, byte ptr [rax]
100005d11:	test	ebx, ebx
100005d13:	jne	0x100005f7a
100005d19:	mov	dword ptr [r15 + 0x78], 0x2
100005d21:	mov	rbx, qword ptr [r15 + 0x90]
100005d28:	mov	rdi, qword ptr [rbx]
100005d2b:	test	rdi, rdi
100005d2e:	je	0x100005e33
100005d34:	cmp	byte ptr [rdi], 0x2d
100005d37:	jne	0x100005e33
100005d3d:	lea	rsi, [rip + 0x50b7] ## literal pool for: "--"
100005d44:	call	0x10000a246 ## symbol stub for: _strcmp
100005d49:	lea	rcx, [rbx + 0x8]
100005d4d:	mov	qword ptr [r15 + 0x90], rcx
100005d54:	test	eax, eax
100005d56:	je	0x100005e2c
100005d5c:	mov	rbx, qword ptr [rbx]
100005d5f:	mov	qword ptr [r15 + 0x80], rbx
100005d66:	dec	dword ptr [r15 + 0x8c]
100005d6d:	cmp	byte ptr [rbx + 0x1], 0x2d
100005d71:	je	0x100005e4b
100005d77:	inc	rbx
100005d7a:	mov	dword ptr [r15 + 0x78], 0x3
100005d82:	mov	qword ptr [r15 + 0x80], rbx
100005d89:	jmp	0x100005d92
100005d8b:	mov	rbx, qword ptr [r15 + 0x80]
100005d92:	lea	r12, [rbx + 0x1]
100005d96:	mov	qword ptr [r15 + 0x80], r12
100005d9d:	movsx	ebx, byte ptr [rbx]
100005da0:	test	ebx, ebx
100005da2:	jne	0x100005db6
100005da4:	mov	dword ptr [r15 + 0x78], 0x2
100005dac:	mov	eax, 0x2
100005db1:	jmp	0x100005c7f
100005db6:	lea	rdi, [rip + 0x5651] ## literal pool for: "aBb:C:cf:HhI:JjkLlmnOoPpqrSs:T:tUuvW:wX:xyZz"
100005dbd:	mov	edx, 0x2d
100005dc2:	mov	esi, ebx
100005dc4:	call	0x10000a1d4 ## symbol stub for: _memchr
100005dc9:	test	rax, rax
100005dcc:	je	0x100005e39
100005dce:	cmp	byte ptr [rax + 0x1], 0x3a
100005dd2:	jne	0x100006034
100005dd8:	cmp	byte ptr [r12], 0x0
100005ddd:	jne	0x100005e0b
100005ddf:	mov	rax, qword ptr [r15 + 0x90]
100005de6:	mov	r12, qword ptr [rax]
100005de9:	mov	qword ptr [r15 + 0x80], r12
100005df0:	test	r12, r12
100005df3:	je	0x10000603c
100005df9:	add	rax, 0x8
100005dfd:	mov	qword ptr [r15 + 0x90], rax
100005e04:	dec	dword ptr [r15 + 0x8c]
100005e0b:	cmp	bl, 0x57
100005e0e:	jne	0x100006025
100005e14:	mov	dword ptr [r15 + 0x78], 0x4
100005e1c:	lea	rax, [rip + 0x5554] ## literal pool for: "-W "
100005e23:	mov	qword ptr [rbp - 0x38], rax
100005e27:	mov	rbx, r12
100005e2a:	jmp	0x100005e6a
100005e2c:	dec	dword ptr [r15 + 0x8c]
100005e33:	mov	r14d, 0xffffffff
100005e39:	mov	eax, r14d
100005e3c:	add	rsp, 0x28
100005e40:	pop	rbx
100005e41:	pop	r12
100005e43:	pop	r13
100005e45:	pop	r14
100005e47:	pop	r15
100005e49:	pop	rbp
100005e4a:	ret
100005e4b:	mov	dword ptr [r15 + 0x78], 0x4
100005e53:	add	rbx, 0x2
100005e57:	mov	qword ptr [r15 + 0x80], rbx
100005e5e:	jmp	0x100005e67
100005e60:	mov	rbx, qword ptr [r15 + 0x80]
100005e67:	mov	r12, rbx
100005e6a:	mov	dword ptr [r15 + 0x78], 0x2
100005e72:	mov	rdi, r12
100005e75:	mov	esi, 0x3d
100005e7a:	call	0x10000a240 ## symbol stub for: _strchr
100005e7f:	test	rax, rax
100005e82:	je	0x100005e9d
100005e84:	mov	rdx, rax
100005e87:	sub	rdx, rbx
100005e8a:	inc	rax
100005e8d:	mov	rcx, rax
100005e90:	mov	qword ptr [rbp - 0x40], rax
100005e94:	mov	qword ptr [r15 + 0x98], rax
100005e9b:	jmp	0x100005eae
100005e9d:	mov	rdi, r12
100005ea0:	call	0x10000a26a ## symbol stub for: _strlen
100005ea5:	mov	rdx, rax
100005ea8:	xor	eax, eax
100005eaa:	mov	qword ptr [rbp - 0x40], rax
100005eae:	mov	al, byte ptr [r12]
100005eb2:	lea	r14, [rip + 0x6397]
100005eb9:	lea	rbx, [rip + 0x557b] ## literal pool for: "absolute-paths"
100005ec0:	xor	ecx, ecx
100005ec2:	mov	qword ptr [rbp - 0x48], rcx
100005ec6:	xor	ecx, ecx
100005ec8:	mov	qword ptr [rbp - 0x50], r12
100005ecc:	mov	byte ptr [rbp - 0x29], al
100005ecf:	mov	r13, rcx
100005ed2:	cmp	byte ptr [rbx], al
100005ed4:	jne	0x100005ef7
100005ed6:	mov	rdi, r12
100005ed9:	mov	rsi, rbx
100005edc:	mov	r12, rdx
100005edf:	call	0x10000a270 ## symbol stub for: _strncmp
100005ee4:	test	eax, eax
100005ee6:	je	0x100005efc
100005ee8:	mov	rcx, r13
100005eeb:	mov	rdx, r12
100005eee:	mov	r12, qword ptr [rbp - 0x50]
100005ef2:	mov	al, byte ptr [rbp - 0x29]
100005ef5:	jmp	0x100005f1e
100005ef7:	mov	rcx, r13
100005efa:	jmp	0x100005f1e
100005efc:	mov	rdi, rbx
100005eff:	call	0x10000a26a ## symbol stub for: _strlen
100005f04:	mov	rcx, r14
100005f07:	mov	qword ptr [rbp - 0x48], r13
100005f0b:	cmp	rax, r12
100005f0e:	mov	rdx, r12
100005f11:	mov	r12, qword ptr [rbp - 0x50]
100005f15:	mov	al, byte ptr [rbp - 0x29]
100005f18:	je	0x100005fd1
100005f1e:	mov	rbx, qword ptr [r14 + 0x10]
100005f22:	add	r14, 0x10
100005f26:	test	rbx, rbx
100005f29:	jne	0x100005ecf
100005f2b:	test	rcx, rcx
100005f2e:	je	0x100005f65
100005f30:	mov	rax, qword ptr [rbp - 0x48]
100005f34:	test	rax, rax
100005f37:	mov	r14d, 0x3f
100005f3d:	je	0x100005fce
100005f43:	mov	r8, qword ptr [rcx]
100005f46:	mov	r9, qword ptr [rax]
100005f49:	lea	rsi, [rip + 0x5448] ## literal pool for: "Ambiguous option %s%s (matches --%s and --%s)"
100005f50:	xor	edi, edi
100005f52:	mov	rdx, qword ptr [rbp - 0x38]
100005f56:	mov	rcx, r12
100005f59:	xor	eax, eax
100005f5b:	call	0x1000099ad
100005f60:	jmp	0x100005e39
100005f65:	lea	rsi, [rip + 0x540f] ## literal pool for: "Option %s%s is not supported"
100005f6c:	xor	edi, edi
100005f6e:	mov	rdx, qword ptr [rbp - 0x38]
100005f72:	mov	rcx, r12
100005f75:	jmp	0x10000606c
100005f7a:	lea	rdi, [rip + 0x548d] ## literal pool for: "aBb:C:cf:HhI:JjkLlmnOoPpqrSs:T:tUuvW:wX:xyZz"
100005f81:	mov	edx, 0x2d
100005f86:	mov	esi, ebx
100005f88:	call	0x10000a1d4 ## symbol stub for: _memchr
100005f8d:	test	rax, rax
100005f90:	je	0x100005e39
100005f96:	cmp	byte ptr [rax + 0x1], 0x3a
100005f9a:	jne	0x100006034
100005fa0:	mov	rax, qword ptr [r15 + 0x90]
100005fa7:	mov	rcx, qword ptr [rax]
100005faa:	mov	qword ptr [r15 + 0x98], rcx
100005fb1:	test	rcx, rcx
100005fb4:	je	0x100006045
100005fba:	add	rax, 0x8
100005fbe:	mov	qword ptr [r15 + 0x90], rax
100005fc5:	dec	dword ptr [r15 + 0x8c]
100005fcc:	jmp	0x100006034
100005fce:	mov	r14, rcx
100005fd1:	cmp	dword ptr [r14 + 0x8], 0x0
100005fd6:	je	0x100006009
100005fd8:	cmp	qword ptr [rbp - 0x40], 0x0
100005fdd:	jne	0x10000601c
100005fdf:	mov	rax, qword ptr [r15 + 0x90]
100005fe6:	mov	rcx, qword ptr [rax]
100005fe9:	mov	qword ptr [r15 + 0x98], rcx
100005ff0:	test	rcx, rcx
100005ff3:	je	0x10000605c
100005ff5:	add	rax, 0x8
100005ff9:	mov	qword ptr [r15 + 0x90], rax
100006000:	dec	dword ptr [r15 + 0x8c]
100006007:	jmp	0x10000601c
100006009:	cmp	qword ptr [rbp - 0x40], 0x0
10000600e:	je	0x10000601c
100006010:	mov	rcx, qword ptr [r14]
100006013:	lea	rsi, [rip + 0x53cd] ## literal pool for: "Option %s%s does not allow an argument"
10000601a:	jmp	0x100006066
10000601c:	mov	r14d, dword ptr [r14 + 0xc]
100006020:	jmp	0x100005e39
100006025:	mov	dword ptr [r15 + 0x78], 0x2
10000602d:	mov	qword ptr [r15 + 0x98], r12
100006034:	mov	r14d, ebx
100006037:	jmp	0x100005e39
10000603c:	lea	rsi, [rip + 0x5314] ## literal pool for: "Option -%c requires an argument"
100006043:	jmp	0x10000604c
100006045:	lea	rsi, [rip + 0x52ec] ## literal pool for: "Option %c requires an argument"
10000604c:	xor	edi, edi
10000604e:	mov	edx, ebx
100006050:	xor	eax, eax
100006052:	call	0x1000099ad
100006057:	jmp	0x100005e39
10000605c:	mov	rcx, qword ptr [r14]
10000605f:	lea	rsi, [rip + 0x5360] ## literal pool for: "Option %s%s requires an argument"
100006066:	xor	edi, edi
100006068:	mov	rdx, qword ptr [rbp - 0x38]
10000606c:	xor	eax, eax
10000606e:	call	0x1000099ad
100006073:	mov	r14d, 0x3f
100006079:	jmp	0x100005e39
10000607e:	nop
	.byte 0x1f #bad opcode
100006081:	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100006084:	jl	0x100006082
	.byte 0xff #bad opcode
100006087:	jmp	qword ptr [rcx + 0xbfffffc]
10000608d:	std
	.byte 0xff #bad opcode
10000608f:	jmp	rax
100006091:	std
	.byte 0xff #bad opcode
100006093:	call	qword ptr [rbp + 0x48]
100006096:	mov	ebp, esp
100006098:	push	rbx
100006099:	push	rax
10000609a:	mov	rbx, rdi
10000609d:	mov	esi, 0x74
1000060a2:	xor	edx, edx
1000060a4:	call	0x1000060ca
1000060a9:	mov	rdi, qword ptr [rbx + 0xf8]
1000060b0:	call	0x100006802
1000060b5:	test	eax, eax
1000060b7:	je	0x1000060c3
1000060b9:	mov	dword ptr [rbx + 0xb4], 0x1
1000060c3:	add	rsp, 0x8
1000060c7:	pop	rbx
1000060c8:	pop	rbp
1000060c9:	ret
1000060ca:	push	rbp
1000060cb:	mov	rbp, rsp
1000060ce:	push	r15
1000060d0:	push	r14
1000060d2:	push	r13
1000060d4:	push	r12
1000060d6:	push	rbx
1000060d7:	sub	rsp, 0x38
1000060db:	mov	qword ptr [rbp - 0x48], rdx
1000060df:	mov	r12d, esi
1000060e2:	mov	r13, rdi
1000060e5:	mov	rax, qword ptr [rdi + 0x90]
1000060ec:	mov	rsi, qword ptr [rax]
1000060ef:	test	rsi, rsi
1000060f2:	je	0x100006120
1000060f4:	mov	rdi, qword ptr [r13 + 0xf8]
1000060fb:	call	0x100009fd6 ## symbol stub for: _archive_match_include_pattern
100006100:	test	eax, eax
100006102:	jne	0x100006792
100006108:	mov	rax, qword ptr [r13 + 0x90]
10000610f:	lea	rcx, [rax + 0x8]
100006113:	mov	qword ptr [r13 + 0x90], rcx
10000611a:	mov	rsi, qword ptr [rax + 0x8]
10000611e:	jmp	0x1000060ef
100006120:	mov	rsi, qword ptr [r13 + 0x10]
100006124:	test	rsi, rsi
100006127:	je	0x100006146
100006129:	mov	rdi, qword ptr [r13 + 0xf8]
100006130:	mov	edx, 0x100
100006135:	and	edx, dword ptr [r13 + 0x24]
100006139:	call	0x100009fdc ## symbol stub for: _archive_match_include_pattern_from_file
10000613e:	test	eax, eax
100006140:	jne	0x100006792
100006146:	call	0x10000a078 ## symbol stub for: _archive_read_new
10000614b:	mov	r14, rax
10000614e:	mov	rdi, qword ptr [r13 + 0x70]
100006152:	mov	rsi, rax
100006155:	call	0x1000043bd
10000615a:	test	eax, eax
10000615c:	jne	0x100006166
10000615e:	mov	rdi, r14
100006161:	call	0x10000a0a2 ## symbol stub for: _archive_read_support_filter_all
100006166:	mov	rdi, r14
100006169:	call	0x10000a0ae ## symbol stub for: _archive_read_support_format_all
10000616e:	lea	rdi, [rip + 0x56e9] ## literal pool for: "TAR_READER_OPTIONS"
100006175:	call	0x10000a1b0 ## symbol stub for: _getenv
10000617a:	test	rax, rax
10000617d:	mov	dword ptr [rbp - 0x40], r12d
100006181:	je	0x100006222
100006187:	mov	r15, rax
10000618a:	mov	rdi, rax
10000618d:	call	0x10000a26a ## symbol stub for: _strlen
100006192:	mov	r12, rax
100006195:	lea	rdi, [rax + 0x1e]
100006199:	call	0x10000a1c8 ## symbol stub for: _malloc
10000619e:	test	rax, rax
1000061a1:	je	0x1000067d8
1000061a7:	mov	rbx, rax
1000061aa:	inc	r12
1000061ad:	movabs	rax, 0x2c5f5f656d616e5f
1000061b7:	mov	qword ptr [rbx + 0x15], rax
1000061bb:	movabs	rax, 0x616e5f656c75646f
1000061c5:	mov	qword ptr [rbx + 0x10], rax
1000061c9:	movabs	rax, 0x6d5f676e6f72775f
1000061d3:	mov	qword ptr [rbx + 0x8], rax
1000061d7:	movabs	rax, 0x65726f6e67695f5f
1000061e1:	mov	qword ptr [rbx], rax
1000061e4:	mov	rdi, rbx
1000061e7:	add	rdi, 0x1d
1000061eb:	mov	rsi, r15
1000061ee:	mov	rdx, r12
1000061f1:	call	0x10000a1da ## symbol stub for: _memcpy
1000061f6:	mov	rdi, r14
1000061f9:	mov	rsi, rbx
1000061fc:	call	0x10000a096 ## symbol stub for: _archive_read_set_options
100006201:	mov	r15d, eax
100006204:	mov	rdi, rbx
100006207:	call	0x10000a1a4 ## symbol stub for: _free
10000620c:	cmp	r15d, -0x1e
100006210:	je	0x1000067b6
100006216:	mov	rdi, r14
100006219:	call	0x100009ec8 ## symbol stub for: _archive_clear_error
10000621e:	mov	r12d, dword ptr [rbp - 0x40]
100006222:	mov	rsi, qword ptr [r13 + 0x60]
100006226:	mov	rdi, r14
100006229:	call	0x10000a096 ## symbol stub for: _archive_read_set_options
10000622e:	test	eax, eax
100006230:	jne	0x1000067b6
100006236:	test	byte ptr [r13 + 0x24], 0x10
10000623b:	je	0x100006254
10000623d:	lea	rsi, [rip + 0x5630] ## literal pool for: "read_concatenated_archives"
100006244:	mov	rdi, r14
100006247:	call	0x10000a096 ## symbol stub for: _archive_read_set_options
10000624c:	test	eax, eax
10000624e:	jne	0x1000067b6
100006254:	mov	rsi, qword ptr [r13 + 0x50]
100006258:	test	rsi, rsi
10000625b:	je	0x100006267
10000625d:	mov	rdi, r14
100006260:	call	0x100009ff4 ## symbol stub for: _archive_read_add_passphrase
100006265:	jmp	0x100006279
100006267:	lea	rdx, [rip + 0x1a63]
10000626e:	mov	rdi, r14
100006271:	mov	rsi, r13
100006274:	call	0x10000a09c ## symbol stub for: _archive_read_set_passphrase_callback
100006279:	test	eax, eax
10000627b:	jne	0x1000067b6
100006281:	mov	rsi, qword ptr [r13]
100006285:	movsxd	rdx, dword ptr [r13 + 0x18]
100006289:	mov	rdi, r14
10000628c:	call	0x10000a090 ## symbol stub for: _archive_read_open_filename
100006291:	test	eax, eax
100006293:	jne	0x1000067c7
100006299:	mov	rdi, r13
10000629c:	call	0x10000788f
1000062a1:	cmp	r12b, 0x78
1000062a5:	jne	0x100006313
1000062a7:	lea	rdx, [rbp - 0x60]
1000062ab:	mov	qword ptr [rdx], r13
1000062ae:	mov	qword ptr [rdx + 0x8], r14
1000062b2:	lea	rsi, [rip + 0x6e8]
1000062b9:	mov	rdi, r14
1000062bc:	call	0x10000a066 ## symbol stub for: _archive_read_extract_set_progress_callback
1000062c1:	test	byte ptr [r13 + 0x24], 0x4
1000062c6:	je	0x1000062dc
1000062c8:	lea	rdi, [rip + 0x55da] ## literal pool for: "."
1000062cf:	call	0x10000a15c ## symbol stub for: _chroot
1000062d4:	test	eax, eax
1000062d6:	jne	0x1000067e8
1000062dc:	cmp	qword ptr [r13], 0x0
1000062e1:	je	0x100006313
1000062e3:	test	byte ptr [r13 + 0x25], 0x8
1000062e8:	jne	0x100006313
1000062ea:	call	0x100009eb0 ## symbol stub for: __qtn_file_alloc
1000062ef:	test	rax, rax
1000062f2:	je	0x100006313
1000062f4:	mov	rbx, rax
1000062f7:	mov	rsi, qword ptr [r13]
1000062fb:	mov	rdi, rax
1000062fe:	call	0x100009ec2 ## symbol stub for: __qtn_file_init_with_path
100006303:	test	eax, eax
100006305:	je	0x1000066c8
10000630b:	mov	rdi, rbx
10000630e:	call	0x100009ebc ## symbol stub for: __qtn_file_free
100006313:	xor	eax, eax
100006315:	mov	qword ptr [rbp - 0x38], rax
100006319:	lea	r15, [rbp - 0x30]
10000631d:	test	byte ptr [r13 + 0x24], 0x8
100006322:	je	0x100006338
100006324:	mov	rdi, qword ptr [r13 + 0xf8]
10000632b:	call	0x100009fe8 ## symbol stub for: _archive_match_path_unmatched_inclusions
100006330:	test	eax, eax
100006332:	je	0x1000066f7
100006338:	mov	rdi, r14
10000633b:	mov	rsi, r15
10000633e:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100006343:	mov	ebx, eax
100006345:	mov	rax, qword ptr [rbp - 0x30]
100006349:	mov	qword ptr [rbp - 0x50], rax
10000634d:	cmp	ebx, 0x1
100006350:	je	0x1000066f7
100006356:	test	ebx, ebx
100006358:	jns	0x100006385
10000635a:	mov	rdi, r14
10000635d:	call	0x100009f82 ## symbol stub for: _archive_error_string
100006362:	xor	edi, edi
100006364:	lea	rsi, [rip + 0x5506] ## literal pool for: "%s"
10000636b:	mov	rdx, rax
10000636e:	xor	eax, eax
100006370:	call	0x1000099ad
100006375:	cmp	ebx, -0x14
100006378:	jg	0x100006385
10000637a:	mov	dword ptr [r13 + 0xb4], 0x1
100006385:	cmp	ebx, -0xa
100006388:	je	0x100006474
10000638e:	cmp	ebx, -0x1e
100006391:	je	0x1000066f7
100006397:	mov	rdi, qword ptr [rbp - 0x30]
10000639b:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000063a0:	test	rax, rax
1000063a3:	je	0x100006489
1000063a9:	cmp	byte ptr [rax], 0x0
1000063ac:	je	0x100006489
1000063b2:	mov	esi, dword ptr [r13 + 0x40]
1000063b6:	test	esi, esi
1000063b8:	js	0x1000063ce
1000063ba:	mov	rdi, qword ptr [rbp - 0x30]
1000063be:	call	0x100009f4c ## symbol stub for: _archive_entry_set_uid
1000063c3:	mov	rdi, qword ptr [rbp - 0x30]
1000063c7:	xor	esi, esi
1000063c9:	call	0x100009f52 ## symbol stub for: _archive_entry_set_uname
1000063ce:	mov	esi, dword ptr [r13 + 0x34]
1000063d2:	test	esi, esi
1000063d4:	js	0x1000063ea
1000063d6:	mov	rdi, qword ptr [rbp - 0x30]
1000063da:	call	0x100009f3a ## symbol stub for: _archive_entry_set_gid
1000063df:	mov	rdi, qword ptr [rbp - 0x30]
1000063e3:	xor	esi, esi
1000063e5:	call	0x100009f40 ## symbol stub for: _archive_entry_set_gname
1000063ea:	mov	rsi, qword ptr [r13 + 0x48]
1000063ee:	test	rsi, rsi
1000063f1:	je	0x1000063fc
1000063f3:	mov	rdi, qword ptr [rbp - 0x30]
1000063f7:	call	0x100009f52 ## symbol stub for: _archive_entry_set_uname
1000063fc:	mov	rsi, qword ptr [r13 + 0x38]
100006400:	test	rsi, rsi
100006403:	je	0x10000640e
100006405:	mov	rdi, qword ptr [rbp - 0x30]
100006409:	call	0x100009f40 ## symbol stub for: _archive_entry_set_gname
10000640e:	mov	rdi, qword ptr [r13 + 0xf8]
100006415:	mov	rsi, qword ptr [rbp - 0x30]
100006419:	call	0x100009fbe ## symbol stub for: _archive_match_excluded
10000641e:	test	eax, eax
100006420:	jne	0x10000631d
100006426:	cmp	r12b, 0x74
10000642a:	jne	0x1000064a9
10000642c:	test	byte ptr [r13 + 0x25], 0x8
100006431:	mov	rax, qword ptr [rip + 0x5bd8] ## literal pool symbol address: ___stderrp
100006438:	jne	0x100006441
10000643a:	mov	rax, qword ptr [rip + 0x5bdf] ## literal pool symbol address: ___stdoutp
100006441:	mov	r12, qword ptr [rax]
100006444:	cmp	dword ptr [r13 + 0x20], 0x1
100006449:	mov	rdx, qword ptr [rbp - 0x30]
10000644d:	jg	0x10000651f
100006453:	mov	rdi, rdx
100006456:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
10000645b:	mov	rdi, r12
10000645e:	lea	rsi, [rip + 0x540c] ## literal pool for: "%s"
100006465:	mov	rdx, rax
100006468:	xor	eax, eax
10000646a:	call	0x1000071a0
10000646f:	jmp	0x10000652a
100006474:	xor	edi, edi
100006476:	lea	rsi, [rip + 0x5442] ## literal pool for: "Retrying..."
10000647d:	xor	eax, eax
10000647f:	call	0x1000099ad
100006484:	jmp	0x10000631d
100006489:	xor	edi, edi
10000648b:	lea	rsi, [rip + 0x5439] ## literal pool for: "Archive entry has empty or unreadable filename ... skipping."
100006492:	xor	eax, eax
100006494:	call	0x1000099ad
100006499:	mov	dword ptr [r13 + 0xb4], 0x1
1000064a4:	jmp	0x10000631d
1000064a9:	mov	rsi, qword ptr [rbp - 0x30]
1000064ad:	mov	rdi, r13
1000064b0:	call	0x1000078da
1000064b5:	test	eax, eax
1000064b7:	jne	0x10000631d
1000064bd:	test	byte ptr [r13 + 0x24], 0x20
1000064c2:	je	0x1000064e6
1000064c4:	mov	rdi, qword ptr [rbp - 0x30]
1000064c8:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000064cd:	lea	rdi, [rip + 0x5434] ## literal pool for: "extract '%s'"
1000064d4:	mov	rsi, rax
1000064d7:	xor	eax, eax
1000064d9:	call	0x10000761c
1000064de:	test	eax, eax
1000064e0:	je	0x10000631d
1000064e6:	mov	eax, dword ptr [r13 + 0x20]
1000064ea:	cmp	eax, 0x2
1000064ed:	jl	0x1000065a3
1000064f3:	mov	rbx, qword ptr [rip + 0x5b16] ## literal pool symbol address: ___stderrp
1000064fa:	mov	rdi, qword ptr [rbx]
1000064fd:	lea	rsi, [rip + 0x5411] ## literal pool for: "x "
100006504:	xor	eax, eax
100006506:	call	0x1000071a0
10000650b:	mov	rsi, qword ptr [rbx]
10000650e:	mov	rdx, qword ptr [rbp - 0x30]
100006512:	mov	rdi, r13
100006515:	call	0x100007d57
10000651a:	jmp	0x1000065dd
10000651f:	mov	rdi, r13
100006522:	mov	rsi, r12
100006525:	call	0x100007d57
10000652a:	mov	rdi, r12
10000652d:	call	0x10000a180 ## symbol stub for: _fflush
100006532:	mov	rdi, r14
100006535:	call	0x10000a00c ## symbol stub for: _archive_read_data_skip
10000653a:	cmp	eax, -0xa
10000653d:	je	0x100006546
10000653f:	mov	ebx, eax
100006541:	cmp	eax, -0x14
100006544:	jne	0x100006584
100006546:	mov	edi, 0xa
10000654b:	mov	rsi, r12
10000654e:	call	0x10000a192 ## symbol stub for: _fputc
100006553:	mov	rdi, r14
100006556:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000655b:	xor	edi, edi
10000655d:	lea	rsi, [rip + 0x530d] ## literal pool for: "%s"
100006564:	mov	rdx, rax
100006567:	xor	eax, eax
100006569:	call	0x1000099ad
10000656e:	mov	edi, 0xa
100006573:	mov	rsi, r12
100006576:	call	0x10000a192 ## symbol stub for: _fputc
10000657b:	mov	r12d, dword ptr [rbp - 0x40]
10000657f:	jmp	0x10000631d
100006584:	mov	edi, 0xa
100006589:	mov	rsi, r12
10000658c:	call	0x10000a192 ## symbol stub for: _fputc
100006591:	cmp	ebx, -0x1e
100006594:	mov	r12d, dword ptr [rbp - 0x40]
100006598:	jne	0x10000631d
10000659e:	jmp	0x1000066d1
1000065a3:	cmp	eax, 0x1
1000065a6:	mov	rbx, qword ptr [rip + 0x5a63] ## literal pool symbol address: ___stderrp
1000065ad:	jne	0x1000065e5
1000065af:	mov	rax, qword ptr [rip + 0x5a5a] ## literal pool symbol address: ___stderrp
1000065b6:	mov	rbx, qword ptr [rax]
1000065b9:	mov	rdi, qword ptr [rbp - 0x30]
1000065bd:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000065c2:	mov	rdi, rbx
1000065c5:	mov	rbx, qword ptr [rip + 0x5a44] ## literal pool symbol address: ___stderrp
1000065cc:	lea	rsi, [rip + 0x5345] ## literal pool for: "x %s"
1000065d3:	mov	rdx, rax
1000065d6:	xor	eax, eax
1000065d8:	call	0x1000071a0
1000065dd:	mov	rdi, qword ptr [rbx]
1000065e0:	call	0x10000a180 ## symbol stub for: _fflush
1000065e5:	test	byte ptr [r13 + 0x25], 0x8
1000065ea:	jne	0x1000065fe
1000065ec:	mov	rsi, qword ptr [rbp - 0x30]
1000065f0:	mov	rdi, r14
1000065f3:	mov	rdx, qword ptr [rbp - 0x48]
1000065f7:	call	0x10000a060 ## symbol stub for: _archive_read_extract2
1000065fc:	jmp	0x10000660b
1000065fe:	mov	rdi, r14
100006601:	mov	esi, 0x1
100006606:	call	0x10000a006 ## symbol stub for: _archive_read_data_into_fd
10000660b:	mov	dword ptr [rbp - 0x3c], eax
10000660e:	test	eax, eax
100006610:	je	0x10000668e
100006612:	cmp	dword ptr [r13 + 0x20], 0x0
100006617:	jne	0x100006640
100006619:	mov	rax, qword ptr [rip + 0x59f0] ## literal pool symbol address: ___stderrp
100006620:	mov	rbx, qword ptr [rax]
100006623:	mov	rdi, qword ptr [rbp - 0x30]
100006627:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
10000662c:	mov	rdi, rbx
10000662f:	lea	rsi, [rip + 0x523b] ## literal pool for: "%s"
100006636:	mov	rdx, rax
100006639:	xor	eax, eax
10000663b:	call	0x1000071a0
100006640:	mov	rax, qword ptr [rip + 0x59c9] ## literal pool symbol address: ___stderrp
100006647:	mov	rbx, qword ptr [rax]
10000664a:	mov	rdi, r14
10000664d:	call	0x100009f82 ## symbol stub for: _archive_error_string
100006652:	mov	rdi, rbx
100006655:	mov	rbx, qword ptr [rip + 0x59b4] ## literal pool symbol address: ___stderrp
10000665c:	lea	rsi, [rip + 0x52ba] ## literal pool for: ": %s"
100006663:	mov	rdx, rax
100006666:	xor	eax, eax
100006668:	call	0x1000071a0
10000666d:	cmp	dword ptr [r13 + 0x20], 0x0
100006672:	jne	0x100006681
100006674:	mov	rsi, qword ptr [rbx]
100006677:	mov	edi, 0xa
10000667c:	call	0x10000a192 ## symbol stub for: _fputc
100006681:	mov	dword ptr [r13 + 0xb4], 0x1
10000668c:	jmp	0x1000066a3
10000668e:	mov	rdi, qword ptr [rbp - 0x30]
100006692:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100006697:	mov	rsi, qword ptr [rbp - 0x38]
10000669b:	mov	rdx, rax
10000669e:	call	0x100006908
1000066a3:	mov	eax, dword ptr [rbp - 0x3c]
1000066a6:	cmp	dword ptr [r13 + 0x20], 0x0
1000066ab:	je	0x1000066bd
1000066ad:	mov	rsi, qword ptr [rbx]
1000066b0:	mov	edi, 0xa
1000066b5:	call	0x10000a192 ## symbol stub for: _fputc
1000066ba:	mov	eax, dword ptr [rbp - 0x3c]
1000066bd:	cmp	eax, -0x1e
1000066c0:	jne	0x10000631d
1000066c6:	jmp	0x1000066f7
1000066c8:	mov	qword ptr [rbp - 0x38], rbx
1000066cc:	jmp	0x100006319
1000066d1:	mov	rdi, r14
1000066d4:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000066d9:	lea	rsi, [rip + 0x5191] ## literal pool for: "%s"
1000066e0:	xor	edi, edi
1000066e2:	mov	rdx, rax
1000066e5:	xor	eax, eax
1000066e7:	call	0x1000099ad
1000066ec:	mov	dword ptr [r13 + 0xb4], 0x1
1000066f7:	mov	rdi, r14
1000066fa:	call	0x100009ffa ## symbol stub for: _archive_read_close
1000066ff:	test	eax, eax
100006701:	je	0x100006730
100006703:	mov	ebx, eax
100006705:	mov	rdi, r14
100006708:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000670d:	lea	rsi, [rip + 0x515d] ## literal pool for: "%s"
100006714:	xor	edi, edi
100006716:	mov	rdx, rax
100006719:	xor	eax, eax
10000671b:	call	0x1000099ad
100006720:	cmp	ebx, -0x14
100006723:	jg	0x100006730
100006725:	mov	dword ptr [r13 + 0xb4], 0x1
100006730:	cmp	dword ptr [r13 + 0x20], 0x3
100006735:	jl	0x10000676d
100006737:	mov	rax, qword ptr [rip + 0x58e2] ## literal pool symbol address: ___stdoutp
10000673e:	mov	r15, qword ptr [rax]
100006741:	mov	rdi, r14
100006744:	call	0x100009fa6 ## symbol stub for: _archive_format_name
100006749:	mov	rbx, rax
10000674c:	mov	rdi, r14
10000674f:	xor	esi, esi
100006751:	call	0x100009f9a ## symbol stub for: _archive_filter_name
100006756:	lea	rsi, [rip + 0x51c5] ## literal pool for: "Archive Format: %s,  Compression: %s\n"
10000675d:	mov	rdi, r15
100006760:	mov	rdx, rbx
100006763:	mov	rcx, rax
100006766:	xor	eax, eax
100006768:	call	0x10000a18c ## symbol stub for: _fprintf
10000676d:	mov	rdi, r14
100006770:	call	0x10000a06c ## symbol stub for: _archive_read_free
100006775:	mov	rdi, qword ptr [rbp - 0x38]
100006779:	test	rdi, rdi
10000677c:	je	0x100006783
10000677e:	call	0x100009ebc ## symbol stub for: __qtn_file_free
100006783:	add	rsp, 0x38
100006787:	pop	rbx
100006788:	pop	r12
10000678a:	pop	r13
10000678c:	pop	r14
10000678e:	pop	r15
100006790:	pop	rbp
100006791:	ret
100006792:	mov	rdi, qword ptr [r13 + 0xf8]
100006799:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000679e:	lea	rdx, [rip + 0x509d] ## literal pool for: "Error inclusion pattern: %s"
1000067a5:	mov	edi, 0x1
1000067aa:	xor	esi, esi
1000067ac:	mov	rcx, rax
1000067af:	xor	eax, eax
1000067b1:	call	0x100009ac2
1000067b6:	mov	rdi, r14
1000067b9:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000067be:	lea	rdx, [rip + 0x50ac] ## literal pool for: "%s"
1000067c5:	jmp	0x1000067a5
1000067c7:	mov	rdi, r14
1000067ca:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000067cf:	lea	rdx, [rip + 0x50b9] ## literal pool for: "Error opening archive: %s"
1000067d6:	jmp	0x1000067a5
1000067d8:	call	0x100009e86 ## symbol stub for: ___error
1000067dd:	mov	esi, dword ptr [rax]
1000067df:	lea	rdx, [rip + 0x438e] ## literal pool for: "Out of memory"
1000067e6:	jmp	0x1000067f6
1000067e8:	call	0x100009e86 ## symbol stub for: ___error
1000067ed:	mov	esi, dword ptr [rax]
1000067ef:	lea	rdx, [rip + 0x50b5] ## literal pool for: "Can't chroot to \".\""
1000067f6:	mov	edi, 0x1
1000067fb:	xor	eax, eax
1000067fd:	call	0x100009ac2
100006802:	push	rbp
100006803:	mov	rbp, rsp
100006806:	push	r15
100006808:	push	r14
10000680a:	push	r12
10000680c:	push	rbx
10000680d:	sub	rsp, 0x10
100006811:	test	rdi, rdi
100006814:	je	0x10000685e
100006816:	mov	rbx, rdi
100006819:	lea	r14, [rbp - 0x28]
10000681d:	lea	r15, [rip + 0x5178] ## literal pool for: "%s: %s"
100006824:	lea	r12, [rip + 0x4fc0] ## literal pool for: "Not found in archive"
10000682b:	mov	rdi, rbx
10000682e:	mov	rsi, r14
100006831:	call	0x100009fee ## symbol stub for: _archive_match_path_unmatched_inclusions_next
100006836:	test	eax, eax
100006838:	jne	0x10000684f
10000683a:	mov	rdx, qword ptr [rbp - 0x28]
10000683e:	xor	edi, edi
100006840:	mov	rsi, r15
100006843:	mov	rcx, r12
100006846:	xor	eax, eax
100006848:	call	0x1000099ad
10000684d:	jmp	0x10000682b
10000684f:	cmp	eax, -0x1e
100006852:	je	0x10000686d
100006854:	mov	rdi, rbx
100006857:	call	0x100009fe8 ## symbol stub for: _archive_match_path_unmatched_inclusions
10000685c:	jmp	0x100006860
10000685e:	xor	eax, eax
100006860:	add	rsp, 0x10
100006864:	pop	rbx
100006865:	pop	r12
100006867:	pop	r14
100006869:	pop	r15
10000686b:	pop	rbp
10000686c:	ret
10000686d:	call	0x100009e86 ## symbol stub for: ___error
100006872:	mov	esi, dword ptr [rax]
100006874:	lea	rdx, [rip + 0x42f9] ## literal pool for: "Out of memory"
10000687b:	mov	edi, 0x1
100006880:	xor	eax, eax
100006882:	call	0x100009ac2
100006887:	push	rbp
100006888:	mov	rbp, rsp
10000688b:	push	r14
10000688d:	push	rbx
10000688e:	mov	r14, rdi
100006891:	call	0x10000a0e4 ## symbol stub for: _archive_write_disk_new
100006896:	test	rax, rax
100006899:	je	0x1000068f0
10000689b:	mov	rbx, rax
10000689e:	test	byte ptr [r14 + 0x25], 0x2
1000068a3:	jne	0x1000068ad
1000068a5:	mov	rdi, rbx
1000068a8:	call	0x10000a0f0 ## symbol stub for: _archive_write_disk_set_standard_lookup
1000068ad:	mov	esi, dword ptr [r14 + 0x28]
1000068b1:	mov	rdi, rbx
1000068b4:	call	0x10000a0ea ## symbol stub for: _archive_write_disk_set_options
1000068b9:	mov	rdi, r14
1000068bc:	mov	esi, 0x78
1000068c1:	mov	rdx, rbx
1000068c4:	call	0x1000060ca
1000068c9:	mov	rdi, qword ptr [r14 + 0xf8]
1000068d0:	call	0x100006802
1000068d5:	test	eax, eax
1000068d7:	je	0x1000068e4
1000068d9:	mov	dword ptr [r14 + 0xb4], 0x1
1000068e4:	mov	rdi, rbx
1000068e7:	pop	rbx
1000068e8:	pop	r14
1000068ea:	pop	rbp
1000068eb:	jmp	0x10000a0f6 ## symbol stub for: _archive_write_free
1000068f0:	lea	rdx, [rip + 0x4f09] ## literal pool for: "Cannot allocate disk writer object"
1000068f7:	mov	edi, 0x1
1000068fc:	mov	esi, 0xc
100006901:	xor	eax, eax
100006903:	call	0x100009ac2
100006908:	push	rbp
100006909:	mov	rbp, rsp
10000690c:	push	r14
10000690e:	push	rbx
10000690f:	sub	rsp, 0x90
100006916:	test	rsi, rsi
100006919:	je	0x100006995
10000691b:	mov	r14, rdx
10000691e:	mov	rbx, rsi
100006921:	lea	rsi, [rbp - 0xa0]
100006928:	mov	rdi, rdx
10000692b:	call	0x10000a234 ## symbol stub for: _stat$INODE64
100006930:	test	eax, eax
100006932:	je	0x100006943
100006934:	mov	rdi, rbx
100006937:	mov	rsi, r14
10000693a:	call	0x100009eb6 ## symbol stub for: __qtn_file_apply_to_path
10000693f:	mov	ebx, eax
100006941:	jmp	0x100006974
100006943:	movzx	esi, word ptr [rbp - 0x9c]
10000694a:	or	esi, 0x80
100006950:	mov	rdi, r14
100006953:	call	0x10000a156 ## symbol stub for: _chmod
100006958:	mov	rdi, rbx
10000695b:	mov	rsi, r14
10000695e:	call	0x100009eb6 ## symbol stub for: __qtn_file_apply_to_path
100006963:	mov	ebx, eax
100006965:	movzx	esi, word ptr [rbp - 0x9c]
10000696c:	mov	rdi, r14
10000696f:	call	0x10000a156 ## symbol stub for: _chmod
100006974:	test	ebx, ebx
100006976:	je	0x100006995
100006978:	mov	edi, ebx
10000697a:	call	0x100009eaa ## symbol stub for: __qtn_error
10000697f:	lea	rsi, [rip + 0x4e9d] ## literal pool for: "qtn_file_apply_to_path(%s): %s"
100006986:	xor	edi, edi
100006988:	mov	rdx, r14
10000698b:	mov	rcx, rax
10000698e:	xor	eax, eax
100006990:	call	0x1000099ad
100006995:	add	rsp, 0x90
10000699c:	pop	rbx
10000699d:	pop	r14
10000699f:	pop	rbp
1000069a0:	ret
1000069a1:	push	rbp
1000069a2:	mov	rbp, rsp
1000069a5:	push	r15
1000069a7:	push	r14
1000069a9:	push	r13
1000069ab:	push	r12
1000069ad:	push	rbx
1000069ae:	push	rax
1000069af:	mov	rbx, qword ptr [rdi]
1000069b2:	mov	r12, qword ptr [rdi + 0x8]
1000069b6:	mov	r15, qword ptr [rdi + 0x10]
1000069ba:	call	0x1000047b8
1000069bf:	test	eax, eax
1000069c1:	je	0x100006adc
1000069c7:	cmp	dword ptr [rbx + 0x20], 0x0
1000069cb:	je	0x1000069e1
1000069cd:	mov	rax, qword ptr [rip + 0x563c] ## literal pool symbol address: ___stderrp
1000069d4:	mov	rsi, qword ptr [rax]
1000069d7:	mov	edi, 0xa
1000069dc:	call	0x10000a192 ## symbol stub for: _fputc
1000069e1:	test	r12, r12
1000069e4:	je	0x100006a7c
1000069ea:	mov	qword ptr [rbp - 0x30], r15
1000069ee:	mov	rdi, r12
1000069f1:	mov	esi, 0xffffffff
1000069f6:	call	0x100009f8e ## symbol stub for: _archive_filter_bytes
1000069fb:	mov	r13, rax
1000069fe:	xor	ebx, ebx
100006a00:	mov	rdi, r12
100006a03:	xor	esi, esi
100006a05:	call	0x100009f8e ## symbol stub for: _archive_filter_bytes
100006a0a:	mov	r15, rax
100006a0d:	sub	rax, r13
100006a10:	jb	0x100006a1e
100006a12:	imul	rax, rax, 0x64
100006a16:	xor	edx, edx
100006a18:	div	r15
100006a1b:	mov	rbx, rax
100006a1e:	mov	rax, qword ptr [rip + 0x55eb] ## literal pool symbol address: ___stderrp
100006a25:	mov	r14, qword ptr [rax]
100006a28:	mov	rdi, r13
100006a2b:	call	0x100007c70
100006a30:	lea	rsi, [rip + 0x4f11] ## literal pool for: "In: %s bytes, compression %d%%;"
100006a37:	mov	rdi, r14
100006a3a:	mov	rdx, rax
100006a3d:	mov	ecx, ebx
100006a3f:	xor	eax, eax
100006a41:	call	0x10000a18c ## symbol stub for: _fprintf
100006a46:	mov	rax, qword ptr [rip + 0x55c3] ## literal pool symbol address: ___stderrp
100006a4d:	mov	r14, qword ptr [rax]
100006a50:	mov	rdi, r12
100006a53:	call	0x100009f88 ## symbol stub for: _archive_file_count
100006a58:	mov	ebx, eax
100006a5a:	mov	rdi, r15
100006a5d:	call	0x100007c70
100006a62:	lea	rsi, [rip + 0x4eff] ## literal pool for: "  Out: %d files, %s bytes\n"
100006a69:	mov	rdi, r14
100006a6c:	mov	edx, ebx
100006a6e:	mov	rcx, rax
100006a71:	xor	eax, eax
100006a73:	call	0x10000a18c ## symbol stub for: _fprintf
100006a78:	mov	r15, qword ptr [rbp - 0x30]
100006a7c:	test	r15, r15
100006a7f:	je	0x100006adc
100006a81:	mov	r14, qword ptr [rip + 0x5588] ## literal pool symbol address: ___stderrp
100006a88:	mov	rbx, qword ptr [r14]
100006a8b:	mov	rdi, r15
100006a8e:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100006a93:	lea	rsi, [rip + 0x4ee9] ## literal pool for: "Current: %s"
100006a9a:	mov	rdi, rbx
100006a9d:	mov	rdx, rax
100006aa0:	xor	eax, eax
100006aa2:	call	0x1000071a0
100006aa7:	mov	rbx, qword ptr [r14]
100006aaa:	mov	rdi, r15
100006aad:	call	0x100009f58 ## symbol stub for: _archive_entry_size
100006ab2:	mov	rdi, rax
100006ab5:	call	0x100007c70
100006aba:	lea	rsi, [rip + 0x4ece] ## literal pool for: " (%s bytes)\n"
100006ac1:	mov	rdi, rbx
100006ac4:	mov	rdx, rax
100006ac7:	xor	eax, eax
100006ac9:	add	rsp, 0x8
100006acd:	pop	rbx
100006ace:	pop	r12
100006ad0:	pop	r13
100006ad2:	pop	r14
100006ad4:	pop	r15
100006ad6:	pop	rbp
100006ad7:	jmp	0x10000a18c ## symbol stub for: _fprintf
100006adc:	add	rsp, 0x8
100006ae0:	pop	rbx
100006ae1:	pop	r12
100006ae3:	pop	r13
100006ae5:	pop	r14
100006ae7:	pop	r15
100006ae9:	pop	rbp
100006aea:	ret
100006aeb:	push	rbp
100006aec:	mov	rbp, rsp
100006aef:	push	r15
100006af1:	push	r14
100006af3:	push	r13
100006af5:	push	r12
100006af7:	push	rbx
100006af8:	sub	rsp, 0x68
100006afc:	mov	r15, rsi
100006aff:	mov	rax, qword ptr [rip + 0x5502] ## literal pool symbol address: ___stack_chk_guard
100006b06:	mov	rax, qword ptr [rax]
100006b09:	mov	qword ptr [rbp - 0x30], rax
100006b0d:	mov	rbx, qword ptr [rdi + 0x118]
100006b14:	test	rbx, rbx
100006b17:	jne	0x100006b42
100006b19:	mov	r14, rdi
100006b1c:	mov	edi, 0x10
100006b21:	call	0x10000a1c8 ## symbol stub for: _malloc
100006b26:	mov	qword ptr [r14 + 0x118], rax
100006b2d:	test	rax, rax
100006b30:	je	0x100006d08
100006b36:	mov	rbx, rax
100006b39:	xor	eax, eax
100006b3b:	mov	qword ptr [rbx + 0x8], rax
100006b3f:	mov	qword ptr [rbx], rax
100006b42:	mov	edi, 0x38
100006b47:	call	0x10000a1c8 ## symbol stub for: _malloc
100006b4c:	test	rax, rax
100006b4f:	je	0x100006d08
100006b55:	mov	r14, rax
100006b58:	xor	eax, eax
100006b5a:	mov	qword ptr [r14], rax
100006b5d:	mov	qword ptr [r14 + 0x28], rax
100006b61:	mov	rax, qword ptr [rbx + 0x8]
100006b65:	test	rax, rax
100006b68:	cmove	rax, rbx
100006b6c:	mov	qword ptr [rax], r14
100006b6f:	mov	qword ptr [rbx + 0x8], r14
100006b73:	movsx	esi, byte ptr [r15]
100006b77:	test	esi, esi
100006b79:	je	0x100006d26
100006b7f:	lea	r12, [r15 + 0x1]
100006b83:	mov	rdi, r12
100006b86:	call	0x10000a240 ## symbol stub for: _strchr
100006b8b:	test	rax, rax
100006b8e:	je	0x100006d1d
100006b94:	mov	r13, rax
100006b97:	mov	rax, r15
100006b9a:	mov	r15, r13
100006b9d:	mov	qword ptr [rbp - 0x88], rax
100006ba4:	sub	r15, rax
100006ba7:	mov	rdi, r15
100006baa:	call	0x10000a1c8 ## symbol stub for: _malloc
100006baf:	test	rax, rax
100006bb2:	je	0x100006d08
100006bb8:	mov	rbx, rax
100006bbb:	lea	rdx, [r15 - 0x1]
100006bbf:	mov	rdi, rax
100006bc2:	mov	rsi, r12
100006bc5:	call	0x10000a1da ## symbol stub for: _memcpy
100006bca:	mov	byte ptr [rbx + r15 - 0x1], 0x0
100006bd0:	mov	r15, r14
100006bd3:	add	r15, 0x8
100006bd7:	mov	rdi, r15
100006bda:	mov	rsi, rbx
100006bdd:	xor	edx, edx
100006bdf:	call	0x10000a210 ## symbol stub for: _regcomp
100006be4:	test	eax, eax
100006be6:	jne	0x100006d3b
100006bec:	mov	rdi, rbx
100006bef:	call	0x10000a1a4 ## symbol stub for: _free
100006bf4:	inc	r13
100006bf7:	mov	rax, qword ptr [rbp - 0x88]
100006bfe:	movsx	esi, byte ptr [rax]
100006c01:	mov	rdi, r13
100006c04:	call	0x10000a240 ## symbol stub for: _strchr
100006c09:	test	rax, rax
100006c0c:	je	0x100006d1d
100006c12:	mov	rbx, rax
100006c15:	mov	r12, rax
100006c18:	sub	r12, r13
100006c1b:	lea	rdi, [r12 + 0x1]
100006c20:	call	0x10000a1c8 ## symbol stub for: _malloc
100006c25:	mov	qword ptr [r14 + 0x28], rax
100006c29:	test	rax, rax
100006c2c:	je	0x100006d08
100006c32:	mov	rdi, rax
100006c35:	mov	rsi, r13
100006c38:	mov	rdx, r12
100006c3b:	call	0x10000a1da ## symbol stub for: _memcpy
100006c40:	mov	rax, qword ptr [r14 + 0x28]
100006c44:	mov	byte ptr [rax + r12], 0x0
100006c49:	mov	al, byte ptr [r14 + 0x30]
100006c4d:	and	al, -0x20
100006c4f:	or	al, 0x1c
100006c51:	mov	byte ptr [r14 + 0x30], al
100006c55:	mov	cl, byte ptr [rbx + 0x1]
100006c58:	test	cl, cl
100006c5a:	je	0x100006ccf
100006c5c:	add	rbx, 0x2
100006c60:	movsx	ecx, cl
100006c63:	cmp	ecx, 0x66
100006c66:	jg	0x100006c7b
100006c68:	cmp	ecx, 0x4f
100006c6b:	jle	0x100006c92
100006c6d:	cmp	ecx, 0x50
100006c70:	je	0x100006c8e
100006c72:	cmp	ecx, 0x52
100006c75:	jne	0x100006ca9
100006c77:	and	al, -0x5
100006c79:	jmp	0x100006cc2
100006c7b:	cmp	ecx, 0x6f
100006c7e:	jle	0x100006ca0
100006c80:	cmp	ecx, 0x70
100006c83:	je	0x100006c8e
100006c85:	cmp	ecx, 0x72
100006c88:	jne	0x100006cb2
100006c8a:	or	al, 0x4
100006c8c:	jmp	0x100006cc2
100006c8e:	or	al, 0x2
100006c90:	jmp	0x100006cc2
100006c92:	cmp	ecx, 0x47
100006c95:	je	0x100006ca5
100006c97:	cmp	ecx, 0x48
100006c9a:	jne	0x100006cf3
100006c9c:	and	al, -0x11
100006c9e:	jmp	0x100006cc2
100006ca0:	cmp	ecx, 0x67
100006ca3:	jne	0x100006cbb
100006ca5:	or	al, 0x1
100006ca7:	jmp	0x100006cc2
100006ca9:	cmp	ecx, 0x53
100006cac:	jne	0x100006cf3
100006cae:	and	al, -0x9
100006cb0:	jmp	0x100006cc2
100006cb2:	cmp	ecx, 0x73
100006cb5:	jne	0x100006cf3
100006cb7:	or	al, 0x8
100006cb9:	jmp	0x100006cc2
100006cbb:	cmp	ecx, 0x68
100006cbe:	jne	0x100006cf3
100006cc0:	or	al, 0x10
100006cc2:	mov	byte ptr [r14 + 0x30], al
100006cc6:	mov	cl, byte ptr [rbx]
100006cc8:	inc	rbx
100006ccb:	test	cl, cl
100006ccd:	jne	0x100006c60
100006ccf:	mov	rax, qword ptr [rip + 0x5332] ## literal pool symbol address: ___stack_chk_guard
100006cd6:	mov	rax, qword ptr [rax]
100006cd9:	cmp	rax, qword ptr [rbp - 0x30]
100006cdd:	jne	0x100006cee
100006cdf:	add	rsp, 0x68
100006ce3:	pop	rbx
100006ce4:	pop	r12
100006ce6:	pop	r13
100006ce8:	pop	r14
100006cea:	pop	r15
100006cec:	pop	rbp
100006ced:	ret
100006cee:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
100006cf3:	lea	rdx, [rip + 0x4cfc] ## literal pool for: "Invalid replacement flag %c"
100006cfa:	mov	edi, 0x1
100006cff:	xor	esi, esi
100006d01:	xor	eax, eax
100006d03:	call	0x100009ac2
100006d08:	call	0x100009e86 ## symbol stub for: ___error
100006d0d:	mov	esi, dword ptr [rax]
100006d0f:	lea	rdx, [rip + 0x3e5e] ## literal pool for: "Out of memory"
100006d16:	mov	edi, 0x1
100006d1b:	jmp	0x100006d34
100006d1d:	lea	rdx, [rip + 0x4c98] ## literal pool for: "Invalid replacement string"
100006d24:	jmp	0x100006d2d
100006d26:	lea	rdx, [rip + 0x4c76] ## literal pool for: "Empty replacement string"
100006d2d:	mov	edi, 0x1
100006d32:	xor	esi, esi
100006d34:	xor	eax, eax
100006d36:	call	0x100009ac2
100006d3b:	lea	rdi, [rbp - 0x80]
100006d3f:	mov	esi, eax
100006d41:	mov	rdx, r15
100006d44:	call	0x100009e51
100006d49:	push	rbp
100006d4a:	mov	rbp, rsp
100006d4d:	push	r15
100006d4f:	push	r14
100006d51:	push	r13
100006d53:	push	r12
100006d55:	push	rbx
100006d56:	sub	rsp, 0xd8
100006d5d:	mov	dword ptr [rbp - 0xdc], r8d
100006d64:	mov	dword ptr [rbp - 0xe0], ecx
100006d6a:	mov	qword ptr [rbp - 0xe8], rsi
100006d71:	mov	rax, qword ptr [rip + 0x5290] ## literal pool symbol address: ___stack_chk_guard
100006d78:	mov	rax, qword ptr [rax]
100006d7b:	mov	qword ptr [rbp - 0x30], rax
100006d7f:	mov	qword ptr [rdx], 0x0
100006d86:	mov	rax, qword ptr [rdi + 0x118]
100006d8d:	xor	ebx, ebx
100006d8f:	test	rax, rax
100006d92:	je	0x100006fa5
100006d98:	mov	r15, qword ptr [rax]
100006d9b:	test	r15, r15
100006d9e:	je	0x100006fa5
100006da4:	mov	r12, rdx
100006da7:	xor	eax, eax
100006da9:	mov	qword ptr [rbp - 0xd8], rax
100006db0:	xor	ebx, ebx
100006db2:	mov	r13, qword ptr [rbp - 0xe8]
100006db9:	mov	al, byte ptr [r15 + 0x30]
100006dbd:	cmp	dword ptr [rbp - 0xe0], 0x0
100006dc4:	je	0x100006dcc
100006dc6:	test	al, 0x8
100006dc8:	jne	0x100006ddf
100006dca:	jmp	0x100006e0c
100006dcc:	cmp	dword ptr [rbp - 0xdc], 0x0
100006dd3:	je	0x100006ddb
100006dd5:	test	al, 0x10
100006dd7:	jne	0x100006ddf
100006dd9:	jmp	0x100006e0c
100006ddb:	test	al, 0x4
100006ddd:	je	0x100006e0c
100006ddf:	lea	rdi, [r15 + 0x8]
100006de3:	mov	edx, 0xa
100006de8:	mov	qword ptr [rbp - 0xf8], rdi
100006def:	mov	rsi, r13
100006df2:	lea	rcx, [rbp - 0xd0]
100006df9:	xor	r8d, r8d
100006dfc:	call	0x10000a21c ## symbol stub for: _regexec
100006e01:	test	eax, eax
100006e03:	mov	qword ptr [rbp - 0xf0], r15
100006e0a:	je	0x100006e19
100006e0c:	mov	r15, qword ptr [r15]
100006e0f:	test	r15, r15
100006e12:	jne	0x100006db9
100006e14:	jmp	0x100006fc9
100006e19:	mov	rax, qword ptr [rbp - 0xd8]
100006e20:	mov	ecx, dword ptr [r15 + 0x30]
100006e24:	shr	ecx
100006e26:	and	ecx, 0x1
100006e29:	or	ecx, eax
100006e2b:	mov	qword ptr [rbp - 0xd8], rcx
100006e32:	mov	rdx, qword ptr [rbp - 0xd0]
100006e39:	mov	rdi, r12
100006e3c:	mov	rsi, r13
100006e3f:	call	0x10000700f
100006e44:	xor	ebx, ebx
100006e46:	xor	eax, eax
100006e48:	mov	rsi, qword ptr [r15 + 0x28]
100006e4c:	mov	cl, byte ptr [rsi + rbx]
100006e4f:	cmp	cl, 0x5c
100006e52:	je	0x100006e6a
100006e54:	cmp	cl, 0x7e
100006e57:	je	0x100006ee1
100006e5d:	test	cl, cl
100006e5f:	jne	0x100006f14
100006e65:	jmp	0x100006f42
100006e6a:	lea	r14, [rbx + 0x1]
100006e6e:	movsx	ecx, byte ptr [rsi + rbx + 0x1]
100006e73:	lea	edx, [rcx - 0x31]
100006e76:	cmp	edx, 0x9
100006e79:	jae	0x100006f22
100006e7f:	mov	r15, r13
100006e82:	movsxd	r13, ecx
100006e85:	add	rsi, rax
100006e88:	mov	rdx, rbx
100006e8b:	sub	rdx, rax
100006e8e:	mov	rdi, r12
100006e91:	call	0x10000700f
100006e96:	add	r13, -0x30
100006e9a:	mov	rax, qword ptr [rbp - 0xf0]
100006ea1:	cmp	qword ptr [rax + 0x10], r13
100006ea5:	jb	0x100006f8f
100006eab:	shl	r13, 0x4
100006eaf:	mov	rax, qword ptr [rbp + r13 - 0xd0]
100006eb7:	mov	rdx, qword ptr [rbp + r13 - 0xc8]
100006ebf:	mov	r13, r15
100006ec2:	lea	rsi, [r15 + rax]
100006ec6:	sub	rdx, rax
100006ec9:	mov	rdi, r12
100006ecc:	call	0x10000700f
100006ed1:	add	rbx, 0x2
100006ed5:	mov	rax, rbx
100006ed8:	mov	r15, qword ptr [rbp - 0xf0]
100006edf:	jmp	0x100006f17
100006ee1:	add	rsi, rax
100006ee4:	mov	rdx, rbx
100006ee7:	sub	rdx, rax
100006eea:	mov	rdi, r12
100006eed:	call	0x10000700f
100006ef2:	mov	rax, qword ptr [rbp - 0xd0]
100006ef9:	mov	rdx, qword ptr [rbp - 0xc8]
100006f00:	lea	rsi, [r13 + rax]
100006f05:	sub	rdx, rax
100006f08:	mov	rdi, r12
100006f0b:	call	0x10000700f
100006f10:	lea	rax, [rbx + 0x1]
100006f14:	mov	r14, rbx
100006f17:	inc	r14
100006f1a:	mov	rbx, r14
100006f1d:	jmp	0x100006e48
100006f22:	cmp	ecx, 0x7e
100006f25:	je	0x100006f2c
100006f27:	cmp	ecx, 0x5c
100006f2a:	jne	0x100006f17
100006f2c:	add	rsi, rax
100006f2f:	sub	rbx, rax
100006f32:	mov	rdi, r12
100006f35:	mov	rdx, rbx
100006f38:	call	0x10000700f
100006f3d:	mov	rax, r14
100006f40:	jmp	0x100006f17
100006f42:	add	rsi, rax
100006f45:	mov	rdi, r12
100006f48:	call	0x1000070bd
100006f4d:	mov	ebx, 0x1
100006f52:	add	r13, qword ptr [rbp - 0xc8]
100006f59:	test	byte ptr [r15 + 0x30], 0x1
100006f5e:	je	0x100006e0c
100006f64:	mov	edx, 0xa
100006f69:	mov	rdi, qword ptr [rbp - 0xf8]
100006f70:	mov	rsi, r13
100006f73:	lea	rcx, [rbp - 0xd0]
100006f7a:	xor	r8d, r8d
100006f7d:	call	0x10000a21c ## symbol stub for: _regexec
100006f82:	test	eax, eax
100006f84:	je	0x100006e19
100006f8a:	jmp	0x100006e0c
100006f8f:	mov	rdi, qword ptr [r12]
100006f93:	call	0x10000a1a4 ## symbol stub for: _free
100006f98:	mov	qword ptr [r12], 0x0
100006fa0:	mov	ebx, 0xffffffff
100006fa5:	mov	rax, qword ptr [rip + 0x505c] ## literal pool symbol address: ___stack_chk_guard
100006fac:	mov	rax, qword ptr [rax]
100006faf:	cmp	rax, qword ptr [rbp - 0x30]
100006fb3:	jne	0x10000700a
100006fb5:	mov	eax, ebx
100006fb7:	add	rsp, 0xd8
100006fbe:	pop	rbx
100006fbf:	pop	r12
100006fc1:	pop	r13
100006fc3:	pop	r14
100006fc5:	pop	r15
100006fc7:	pop	rbp
100006fc8:	ret
100006fc9:	test	ebx, ebx
100006fcb:	je	0x100006fda
100006fcd:	mov	rdi, r12
100006fd0:	mov	rsi, r13
100006fd3:	call	0x1000070bd
100006fd8:	jmp	0x100006fdc
100006fda:	xor	ebx, ebx
100006fdc:	cmp	dword ptr [rbp - 0xd8], 0x0
100006fe3:	je	0x100006fa5
100006fe5:	mov	rax, qword ptr [rip + 0x5024] ## literal pool symbol address: ___stderrp
100006fec:	mov	rdi, qword ptr [rax]
100006fef:	mov	rcx, qword ptr [r12]
100006ff3:	lea	rsi, [rip + 0x4a18] ## literal pool for: "%s >> %s\n"
100006ffa:	mov	rdx, qword ptr [rbp - 0xe8]
100007001:	xor	eax, eax
100007003:	call	0x10000a18c ## symbol stub for: _fprintf
100007008:	jmp	0x100006fa5
10000700a:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
10000700f:	push	rbp
100007010:	mov	rbp, rsp
100007013:	push	r15
100007015:	push	r14
100007017:	push	r13
100007019:	push	r12
10000701b:	push	rbx
10000701c:	sub	rsp, 0x18
100007020:	mov	r12, rdx
100007023:	mov	r14, rdi
100007026:	mov	r13, qword ptr [rdi]
100007029:	test	r13, r13
10000702c:	mov	qword ptr [rbp - 0x38], rsi
100007030:	je	0x10000703f
100007032:	mov	rdi, r13
100007035:	call	0x10000a26a ## symbol stub for: _strlen
10000703a:	mov	rbx, rax
10000703d:	jmp	0x100007041
10000703f:	xor	ebx, ebx
100007041:	lea	rdi, [rbx + r12 + 0x1]
100007046:	call	0x10000a1c8 ## symbol stub for: _malloc
10000704b:	test	rax, rax
10000704e:	je	0x1000070a3
100007050:	mov	r15, rax
100007053:	lea	rax, [rbx + r12]
100007057:	mov	qword ptr [rbp - 0x30], rax
10000705b:	test	r13, r13
10000705e:	je	0x10000706e
100007060:	mov	rdi, r15
100007063:	mov	rsi, r13
100007066:	mov	rdx, rbx
100007069:	call	0x10000a1da ## symbol stub for: _memcpy
10000706e:	mov	rdi, r15
100007071:	add	rdi, rbx
100007074:	mov	rsi, qword ptr [rbp - 0x38]
100007078:	mov	rdx, r12
10000707b:	call	0x10000a1da ## symbol stub for: _memcpy
100007080:	mov	rax, qword ptr [rbp - 0x30]
100007084:	mov	byte ptr [r15 + rax], 0x0
100007089:	mov	rdi, qword ptr [r14]
10000708c:	call	0x10000a1a4 ## symbol stub for: _free
100007091:	mov	qword ptr [r14], r15
100007094:	add	rsp, 0x18
100007098:	pop	rbx
100007099:	pop	r12
10000709b:	pop	r13
10000709d:	pop	r14
10000709f:	pop	r15
1000070a1:	pop	rbp
1000070a2:	ret
1000070a3:	call	0x100009e86 ## symbol stub for: ___error
1000070a8:	mov	esi, dword ptr [rax]
1000070aa:	lea	rdx, [rip + 0x3ac3] ## literal pool for: "Out of memory"
1000070b1:	mov	edi, 0x1
1000070b6:	xor	eax, eax
1000070b8:	call	0x100009ac2
1000070bd:	push	rbp
1000070be:	mov	rbp, rsp
1000070c1:	push	r15
1000070c3:	push	r14
1000070c5:	push	r13
1000070c7:	push	r12
1000070c9:	push	rbx
1000070ca:	push	rax
1000070cb:	mov	r14, rsi
1000070ce:	mov	r15, rdi
1000070d1:	mov	r13, qword ptr [rdi]
1000070d4:	test	r13, r13
1000070d7:	je	0x1000070e6
1000070d9:	mov	rdi, r13
1000070dc:	call	0x10000a26a ## symbol stub for: _strlen
1000070e1:	mov	r12, rax
1000070e4:	jmp	0x1000070e9
1000070e6:	xor	r12d, r12d
1000070e9:	mov	rdi, r14
1000070ec:	call	0x10000a26a ## symbol stub for: _strlen
1000070f1:	lea	rdi, [r12 + rax + 0x1]
1000070f6:	call	0x10000a1c8 ## symbol stub for: _malloc
1000070fb:	test	rax, rax
1000070fe:	je	0x10000713e
100007100:	mov	rbx, rax
100007103:	test	r13, r13
100007106:	je	0x100007116
100007108:	mov	rdi, rbx
10000710b:	mov	rsi, r13
10000710e:	mov	rdx, r12
100007111:	call	0x10000a1da ## symbol stub for: _memcpy
100007116:	mov	rdi, rbx
100007119:	add	rdi, r12
10000711c:	mov	rsi, r14
10000711f:	call	0x10000a24c ## symbol stub for: _strcpy
100007124:	mov	rdi, qword ptr [r15]
100007127:	call	0x10000a1a4 ## symbol stub for: _free
10000712c:	mov	qword ptr [r15], rbx
10000712f:	add	rsp, 0x8
100007133:	pop	rbx
100007134:	pop	r12
100007136:	pop	r13
100007138:	pop	r14
10000713a:	pop	r15
10000713c:	pop	rbp
10000713d:	ret
10000713e:	call	0x100009e86 ## symbol stub for: ___error
100007143:	mov	esi, dword ptr [rax]
100007145:	lea	rdx, [rip + 0x3a28] ## literal pool for: "Out of memory"
10000714c:	mov	edi, 0x1
100007151:	xor	eax, eax
100007153:	call	0x100009ac2
100007158:	push	rbp
100007159:	mov	rbp, rsp
10000715c:	push	r14
10000715e:	push	rbx
10000715f:	mov	r14, qword ptr [rdi + 0x118]
100007166:	test	r14, r14
100007169:	je	0x100007198
10000716b:	mov	rbx, qword ptr [r14]
10000716e:	test	rbx, rbx
100007171:	je	0x10000718c
100007173:	mov	rax, qword ptr [rbx]
100007176:	mov	qword ptr [r14], rax
100007179:	mov	rdi, qword ptr [rbx + 0x28]
10000717d:	call	0x10000a1a4 ## symbol stub for: _free
100007182:	mov	rdi, rbx
100007185:	call	0x10000a1a4 ## symbol stub for: _free
10000718a:	jmp	0x10000716b
10000718c:	mov	rdi, r14
10000718f:	pop	rbx
100007190:	pop	r14
100007192:	pop	rbp
100007193:	jmp	0x10000a1a4 ## symbol stub for: _free
100007198:	pop	rbx
100007199:	pop	r14
10000719b:	pop	rbp
10000719c:	ret
10000719d:	nop
10000719e:	nop
10000719f:	nop
1000071a0:	push	rbp
1000071a1:	mov	rbp, rsp
1000071a4:	push	r15
1000071a6:	push	r14
1000071a8:	push	r13
1000071aa:	push	r12
1000071ac:	push	rbx
1000071ad:	sub	rsp, 0x2f8
1000071b4:	mov	r14, rsi
1000071b7:	mov	qword ptr [rbp - 0x268], rdi
1000071be:	test	al, al
1000071c0:	je	0x1000071fa
1000071c2:	movaps	xmmword ptr [rbp - 0x2f0], xmm0
1000071c9:	movaps	xmmword ptr [rbp - 0x2e0], xmm1
1000071d0:	movaps	xmmword ptr [rbp - 0x2d0], xmm2
1000071d7:	movaps	xmmword ptr [rbp - 0x2c0], xmm3
1000071de:	movaps	xmmword ptr [rbp - 0x2b0], xmm4
1000071e5:	movaps	xmmword ptr [rbp - 0x2a0], xmm5
1000071ec:	movaps	xmmword ptr [rbp - 0x290], xmm6
1000071f3:	movaps	xmmword ptr [rbp - 0x280], xmm7
1000071fa:	lea	rsi, [rbp - 0x320]
100007201:	mov	qword ptr [rsi + 0x10], rdx
100007205:	mov	qword ptr [rsi + 0x18], rcx
100007209:	mov	qword ptr [rsi + 0x20], r8
10000720d:	mov	qword ptr [rsi + 0x28], r9
100007211:	mov	rax, qword ptr [rip + 0x4df0] ## literal pool symbol address: ___stack_chk_guard
100007218:	mov	rax, qword ptr [rax]
10000721b:	mov	qword ptr [rbp - 0x30], rax
10000721f:	lea	rbx, [rbp - 0x130]
100007226:	movabs	rax, 0x3000000010
100007230:	lea	rcx, [rbp - 0x250]
100007237:	mov	qword ptr [rcx], rax
10000723a:	lea	rax, [rbp + 0x10]
10000723e:	mov	qword ptr [rcx + 0x8], rax
100007242:	mov	qword ptr [rcx + 0x10], rsi
100007246:	mov	esi, 0x100
10000724b:	mov	rdi, rbx
10000724e:	mov	rdx, r14
100007251:	call	0x10000a28e ## symbol stub for: _vsnprintf
100007256:	mov	r12d, eax
100007259:	cmp	eax, 0x100
10000725e:	jb	0x100007327
100007264:	lea	rbx, [rbp - 0x130]
10000726b:	cmp	r12d, 0xff
100007272:	setg	al
100007275:	mov	r15d, 0x100
10000727b:	xor	edi, edi
10000727d:	test	al, 0x1
10000727f:	je	0x100007289
100007281:	inc	r12d
100007284:	mov	r15d, r12d
100007287:	jmp	0x1000072ad
100007289:	cmp	r15d, 0x1fff
100007290:	jg	0x100007297
100007292:	add	r15d, r15d
100007295:	jmp	0x1000072ad
100007297:	cmp	r15d, 0xf423f
10000729e:	jg	0x10000733c
1000072a4:	mov	eax, r15d
1000072a7:	shr	eax, 0x2
1000072aa:	add	r15d, eax
1000072ad:	call	0x10000a1a4 ## symbol stub for: _free
1000072b2:	movsxd	r13, r15d
1000072b5:	mov	rdi, r13
1000072b8:	call	0x10000a1c8 ## symbol stub for: _malloc
1000072bd:	test	rax, rax
1000072c0:	je	0x10000732b
1000072c2:	mov	rbx, rax
1000072c5:	lea	rax, [rbp - 0x320]
1000072cc:	mov	qword ptr [rbp - 0x240], rax
1000072d3:	lea	rax, [rbp + 0x10]
1000072d7:	mov	qword ptr [rbp - 0x248], rax
1000072de:	movabs	rax, 0x3000000010
1000072e8:	mov	qword ptr [rbp - 0x250], rax
1000072ef:	mov	rdi, rbx
1000072f2:	mov	rsi, r13
1000072f5:	mov	rdx, r14
1000072f8:	lea	rcx, [rbp - 0x250]
1000072ff:	call	0x10000a28e ## symbol stub for: _vsnprintf
100007304:	mov	r12d, eax
100007307:	cmp	eax, r13d
10000730a:	setge	al
10000730d:	mov	rdi, rbx
100007310:	test	r12d, r12d
100007313:	js	0x10000727d
100007319:	mov	rdi, rbx
10000731c:	cmp	r12d, r15d
10000731f:	jge	0x10000727d
100007325:	jmp	0x100007347
100007327:	xor	edi, edi
100007329:	jmp	0x100007347
10000732b:	mov	r12d, 0xff
100007331:	xor	edi, edi
100007333:	lea	rbx, [rbp - 0x130]
10000733a:	jmp	0x100007347
10000733c:	lea	eax, [r15 - 0x1]
100007340:	mov	byte ptr [rdi + rax], 0x0
100007344:	mov	r12d, r15d
100007347:	mov	qword ptr [rbp - 0x270], rdi
10000734e:	xor	r14d, r14d
100007351:	mov	edx, 0x1
100007356:	xor	edi, edi
100007358:	xor	esi, esi
10000735a:	call	0x10000a1ce ## symbol stub for: _mbtowc
10000735f:	cmp	eax, -0x1
100007362:	je	0x1000074c8
100007368:	mov	al, byte ptr [rbx]
10000736a:	test	al, al
10000736c:	je	0x1000074aa
100007372:	xor	r14d, r14d
100007375:	mov	r15b, 0x1
100007378:	lea	r13, [rbp - 0x230]
10000737f:	test	r15b, r15b
100007382:	je	0x1000073c7
100007384:	mov	dword ptr [rbp - 0x254], r15d
10000738b:	movsxd	rdx, r12d
10000738e:	lea	rdi, [rbp - 0x258]
100007395:	mov	rsi, rbx
100007398:	call	0x10000a1ce ## symbol stub for: _mbtowc
10000739d:	cmp	eax, -0x1
1000073a0:	je	0x1000073c5
1000073a2:	mov	r15d, eax
1000073a5:	mov	edi, dword ptr [rbp - 0x258]
1000073ab:	cmp	rdi, 0x7f
1000073af:	ja	0x1000073e6
1000073b1:	mov	rax, qword ptr [rip + 0x4c48] ## literal pool symbol address: __DefaultRuneLocale
1000073b8:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
1000073bc:	mov	ecx, 0x40000
1000073c1:	and	eax, ecx
1000073c3:	jmp	0x1000073f6
1000073c5:	mov	al, byte ptr [rbx]
1000073c7:	mov	esi, r14d
1000073ca:	inc	rbx
1000073cd:	movsx	edx, al
1000073d0:	mov	rdi, r13
1000073d3:	call	0x1000074fb
1000073d8:	add	eax, r14d
1000073db:	xor	r15d, r15d
1000073de:	mov	r14d, eax
1000073e1:	jmp	0x100007471
1000073e6:	mov	esi, 0x40000
1000073eb:	call	0x100009e8c ## symbol stub for: ___maskrune
1000073f0:	mov	edi, dword ptr [rbp - 0x258]
1000073f6:	sub	r12d, r15d
1000073f9:	test	eax, eax
1000073fb:	je	0x10000742b
1000073fd:	cmp	edi, 0x5c
100007400:	je	0x10000742b
100007402:	test	r15d, r15d
100007405:	jle	0x100007499
10000740b:	inc	r15d
10000740e:	mov	al, byte ptr [rbx]
100007410:	inc	rbx
100007413:	mov	ecx, r14d
100007416:	inc	r14d
100007419:	mov	byte ptr [rbp + rcx - 0x230], al
100007420:	dec	r15d
100007423:	cmp	r15d, 0x1
100007427:	jg	0x10000740e
100007429:	jmp	0x10000746a
10000742b:	test	r15d, r15d
10000742e:	jle	0x100007499
100007430:	mov	dword ptr [rbp - 0x25c], r12d
100007437:	inc	r15d
10000743a:	mov	r12, r13
10000743d:	mov	r13d, r14d
100007440:	mov	esi, r14d
100007443:	movsx	edx, byte ptr [rbx]
100007446:	inc	rbx
100007449:	mov	rdi, r12
10000744c:	call	0x1000074fb
100007451:	mov	r14, rax
100007454:	add	r14d, r13d
100007457:	dec	r15d
10000745a:	cmp	r15d, 0x1
10000745e:	jg	0x10000743d
100007460:	mov	r13, r12
100007463:	mov	r12d, dword ptr [rbp - 0x25c]
10000746a:	mov	r15d, dword ptr [rbp - 0x254]
100007471:	cmp	r14d, 0x81
100007478:	jb	0x1000074a0
10000747a:	mov	eax, r14d
10000747d:	mov	byte ptr [rbp + rax - 0x230], 0x0
100007485:	mov	rdi, r13
100007488:	mov	rsi, qword ptr [rbp - 0x268]
10000748f:	call	0x10000a198 ## symbol stub for: _fputs
100007494:	xor	r14d, r14d
100007497:	jmp	0x1000074a0
100007499:	mov	r15d, dword ptr [rbp - 0x254]
1000074a0:	mov	al, byte ptr [rbx]
1000074a2:	test	al, al
1000074a4:	jne	0x10000737f
1000074aa:	mov	eax, r14d
1000074ad:	mov	byte ptr [rbp + rax - 0x230], 0x0
1000074b5:	lea	rdi, [rbp - 0x230]
1000074bc:	mov	rsi, qword ptr [rbp - 0x268]
1000074c3:	call	0x10000a198 ## symbol stub for: _fputs
1000074c8:	mov	rdi, qword ptr [rbp - 0x270]
1000074cf:	call	0x10000a1a4 ## symbol stub for: _free
1000074d4:	mov	rax, qword ptr [rip + 0x4b2d] ## literal pool symbol address: ___stack_chk_guard
1000074db:	mov	rax, qword ptr [rax]
1000074de:	cmp	rax, qword ptr [rbp - 0x30]
1000074e2:	jne	0x1000074f6
1000074e4:	add	rsp, 0x2f8
1000074eb:	pop	rbx
1000074ec:	pop	r12
1000074ee:	pop	r13
1000074f0:	pop	r14
1000074f2:	pop	r15
1000074f4:	pop	rbp
1000074f5:	ret
1000074f6:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
1000074fb:	push	rbp
1000074fc:	mov	rbp, rsp
1000074ff:	push	r15
100007501:	push	r14
100007503:	push	rbx
100007504:	push	rax
100007505:	mov	ebx, edx
100007507:	mov	r15, rsi
10000750a:	mov	r14, rdi
10000750d:	test	bl, bl
10000750f:	js	0x100007526
100007511:	movzx	eax, bl
100007514:	mov	rdx, qword ptr [rip + 0x4ae5] ## literal pool symbol address: __DefaultRuneLocale
10000751b:	mov	ecx, 0x40000
100007520:	and	ecx, dword ptr [rdx + 4*rax + 0x3c]
100007524:	jmp	0x100007535
100007526:	movzx	edi, bl
100007529:	mov	esi, 0x40000
10000752e:	call	0x100009e8c ## symbol stub for: ___maskrune
100007533:	mov	ecx, eax
100007535:	lea	rax, [r15 + 0x1]
100007539:	cmp	bl, 0x5c
10000753c:	je	0x100007554
10000753e:	test	ecx, ecx
100007540:	je	0x100007554
100007542:	mov	byte ptr [r14 + r15], bl
100007546:	sub	rax, r15
100007549:	add	rsp, 0x8
10000754d:	pop	rbx
10000754e:	pop	r14
100007550:	pop	r15
100007552:	pop	rbp
100007553:	ret
100007554:	mov	byte ptr [r14 + r15], 0x5c
100007559:	movsx	edx, bl
10000755c:	lea	ecx, [rdx - 0x7]
10000755f:	cmp	ecx, 0x6
100007562:	ja	0x100007580
100007564:	lea	rax, [rip + 0x95]
10000756b:	movsxd	rcx, dword ptr [rax + 4*rcx]
10000756f:	add	rcx, rax
100007572:	jmp	rcx
100007574:	lea	rax, [r15 + 0x2]
100007578:	mov	byte ptr [r14 + r15 + 0x1], 0x61
10000757e:	jmp	0x100007546
100007580:	cmp	edx, 0x5c
100007583:	jne	0x1000075df
100007585:	lea	rax, [r15 + 0x2]
100007589:	mov	byte ptr [r14 + r15 + 0x1], 0x5c
10000758f:	jmp	0x100007546
100007591:	lea	rax, [r15 + 0x2]
100007595:	mov	byte ptr [r14 + r15 + 0x1], 0x62
10000759b:	jmp	0x100007546
10000759d:	lea	rax, [r15 + 0x2]
1000075a1:	mov	byte ptr [r14 + r15 + 0x1], 0x74
1000075a7:	jmp	0x100007546
1000075a9:	lea	rax, [r15 + 0x2]
1000075ad:	mov	byte ptr [r14 + r15 + 0x1], 0x6e
1000075b3:	jmp	0x100007546
1000075b5:	lea	rax, [r15 + 0x2]
1000075b9:	mov	byte ptr [r14 + r15 + 0x1], 0x76
1000075bf:	jmp	0x100007546
1000075c1:	lea	rax, [r15 + 0x2]
1000075c5:	mov	byte ptr [r14 + r15 + 0x1], 0x66
1000075cb:	jmp	0x100007546
1000075d0:	lea	rax, [r15 + 0x2]
1000075d4:	mov	byte ptr [r14 + r15 + 0x1], 0x72
1000075da:	jmp	0x100007546
1000075df:	add	r14, rax
1000075e2:	movzx	edx, bl
1000075e5:	lea	rsi, [rip + 0x450b] ## literal pool for: "%03o"
1000075ec:	mov	rdi, r14
1000075ef:	xor	eax, eax
1000075f1:	call	0x10000a22e ## symbol stub for: _sprintf
1000075f6:	lea	rax, [r15 + 0x4]
1000075fa:	jmp	0x100007546
1000075ff:	nop
100007600:	je	0x100007601
	.byte 0xff #bad opcode
100007603:	call	qword ptr [rcx - 0x62000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000760b:	jmp	[rcx - 0x4a000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100007613:	inc	ecx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100007617:	call	rax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000761b:	call	qword ptr [rbp + 0x48]
10000761e:	mov	ebp, esp
100007620:	push	r15
100007622:	push	r14
100007624:	push	r13
100007626:	push	r12
100007628:	push	rbx
100007629:	sub	rsp, 0xf8
100007630:	mov	rbx, rdi
100007633:	test	al, al
100007635:	je	0x10000766c
100007637:	movaps	xmmword ptr [rbp - 0xf0], xmm0
10000763e:	movaps	xmmword ptr [rbp - 0xe0], xmm1
100007645:	movaps	xmmword ptr [rbp - 0xd0], xmm2
10000764c:	movaps	xmmword ptr [rbp - 0xc0], xmm3
100007653:	movaps	xmmword ptr [rbp - 0xb0], xmm4
10000765a:	movaps	xmmword ptr [rbp - 0xa0], xmm5
100007661:	movaps	xmmword ptr [rbp - 0x90], xmm6
100007668:	movaps	xmmword ptr [rbp - 0x80], xmm7
10000766c:	lea	rax, [rbp - 0x120]
100007673:	mov	qword ptr [rax + 0x8], rsi
100007677:	mov	qword ptr [rax + 0x10], rdx
10000767b:	mov	qword ptr [rax + 0x18], rcx
10000767f:	mov	qword ptr [rax + 0x20], r8
100007683:	mov	qword ptr [rax + 0x28], r9
100007687:	mov	rcx, qword ptr [rip + 0x497a] ## literal pool symbol address: ___stack_chk_guard
10000768e:	mov	rcx, qword ptr [rcx]
100007691:	mov	qword ptr [rbp - 0x30], rcx
100007695:	lea	rdx, [rbp - 0x70]
100007699:	mov	qword ptr [rdx + 0x10], rax
10000769d:	lea	rax, [rbp + 0x10]
1000076a1:	mov	qword ptr [rdx + 0x8], rax
1000076a5:	movabs	rax, 0x3000000008
1000076af:	mov	qword ptr [rdx], rax
1000076b2:	mov	r14, qword ptr [rip + 0x4957] ## literal pool symbol address: ___stderrp
1000076b9:	mov	rdi, qword ptr [r14]
1000076bc:	mov	rsi, rbx
1000076bf:	call	0x10000a288 ## symbol stub for: _vfprintf
1000076c4:	mov	rcx, qword ptr [r14]
1000076c7:	lea	rdi, [rip + 0x434e] ## literal pool for: " (y/N)? "
1000076ce:	mov	esi, 0x8
1000076d3:	mov	edx, 0x1
1000076d8:	call	0x10000a1aa ## symbol stub for: _fwrite
1000076dd:	mov	rdi, qword ptr [r14]
1000076e0:	call	0x10000a180 ## symbol stub for: _fflush
1000076e5:	lea	rsi, [rbp - 0x50]
1000076e9:	mov	edx, 0x1f
1000076ee:	mov	edi, 0x2
1000076f3:	call	0x10000a1fe ## symbol stub for: _read
1000076f8:	test	rax, rax
1000076fb:	js	0x1000077aa
100007701:	xor	r14d, r14d
100007704:	test	rax, rax
100007707:	je	0x100007780
100007709:	mov	byte ptr [rbp + rax - 0x50], 0x0
10000770e:	mov	r15b, byte ptr [rbp - 0x50]
100007712:	test	r15b, r15b
100007715:	je	0x100007780
100007717:	lea	rbx, [rbp - 0x4f]
10000771b:	mov	r12, qword ptr [rip + 0x48de] ## literal pool symbol address: __DefaultRuneLocale
100007722:	mov	r13d, 0x4000
100007728:	test	r15b, r15b
10000772b:	js	0x10000773b
10000772d:	movzx	eax, r15b
100007731:	mov	eax, dword ptr [r12 + 4*rax + 0x3c]
100007736:	and	eax, r13d
100007739:	jmp	0x100007749
10000773b:	movzx	edi, r15b
10000773f:	mov	esi, 0x4000
100007744:	call	0x100009e8c ## symbol stub for: ___maskrune
100007749:	test	eax, eax
10000774b:	je	0x10000775a
10000774d:	mov	r15b, byte ptr [rbx]
100007750:	inc	rbx
100007753:	test	r15b, r15b
100007756:	jne	0x100007728
100007758:	jmp	0x100007780
10000775a:	movsx	eax, r15b
10000775e:	mov	r14d, 0x1
100007764:	cmp	eax, 0x6d
100007767:	jg	0x100007775
100007769:	cmp	eax, 0x4e
10000776c:	je	0x10000777d
10000776e:	cmp	eax, 0x59
100007771:	je	0x100007780
100007773:	jmp	0x10000777d
100007775:	cmp	eax, 0x79
100007778:	je	0x100007780
10000777a:	cmp	eax, 0x6e
10000777d:	xor	r14d, r14d
100007780:	mov	rax, qword ptr [rip + 0x4881] ## literal pool symbol address: ___stack_chk_guard
100007787:	mov	rax, qword ptr [rax]
10000778a:	cmp	rax, qword ptr [rbp - 0x30]
10000778e:	jne	0x1000077a5
100007790:	mov	eax, r14d
100007793:	add	rsp, 0xf8
10000779a:	pop	rbx
10000779b:	pop	r12
10000779d:	pop	r13
10000779f:	pop	r14
1000077a1:	pop	r15
1000077a3:	pop	rbp
1000077a4:	ret
1000077a5:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
1000077aa:	mov	rcx, qword ptr [r14]
1000077ad:	lea	rdi, [rip + 0x4271] ## literal pool for: "Keyboard read failed\n"
1000077b4:	mov	esi, 0x15
1000077b9:	mov	edx, 0x1
1000077be:	call	0x10000a1aa ## symbol stub for: _fwrite
1000077c3:	mov	edi, 0x1
1000077c8:	call	0x10000a168 ## symbol stub for: _exit
1000077cd:	push	rbp
1000077ce:	mov	rbp, rsp
1000077d1:	push	r15
1000077d3:	push	r14
1000077d5:	push	r12
1000077d7:	push	rbx
1000077d8:	mov	r14, rsi
1000077db:	mov	r15, rdi
1000077de:	cmp	byte ptr [rsi], 0x2f
1000077e1:	mov	rbx, qword ptr [rdi + 0x8]
1000077e5:	jne	0x1000077f9
1000077e7:	mov	rdi, rbx
1000077ea:	call	0x10000a1a4 ## symbol stub for: _free
1000077ef:	mov	qword ptr [r15 + 0x8], 0x0
1000077f7:	jmp	0x10000785b
1000077f9:	test	rbx, rbx
1000077fc:	je	0x10000785b
1000077fe:	mov	rdi, rbx
100007801:	call	0x10000a26a ## symbol stub for: _strlen
100007806:	mov	r12, rax
100007809:	mov	rdi, r14
10000780c:	call	0x10000a26a ## symbol stub for: _strlen
100007811:	lea	rdi, [r12 + rax + 0x2]
100007816:	call	0x10000a1c8 ## symbol stub for: _malloc
10000781b:	mov	qword ptr [r15 + 0x8], rax
10000781f:	cmp	byte ptr [r12 + rbx - 0x1], 0x2f
100007825:	jne	0x100007831
100007827:	mov	byte ptr [rbx + r12 - 0x1], 0x0
10000782d:	mov	rax, qword ptr [r15 + 0x8]
100007831:	test	rax, rax
100007834:	je	0x10000784d
100007836:	lea	rsi, [rip + 0x41fe] ## literal pool for: "%s/%s"
10000783d:	mov	rdi, rax
100007840:	mov	rdx, rbx
100007843:	mov	rcx, r14
100007846:	xor	eax, eax
100007848:	call	0x10000a22e ## symbol stub for: _sprintf
10000784d:	mov	rdi, rbx
100007850:	call	0x10000a1a4 ## symbol stub for: _free
100007855:	mov	rax, qword ptr [r15 + 0x8]
100007859:	jmp	0x100007867
10000785b:	mov	rdi, r14
10000785e:	call	0x10000a258 ## symbol stub for: _strdup
100007863:	mov	qword ptr [r15 + 0x8], rax
100007867:	test	rax, rax
10000786a:	je	0x100007875
10000786c:	pop	rbx
10000786d:	pop	r12
10000786f:	pop	r14
100007871:	pop	r15
100007873:	pop	rbp
100007874:	ret
100007875:	call	0x100009e86 ## symbol stub for: ___error
10000787a:	mov	esi, dword ptr [rax]
10000787c:	lea	rdx, [rip + 0x313d] ## literal pool for: "No memory"
100007883:	mov	edi, 0x1
100007888:	xor	eax, eax
10000788a:	call	0x100009ac2
10000788f:	push	rbp
100007890:	mov	rbp, rsp
100007893:	push	rbx
100007894:	push	rax
100007895:	mov	rbx, rdi
100007898:	mov	rdi, qword ptr [rdi + 0x8]
10000789c:	test	rdi, rdi
10000789f:	je	0x1000078be
1000078a1:	call	0x10000a150 ## symbol stub for: _chdir
1000078a6:	mov	rcx, qword ptr [rbx + 0x8]
1000078aa:	test	eax, eax
1000078ac:	jne	0x1000078c5
1000078ae:	mov	rdi, rcx
1000078b1:	call	0x10000a1a4 ## symbol stub for: _free
1000078b6:	mov	qword ptr [rbx + 0x8], 0x0
1000078be:	add	rsp, 0x8
1000078c2:	pop	rbx
1000078c3:	pop	rbp
1000078c4:	ret
1000078c5:	lea	rdx, [rip + 0x4175] ## literal pool for: "could not chdir to '%s'\n"
1000078cc:	mov	edi, 0x1
1000078d1:	xor	esi, esi
1000078d3:	xor	eax, eax
1000078d5:	call	0x100009ac2
1000078da:	push	rbp
1000078db:	mov	rbp, rsp
1000078de:	push	r15
1000078e0:	push	r14
1000078e2:	push	r13
1000078e4:	push	r12
1000078e6:	push	rbx
1000078e7:	sub	rsp, 0x18
1000078eb:	mov	r13, rsi
1000078ee:	mov	r15, rdi
1000078f1:	mov	rdi, rsi
1000078f4:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000078f9:	mov	r14, rax
1000078fc:	mov	rdi, r13
1000078ff:	call	0x100009ef8 ## symbol stub for: _archive_entry_hardlink
100007904:	mov	rbx, rax
100007907:	lea	rdx, [rbp - 0x30]
10000790b:	mov	rdi, r15
10000790e:	mov	rsi, r14
100007911:	xor	ecx, ecx
100007913:	xor	r8d, r8d
100007916:	call	0x100006d49
10000791b:	cmp	eax, 0x1
10000791e:	je	0x10000792b
100007920:	cmp	eax, -0x1
100007923:	je	0x1000079de
100007929:	jmp	0x100007953
10000792b:	mov	rsi, qword ptr [rbp - 0x30]
10000792f:	mov	rdi, r13
100007932:	call	0x100009ed4 ## symbol stub for: _archive_entry_copy_pathname
100007937:	mov	rdi, qword ptr [rbp - 0x30]
10000793b:	mov	r14b, byte ptr [rdi]
10000793e:	call	0x10000a1a4 ## symbol stub for: _free
100007943:	test	r14b, r14b
100007946:	je	0x100007980
100007948:	mov	rdi, r13
10000794b:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100007950:	mov	r14, rax
100007953:	test	rbx, rbx
100007956:	je	0x10000797b
100007958:	lea	rdx, [rbp - 0x30]
10000795c:	mov	rdi, r15
10000795f:	mov	rsi, rbx
100007962:	xor	ecx, ecx
100007964:	mov	r8d, 0x1
10000796a:	call	0x100006d49
10000796f:	cmp	eax, 0x1
100007972:	je	0x100007988
100007974:	cmp	eax, -0x1
100007977:	je	0x1000079de
100007979:	jmp	0x10000799d
10000797b:	xor	r12d, r12d
10000797e:	jmp	0x1000079a8
100007980:	mov	r14d, 0xffffffff
100007986:	jmp	0x1000079f4
100007988:	mov	rsi, qword ptr [rbp - 0x30]
10000798c:	mov	rdi, r13
10000798f:	call	0x100009ece ## symbol stub for: _archive_entry_copy_hardlink
100007994:	mov	rdi, qword ptr [rbp - 0x30]
100007998:	call	0x10000a1a4 ## symbol stub for: _free
10000799d:	mov	rdi, r13
1000079a0:	call	0x100009ef8 ## symbol stub for: _archive_entry_hardlink
1000079a5:	mov	r12, rax
1000079a8:	mov	rdi, r13
1000079ab:	call	0x100009f6a ## symbol stub for: _archive_entry_symlink
1000079b0:	test	rax, rax
1000079b3:	je	0x100007a1b
1000079b5:	mov	rdi, r13
1000079b8:	call	0x100009f6a ## symbol stub for: _archive_entry_symlink
1000079bd:	lea	rdx, [rbp - 0x30]
1000079c1:	mov	rdi, r15
1000079c4:	mov	rsi, rax
1000079c7:	mov	ecx, 0x1
1000079cc:	xor	r8d, r8d
1000079cf:	call	0x100006d49
1000079d4:	cmp	eax, 0x1
1000079d7:	je	0x100007a06
1000079d9:	cmp	eax, -0x1
1000079dc:	jne	0x100007a1b
1000079de:	lea	rsi, [rip + 0x4075] ## literal pool for: "Invalid substitution, skipping entry"
1000079e5:	xor	edi, edi
1000079e7:	xor	eax, eax
1000079e9:	call	0x1000099ad
1000079ee:	mov	r14d, 0x1
1000079f4:	mov	eax, r14d
1000079f7:	add	rsp, 0x18
1000079fb:	pop	rbx
1000079fc:	pop	r12
1000079fe:	pop	r13
100007a00:	pop	r14
100007a02:	pop	r15
100007a04:	pop	rbp
100007a05:	ret
100007a06:	mov	rsi, qword ptr [rbp - 0x30]
100007a0a:	mov	rdi, r13
100007a0d:	call	0x100009eda ## symbol stub for: _archive_entry_copy_symlink
100007a12:	mov	rdi, qword ptr [rbp - 0x30]
100007a16:	call	0x10000a1a4 ## symbol stub for: _free
100007a1b:	mov	eax, dword ptr [r15 + 0x30]
100007a1f:	mov	rsi, r14
100007a22:	mov	rbx, r12
100007a25:	test	eax, eax
100007a27:	jle	0x100007a8e
100007a29:	mov	ecx, eax
100007a2b:	mov	rsi, r14
100007a2e:	movsx	edx, byte ptr [rsi]
100007a31:	cmp	edx, 0x2f
100007a34:	je	0x100007a3c
100007a36:	test	edx, edx
100007a38:	jne	0x100007a3e
100007a3a:	jmp	0x1000079ee
100007a3c:	dec	ecx
100007a3e:	inc	rsi
100007a41:	test	ecx, ecx
100007a43:	jg	0x100007a2e
100007a45:	jmp	0x100007a4a
100007a47:	inc	rsi
100007a4a:	movsx	ecx, byte ptr [rsi]
100007a4d:	cmp	ecx, 0x2f
100007a50:	je	0x100007a47
100007a52:	test	ecx, ecx
100007a54:	je	0x1000079ee
100007a56:	test	r12, r12
100007a59:	je	0x100007a8c
100007a5b:	mov	rbx, r12
100007a5e:	movsx	ecx, byte ptr [rbx]
100007a61:	cmp	ecx, 0x2f
100007a64:	je	0x100007a6c
100007a66:	test	ecx, ecx
100007a68:	jne	0x100007a6e
100007a6a:	jmp	0x1000079ee
100007a6c:	dec	eax
100007a6e:	inc	rbx
100007a71:	test	eax, eax
100007a73:	jg	0x100007a5e
100007a75:	jmp	0x100007a7a
100007a77:	inc	rbx
100007a7a:	movsx	eax, byte ptr [rbx]
100007a7d:	cmp	eax, 0x2f
100007a80:	je	0x100007a77
100007a82:	test	eax, eax
100007a84:	je	0x1000079ee
100007a8a:	jmp	0x100007a8e
100007a8c:	xor	ebx, ebx
100007a8e:	mov	qword ptr [rbp - 0x38], r12
100007a92:	test	byte ptr [r15 + 0x24], 0x2
100007a97:	jne	0x100007acc
100007a99:	mov	rdi, r15
100007a9c:	call	0x100007b19
100007aa1:	cmp	byte ptr [rax], 0x0
100007aa4:	lea	r12, [rip + 0x3dfe] ## literal pool for: "."
100007aab:	cmovne	r12, rax
100007aaf:	test	rbx, rbx
100007ab2:	je	0x100007aea
100007ab4:	mov	rdi, r15
100007ab7:	mov	rsi, rbx
100007aba:	call	0x100007b19
100007abf:	mov	rbx, rax
100007ac2:	cmp	byte ptr [rax], 0x0
100007ac5:	jne	0x100007aec
100007ac7:	jmp	0x1000079ee
100007acc:	cmp	byte ptr [rsi], 0x2f
100007acf:	sete	al
100007ad2:	mov	r12, rsi
100007ad5:	test	al, 0x1
100007ad7:	je	0x100007aec
100007ad9:	lea	rsi, [r12 + 0x1]
100007ade:	mov	al, 0x1
100007ae0:	cmp	byte ptr [r12 + 0x1], 0x2f
100007ae6:	je	0x100007ad2
100007ae8:	jmp	0x100007aec
100007aea:	xor	ebx, ebx
100007aec:	cmp	r12, r14
100007aef:	je	0x100007afc
100007af1:	mov	rdi, r13
100007af4:	mov	rsi, r12
100007af7:	call	0x100009ed4 ## symbol stub for: _archive_entry_copy_pathname
100007afc:	xor	r14d, r14d
100007aff:	cmp	rbx, qword ptr [rbp - 0x38]
100007b03:	je	0x1000079f4
100007b09:	mov	rdi, r13
100007b0c:	mov	rsi, rbx
100007b0f:	call	0x100009ece ## symbol stub for: _archive_entry_copy_hardlink
100007b14:	jmp	0x1000079f4
100007b19:	push	rbp
100007b1a:	mov	rbp, rsp
100007b1d:	push	r15
100007b1f:	push	r14
100007b21:	push	r13
100007b23:	push	r12
100007b25:	push	rbx
100007b26:	push	rax
100007b27:	mov	rbx, rsi
100007b2a:	mov	r14, rdi
100007b2d:	mov	al, byte ptr [rsi]
100007b2f:	cmp	al, 0x5c
100007b31:	je	0x100007b37
100007b33:	cmp	al, 0x2f
100007b35:	jne	0x100007bb5
100007b37:	mov	al, byte ptr [rbx + 0x1]
100007b3a:	cmp	al, 0x5c
100007b3c:	je	0x100007b42
100007b3e:	cmp	al, 0x2f
100007b40:	jne	0x100007bb5
100007b42:	mov	al, byte ptr [rbx + 0x2]
100007b45:	cmp	al, 0x3f
100007b47:	je	0x100007b4d
100007b49:	cmp	al, 0x2e
100007b4b:	jne	0x100007bb5
100007b4d:	mov	cl, byte ptr [rbx + 0x3]
100007b50:	cmp	cl, 0x5c
100007b53:	je	0x100007b5a
100007b55:	cmp	cl, 0x2f
100007b58:	jne	0x100007bb5
100007b5a:	cmp	al, 0x3f
100007b5c:	jne	0x100007b8b
100007b5e:	mov	al, byte ptr [rbx + 0x4]
100007b61:	or	al, 0x20
100007b63:	cmp	al, 0x75
100007b65:	jne	0x100007b8b
100007b67:	mov	al, byte ptr [rbx + 0x5]
100007b6a:	or	al, 0x20
100007b6c:	cmp	al, 0x6e
100007b6e:	jne	0x100007b8b
100007b70:	mov	al, byte ptr [rbx + 0x6]
100007b73:	or	al, 0x20
100007b75:	cmp	al, 0x63
100007b77:	jne	0x100007b8b
100007b79:	mov	cl, byte ptr [rbx + 0x7]
100007b7c:	mov	eax, 0x8
100007b81:	cmp	cl, 0x2f
100007b84:	je	0x100007b90
100007b86:	cmp	cl, 0x5c
100007b89:	je	0x100007b90
100007b8b:	mov	eax, 0x4
100007b90:	add	rbx, rax
100007b93:	cmp	byte ptr [r14 + 0xb8], 0x0
100007b9b:	jne	0x100007bb5
100007b9d:	lea	rsi, [rip + 0x3f58] ## literal pool for: "Removing leading drive letter from member names"
100007ba4:	xor	edi, edi
100007ba6:	xor	eax, eax
100007ba8:	call	0x1000099ad
100007bad:	mov	byte ptr [r14 + 0xb8], 0x1
100007bb5:	mov	al, byte ptr [rbx]
100007bb7:	lea	r12, [rip + 0x3f6e] ## literal pool for: "Removing leading '%c' from member names"
100007bbe:	mov	r15, rbx
100007bc1:	and	al, -0x21
100007bc3:	add	al, -0x41
100007bc5:	mov	r13, rbx
100007bc8:	cmp	al, 0x19
100007bca:	ja	0x100007bfc
100007bcc:	cmp	byte ptr [r15 + 0x1], 0x3a
100007bd1:	mov	r13, r15
100007bd4:	jne	0x100007bfc
100007bd6:	lea	r13, [r15 + 0x2]
100007bda:	cmp	byte ptr [r14 + 0xb8], 0x0
100007be2:	jne	0x100007bfc
100007be4:	xor	edi, edi
100007be6:	lea	rsi, [rip + 0x3f0f] ## literal pool for: "Removing leading drive letter from member names"
100007bed:	xor	eax, eax
100007bef:	call	0x1000099ad
100007bf4:	mov	byte ptr [r14 + 0xb8], 0x1
100007bfc:	mov	rbx, r13
100007bff:	mov	al, byte ptr [r13]
100007c03:	cmp	al, 0x5c
100007c05:	je	0x100007c0b
100007c07:	cmp	al, 0x2f
100007c09:	jne	0x100007c55
100007c0b:	cmp	byte ptr [rbx + 0x1], 0x2e
100007c0f:	jne	0x100007c33
100007c11:	lea	r13, [rbx + 0x2]
100007c15:	mov	al, byte ptr [rbx + 0x2]
100007c18:	cmp	al, 0x5c
100007c1a:	je	0x100007c39
100007c1c:	cmp	al, 0x2f
100007c1e:	je	0x100007c39
100007c20:	cmp	al, 0x2e
100007c22:	jne	0x100007c33
100007c24:	lea	r13, [rbx + 0x3]
100007c28:	mov	al, byte ptr [rbx + 0x3]
100007c2b:	cmp	al, 0x2f
100007c2d:	je	0x100007c39
100007c2f:	cmp	al, 0x5c
100007c31:	je	0x100007c39
100007c33:	inc	rbx
100007c36:	mov	r13, rbx
100007c39:	cmp	byte ptr [r14 + 0xb8], 0x0
100007c41:	jne	0x100007bfc
100007c43:	movsx	edx, byte ptr [r15]
100007c47:	xor	edi, edi
100007c49:	mov	rsi, r12
100007c4c:	xor	eax, eax
100007c4e:	call	0x1000099ad
100007c53:	jmp	0x100007bf4
100007c55:	cmp	r15, rbx
100007c58:	jne	0x100007bbe
100007c5e:	mov	rax, r15
100007c61:	add	rsp, 0x8
100007c65:	pop	rbx
100007c66:	pop	r12
100007c68:	pop	r13
100007c6a:	pop	r14
100007c6c:	pop	r15
100007c6e:	pop	rbp
100007c6f:	ret
100007c70:	push	rbp
100007c71:	mov	rbp, rsp
100007c74:	mov	rsi, rdi
100007c77:	neg	rsi
100007c7a:	cmovl	rsi, rdi
100007c7e:	mov	byte ptr [rip + 0x8922], 0x0
100007c85:	lea	rcx, [rip + 0x891a]
100007c8c:	movabs	r8, -0x3333333333333333
100007c96:	mov	rax, rsi
100007c99:	mul	r8
100007c9c:	shr	rdx, 0x3
100007ca0:	lea	eax, [rdx + rdx]
100007ca3:	lea	r9d, [rax + 4*rax]
100007ca7:	mov	eax, esi
100007ca9:	sub	eax, r9d
100007cac:	or	al, 0x30
100007cae:	mov	byte ptr [rcx], al
100007cb0:	dec	rcx
100007cb3:	cmp	rsi, 0x9
100007cb7:	mov	rsi, rdx
100007cba:	ja	0x100007c96
100007cbc:	test	rdi, rdi
100007cbf:	js	0x100007cc6
100007cc1:	inc	rcx
100007cc4:	jmp	0x100007cc9
100007cc6:	mov	byte ptr [rcx], 0x2d
100007cc9:	mov	rax, rcx
100007ccc:	pop	rbp
100007ccd:	ret
100007cce:	nop
100007ccf:	nop
100007cd0:	nop
100007cd1:	push	rbp
100007cd2:	mov	rbp, rsp
100007cd5:	push	rbx
100007cd6:	push	rax
100007cd7:	mov	rbx, rsi
100007cda:	mov	rsi, qword ptr [rsi + 0x120]
100007ce1:	test	rsi, rsi
100007ce4:	jne	0x100007cff
100007ce6:	mov	edi, 0x400
100007ceb:	call	0x10000a1c8 ## symbol stub for: _malloc
100007cf0:	mov	rsi, rax
100007cf3:	mov	qword ptr [rbx + 0x120], rax
100007cfa:	test	rax, rax
100007cfd:	je	0x100007d16
100007cff:	lea	rdi, [rip + 0x3d79] ## literal pool for: "Enter passphrase:"
100007d06:	mov	edx, 0x400
100007d0b:	add	rsp, 0x8
100007d0f:	pop	rbx
100007d10:	pop	rbp
100007d11:	jmp	0x100009b3e
100007d16:	call	0x100009e86 ## symbol stub for: ___error
100007d1b:	mov	esi, dword ptr [rax]
100007d1d:	lea	rdx, [rip + 0x2e50] ## literal pool for: "Out of memory"
100007d24:	mov	edi, 0x1
100007d29:	xor	eax, eax
100007d2b:	call	0x100009ac2
100007d30:	test	rdi, rdi
100007d33:	je	0x100007d56
100007d35:	push	rbp
100007d36:	mov	rbp, rsp
100007d39:	push	rbx
100007d3a:	push	rax
100007d3b:	mov	rbx, rdi
100007d3e:	mov	esi, 0x400
100007d43:	call	0x100009e80 ## symbol stub for: ___bzero
100007d48:	mov	rdi, rbx
100007d4b:	add	rsp, 0x8
100007d4f:	pop	rbx
100007d50:	pop	rbp
100007d51:	jmp	0x10000a1a4 ## symbol stub for: _free
100007d56:	ret
100007d57:	push	rbp
100007d58:	mov	rbp, rsp
100007d5b:	push	r15
100007d5d:	push	r14
100007d5f:	push	r13
100007d61:	push	r12
100007d63:	push	rbx
100007d64:	sub	rsp, 0x88
100007d6b:	mov	r13, rdx
100007d6e:	mov	r14, rsi
100007d71:	mov	r15, rdi
100007d74:	mov	rax, qword ptr [rip + 0x428d] ## literal pool symbol address: ___stack_chk_guard
100007d7b:	mov	rax, qword ptr [rax]
100007d7e:	mov	qword ptr [rbp - 0x30], rax
100007d82:	cmp	qword ptr [rdi + 0xa8], 0x0
100007d8a:	jne	0x100007d9b
100007d8c:	movaps	xmm0, xmmword ptr [rip + 0x2c1d]
100007d93:	movups	xmmword ptr [r15 + 0xa0], xmm0
100007d9b:	cmp	qword ptr [rip + 0x8805], 0x0
100007da3:	jne	0x100007db1
100007da5:	lea	rdi, [rip + 0x87fc]
100007dac:	call	0x10000a282 ## symbol stub for: _time
100007db1:	mov	rdi, r13
100007db4:	call	0x100009f64 ## symbol stub for: _archive_entry_strmode
100007db9:	mov	rbx, rax
100007dbc:	mov	rdi, r13
100007dbf:	call	0x100009f22 ## symbol stub for: _archive_entry_nlink
100007dc4:	lea	rsi, [rip + 0x3cc6] ## literal pool for: "%s %d "
100007dcb:	mov	rdi, r14
100007dce:	mov	rdx, rbx
100007dd1:	mov	ecx, eax
100007dd3:	xor	eax, eax
100007dd5:	call	0x10000a18c ## symbol stub for: _fprintf
100007dda:	mov	rdi, r13
100007ddd:	call	0x100009f76 ## symbol stub for: _archive_entry_uname
100007de2:	test	rax, rax
100007de5:	je	0x100007def
100007de7:	mov	rbx, rax
100007dea:	cmp	byte ptr [rax], 0x0
100007ded:	jne	0x100007e1c
100007def:	lea	rbx, [rbp - 0xa0]
100007df6:	mov	rdi, r13
100007df9:	call	0x100009f70 ## symbol stub for: _archive_entry_uid
100007dfe:	lea	rcx, [rip + 0x3c93] ## literal pool for: "%lu "
100007e05:	mov	edx, 0x64
100007e0a:	mov	rdi, rbx
100007e0d:	mov	esi, 0x0
100007e12:	mov	r8, rax
100007e15:	xor	eax, eax
100007e17:	call	0x100009e92 ## symbol stub for: ___sprintf_chk
100007e1c:	mov	rdi, rbx
100007e1f:	call	0x10000a26a ## symbol stub for: _strlen
100007e24:	mov	rdx, qword ptr [r15 + 0xa8]
100007e2b:	cmp	rax, rdx
100007e2e:	jbe	0x100007e3a
100007e30:	mov	qword ptr [r15 + 0xa8], rax
100007e37:	mov	rdx, rax
100007e3a:	lea	rsi, [rip + 0x3c5c] ## literal pool for: "%-*s "
100007e41:	mov	rdi, r14
100007e44:	mov	rcx, rbx
100007e47:	xor	eax, eax
100007e49:	call	0x10000a18c ## symbol stub for: _fprintf
100007e4e:	mov	rdi, r13
100007e51:	call	0x100009ef2 ## symbol stub for: _archive_entry_gname
100007e56:	test	rax, rax
100007e59:	je	0x100007e7b
100007e5b:	mov	rbx, rax
100007e5e:	cmp	byte ptr [rax], 0x0
100007e61:	je	0x100007e7b
100007e63:	mov	rdi, rbx
100007e66:	mov	rsi, r14
100007e69:	call	0x10000a198 ## symbol stub for: _fputs
100007e6e:	mov	rdi, rbx
100007e71:	call	0x10000a26a ## symbol stub for: _strlen
100007e76:	mov	r12, rax
100007e79:	jmp	0x100007ebe
100007e7b:	mov	rdi, r13
100007e7e:	call	0x100009eec ## symbol stub for: _archive_entry_gid
100007e83:	lea	rcx, [rip + 0x3c19] ## literal pool for: "%lu"
100007e8a:	lea	rbx, [rbp - 0xa0]
100007e91:	mov	edx, 0x64
100007e96:	mov	rdi, rbx
100007e99:	mov	esi, 0x0
100007e9e:	mov	r8, rax
100007ea1:	xor	eax, eax
100007ea3:	call	0x100009e92 ## symbol stub for: ___sprintf_chk
100007ea8:	mov	rdi, rbx
100007eab:	call	0x10000a26a ## symbol stub for: _strlen
100007eb0:	mov	r12, rax
100007eb3:	mov	rdi, rbx
100007eb6:	mov	rsi, r14
100007eb9:	call	0x10000a198 ## symbol stub for: _fputs
100007ebe:	mov	rdi, r13
100007ec1:	call	0x100009ee0 ## symbol stub for: _archive_entry_filetype
100007ec6:	movzx	eax, ax
100007ec9:	cmp	eax, 0x2000
100007ece:	je	0x100007ee2
100007ed0:	mov	rdi, r13
100007ed3:	call	0x100009ee0 ## symbol stub for: _archive_entry_filetype
100007ed8:	movzx	eax, ax
100007edb:	cmp	eax, 0x6000
100007ee0:	jne	0x100007f1c
100007ee2:	mov	rdi, r13
100007ee5:	call	0x100009f2e ## symbol stub for: _archive_entry_rdevmajor
100007eea:	movsxd	rbx, eax
100007eed:	mov	rdi, r13
100007ef0:	call	0x100009f34 ## symbol stub for: _archive_entry_rdevminor
100007ef5:	movsxd	r9, eax
100007ef8:	lea	rcx, [rip + 0x3ba8] ## literal pool for: "%lu,%lu"
100007eff:	lea	rdi, [rbp - 0xa0]
100007f06:	mov	edx, 0x64
100007f0b:	mov	esi, 0x0
100007f10:	mov	r8, rbx
100007f13:	xor	eax, eax
100007f15:	call	0x100009e92 ## symbol stub for: ___sprintf_chk
100007f1a:	jmp	0x100007f8c
100007f1c:	mov	rdi, r13
100007f1f:	call	0x100009f58 ## symbol stub for: _archive_entry_size
100007f24:	mov	r8, rax
100007f27:	mov	rdi, rax
100007f2a:	neg	rdi
100007f2d:	cmovl	rdi, rax
100007f31:	mov	byte ptr [rip + 0x866f], 0x0
100007f38:	lea	rsi, [rip + 0x8667]
100007f3f:	movabs	rbx, -0x3333333333333333
100007f49:	mov	rax, rdi
100007f4c:	mul	rbx
100007f4f:	shr	rdx, 0x3
100007f53:	lea	eax, [rdx + rdx]
100007f56:	lea	eax, [rax + 4*rax]
100007f59:	mov	ecx, edi
100007f5b:	sub	ecx, eax
100007f5d:	or	cl, 0x30
100007f60:	mov	byte ptr [rsi], cl
100007f62:	dec	rsi
100007f65:	cmp	rdi, 0x9
100007f69:	mov	rdi, rdx
100007f6c:	ja	0x100007f49
100007f6e:	test	r8, r8
100007f71:	js	0x100007f78
100007f73:	inc	rsi
100007f76:	jmp	0x100007f7b
100007f78:	mov	byte ptr [rsi], 0x2d
100007f7b:	lea	rdi, [rbp - 0xa0]
100007f82:	mov	edx, 0x64
100007f87:	call	0x100009ea4 ## symbol stub for: ___strcpy_chk
100007f8c:	lea	rdi, [rbp - 0xa0]
100007f93:	call	0x10000a26a ## symbol stub for: _strlen
100007f98:	add	rax, r12
100007f9b:	mov	rdx, qword ptr [r15 + 0xa0]
100007fa2:	cmp	rax, rdx
100007fa5:	jb	0x100007fb4
100007fa7:	inc	rax
100007faa:	mov	qword ptr [r15 + 0xa0], rax
100007fb1:	mov	rdx, rax
100007fb4:	sub	edx, r12d
100007fb7:	lea	rsi, [rip + 0x3af1] ## literal pool for: "%*s"
100007fbe:	lea	rcx, [rbp - 0xa0]
100007fc5:	mov	rdi, r14
100007fc8:	xor	eax, eax
100007fca:	call	0x10000a18c ## symbol stub for: _fprintf
100007fcf:	mov	rdi, r13
100007fd2:	call	0x100009f16 ## symbol stub for: _archive_entry_mtime
100007fd7:	lea	rdi, [rbp - 0xa8]
100007fde:	mov	qword ptr [rdi], rax
100007fe1:	mov	rcx, qword ptr [rip + 0x85c0]
100007fe8:	lea	rdx, [rcx - 0xf099c0]
100007fef:	add	rcx, 0xf099c0
100007ff6:	cmp	byte ptr [r15 + 0x68], 0x0
100007ffb:	lea	rbx, [rip + 0x3abb] ## literal pool for: "%b %e  %Y"
100008002:	lea	rsi, [rip + 0x3aaa] ## literal pool for: "%e %b  %Y"
100008009:	cmove	rsi, rbx
10000800d:	lea	r8, [rip + 0x3abf] ## literal pool for: "%b %e %H:%M"
100008014:	lea	rbx, [rip + 0x3aac] ## literal pool for: "%e %b %H:%M"
10000801b:	cmove	rbx, r8
10000801f:	cmp	rax, rcx
100008022:	cmovg	rbx, rsi
100008026:	cmp	rax, rdx
100008029:	cmovl	rbx, rsi
10000802d:	call	0x10000a1bc ## symbol stub for: _localtime
100008032:	test	rax, rax
100008035:	jne	0x10000804a
100008037:	lea	rdi, [rbp - 0xa8]
10000803e:	mov	qword ptr [rdi], 0x0
100008045:	call	0x10000a1bc ## symbol stub for: _localtime
10000804a:	lea	r15, [rbp - 0xa0]
100008051:	mov	esi, 0x64
100008056:	mov	rdi, r15
100008059:	mov	rdx, rbx
10000805c:	mov	rcx, rax
10000805f:	call	0x10000a264 ## symbol stub for: _strftime
100008064:	lea	rsi, [rip + 0x3a74] ## literal pool for: " %s "
10000806b:	mov	rdi, r14
10000806e:	mov	rdx, r15
100008071:	xor	eax, eax
100008073:	call	0x10000a18c ## symbol stub for: _fprintf
100008078:	mov	rdi, r13
10000807b:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100008080:	lea	rsi, [rip + 0x37ea] ## literal pool for: "%s"
100008087:	mov	rdi, r14
10000808a:	mov	rdx, rax
10000808d:	xor	eax, eax
10000808f:	call	0x1000071a0
100008094:	mov	rdi, r13
100008097:	call	0x100009ef8 ## symbol stub for: _archive_entry_hardlink
10000809c:	test	rax, rax
10000809f:	je	0x1000080b2
1000080a1:	mov	rdi, r13
1000080a4:	call	0x100009ef8 ## symbol stub for: _archive_entry_hardlink
1000080a9:	lea	rsi, [rip + 0x3a34] ## literal pool for: " link to %s"
1000080b0:	jmp	0x1000080ce
1000080b2:	mov	rdi, r13
1000080b5:	call	0x100009f6a ## symbol stub for: _archive_entry_symlink
1000080ba:	test	rax, rax
1000080bd:	je	0x1000080db
1000080bf:	mov	rdi, r13
1000080c2:	call	0x100009f6a ## symbol stub for: _archive_entry_symlink
1000080c7:	lea	rsi, [rip + 0x3a22] ## literal pool for: " -> %s"
1000080ce:	mov	rdi, r14
1000080d1:	mov	rdx, rax
1000080d4:	xor	eax, eax
1000080d6:	call	0x1000071a0
1000080db:	mov	rax, qword ptr [rip + 0x3f26] ## literal pool symbol address: ___stack_chk_guard
1000080e2:	mov	rax, qword ptr [rax]
1000080e5:	cmp	rax, qword ptr [rbp - 0x30]
1000080e9:	jne	0x1000080fd
1000080eb:	add	rsp, 0x88
1000080f2:	pop	rbx
1000080f3:	pop	r12
1000080f5:	pop	r13
1000080f7:	pop	r14
1000080f9:	pop	r15
1000080fb:	pop	rbp
1000080fc:	ret
1000080fd:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
100008102:	push	rbp
100008103:	mov	rbp, rsp
100008106:	push	r15
100008108:	push	r14
10000810a:	push	rbx
10000810b:	push	rax
10000810c:	mov	rbx, rdi
10000810f:	mov	rax, qword ptr [rdi + 0x90]
100008116:	cmp	qword ptr [rax], 0x0
10000811a:	jne	0x100008127
10000811c:	cmp	qword ptr [rbx + 0x10], 0x0
100008121:	je	0x100008270
100008127:	call	0x10000a102 ## symbol stub for: _archive_write_new
10000812c:	mov	r14, rax
10000812f:	mov	rdi, qword ptr [rbx + 0x70]
100008133:	call	0x1000044e6
100008138:	test	rax, rax
10000813b:	je	0x100008156
10000813d:	mov	rdi, qword ptr [rbx + 0x70]
100008141:	call	0x1000044e6
100008146:	mov	rdi, r14
100008149:	mov	rsi, rax
10000814c:	call	0x10000a126 ## symbol stub for: _archive_write_set_format_by_name
100008151:	mov	r15d, eax
100008154:	jmp	0x100008171
100008156:	mov	rdi, r14
100008159:	call	0x10000a12c ## symbol stub for: _archive_write_set_format_pax_restricted
10000815e:	mov	r15d, eax
100008161:	mov	rdi, qword ptr [rbx + 0x70]
100008165:	lea	rsi, [rip + 0x3a0a] ## literal pool for: "pax restricted"
10000816c:	call	0x1000044a7
100008171:	test	r15d, r15d
100008174:	jne	0x10000821d
10000817a:	mov	esi, dword ptr [rbx + 0x18]
10000817d:	mov	rdi, r14
100008180:	call	0x10000a11a ## symbol stub for: _archive_write_set_bytes_per_block
100008185:	mov	esi, dword ptr [rbx + 0x1c]
100008188:	mov	rdi, r14
10000818b:	call	0x10000a114 ## symbol stub for: _archive_write_set_bytes_in_last_block
100008190:	mov	rdi, qword ptr [rbx + 0x70]
100008194:	lea	rdx, [rbp - 0x20]
100008198:	mov	rsi, r14
10000819b:	call	0x100004429
1000081a0:	cmp	eax, -0x15
1000081a3:	jle	0x100008257
1000081a9:	mov	rdi, rbx
1000081ac:	mov	rsi, r14
1000081af:	call	0x100008285
1000081b4:	mov	rsi, qword ptr [rbx + 0x50]
1000081b8:	test	rsi, rsi
1000081bb:	je	0x1000081c7
1000081bd:	mov	rdi, r14
1000081c0:	call	0x10000a138 ## symbol stub for: _archive_write_set_passphrase
1000081c5:	jmp	0x1000081d9
1000081c7:	lea	rdx, [rip - 0x4fd]
1000081ce:	mov	rdi, r14
1000081d1:	mov	rsi, rbx
1000081d4:	call	0x10000a13e ## symbol stub for: _archive_write_set_passphrase_callback
1000081d9:	test	eax, eax
1000081db:	jne	0x100008202
1000081dd:	mov	rsi, qword ptr [rbx]
1000081e0:	mov	rdi, r14
1000081e3:	call	0x10000a10e ## symbol stub for: _archive_write_open_filename
1000081e8:	test	eax, eax
1000081ea:	jne	0x100008202
1000081ec:	mov	rdi, r14
1000081ef:	mov	rsi, rbx
1000081f2:	call	0x100008396
1000081f7:	add	rsp, 0x8
1000081fb:	pop	rbx
1000081fc:	pop	r14
1000081fe:	pop	r15
100008200:	pop	rbp
100008201:	ret
100008202:	mov	rdi, r14
100008205:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000820a:	lea	rdx, [rip + 0x3660] ## literal pool for: "%s"
100008211:	mov	edi, 0x1
100008216:	xor	esi, esi
100008218:	mov	rcx, rax
10000821b:	jmp	0x100008269
10000821d:	mov	rax, qword ptr [rip + 0x3dec] ## literal pool symbol address: ___stderrp
100008224:	mov	r15, qword ptr [rax]
100008227:	mov	rdi, qword ptr [rbx + 0x70]
10000822b:	call	0x1000044e6
100008230:	mov	rbx, rax
100008233:	mov	rdi, r14
100008236:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000823b:	lea	rsi, [rip + 0x3943] ## literal pool for: "Can't use format %s: %s\n"
100008242:	mov	rdi, r15
100008245:	mov	rdx, rbx
100008248:	mov	rcx, rax
10000824b:	xor	eax, eax
10000824d:	call	0x10000a18c ## symbol stub for: _fprintf
100008252:	call	0x100005b8a
100008257:	mov	rcx, qword ptr [rbp - 0x20]
10000825b:	lea	rdx, [rip + 0x393c] ## literal pool for: "Unsupported compression option --%s"
100008262:	mov	edi, 0x1
100008267:	xor	esi, esi
100008269:	xor	eax, eax
10000826b:	call	0x100009ac2
100008270:	lea	rdx, [rip + 0x38dd] ## literal pool for: "no files or directories specified"
100008277:	mov	edi, 0x1
10000827c:	xor	esi, esi
10000827e:	xor	eax, eax
100008280:	call	0x100009ac2
100008285:	push	rbp
100008286:	mov	rbp, rsp
100008289:	push	r15
10000828b:	push	r14
10000828d:	push	r13
10000828f:	push	r12
100008291:	push	rbx
100008292:	push	rax
100008293:	mov	r15, rsi
100008296:	mov	r14, rdi
100008299:	lea	rdi, [rip + 0x39cf] ## literal pool for: "TAR_WRITER_OPTIONS"
1000082a0:	call	0x10000a1b0 ## symbol stub for: _getenv
1000082a5:	test	rax, rax
1000082a8:	je	0x10000833d
1000082ae:	mov	r12, rax
1000082b1:	mov	rdi, rax
1000082b4:	call	0x10000a26a ## symbol stub for: _strlen
1000082b9:	mov	r13, rax
1000082bc:	lea	rdi, [rax + 0x1e]
1000082c0:	call	0x10000a1c8 ## symbol stub for: _malloc
1000082c5:	test	rax, rax
1000082c8:	je	0x10000837c
1000082ce:	mov	rbx, rax
1000082d1:	inc	r13
1000082d4:	movabs	rax, 0x2c5f5f656d616e5f
1000082de:	mov	qword ptr [rbx + 0x15], rax
1000082e2:	movabs	rax, 0x616e5f656c75646f
1000082ec:	mov	qword ptr [rbx + 0x10], rax
1000082f0:	movabs	rax, 0x6d5f676e6f72775f
1000082fa:	mov	qword ptr [rbx + 0x8], rax
1000082fe:	movabs	rax, 0x65726f6e67695f5f
100008308:	mov	qword ptr [rbx], rax
10000830b:	mov	rdi, rbx
10000830e:	mov	rsi, r12
100008311:	mov	rdx, r13
100008314:	call	0x10000a1da ## symbol stub for: _memcpy
100008319:	mov	rdi, r15
10000831c:	mov	rsi, rbx
10000831f:	call	0x10000a132 ## symbol stub for: _archive_write_set_options
100008324:	mov	r12d, eax
100008327:	mov	rdi, rbx
10000832a:	call	0x10000a1a4 ## symbol stub for: _free
10000832f:	cmp	r12d, -0x15
100008333:	jle	0x10000835c
100008335:	mov	rdi, r15
100008338:	call	0x100009ec8 ## symbol stub for: _archive_clear_error
10000833d:	mov	rsi, qword ptr [r14 + 0x60]
100008341:	mov	rdi, r15
100008344:	call	0x10000a132 ## symbol stub for: _archive_write_set_options
100008349:	test	eax, eax
10000834b:	jne	0x10000835c
10000834d:	add	rsp, 0x8
100008351:	pop	rbx
100008352:	pop	r12
100008354:	pop	r13
100008356:	pop	r14
100008358:	pop	r15
10000835a:	pop	rbp
10000835b:	ret
10000835c:	mov	rdi, r15
10000835f:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008364:	lea	rdx, [rip + 0x3506] ## literal pool for: "%s"
10000836b:	mov	edi, 0x1
100008370:	xor	esi, esi
100008372:	mov	rcx, rax
100008375:	xor	eax, eax
100008377:	call	0x100009ac2
10000837c:	call	0x100009e86 ## symbol stub for: ___error
100008381:	mov	esi, dword ptr [rax]
100008383:	lea	rdx, [rip + 0x27ea] ## literal pool for: "Out of memory"
10000838a:	mov	edi, 0x1
10000838f:	xor	eax, eax
100008391:	call	0x100009ac2
100008396:	push	rbp
100008397:	mov	rbp, rsp
10000839a:	push	r15
10000839c:	push	r14
10000839e:	push	r13
1000083a0:	push	r12
1000083a2:	push	rbx
1000083a3:	sub	rsp, 0x28
1000083a7:	mov	r14, rsi
1000083aa:	mov	r13, rdi
1000083ad:	movsxd	rax, dword ptr [rsi + 0x18]
1000083b1:	mov	ecx, 0x10000
1000083b6:	mov	rdi, rcx
1000083b9:	add	rcx, rcx
1000083bc:	cmp	rdi, rax
1000083bf:	jb	0x1000083b6
1000083c1:	add	rdi, 0x4000
1000083c8:	mov	qword ptr [r14 + 0xe8], rdi
1000083cf:	call	0x10000a1c8 ## symbol stub for: _malloc
1000083d4:	mov	qword ptr [r14 + 0xe0], rax
1000083db:	test	rax, rax
1000083de:	je	0x100008b6f
1000083e4:	call	0x100009f0a ## symbol stub for: _archive_entry_linkresolver_new
1000083e9:	mov	qword ptr [r14 + 0xc8], rax
1000083f0:	test	rax, rax
1000083f3:	je	0x100008b78
1000083f9:	mov	rbx, rax
1000083fc:	mov	rdi, r13
1000083ff:	call	0x100009fa0 ## symbol stub for: _archive_format
100008404:	mov	rdi, rbx
100008407:	mov	esi, eax
100008409:	call	0x100009f10 ## symbol stub for: _archive_entry_linkresolver_set_strategy
10000840e:	call	0x10000a024 ## symbol stub for: _archive_read_disk_new
100008413:	mov	qword ptr [r14 + 0xc0], rax
10000841a:	test	rax, rax
10000841d:	je	0x100008b81
100008423:	movsx	ecx, byte ptr [r14 + 0x59]
100008428:	mov	rdi, rax
10000842b:	cmp	ecx, 0x4c
10000842e:	je	0x10000843c
100008430:	cmp	ecx, 0x48
100008433:	jne	0x100008443
100008435:	call	0x10000a048 ## symbol stub for: _archive_read_disk_set_symlink_hybrid
10000843a:	jmp	0x100008448
10000843c:	call	0x10000a04e ## symbol stub for: _archive_read_disk_set_symlink_logical
100008441:	jmp	0x100008448
100008443:	call	0x10000a054 ## symbol stub for: _archive_read_disk_set_symlink_physical
100008448:	mov	rdi, qword ptr [r14 + 0xc0]
10000844f:	mov	rsi, qword ptr [r14 + 0xf8]
100008456:	lea	rdx, [rip + 0xdd6]
10000845d:	mov	rcx, r14
100008460:	call	0x10000a036 ## symbol stub for: _archive_read_disk_set_matching
100008465:	mov	rdi, qword ptr [r14 + 0xc0]
10000846c:	lea	rsi, [rip + 0xe22]
100008473:	mov	rdx, r14
100008476:	call	0x10000a03c ## symbol stub for: _archive_read_disk_set_metadata_filter_callback
10000847b:	mov	rdi, qword ptr [r14 + 0xc0]
100008482:	mov	esi, dword ptr [r14 + 0x2c]
100008486:	call	0x10000a030 ## symbol stub for: _archive_read_disk_set_behavior
10000848b:	mov	rdi, qword ptr [r14 + 0xc0]
100008492:	call	0x10000a042 ## symbol stub for: _archive_read_disk_set_standard_lookup
100008497:	mov	rdi, qword ptr [r14 + 0x10]
10000849b:	test	rdi, rdi
10000849e:	mov	qword ptr [rbp - 0x38], r13
1000084a2:	je	0x100008590
1000084a8:	mov	byte ptr [r14 + 0xb9], 0x0
1000084b0:	mov	esi, 0x100
1000084b5:	and	esi, dword ptr [r14 + 0x24]
1000084b9:	call	0x100009b81
1000084be:	mov	r15, rax
1000084c1:	mov	rdi, rax
1000084c4:	call	0x100009c46
1000084c9:	test	rax, rax
1000084cc:	je	0x100008576
1000084d2:	mov	r12, rax
1000084d5:	lea	rbx, [rip + 0x3852] ## literal pool for: "-C"
1000084dc:	lea	r13, [rip + 0x3809] ## literal pool for: "Meaningless argument for -C: ''"
1000084e3:	cmp	byte ptr [r14 + 0xb9], 0x0
1000084eb:	je	0x100008501
1000084ed:	cmp	byte ptr [r12], 0x0
1000084f2:	je	0x100008537
1000084f4:	mov	rdi, r14
1000084f7:	mov	rsi, r12
1000084fa:	call	0x1000077cd
1000084ff:	jmp	0x10000854e
100008501:	test	byte ptr [r14 + 0x25], 0x1
100008506:	jne	0x100008517
100008508:	mov	rdi, r12
10000850b:	mov	rsi, rbx
10000850e:	call	0x10000a246 ## symbol stub for: _strcmp
100008513:	test	eax, eax
100008515:	je	0x10000856c
100008517:	cmp	byte ptr [r12], 0x2f
10000851c:	je	0x100008526
10000851e:	mov	rdi, r14
100008521:	call	0x10000788f
100008526:	mov	rdi, r14
100008529:	mov	rsi, qword ptr [rbp - 0x38]
10000852d:	mov	rdx, r12
100008530:	call	0x1000092fb
100008535:	jmp	0x100008556
100008537:	xor	edi, edi
100008539:	mov	rsi, r13
10000853c:	xor	eax, eax
10000853e:	call	0x1000099ad
100008543:	mov	dword ptr [r14 + 0xb4], 0x1
10000854e:	mov	byte ptr [r14 + 0xb9], 0x0
100008556:	mov	rdi, r15
100008559:	call	0x100009c46
10000855e:	mov	r12, rax
100008561:	test	rax, rax
100008564:	jne	0x1000084e3
10000856a:	jmp	0x100008576
10000856c:	mov	byte ptr [r14 + 0xb9], 0x1
100008574:	jmp	0x100008556
100008576:	mov	rdi, r15
100008579:	call	0x100009e28
10000857e:	cmp	byte ptr [r14 + 0xb9], 0x0
100008586:	mov	r13, qword ptr [rbp - 0x38]
10000858a:	jne	0x100008b96
100008590:	mov	rax, qword ptr [r14 + 0x90]
100008597:	mov	r15, qword ptr [rax]
10000859a:	test	r15, r15
10000859d:	je	0x1000088da
1000085a3:	lea	rcx, [r14 + 0xb4]
1000085aa:	mov	qword ptr [rbp - 0x40], rcx
1000085ae:	lea	rbx, [rbp - 0x30]
1000085b2:	mov	cl, byte ptr [r15]
1000085b5:	cmp	cl, 0x40
1000085b8:	je	0x1000085e3
1000085ba:	cmp	cl, 0x2f
1000085bd:	je	0x10000865b
1000085c3:	cmp	cl, 0x2d
1000085c6:	jne	0x1000085ea
1000085c8:	cmp	byte ptr [r15 + 0x1], 0x43
1000085cd:	jne	0x1000085ea
1000085cf:	cmp	byte ptr [r15 + 0x2], 0x0
1000085d4:	je	0x10000888e
1000085da:	add	r15, 0x2
1000085de:	jmp	0x1000088b0
1000085e3:	cmp	byte ptr [r15 + 0x1], 0x2f
1000085e8:	je	0x1000085f8
1000085ea:	mov	rdi, r14
1000085ed:	call	0x10000788f
1000085f2:	cmp	byte ptr [r15], 0x40
1000085f6:	jne	0x10000865b
1000085f8:	inc	r15
1000085fb:	mov	rdi, r15
1000085fe:	lea	rsi, [rip + 0x2802] ## literal pool for: "-"
100008605:	call	0x10000a246 ## symbol stub for: _strcmp
10000860a:	test	eax, eax
10000860c:	mov	r13, r15
10000860f:	mov	eax, 0x0
100008614:	cmove	r13, rax
100008618:	call	0x10000a078 ## symbol stub for: _archive_read_new
10000861d:	mov	r12, rax
100008620:	mov	rdi, rax
100008623:	call	0x10000a0ae ## symbol stub for: _archive_read_support_format_all
100008628:	mov	rdi, r12
10000862b:	call	0x10000a0a2 ## symbol stub for: _archive_read_support_filter_all
100008630:	mov	rdi, r12
100008633:	call	0x100008eb1
100008638:	mov	rdi, r12
10000863b:	lea	rsi, [rip + 0x372c] ## literal pool for: "mtree:checkfs"
100008642:	call	0x10000a096 ## symbol stub for: _archive_read_set_options
100008647:	mov	rsi, qword ptr [r14 + 0x50]
10000864b:	test	rsi, rsi
10000864e:	je	0x10000866e
100008650:	mov	rdi, qword ptr [rbp - 0x38]
100008654:	call	0x100009ff4 ## symbol stub for: _archive_read_add_passphrase
100008659:	jmp	0x100008680
10000865b:	mov	rdi, r14
10000865e:	mov	rsi, r13
100008661:	mov	rdx, r15
100008664:	call	0x1000092fb
100008669:	jmp	0x1000088bb
10000866e:	mov	rdi, r12
100008671:	mov	rsi, r14
100008674:	lea	rdx, [rip - 0x9aa]
10000867b:	call	0x10000a09c ## symbol stub for: _archive_read_set_passphrase_callback
100008680:	test	eax, eax
100008682:	jne	0x100008b4e
100008688:	movsxd	rdx, dword ptr [r14 + 0x18]
10000868c:	mov	rdi, r12
10000868f:	mov	rsi, r13
100008692:	call	0x10000a090 ## symbol stub for: _archive_read_open_filename
100008697:	test	eax, eax
100008699:	je	0x1000086c9
10000869b:	mov	rdi, r12
10000869e:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000086a3:	xor	edi, edi
1000086a5:	lea	rsi, [rip + 0x31c5] ## literal pool for: "%s"
1000086ac:	mov	rdx, rax
1000086af:	xor	eax, eax
1000086b1:	call	0x1000099ad
1000086b6:	mov	rax, qword ptr [rbp - 0x40]
1000086ba:	mov	dword ptr [rax], 0x1
1000086c0:	mov	r13, qword ptr [rbp - 0x38]
1000086c4:	jmp	0x1000088bb
1000086c9:	mov	rdi, r12
1000086cc:	mov	rsi, rbx
1000086cf:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
1000086d4:	test	eax, eax
1000086d6:	mov	r13, qword ptr [rbp - 0x38]
1000086da:	jne	0x10000887b
1000086e0:	mov	rdi, qword ptr [r14 + 0xf8]
1000086e7:	mov	rsi, qword ptr [rbp - 0x30]
1000086eb:	call	0x100009fbe ## symbol stub for: _archive_match_excluded
1000086f0:	test	eax, eax
1000086f2:	jne	0x100008868
1000086f8:	test	byte ptr [r14 + 0x24], 0x20
1000086fd:	je	0x100008721
1000086ff:	mov	rdi, qword ptr [rbp - 0x30]
100008703:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100008708:	lea	rdi, [rip + 0x368a] ## literal pool for: "copy '%s'"
10000870f:	mov	rsi, rax
100008712:	xor	eax, eax
100008714:	call	0x10000761c
100008719:	test	eax, eax
10000871b:	je	0x100008868
100008721:	mov	eax, dword ptr [r14 + 0x20]
100008725:	cmp	eax, 0x2
100008728:	jl	0x100008753
10000872a:	mov	rbx, qword ptr [rip + 0x38df] ## literal pool symbol address: ___stderrp
100008731:	mov	rdi, qword ptr [rbx]
100008734:	lea	rsi, [rip + 0x3668] ## literal pool for: "a "
10000873b:	xor	eax, eax
10000873d:	call	0x1000071a0
100008742:	mov	rsi, qword ptr [rbx]
100008745:	mov	rdx, qword ptr [rbp - 0x30]
100008749:	mov	rdi, r14
10000874c:	call	0x100007d57
100008751:	jmp	0x10000877f
100008753:	cmp	eax, 0x1
100008756:	jne	0x10000877f
100008758:	mov	rax, qword ptr [rip + 0x38b1] ## literal pool symbol address: ___stderrp
10000875f:	mov	rbx, qword ptr [rax]
100008762:	mov	rdi, qword ptr [rbp - 0x30]
100008766:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
10000876b:	mov	rdi, rbx
10000876e:	lea	rsi, [rip + 0x3631] ## literal pool for: "a %s"
100008775:	mov	rdx, rax
100008778:	xor	eax, eax
10000877a:	call	0x1000071a0
10000877f:	call	0x1000047b8
100008784:	test	eax, eax
100008786:	je	0x100008799
100008788:	mov	rdx, qword ptr [rbp - 0x30]
10000878c:	mov	rdi, r14
10000878f:	mov	rsi, r13
100008792:	xor	ecx, ecx
100008794:	call	0x1000096ac
100008799:	mov	rsi, qword ptr [rbp - 0x30]
10000879d:	mov	rdi, r13
1000087a0:	call	0x10000a0fc ## symbol stub for: _archive_write_header
1000087a5:	test	eax, eax
1000087a7:	je	0x100008818
1000087a9:	mov	ebx, eax
1000087ab:	cmp	dword ptr [r14 + 0x20], 0x0
1000087b0:	je	0x1000087db
1000087b2:	mov	rax, qword ptr [rip + 0x3857] ## literal pool symbol address: ___stderrp
1000087b9:	mov	r13, qword ptr [rax]
1000087bc:	mov	rdi, qword ptr [rbp - 0x38]
1000087c0:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000087c5:	mov	rdi, r13
1000087c8:	lea	rsi, [rip + 0x314e] ## literal pool for: ": %s"
1000087cf:	mov	rdx, rax
1000087d2:	xor	eax, eax
1000087d4:	call	0x10000a18c ## symbol stub for: _fprintf
1000087d9:	jmp	0x100008806
1000087db:	mov	rdi, qword ptr [rbp - 0x30]
1000087df:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000087e4:	mov	r13, rax
1000087e7:	mov	rdi, qword ptr [rbp - 0x38]
1000087eb:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000087f0:	xor	edi, edi
1000087f2:	lea	rsi, [rip + 0x31a3] ## literal pool for: "%s: %s"
1000087f9:	mov	rdx, r13
1000087fc:	mov	rcx, rax
1000087ff:	xor	eax, eax
100008801:	call	0x1000099ad
100008806:	cmp	ebx, -0x1e
100008809:	je	0x100008b44
10000880f:	cmp	ebx, -0x14
100008812:	mov	r13, qword ptr [rbp - 0x38]
100008816:	jl	0x100008849
100008818:	mov	rdi, qword ptr [rbp - 0x30]
10000881c:	call	0x100009f58 ## symbol stub for: _archive_entry_size
100008821:	test	rax, rax
100008824:	je	0x100008841
100008826:	mov	rcx, qword ptr [rbp - 0x30]
10000882a:	mov	rdi, r14
10000882d:	mov	rsi, r13
100008830:	mov	rdx, r12
100008833:	call	0x1000097e1
100008838:	test	eax, eax
10000883a:	je	0x100008849
10000883c:	jmp	0x100008b44
100008841:	mov	rdi, r12
100008844:	call	0x10000a00c ## symbol stub for: _archive_read_data_skip
100008849:	cmp	dword ptr [r14 + 0x20], 0x0
10000884e:	lea	rbx, [rbp - 0x30]
100008852:	je	0x100008868
100008854:	mov	rax, qword ptr [rip + 0x37b5] ## literal pool symbol address: ___stderrp
10000885b:	mov	rsi, qword ptr [rax]
10000885e:	mov	edi, 0xa
100008863:	call	0x10000a192 ## symbol stub for: _fputc
100008868:	mov	rdi, r12
10000886b:	mov	rsi, rbx
10000886e:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100008873:	test	eax, eax
100008875:	je	0x1000086e0
10000887b:	cmp	eax, 0x1
10000887e:	ja	0x100008add
100008884:	mov	rdi, r12
100008887:	call	0x10000a06c ## symbol stub for: _archive_read_free
10000888c:	jmp	0x1000088bb
10000888e:	lea	rcx, [rax + 0x8]
100008892:	mov	qword ptr [r14 + 0x90], rcx
100008899:	mov	r15, qword ptr [rax + 0x8]
10000889d:	test	r15, r15
1000088a0:	je	0x100008b12
1000088a6:	cmp	byte ptr [r15], 0x0
1000088aa:	je	0x100008b2b
1000088b0:	mov	rdi, r14
1000088b3:	mov	rsi, r15
1000088b6:	call	0x1000077cd
1000088bb:	mov	rcx, qword ptr [r14 + 0x90]
1000088c2:	lea	rax, [rcx + 0x8]
1000088c6:	mov	qword ptr [r14 + 0x90], rax
1000088cd:	mov	r15, qword ptr [rcx + 0x8]
1000088d1:	test	r15, r15
1000088d4:	jne	0x1000085b2
1000088da:	mov	rdi, qword ptr [r14 + 0xc0]
1000088e1:	xor	esi, esi
1000088e3:	xor	edx, edx
1000088e5:	xor	ecx, ecx
1000088e7:	call	0x10000a036 ## symbol stub for: _archive_read_disk_set_matching
1000088ec:	mov	rdi, qword ptr [r14 + 0xc0]
1000088f3:	xor	esi, esi
1000088f5:	xor	edx, edx
1000088f7:	call	0x10000a03c ## symbol stub for: _archive_read_disk_set_metadata_filter_callback
1000088fc:	lea	rbx, [rbp - 0x30]
100008900:	mov	qword ptr [rbx], 0x0
100008907:	mov	rdi, qword ptr [r14 + 0xc8]
10000890e:	lea	rdx, [rbp - 0x48]
100008912:	mov	rsi, rbx
100008915:	call	0x100009efe ## symbol stub for: _archive_entry_linkify
10000891a:	mov	rdi, qword ptr [rbx]
10000891d:	test	rdi, rdi
100008920:	je	0x100008a20
100008926:	lea	r13, [rip + 0x2f44] ## literal pool for: "%s"
10000892d:	mov	r15, qword ptr [r14 + 0xc0]
100008934:	call	0x100009f5e ## symbol stub for: _archive_entry_sourcepath
100008939:	mov	rdi, r15
10000893c:	mov	rsi, rax
10000893f:	call	0x10000a02a ## symbol stub for: _archive_read_disk_open
100008944:	test	eax, eax
100008946:	je	0x10000898b
100008948:	mov	rdi, r15
10000894b:	call	0x100009f7c ## symbol stub for: _archive_errno
100008950:	mov	ebx, eax
100008952:	mov	rdi, r15
100008955:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000895a:	mov	edi, ebx
10000895c:	mov	rsi, r13
10000895f:	mov	rdx, rax
100008962:	xor	eax, eax
100008964:	call	0x1000099ad
100008969:	mov	dword ptr [r14 + 0xb4], 0x1
100008974:	mov	rdi, qword ptr [rbp - 0x30]
100008978:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
10000897d:	mov	rdi, qword ptr [rbp - 0x30]
100008981:	test	rdi, rdi
100008984:	jne	0x10000892d
100008986:	jmp	0x100008a20
10000898b:	call	0x100009f1c ## symbol stub for: _archive_entry_new
100008990:	mov	r12, rax
100008993:	mov	rdi, r15
100008996:	mov	rsi, rax
100008999:	call	0x10000a084 ## symbol stub for: _archive_read_next_header2
10000899e:	mov	ebx, eax
1000089a0:	mov	rdi, r12
1000089a3:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
1000089a8:	test	ebx, ebx
1000089aa:	je	0x1000089de
1000089ac:	mov	rdi, r15
1000089af:	call	0x100009f7c ## symbol stub for: _archive_errno
1000089b4:	mov	r12d, eax
1000089b7:	mov	rdi, r15
1000089ba:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000089bf:	mov	edi, r12d
1000089c2:	mov	rsi, r13
1000089c5:	mov	rdx, rax
1000089c8:	xor	eax, eax
1000089ca:	call	0x1000099ad
1000089cf:	cmp	ebx, -0x1e
1000089d2:	je	0x100008969
1000089d4:	mov	rdi, r15
1000089d7:	call	0x100009ffa ## symbol stub for: _archive_read_close
1000089dc:	jmp	0x100008974
1000089de:	mov	rdx, qword ptr [rbp - 0x30]
1000089e2:	mov	rdi, r14
1000089e5:	mov	rsi, qword ptr [rbp - 0x38]
1000089e9:	call	0x100009593
1000089ee:	mov	rdi, qword ptr [rbp - 0x30]
1000089f2:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
1000089f7:	mov	rdi, r15
1000089fa:	call	0x100009ffa ## symbol stub for: _archive_read_close
1000089ff:	mov	qword ptr [rbp - 0x30], 0x0
100008a07:	mov	rdi, qword ptr [r14 + 0xc8]
100008a0e:	lea	rsi, [rbp - 0x30]
100008a12:	lea	rdx, [rbp - 0x48]
100008a16:	call	0x100009efe ## symbol stub for: _archive_entry_linkify
100008a1b:	jmp	0x10000897d
100008a20:	mov	r13, qword ptr [rbp - 0x38]
100008a24:	mov	rdi, r13
100008a27:	call	0x10000a0d8 ## symbol stub for: _archive_write_close
100008a2c:	test	eax, eax
100008a2e:	je	0x100008a58
100008a30:	mov	rdi, r13
100008a33:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008a38:	lea	rsi, [rip + 0x2e32] ## literal pool for: "%s"
100008a3f:	xor	edi, edi
100008a41:	mov	rdx, rax
100008a44:	xor	eax, eax
100008a46:	call	0x1000099ad
100008a4b:	lea	rax, [r14 + 0xb4]
100008a52:	mov	dword ptr [rax], 0x1
100008a58:	mov	rdi, qword ptr [r14 + 0xe0]
100008a5f:	call	0x10000a1a4 ## symbol stub for: _free
100008a64:	mov	rdi, qword ptr [r14 + 0xc8]
100008a6b:	call	0x100009f04 ## symbol stub for: _archive_entry_linkresolver_free
100008a70:	xor	ebx, ebx
100008a72:	mov	qword ptr [r14 + 0xc8], rbx
100008a79:	mov	rdi, qword ptr [r14 + 0xc0]
100008a80:	call	0x10000a06c ## symbol stub for: _archive_read_free
100008a85:	mov	qword ptr [r14 + 0xc0], rbx
100008a8c:	test	byte ptr [r14 + 0x25], 0x10
100008a91:	je	0x100008ac6
100008a93:	mov	rax, qword ptr [rip + 0x3576] ## literal pool symbol address: ___stderrp
100008a9a:	mov	rbx, qword ptr [rax]
100008a9d:	mov	rdi, r13
100008aa0:	mov	esi, 0xffffffff
100008aa5:	call	0x100009f8e ## symbol stub for: _archive_filter_bytes
100008aaa:	mov	rdi, rax
100008aad:	call	0x100007c70
100008ab2:	lea	rsi, [rip + 0x3253] ## literal pool for: "Total bytes written: %s\n"
100008ab9:	mov	rdi, rbx
100008abc:	mov	rdx, rax
100008abf:	xor	eax, eax
100008ac1:	call	0x10000a18c ## symbol stub for: _fprintf
100008ac6:	mov	rdi, r13
100008ac9:	call	0x10000a0f6 ## symbol stub for: _archive_write_free
100008ace:	add	rsp, 0x28
100008ad2:	pop	rbx
100008ad3:	pop	r12
100008ad5:	pop	r13
100008ad7:	pop	r14
100008ad9:	pop	r15
100008adb:	pop	rbp
100008adc:	ret
100008add:	mov	rdi, r12
100008ae0:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008ae5:	lea	rsi, [rip + 0x3290] ## literal pool for: "Error reading archive %s: %s"
100008aec:	xor	edi, edi
100008aee:	mov	rdx, r15
100008af1:	mov	rcx, rax
100008af4:	xor	eax, eax
100008af6:	call	0x1000099ad
100008afb:	mov	rax, qword ptr [rbp - 0x40]
100008aff:	mov	dword ptr [rax], 0x1
100008b05:	mov	rdi, r12
100008b08:	call	0x10000a06c ## symbol stub for: _archive_read_free
100008b0d:	jmp	0x1000088da
100008b12:	lea	rsi, [rip + 0x2d58] ## literal pool for: "%s"
100008b19:	lea	rdx, [rip + 0x31b4] ## literal pool for: "Missing argument for -C"
100008b20:	xor	edi, edi
100008b22:	xor	eax, eax
100008b24:	call	0x1000099ad
100008b29:	jmp	0x100008b3b
100008b2b:	lea	rsi, [rip + 0x31ba] ## literal pool for: "Meaningless argument for -C: ''"
100008b32:	xor	edi, edi
100008b34:	xor	eax, eax
100008b36:	call	0x1000099ad
100008b3b:	mov	rax, qword ptr [rbp - 0x40]
100008b3f:	jmp	0x100008a52
100008b44:	mov	edi, 0x1
100008b49:	call	0x10000a168 ## symbol stub for: _exit
100008b4e:	mov	rdi, qword ptr [rbp - 0x38]
100008b52:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008b57:	lea	rdx, [rip + 0x2d13] ## literal pool for: "%s"
100008b5e:	mov	edi, 0x1
100008b63:	xor	esi, esi
100008b65:	mov	rcx, rax
100008b68:	xor	eax, eax
100008b6a:	call	0x100009ac2
100008b6f:	lea	rdx, [rip + 0x310c] ## literal pool for: "cannot allocate memory"
100008b76:	jmp	0x100008b88
100008b78:	lea	rdx, [rip + 0x311a] ## literal pool for: "cannot create link resolver"
100008b7f:	jmp	0x100008b88
100008b81:	lea	rdx, [rip + 0x312d] ## literal pool for: "Cannot create read_disk object"
100008b88:	mov	edi, 0x1
100008b8d:	xor	esi, esi
100008b8f:	xor	eax, eax
100008b91:	call	0x100009ac2
100008b96:	call	0x100009e86 ## symbol stub for: ___error
100008b9b:	mov	esi, dword ptr [rax]
100008b9d:	lea	rdx, [rip + 0x318d] ## literal pool for: "Unexpected end of filename list; directory expected after -C"
100008ba4:	mov	edi, 0x1
100008ba9:	jmp	0x100008b8f
100008bab:	push	rbp
100008bac:	mov	rbp, rsp
100008baf:	push	r15
100008bb1:	push	r14
100008bb3:	push	r13
100008bb5:	push	r12
100008bb7:	push	rbx
100008bb8:	push	rax
100008bb9:	mov	r14, rdi
100008bbc:	call	0x100008e19
100008bc1:	mov	rdi, qword ptr [r14]
100008bc4:	mov	esi, 0x202
100008bc9:	mov	edx, 0x1b6
100008bce:	xor	eax, eax
100008bd0:	call	0x10000a1ec ## symbol stub for: _open
100008bd5:	mov	dword ptr [r14 + 0x88], eax
100008bdc:	test	eax, eax
100008bde:	js	0x100008d9f
100008be4:	call	0x10000a078 ## symbol stub for: _archive_read_new
100008be9:	mov	r15, rax
100008bec:	mov	rdi, rax
100008bef:	call	0x10000a0a2 ## symbol stub for: _archive_read_support_filter_all
100008bf4:	mov	rdi, r15
100008bf7:	call	0x10000a0b4 ## symbol stub for: _archive_read_support_format_empty
100008bfc:	mov	rdi, r15
100008bff:	call	0x10000a0c0 ## symbol stub for: _archive_read_support_format_tar
100008c04:	mov	rdi, r15
100008c07:	call	0x10000a0ba ## symbol stub for: _archive_read_support_format_gnutar
100008c0c:	mov	rdi, r15
100008c0f:	call	0x100008eb1
100008c14:	mov	esi, dword ptr [r14 + 0x88]
100008c1b:	mov	edx, 0x2800
100008c20:	mov	rdi, r15
100008c23:	call	0x10000a08a ## symbol stub for: _archive_read_open_fd
100008c28:	test	eax, eax
100008c2a:	jne	0x100008db7
100008c30:	lea	rsi, [rbp - 0x30]
100008c34:	mov	rdi, r15
100008c37:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100008c3c:	mov	ebx, 0x30003
100008c41:	test	eax, eax
100008c43:	jne	0x100008c74
100008c45:	lea	r12, [rbp - 0x30]
100008c49:	mov	rdi, r15
100008c4c:	xor	esi, esi
100008c4e:	call	0x100009f94 ## symbol stub for: _archive_filter_code
100008c53:	test	eax, eax
100008c55:	jne	0x100008d76
100008c5b:	mov	rdi, r15
100008c5e:	call	0x100009fa0 ## symbol stub for: _archive_format
100008c63:	mov	ebx, eax
100008c65:	mov	rdi, r15
100008c68:	mov	rsi, r12
100008c6b:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100008c70:	test	eax, eax
100008c72:	je	0x100008c49
100008c74:	mov	rdi, r15
100008c77:	call	0x10000a072 ## symbol stub for: _archive_read_header_position
100008c7c:	mov	r12, rax
100008c7f:	mov	rdi, r15
100008c82:	call	0x10000a06c ## symbol stub for: _archive_read_free
100008c87:	call	0x10000a102 ## symbol stub for: _archive_write_new
100008c8c:	mov	r15, rax
100008c8f:	mov	rdi, qword ptr [r14 + 0x70]
100008c93:	call	0x1000044e6
100008c98:	test	rax, rax
100008c9b:	je	0x100008cf3
100008c9d:	mov	rdi, qword ptr [r14 + 0x70]
100008ca1:	call	0x1000044e6
100008ca6:	mov	rdi, r15
100008ca9:	mov	rsi, rax
100008cac:	call	0x10000a126 ## symbol stub for: _archive_write_set_format_by_name
100008cb1:	mov	r13d, 0xff0000
100008cb7:	and	ebx, r13d
100008cba:	mov	rdi, r15
100008cbd:	call	0x100009fa0 ## symbol stub for: _archive_format
100008cc2:	cmp	ebx, 0x60000
100008cc8:	je	0x100008d09
100008cca:	and	eax, r13d
100008ccd:	cmp	ebx, eax
100008ccf:	je	0x100008d09
100008cd1:	mov	rdi, qword ptr [r14 + 0x70]
100008cd5:	call	0x1000044e6
100008cda:	mov	r8, qword ptr [r14]
100008cdd:	lea	rdx, [rip + 0x2f2c] ## literal pool for: "Format %s is incompatible with the archive %s."
100008ce4:	mov	edi, 0x1
100008ce9:	xor	esi, esi
100008ceb:	mov	rcx, rax
100008cee:	jmp	0x100008de0
100008cf3:	cmp	ebx, 0x60000
100008cf9:	mov	esi, 0x30003
100008cfe:	cmovne	esi, ebx
100008d01:	mov	rdi, r15
100008d04:	call	0x10000a120 ## symbol stub for: _archive_write_set_format
100008d09:	mov	edi, dword ptr [r14 + 0x88]
100008d10:	mov	rsi, r12
100008d13:	xor	edx, edx
100008d15:	call	0x10000a1c2 ## symbol stub for: _lseek
100008d1a:	test	rax, rax
100008d1d:	js	0x100008de7
100008d23:	mov	rdi, r14
100008d26:	mov	rsi, r15
100008d29:	call	0x100008285
100008d2e:	mov	esi, dword ptr [r14 + 0x88]
100008d35:	mov	rdi, r15
100008d38:	call	0x10000a108 ## symbol stub for: _archive_write_open_fd
100008d3d:	mov	rdi, r15
100008d40:	test	eax, eax
100008d42:	jne	0x100008dfc
100008d48:	mov	rsi, r14
100008d4b:	call	0x100008396
100008d50:	mov	edi, dword ptr [r14 + 0x88]
100008d57:	call	0x10000a162 ## symbol stub for: _close
100008d5c:	mov	dword ptr [r14 + 0x88], 0xffffffff
100008d67:	add	rsp, 0x8
100008d6b:	pop	rbx
100008d6c:	pop	r12
100008d6e:	pop	r13
100008d70:	pop	r14
100008d72:	pop	r15
100008d74:	pop	rbp
100008d75:	ret
100008d76:	mov	rdi, r15
100008d79:	call	0x10000a06c ## symbol stub for: _archive_read_free
100008d7e:	mov	edi, dword ptr [r14 + 0x88]
100008d85:	call	0x10000a162 ## symbol stub for: _close
100008d8a:	lea	rdx, [rip + 0x2e5a] ## literal pool for: "Cannot append to compressed archive."
100008d91:	mov	edi, 0x1
100008d96:	xor	esi, esi
100008d98:	xor	eax, eax
100008d9a:	call	0x100009ac2
100008d9f:	call	0x100009e86 ## symbol stub for: ___error
100008da4:	mov	esi, dword ptr [rax]
100008da6:	mov	rcx, qword ptr [r14]
100008da9:	lea	rdx, [rip + 0x2e12] ## literal pool for: "Cannot open %s"
100008db0:	mov	edi, 0x1
100008db5:	jmp	0x100008e12
100008db7:	mov	rdi, r15
100008dba:	call	0x100009f7c ## symbol stub for: _archive_errno
100008dbf:	mov	ebx, eax
100008dc1:	mov	r14, qword ptr [r14]
100008dc4:	mov	rdi, r15
100008dc7:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008dcc:	lea	rdx, [rip + 0x2dfe] ## literal pool for: "Can't read archive %s: %s"
100008dd3:	mov	edi, 0x1
100008dd8:	mov	esi, ebx
100008dda:	mov	rcx, r14
100008ddd:	mov	r8, rax
100008de0:	xor	eax, eax
100008de2:	call	0x100009ac2
100008de7:	call	0x100009e86 ## symbol stub for: ___error
100008dec:	mov	esi, dword ptr [rax]
100008dee:	lea	rdx, [rip + 0x2e4a] ## literal pool for: "Could not seek to archive end"
100008df5:	mov	edi, 0x1
100008dfa:	jmp	0x100008d98
100008dfc:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008e01:	lea	rdx, [rip + 0x2a69] ## literal pool for: "%s"
100008e08:	mov	edi, 0x1
100008e0d:	xor	esi, esi
100008e0f:	mov	rcx, rax
100008e12:	xor	eax, eax
100008e14:	call	0x100009ac2
100008e19:	push	rbp
100008e1a:	mov	rbp, rsp
100008e1d:	push	rbx
100008e1e:	sub	rsp, 0x98
100008e25:	mov	rbx, rdi
100008e28:	mov	rax, qword ptr [rdi + 0x90]
100008e2f:	cmp	qword ptr [rax], 0x0
100008e33:	jne	0x100008e3c
100008e35:	cmp	qword ptr [rbx + 0x10], 0x0
100008e3a:	je	0x100008e84
100008e3c:	mov	rdi, qword ptr [rbx]
100008e3f:	test	rdi, rdi
100008e42:	je	0x100008e7b
100008e44:	lea	rsi, [rbp - 0x98]
100008e4b:	call	0x10000a234 ## symbol stub for: _stat$INODE64
100008e50:	test	eax, eax
100008e52:	jne	0x100008e71
100008e54:	movzx	eax, word ptr [rbp - 0x94]
100008e5b:	and	eax, 0xf000
100008e60:	cmp	eax, 0x8000
100008e65:	je	0x100008e71
100008e67:	movzx	eax, ax
100008e6a:	cmp	eax, 0x6000
100008e6f:	jne	0x100008e99
100008e71:	add	rsp, 0x98
100008e78:	pop	rbx
100008e79:	pop	rbp
100008e7a:	ret
100008e7b:	lea	rdx, [rip + 0x2fbe] ## literal pool for: "Cannot append to stdout."
100008e82:	jmp	0x100008e8b
100008e84:	lea	rdx, [rip + 0x2cc9] ## literal pool for: "no files or directories specified"
100008e8b:	mov	edi, 0x1
100008e90:	xor	esi, esi
100008e92:	xor	eax, eax
100008e94:	call	0x100009ac2
100008e99:	mov	rcx, qword ptr [rbx]
100008e9c:	lea	rdx, [rip + 0x2fb6] ## literal pool for: "Cannot append to %s: not a regular file."
100008ea3:	mov	edi, 0x1
100008ea8:	xor	esi, esi
100008eaa:	xor	eax, eax
100008eac:	call	0x100009ac2
100008eb1:	push	rbp
100008eb2:	mov	rbp, rsp
100008eb5:	push	r15
100008eb7:	push	r14
100008eb9:	push	r12
100008ebb:	push	rbx
100008ebc:	mov	r14, rdi
100008ebf:	lea	rdi, [rip + 0x2998] ## literal pool for: "TAR_READER_OPTIONS"
100008ec6:	call	0x10000a1b0 ## symbol stub for: _getenv
100008ecb:	test	rax, rax
100008ece:	je	0x100008f6b
100008ed4:	mov	r15, rax
100008ed7:	mov	rdi, rax
100008eda:	call	0x10000a26a ## symbol stub for: _strlen
100008edf:	mov	r12, rax
100008ee2:	lea	rdi, [rax + 0x1e]
100008ee6:	call	0x10000a1c8 ## symbol stub for: _malloc
100008eeb:	test	rax, rax
100008eee:	je	0x100008f74
100008ef4:	mov	rbx, rax
100008ef7:	inc	r12
100008efa:	movabs	rax, 0x2c5f5f656d616e5f
100008f04:	mov	qword ptr [rbx + 0x15], rax
100008f08:	movabs	rax, 0x616e5f656c75646f
100008f12:	mov	qword ptr [rbx + 0x10], rax
100008f16:	movabs	rax, 0x6d5f676e6f72775f
100008f20:	mov	qword ptr [rbx + 0x8], rax
100008f24:	movabs	rax, 0x65726f6e67695f5f
100008f2e:	mov	qword ptr [rbx], rax
100008f31:	mov	rdi, rbx
100008f34:	mov	rsi, r15
100008f37:	mov	rdx, r12
100008f3a:	call	0x10000a1da ## symbol stub for: _memcpy
100008f3f:	mov	rdi, r14
100008f42:	mov	rsi, rbx
100008f45:	call	0x10000a096 ## symbol stub for: _archive_read_set_options
100008f4a:	mov	r15d, eax
100008f4d:	mov	rdi, rbx
100008f50:	call	0x10000a1a4 ## symbol stub for: _free
100008f55:	mov	rdi, r14
100008f58:	cmp	r15d, -0x15
100008f5c:	jle	0x100008f8e
100008f5e:	pop	rbx
100008f5f:	pop	r12
100008f61:	pop	r14
100008f63:	pop	r15
100008f65:	pop	rbp
100008f66:	jmp	0x100009ec8 ## symbol stub for: _archive_clear_error
100008f6b:	pop	rbx
100008f6c:	pop	r12
100008f6e:	pop	r14
100008f70:	pop	r15
100008f72:	pop	rbp
100008f73:	ret
100008f74:	call	0x100009e86 ## symbol stub for: ___error
100008f79:	mov	esi, dword ptr [rax]
100008f7b:	lea	rdx, [rip + 0x1bf2] ## literal pool for: "Out of memory"
100008f82:	mov	edi, 0x1
100008f87:	xor	eax, eax
100008f89:	call	0x100009ac2
100008f8e:	call	0x100009f82 ## symbol stub for: _archive_error_string
100008f93:	lea	rdx, [rip + 0x28d7] ## literal pool for: "%s"
100008f9a:	mov	edi, 0x1
100008f9f:	xor	esi, esi
100008fa1:	mov	rcx, rax
100008fa4:	xor	eax, eax
100008fa6:	call	0x100009ac2
100008fab:	push	rbp
100008fac:	mov	rbp, rsp
100008faf:	push	r15
100008fb1:	push	r14
100008fb3:	push	r13
100008fb5:	push	r12
100008fb7:	push	rbx
100008fb8:	sub	rsp, 0x18
100008fbc:	mov	r14, rdi
100008fbf:	lea	rax, [rbp - 0x40]
100008fc3:	mov	qword ptr [rdi + 0xd0], rax
100008fca:	xorps	xmm0, xmm0
100008fcd:	movaps	xmmword ptr [rax], xmm0
100008fd0:	call	0x100008e19
100008fd5:	mov	rdi, qword ptr [r14]
100008fd8:	mov	esi, 0x2
100008fdd:	xor	eax, eax
100008fdf:	call	0x10000a1ec ## symbol stub for: _open
100008fe4:	mov	dword ptr [r14 + 0x88], eax
100008feb:	test	eax, eax
100008fed:	js	0x1000091d2
100008ff3:	call	0x10000a078 ## symbol stub for: _archive_read_new
100008ff8:	mov	r12, rax
100008ffb:	mov	rdi, rax
100008ffe:	call	0x10000a0a2 ## symbol stub for: _archive_read_support_filter_all
100009003:	mov	rdi, r12
100009006:	call	0x10000a0c0 ## symbol stub for: _archive_read_support_format_tar
10000900b:	mov	rdi, r12
10000900e:	call	0x10000a0ba ## symbol stub for: _archive_read_support_format_gnutar
100009013:	mov	rdi, r12
100009016:	call	0x100008eb1
10000901b:	mov	esi, dword ptr [r14 + 0x88]
100009022:	movsxd	rdx, dword ptr [r14 + 0x18]
100009026:	mov	rdi, r12
100009029:	call	0x10000a08a ## symbol stub for: _archive_read_open_fd
10000902e:	test	eax, eax
100009030:	jne	0x1000091ea
100009036:	lea	rsi, [rbp - 0x30]
10000903a:	mov	rdi, r12
10000903d:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100009042:	mov	ebx, 0x30003
100009047:	test	eax, eax
100009049:	jne	0x100009097
10000904b:	lea	r15, [rbp - 0x30]
10000904f:	mov	rdi, r12
100009052:	xor	esi, esi
100009054:	call	0x100009f94 ## symbol stub for: _archive_filter_code
100009059:	test	eax, eax
10000905b:	jne	0x100009185
100009061:	mov	rdi, qword ptr [r14 + 0xf8]
100009068:	mov	rdx, qword ptr [rbp - 0x30]
10000906c:	mov	esi, 0x112
100009071:	call	0x100009fac ## symbol stub for: _archive_match_exclude_entry
100009076:	test	eax, eax
100009078:	jne	0x1000091ae
10000907e:	mov	rdi, r12
100009081:	call	0x100009fa0 ## symbol stub for: _archive_format
100009086:	mov	ebx, eax
100009088:	mov	rdi, r12
10000908b:	mov	rsi, r15
10000908e:	call	0x10000a07e ## symbol stub for: _archive_read_next_header
100009093:	test	eax, eax
100009095:	je	0x10000904f
100009097:	mov	rdi, r12
10000909a:	call	0x10000a072 ## symbol stub for: _archive_read_header_position
10000909f:	mov	r13, rax
1000090a2:	mov	rdi, r12
1000090a5:	call	0x10000a06c ## symbol stub for: _archive_read_free
1000090aa:	call	0x10000a102 ## symbol stub for: _archive_write_new
1000090af:	mov	r15, rax
1000090b2:	mov	rdi, rax
1000090b5:	mov	esi, ebx
1000090b7:	call	0x10000a120 ## symbol stub for: _archive_write_set_format
1000090bc:	mov	esi, dword ptr [r14 + 0x18]
1000090c0:	mov	rdi, r15
1000090c3:	call	0x10000a11a ## symbol stub for: _archive_write_set_bytes_per_block
1000090c8:	mov	esi, dword ptr [r14 + 0x1c]
1000090cc:	mov	rdi, r15
1000090cf:	call	0x10000a114 ## symbol stub for: _archive_write_set_bytes_in_last_block
1000090d4:	mov	edi, dword ptr [r14 + 0x88]
1000090db:	mov	rsi, r13
1000090de:	xor	edx, edx
1000090e0:	call	0x10000a1c2 ## symbol stub for: _lseek
1000090e5:	test	rax, rax
1000090e8:	js	0x100009210
1000090ee:	mov	rdi, r14
1000090f1:	mov	rsi, r15
1000090f4:	call	0x100008285
1000090f9:	mov	esi, dword ptr [r14 + 0x88]
100009100:	mov	rdi, r15
100009103:	call	0x10000a108 ## symbol stub for: _archive_write_open_fd
100009108:	mov	rdi, r15
10000910b:	test	eax, eax
10000910d:	jne	0x100009225
100009113:	mov	rsi, r14
100009116:	call	0x100008396
10000911b:	mov	edi, dword ptr [r14 + 0x88]
100009122:	call	0x10000a162 ## symbol stub for: _close
100009127:	mov	dword ptr [r14 + 0x88], 0xffffffff
100009132:	mov	rax, qword ptr [r14 + 0xd0]
100009139:	mov	rcx, qword ptr [rax]
10000913c:	test	rcx, rcx
10000913f:	je	0x10000916e
100009141:	mov	rbx, qword ptr [rcx]
100009144:	mov	rdi, qword ptr [rcx + 0x18]
100009148:	call	0x10000a1a4 ## symbol stub for: _free
10000914d:	mov	rax, qword ptr [r14 + 0xd0]
100009154:	mov	rdi, qword ptr [rax]
100009157:	call	0x10000a1a4 ## symbol stub for: _free
10000915c:	mov	rax, qword ptr [r14 + 0xd0]
100009163:	mov	qword ptr [rax], rbx
100009166:	mov	rcx, rbx
100009169:	test	rbx, rbx
10000916c:	jne	0x100009141
10000916e:	mov	qword ptr [rax + 0x8], 0x0
100009176:	add	rsp, 0x18
10000917a:	pop	rbx
10000917b:	pop	r12
10000917d:	pop	r13
10000917f:	pop	r14
100009181:	pop	r15
100009183:	pop	rbp
100009184:	ret
100009185:	mov	rdi, r12
100009188:	call	0x10000a06c ## symbol stub for: _archive_read_free
10000918d:	mov	edi, dword ptr [r14 + 0x88]
100009194:	call	0x10000a162 ## symbol stub for: _close
100009199:	lea	rdx, [rip + 0x2a4b] ## literal pool for: "Cannot append to compressed archive."
1000091a0:	mov	edi, 0x1
1000091a5:	xor	esi, esi
1000091a7:	xor	eax, eax
1000091a9:	call	0x100009ac2
1000091ae:	mov	rdi, qword ptr [r14 + 0xf8]
1000091b5:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000091ba:	lea	rdx, [rip + 0x1ab6] ## literal pool for: "Error : %s"
1000091c1:	mov	edi, 0x1
1000091c6:	xor	esi, esi
1000091c8:	mov	rcx, rax
1000091cb:	xor	eax, eax
1000091cd:	call	0x100009ac2
1000091d2:	call	0x100009e86 ## symbol stub for: ___error
1000091d7:	mov	esi, dword ptr [rax]
1000091d9:	mov	rcx, qword ptr [r14]
1000091dc:	lea	rdx, [rip + 0x29df] ## literal pool for: "Cannot open %s"
1000091e3:	mov	edi, 0x1
1000091e8:	jmp	0x1000091cb
1000091ea:	mov	rbx, qword ptr [r14]
1000091ed:	mov	rdi, r12
1000091f0:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000091f5:	lea	rdx, [rip + 0x2a61] ## literal pool for: "Can't open %s: %s"
1000091fc:	mov	edi, 0x1
100009201:	xor	esi, esi
100009203:	mov	rcx, rbx
100009206:	mov	r8, rax
100009209:	xor	eax, eax
10000920b:	call	0x100009ac2
100009210:	call	0x100009e86 ## symbol stub for: ___error
100009215:	mov	esi, dword ptr [rax]
100009217:	lea	rdx, [rip + 0x2a21] ## literal pool for: "Could not seek to archive end"
10000921e:	mov	edi, 0x1
100009223:	jmp	0x1000091a7
100009225:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000922a:	lea	rdx, [rip + 0x2640] ## literal pool for: "%s"
100009231:	jmp	0x1000091c1
100009233:	push	rbp
100009234:	mov	rbp, rsp
100009237:	push	r15
100009239:	push	r14
10000923b:	push	rbx
10000923c:	push	rax
10000923d:	cmp	byte ptr [rsi + 0x24], 0x0
100009241:	js	0x10000928a
100009243:	mov	r14, rdx
100009246:	mov	rbx, rsi
100009249:	mov	r15, rdi
10000924c:	call	0x10000a012 ## symbol stub for: _archive_read_disk_can_descend
100009251:	test	eax, eax
100009253:	je	0x10000928a
100009255:	test	byte ptr [rbx + 0x24], 0x20
100009259:	je	0x100009278
10000925b:	mov	rdi, r14
10000925e:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100009263:	lea	rdi, [rip + 0x2abb] ## literal pool for: "add '%s'"
10000926a:	mov	rsi, rax
10000926d:	xor	eax, eax
10000926f:	call	0x10000761c
100009274:	test	eax, eax
100009276:	je	0x10000928a
100009278:	mov	rdi, r15
10000927b:	add	rsp, 0x8
10000927f:	pop	rbx
100009280:	pop	r14
100009282:	pop	r15
100009284:	pop	rbp
100009285:	jmp	0x10000a018 ## symbol stub for: _archive_read_disk_descend
10000928a:	add	rsp, 0x8
10000928e:	pop	rbx
10000928f:	pop	r14
100009291:	pop	r15
100009293:	pop	rbp
100009294:	ret
100009295:	push	rbp
100009296:	mov	rbp, rsp
100009299:	push	r15
10000929b:	push	r14
10000929d:	push	rbx
10000929e:	push	rax
10000929f:	mov	r14, rdi
1000092a2:	mov	eax, dword ptr [rsi + 0x24]
1000092a5:	test	al, 0x20
1000092a7:	je	0x1000092cf
1000092a9:	mov	rbx, rsi
1000092ac:	mov	rdi, rdx
1000092af:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000092b4:	lea	rdi, [rip + 0x2a6a] ## literal pool for: "add '%s'"
1000092bb:	xor	r15d, r15d
1000092be:	mov	rsi, rax
1000092c1:	xor	eax, eax
1000092c3:	call	0x10000761c
1000092c8:	test	eax, eax
1000092ca:	je	0x1000092ed
1000092cc:	mov	eax, dword ptr [rbx + 0x24]
1000092cf:	mov	r15d, 0x1
1000092d5:	test	al, al
1000092d7:	js	0x1000092ed
1000092d9:	mov	rdi, r14
1000092dc:	call	0x10000a012 ## symbol stub for: _archive_read_disk_can_descend
1000092e1:	test	eax, eax
1000092e3:	je	0x1000092ed
1000092e5:	mov	rdi, r14
1000092e8:	call	0x10000a018 ## symbol stub for: _archive_read_disk_descend
1000092ed:	mov	eax, r15d
1000092f0:	add	rsp, 0x8
1000092f4:	pop	rbx
1000092f5:	pop	r14
1000092f7:	pop	r15
1000092f9:	pop	rbp
1000092fa:	ret
1000092fb:	push	rbp
1000092fc:	mov	rbp, rsp
1000092ff:	push	r15
100009301:	push	r14
100009303:	push	r13
100009305:	push	r12
100009307:	push	rbx
100009308:	sub	rsp, 0x18
10000930c:	mov	r15, rsi
10000930f:	mov	rbx, rdi
100009312:	mov	r14, qword ptr [rdi + 0xc0]
100009319:	xor	eax, eax
10000931b:	mov	qword ptr [rbp - 0x30], rax
10000931f:	mov	qword ptr [rbp - 0x38], rax
100009323:	mov	rdi, r14
100009326:	mov	rsi, rdx
100009329:	call	0x10000a02a ## symbol stub for: _archive_read_disk_open
10000932e:	test	eax, eax
100009330:	je	0x100009368
100009332:	mov	rdi, r14
100009335:	call	0x100009f7c ## symbol stub for: _archive_errno
10000933a:	mov	r15d, eax
10000933d:	mov	rdi, r14
100009340:	call	0x100009f82 ## symbol stub for: _archive_error_string
100009345:	lea	rsi, [rip + 0x2525] ## literal pool for: "%s"
10000934c:	mov	edi, r15d
10000934f:	mov	rdx, rax
100009352:	xor	eax, eax
100009354:	call	0x1000099ad
100009359:	mov	dword ptr [rbx + 0xb4], 0x1
100009363:	jmp	0x100009584
100009368:	mov	dword ptr [rbx + 0xf0], 0xffffffff
100009372:	xor	edi, edi
100009374:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
100009379:	call	0x100009f1c ## symbol stub for: _archive_entry_new
10000937e:	mov	qword ptr [rbp - 0x30], rax
100009382:	mov	rdi, r14
100009385:	mov	rsi, rax
100009388:	call	0x10000a084 ## symbol stub for: _archive_read_next_header2
10000938d:	test	eax, eax
10000938f:	je	0x1000093e2
100009391:	mov	r12d, eax
100009394:	cmp	eax, 0x1
100009397:	je	0x100009573
10000939d:	mov	rdi, r14
1000093a0:	call	0x100009f7c ## symbol stub for: _archive_errno
1000093a5:	mov	r13d, eax
1000093a8:	mov	rdi, r14
1000093ab:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000093b0:	mov	edi, r13d
1000093b3:	lea	rsi, [rip + 0x24b7] ## literal pool for: "%s"
1000093ba:	mov	rdx, rax
1000093bd:	xor	eax, eax
1000093bf:	call	0x1000099ad
1000093c4:	cmp	r12d, -0x19
1000093c8:	je	0x100009569
1000093ce:	cmp	r12d, -0x1e
1000093d2:	je	0x100009569
1000093d8:	cmp	r12d, -0x14
1000093dc:	jl	0x100009560
1000093e2:	mov	esi, dword ptr [rbx + 0x40]
1000093e5:	test	esi, esi
1000093e7:	js	0x100009418
1000093e9:	mov	rdi, qword ptr [rbp - 0x30]
1000093ed:	call	0x100009f4c ## symbol stub for: _archive_entry_set_uid
1000093f2:	cmp	qword ptr [rbx + 0x48], 0x0
1000093f7:	jne	0x100009418
1000093f9:	mov	r12, qword ptr [rbp - 0x30]
1000093fd:	mov	rdi, qword ptr [rbx + 0xc0]
100009404:	movsxd	rsi, dword ptr [rbx + 0x40]
100009408:	call	0x10000a05a ## symbol stub for: _archive_read_disk_uname
10000940d:	mov	rdi, r12
100009410:	mov	rsi, rax
100009413:	call	0x100009f52 ## symbol stub for: _archive_entry_set_uname
100009418:	mov	esi, dword ptr [rbx + 0x34]
10000941b:	test	esi, esi
10000941d:	js	0x10000944e
10000941f:	mov	rdi, qword ptr [rbp - 0x30]
100009423:	call	0x100009f3a ## symbol stub for: _archive_entry_set_gid
100009428:	cmp	qword ptr [rbx + 0x38], 0x0
10000942d:	jne	0x10000944e
10000942f:	mov	r12, qword ptr [rbp - 0x30]
100009433:	mov	rdi, qword ptr [rbx + 0xc0]
10000943a:	movsxd	rsi, dword ptr [rbx + 0x34]
10000943e:	call	0x10000a01e ## symbol stub for: _archive_read_disk_gname
100009443:	mov	rdi, r12
100009446:	mov	rsi, rax
100009449:	call	0x100009f40 ## symbol stub for: _archive_entry_set_gname
10000944e:	mov	rsi, qword ptr [rbx + 0x48]
100009452:	test	rsi, rsi
100009455:	je	0x100009460
100009457:	mov	rdi, qword ptr [rbp - 0x30]
10000945b:	call	0x100009f52 ## symbol stub for: _archive_entry_set_uname
100009460:	mov	rsi, qword ptr [rbx + 0x38]
100009464:	test	rsi, rsi
100009467:	je	0x100009472
100009469:	mov	rdi, qword ptr [rbp - 0x30]
10000946d:	call	0x100009f40 ## symbol stub for: _archive_entry_set_gname
100009472:	mov	rsi, qword ptr [rbp - 0x30]
100009476:	mov	rdi, rbx
100009479:	call	0x1000078da
10000947e:	test	eax, eax
100009480:	jne	0x100009560
100009486:	mov	eax, dword ptr [rbx + 0x20]
100009489:	cmp	eax, 0x2
10000948c:	jl	0x1000094b9
10000948e:	mov	r12, qword ptr [rip + 0x2b7b] ## literal pool symbol address: ___stderrp
100009495:	mov	rdi, qword ptr [r12]
100009499:	lea	rsi, [rip + 0x2903] ## literal pool for: "a "
1000094a0:	xor	eax, eax
1000094a2:	call	0x1000071a0
1000094a7:	mov	rsi, qword ptr [r12]
1000094ab:	mov	rdx, qword ptr [rbp - 0x30]
1000094af:	mov	rdi, rbx
1000094b2:	call	0x100007d57
1000094b7:	jmp	0x1000094e5
1000094b9:	cmp	eax, 0x1
1000094bc:	jne	0x1000094e5
1000094be:	mov	rax, qword ptr [rip + 0x2b4b] ## literal pool symbol address: ___stderrp
1000094c5:	mov	r12, qword ptr [rax]
1000094c8:	mov	rdi, qword ptr [rbp - 0x30]
1000094cc:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
1000094d1:	mov	rdi, r12
1000094d4:	lea	rsi, [rip + 0x28cb] ## literal pool for: "a %s"
1000094db:	mov	rdx, rax
1000094de:	xor	eax, eax
1000094e0:	call	0x1000071a0
1000094e5:	mov	rdi, qword ptr [rbp - 0x30]
1000094e9:	call	0x100009ee0 ## symbol stub for: _archive_entry_filetype
1000094ee:	movzx	eax, ax
1000094f1:	cmp	eax, 0x8000
1000094f6:	je	0x100009503
1000094f8:	mov	rdi, qword ptr [rbp - 0x30]
1000094fc:	xor	esi, esi
1000094fe:	call	0x100009f46 ## symbol stub for: _archive_entry_set_size
100009503:	mov	rdi, qword ptr [rbx + 0xc8]
10000950a:	lea	rsi, [rbp - 0x30]
10000950e:	lea	rdx, [rbp - 0x38]
100009512:	call	0x100009efe ## symbol stub for: _archive_entry_linkify
100009517:	mov	rdx, qword ptr [rbp - 0x30]
10000951b:	test	rdx, rdx
10000951e:	je	0x100009546
100009520:	mov	rdi, rbx
100009523:	mov	rsi, r15
100009526:	call	0x100009593
10000952b:	mov	rdi, qword ptr [rbp - 0x30]
10000952f:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
100009534:	mov	rdx, qword ptr [rbp - 0x38]
100009538:	mov	qword ptr [rbp - 0x30], rdx
10000953c:	mov	qword ptr [rbp - 0x38], 0x0
100009544:	jmp	0x10000951b
100009546:	cmp	dword ptr [rbx + 0x20], 0x0
10000954a:	je	0x100009560
10000954c:	mov	rax, qword ptr [rip + 0x2abd] ## literal pool symbol address: ___stderrp
100009553:	mov	rsi, qword ptr [rax]
100009556:	mov	edi, 0xa
10000955b:	call	0x10000a192 ## symbol stub for: _fputc
100009560:	mov	rdi, qword ptr [rbp - 0x30]
100009564:	jmp	0x100009374
100009569:	mov	dword ptr [rbx + 0xb4], 0x1
100009573:	mov	rdi, qword ptr [rbp - 0x30]
100009577:	call	0x100009ee6 ## symbol stub for: _archive_entry_free
10000957c:	mov	rdi, r14
10000957f:	call	0x100009ffa ## symbol stub for: _archive_read_close
100009584:	add	rsp, 0x18
100009588:	pop	rbx
100009589:	pop	r12
10000958b:	pop	r13
10000958d:	pop	r14
10000958f:	pop	r15
100009591:	pop	rbp
100009592:	ret
100009593:	push	rbp
100009594:	mov	rbp, rsp
100009597:	push	r15
100009599:	push	r14
10000959b:	push	r13
10000959d:	push	r12
10000959f:	push	rbx
1000095a0:	push	rax
1000095a1:	mov	r12, rdx
1000095a4:	mov	r14, rsi
1000095a7:	mov	r15, rdi
1000095aa:	mov	rdi, rsi
1000095ad:	mov	rsi, rdx
1000095b0:	call	0x10000a0fc ## symbol stub for: _archive_write_header
1000095b5:	test	eax, eax
1000095b7:	je	0x10000966d
1000095bd:	mov	ebx, eax
1000095bf:	mov	eax, dword ptr [r15 + 0x20]
1000095c3:	cmp	eax, 0x2
1000095c6:	jl	0x10000960d
1000095c8:	mov	r13, qword ptr [rip + 0x2a41] ## literal pool symbol address: ___stderrp
1000095cf:	mov	rdi, qword ptr [r13]
1000095d3:	lea	rsi, [rip + 0x27c9] ## literal pool for: "a "
1000095da:	xor	eax, eax
1000095dc:	call	0x1000071a0
1000095e1:	mov	rsi, qword ptr [r13]
1000095e5:	mov	rdi, r15
1000095e8:	mov	rdx, r12
1000095eb:	call	0x100007d57
1000095f0:	mov	rdi, r14
1000095f3:	call	0x100009f82 ## symbol stub for: _archive_error_string
1000095f8:	lea	rsi, [rip + 0x231e] ## literal pool for: ": %s"
1000095ff:	xor	edi, edi
100009601:	mov	rdx, rax
100009604:	xor	eax, eax
100009606:	call	0x1000099ad
10000960b:	jmp	0x100009663
10000960d:	cmp	eax, 0x1
100009610:	jne	0x10000963d
100009612:	mov	rdi, r12
100009615:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
10000961a:	mov	r13, rax
10000961d:	mov	rdi, r14
100009620:	call	0x100009f82 ## symbol stub for: _archive_error_string
100009625:	lea	rsi, [rip + 0x2370] ## literal pool for: "%s: %s"
10000962c:	xor	edi, edi
10000962e:	mov	rdx, r13
100009631:	mov	rcx, rax
100009634:	xor	eax, eax
100009636:	call	0x1000099ad
10000963b:	jmp	0x100009663
10000963d:	mov	rax, qword ptr [rip + 0x29cc] ## literal pool symbol address: ___stderrp
100009644:	mov	r13, qword ptr [rax]
100009647:	mov	rdi, r14
10000964a:	call	0x100009f82 ## symbol stub for: _archive_error_string
10000964f:	lea	rsi, [rip + 0x22c7] ## literal pool for: ": %s"
100009656:	mov	rdi, r13
100009659:	mov	rdx, rax
10000965c:	xor	eax, eax
10000965e:	call	0x10000a18c ## symbol stub for: _fprintf
100009663:	cmp	ebx, -0x1e
100009666:	je	0x1000096a2
100009668:	cmp	ebx, -0x14
10000966b:	jl	0x100009693
10000966d:	mov	rdi, r12
100009670:	call	0x100009f58 ## symbol stub for: _archive_entry_size
100009675:	test	rax, rax
100009678:	jle	0x100009693
10000967a:	mov	rdx, qword ptr [r15 + 0xc0]
100009681:	mov	rdi, r15
100009684:	mov	rsi, r14
100009687:	mov	rcx, r12
10000968a:	call	0x1000097e1
10000968f:	test	eax, eax
100009691:	jne	0x1000096a2
100009693:	add	rsp, 0x8
100009697:	pop	rbx
100009698:	pop	r12
10000969a:	pop	r13
10000969c:	pop	r14
10000969e:	pop	r15
1000096a0:	pop	rbp
1000096a1:	ret
1000096a2:	mov	edi, 0x1
1000096a7:	call	0x10000a168 ## symbol stub for: _exit
1000096ac:	push	rbp
1000096ad:	mov	rbp, rsp
1000096b0:	push	r15
1000096b2:	push	r14
1000096b4:	push	r13
1000096b6:	push	r12
1000096b8:	push	rbx
1000096b9:	sub	rsp, 0x18
1000096bd:	mov	qword ptr [rbp - 0x30], rcx
1000096c1:	mov	qword ptr [rbp - 0x38], rdx
1000096c5:	mov	r14, rsi
1000096c8:	cmp	dword ptr [rdi + 0x20], 0x0
1000096cc:	je	0x1000096e2
1000096ce:	mov	rax, qword ptr [rip + 0x293b] ## literal pool symbol address: ___stderrp
1000096d5:	mov	rsi, qword ptr [rax]
1000096d8:	mov	edi, 0xa
1000096dd:	call	0x10000a192 ## symbol stub for: _fputc
1000096e2:	mov	rdi, r14
1000096e5:	mov	esi, 0xffffffff
1000096ea:	call	0x100009f8e ## symbol stub for: _archive_filter_bytes
1000096ef:	mov	r13, rax
1000096f2:	xor	r12d, r12d
1000096f5:	mov	rdi, r14
1000096f8:	xor	esi, esi
1000096fa:	call	0x100009f8e ## symbol stub for: _archive_filter_bytes
1000096ff:	mov	rbx, rax
100009702:	mov	rax, qword ptr [rip + 0x2907] ## literal pool symbol address: ___stderrp
100009709:	mov	r15, qword ptr [rax]
10000970c:	mov	rdi, r14
10000970f:	call	0x100009f88 ## symbol stub for: _archive_file_count
100009714:	mov	r14d, eax
100009717:	mov	rdi, rbx
10000971a:	call	0x100007c70
10000971f:	lea	rsi, [rip + 0x2685] ## literal pool for: "In: %d files, %s bytes;"
100009726:	mov	rdi, r15
100009729:	mov	edx, r14d
10000972c:	mov	rcx, rax
10000972f:	xor	eax, eax
100009731:	call	0x10000a18c ## symbol stub for: _fprintf
100009736:	mov	rax, rbx
100009739:	sub	rax, r13
10000973c:	jbe	0x10000974a
10000973e:	imul	rax, rax, 0x64
100009742:	xor	edx, edx
100009744:	div	rbx
100009747:	mov	r12, rax
10000974a:	mov	rax, qword ptr [rip + 0x28bf] ## literal pool symbol address: ___stderrp
100009751:	mov	rbx, qword ptr [rax]
100009754:	mov	r15, rax
100009757:	mov	rdi, r13
10000975a:	call	0x100007c70
10000975f:	lea	rsi, [rip + 0x265d] ## literal pool for: " Out: %s bytes, compression %d%%\n"
100009766:	mov	rdi, rbx
100009769:	mov	rdx, rax
10000976c:	mov	ecx, r12d
10000976f:	xor	eax, eax
100009771:	call	0x10000a18c ## symbol stub for: _fprintf
100009776:	mov	r14, qword ptr [r15]
100009779:	mov	r12, r15
10000977c:	mov	rbx, qword ptr [rbp - 0x38]
100009780:	mov	rdi, rbx
100009783:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100009788:	mov	r15, rax
10000978b:	mov	rdi, qword ptr [rbp - 0x30]
10000978f:	call	0x100007c70
100009794:	lea	rsi, [rip + 0x264a] ## literal pool for: "Current: %s (%s"
10000979b:	mov	rdi, r14
10000979e:	mov	rdx, r15
1000097a1:	mov	rcx, rax
1000097a4:	xor	eax, eax
1000097a6:	call	0x1000071a0
1000097ab:	mov	r14, qword ptr [r12]
1000097af:	mov	rdi, rbx
1000097b2:	call	0x100009f58 ## symbol stub for: _archive_entry_size
1000097b7:	mov	rdi, rax
1000097ba:	call	0x100007c70
1000097bf:	lea	rsi, [rip + 0x262f] ## literal pool for: "/%s bytes)\n"
1000097c6:	mov	rdi, r14
1000097c9:	mov	rdx, rax
1000097cc:	xor	eax, eax
1000097ce:	add	rsp, 0x18
1000097d2:	pop	rbx
1000097d3:	pop	r12
1000097d5:	pop	r13
1000097d7:	pop	r14
1000097d9:	pop	r15
1000097db:	pop	rbp
1000097dc:	jmp	0x10000a18c ## symbol stub for: _fprintf
1000097e1:	push	rbp
1000097e2:	mov	rbp, rsp
1000097e5:	push	r15
1000097e7:	push	r14
1000097e9:	push	r13
1000097eb:	push	r12
1000097ed:	push	rbx
1000097ee:	sub	rsp, 0x38
1000097f2:	mov	r15, rcx
1000097f5:	mov	rbx, rdx
1000097f8:	mov	r12, rsi
1000097fb:	mov	r13, rdi
1000097fe:	lea	rsi, [rbp - 0x48]
100009802:	lea	rdx, [rbp - 0x38]
100009806:	lea	rcx, [rbp - 0x50]
10000980a:	mov	rdi, rbx
10000980d:	call	0x10000a000 ## symbol stub for: _archive_read_data_block
100009812:	test	eax, eax
100009814:	je	0x100009844
100009816:	xor	r14d, r14d
100009819:	cmp	eax, -0x15
10000981c:	jg	0x100009958
100009822:	mov	rdi, r12
100009825:	call	0x100009f7c ## symbol stub for: _archive_errno
10000982a:	mov	r14d, eax
10000982d:	mov	rdi, r12
100009830:	call	0x100009f82 ## symbol stub for: _archive_error_string
100009835:	lea	rsi, [rip + 0x2035] ## literal pool for: "%s"
10000983c:	mov	edi, r14d
10000983f:	jmp	0x100009922
100009844:	mov	qword ptr [rbp - 0x58], rbx
100009848:	xor	eax, eax
10000984a:	mov	qword ptr [rbp - 0x30], rax
10000984e:	xor	r14d, r14d
100009851:	mov	rbx, r13
100009854:	mov	qword ptr [rbp - 0x40], r15
100009858:	call	0x1000047b8
10000985d:	test	eax, eax
10000985f:	je	0x100009872
100009861:	mov	rdi, rbx
100009864:	mov	rsi, r12
100009867:	mov	rdx, r15
10000986a:	mov	rcx, r14
10000986d:	call	0x1000096ac
100009872:	mov	r13, qword ptr [rbp - 0x50]
100009876:	sub	r13, r14
100009879:	jle	0x1000098d1
10000987b:	cmp	qword ptr [rbp - 0x30], 0x0
100009880:	jne	0x100009899
100009882:	mov	rdi, qword ptr [rbx + 0xe0]
100009889:	mov	rsi, qword ptr [rbx + 0xe8]
100009890:	mov	qword ptr [rbp - 0x30], rdi
100009894:	call	0x100009e80 ## symbol stub for: ___bzero
100009899:	test	r13, r13
10000989c:	jle	0x1000098d1
10000989e:	mov	r15, qword ptr [rbx + 0xe8]
1000098a5:	cmp	r13, r15
1000098a8:	cmovle	r15, r13
1000098ac:	mov	rdi, r12
1000098af:	mov	rsi, qword ptr [rbp - 0x30]
1000098b3:	mov	rdx, r15
1000098b6:	call	0x10000a0de ## symbol stub for: _archive_write_data
1000098bb:	test	rax, rax
1000098be:	js	0x100009911
1000098c0:	cmp	rax, r15
1000098c3:	jb	0x100009934
1000098c5:	add	r14, rax
1000098c8:	sub	r13, rax
1000098cb:	jg	0x10000989e
1000098cd:	mov	r15, qword ptr [rbp - 0x40]
1000098d1:	mov	rsi, qword ptr [rbp - 0x48]
1000098d5:	mov	rdx, qword ptr [rbp - 0x38]
1000098d9:	mov	rdi, r12
1000098dc:	call	0x10000a0de ## symbol stub for: _archive_write_data
1000098e1:	test	rax, rax
1000098e4:	js	0x100009911
1000098e6:	cmp	rax, qword ptr [rbp - 0x38]
1000098ea:	jb	0x10000993a
1000098ec:	add	r14, rax
1000098ef:	mov	rdi, qword ptr [rbp - 0x58]
1000098f3:	lea	rsi, [rbp - 0x48]
1000098f7:	lea	rdx, [rbp - 0x38]
1000098fb:	lea	rcx, [rbp - 0x50]
1000098ff:	call	0x10000a000 ## symbol stub for: _archive_read_data_block
100009904:	test	eax, eax
100009906:	je	0x100009858
10000990c:	jmp	0x100009816
100009911:	mov	rdi, r12
100009914:	call	0x100009f82 ## symbol stub for: _archive_error_string
100009919:	lea	rsi, [rip + 0x1f51] ## literal pool for: "%s"
100009920:	xor	edi, edi
100009922:	mov	rdx, rax
100009925:	xor	eax, eax
100009927:	call	0x1000099ad
10000992c:	mov	r14d, 0xffffffff
100009932:	jmp	0x100009958
100009934:	mov	rdi, qword ptr [rbp - 0x40]
100009938:	jmp	0x10000993d
10000993a:	mov	rdi, r15
10000993d:	call	0x100009f28 ## symbol stub for: _archive_entry_pathname
100009942:	lea	rsi, [rip + 0x24b8] ## literal pool for: "%s: Truncated write; file may have grown while being archived."
100009949:	xor	r14d, r14d
10000994c:	xor	edi, edi
10000994e:	mov	rdx, rax
100009951:	xor	eax, eax
100009953:	call	0x1000099ad
100009958:	mov	eax, r14d
10000995b:	add	rsp, 0x38
10000995f:	pop	rbx
100009960:	pop	r12
100009962:	pop	r13
100009964:	pop	r14
100009966:	pop	r15
100009968:	pop	rbp
100009969:	ret
10000996a:	push	rbp
10000996b:	mov	rbp, rsp
10000996e:	mov	rax, qword ptr [rip + 0x6c3b]
100009975:	pop	rbp
100009976:	ret
100009977:	push	rbp
100009978:	mov	rbp, rsp
10000997b:	push	rbx
10000997c:	push	rax
10000997d:	mov	rbx, rsi
100009980:	test	rdi, rdi
100009983:	cmovne	rbx, rdi
100009987:	mov	rdi, rbx
10000998a:	mov	esi, 0x2f
10000998f:	call	0x10000a276 ## symbol stub for: _strrchr
100009994:	lea	rcx, [rax + 0x1]
100009998:	test	rax, rax
10000999b:	cmove	rcx, rbx
10000999f:	mov	qword ptr [rip + 0x6c0a], rcx
1000099a6:	add	rsp, 0x8
1000099aa:	pop	rbx
1000099ab:	pop	rbp
1000099ac:	ret
1000099ad:	push	rbp
1000099ae:	mov	rbp, rsp
1000099b1:	sub	rsp, 0xd0
1000099b8:	test	al, al
1000099ba:	je	0x1000099e2
1000099bc:	movaps	xmmword ptr [rbp - 0xa0], xmm0
1000099c3:	movaps	xmmword ptr [rbp - 0x90], xmm1
1000099ca:	movaps	xmmword ptr [rbp - 0x80], xmm2
1000099ce:	movaps	xmmword ptr [rbp - 0x70], xmm3
1000099d2:	movaps	xmmword ptr [rbp - 0x60], xmm4
1000099d6:	movaps	xmmword ptr [rbp - 0x50], xmm5
1000099da:	movaps	xmmword ptr [rbp - 0x40], xmm6
1000099de:	movaps	xmmword ptr [rbp - 0x30], xmm7
1000099e2:	lea	rax, [rbp - 0xd0]
1000099e9:	mov	qword ptr [rax + 0x10], rdx
1000099ed:	mov	qword ptr [rax + 0x18], rcx
1000099f1:	mov	qword ptr [rax + 0x20], r8
1000099f5:	mov	qword ptr [rax + 0x28], r9
1000099f9:	mov	rcx, qword ptr [rip + 0x2608] ## literal pool symbol address: ___stack_chk_guard
100009a00:	mov	rcx, qword ptr [rcx]
100009a03:	mov	qword ptr [rbp - 0x8], rcx
100009a07:	lea	rdx, [rbp - 0x20]
100009a0b:	mov	qword ptr [rdx + 0x10], rax
100009a0f:	lea	rax, [rbp + 0x10]
100009a13:	mov	qword ptr [rdx + 0x8], rax
100009a17:	movabs	rax, 0x3000000010
100009a21:	mov	qword ptr [rdx], rax
100009a24:	call	0x100009a47
100009a29:	mov	rax, qword ptr [rip + 0x25d8] ## literal pool symbol address: ___stack_chk_guard
100009a30:	mov	rax, qword ptr [rax]
100009a33:	cmp	rax, qword ptr [rbp - 0x8]
100009a37:	jne	0x100009a42
100009a39:	add	rsp, 0xd0
100009a40:	pop	rbp
100009a41:	ret
100009a42:	call	0x100009e98 ## symbol stub for: ___stack_chk_fail
100009a47:	push	rbp
100009a48:	mov	rbp, rsp
100009a4b:	push	r15
100009a4d:	push	r14
100009a4f:	push	r12
100009a51:	push	rbx
100009a52:	mov	r14, rdx
100009a55:	mov	r15, rsi
100009a58:	mov	ebx, edi
100009a5a:	mov	r12, qword ptr [rip + 0x25af] ## literal pool symbol address: ___stderrp
100009a61:	mov	rdi, qword ptr [r12]
100009a65:	mov	rdx, qword ptr [rip + 0x6b44]
100009a6c:	lea	rsi, [rip + 0x240f] ## literal pool for: "%s: "
100009a73:	xor	eax, eax
100009a75:	call	0x10000a18c ## symbol stub for: _fprintf
100009a7a:	mov	rdi, qword ptr [r12]
100009a7e:	mov	rsi, r15
100009a81:	mov	rdx, r14
100009a84:	call	0x10000a288 ## symbol stub for: _vfprintf
100009a89:	test	ebx, ebx
100009a8b:	je	0x100009aac
100009a8d:	mov	r14, qword ptr [r12]
100009a91:	mov	edi, ebx
100009a93:	call	0x10000a25e ## symbol stub for: _strerror
100009a98:	lea	rsi, [rip + 0x1e7e] ## literal pool for: ": %s"
100009a9f:	mov	rdi, r14
100009aa2:	mov	rdx, rax
100009aa5:	xor	eax, eax
100009aa7:	call	0x10000a18c ## symbol stub for: _fprintf
100009aac:	mov	rsi, qword ptr [r12]
100009ab0:	mov	edi, 0xa
100009ab5:	pop	rbx
100009ab6:	pop	r12
100009ab8:	pop	r14
100009aba:	pop	r15
100009abc:	pop	rbp
100009abd:	jmp	0x10000a192 ## symbol stub for: _fputc
100009ac2:	push	rbp
100009ac3:	mov	rbp, rsp
100009ac6:	push	rbx
100009ac7:	sub	rsp, 0xd8
100009ace:	mov	ebx, edi
100009ad0:	test	al, al
100009ad2:	je	0x100009af7
100009ad4:	movaps	xmmword ptr [rbp - 0x90], xmm0
100009adb:	movaps	xmmword ptr [rbp - 0x80], xmm1
100009adf:	movaps	xmmword ptr [rbp - 0x70], xmm2
100009ae3:	movaps	xmmword ptr [rbp - 0x60], xmm3
100009ae7:	movaps	xmmword ptr [rbp - 0x50], xmm4
100009aeb:	movaps	xmmword ptr [rbp - 0x40], xmm5
100009aef:	movaps	xmmword ptr [rbp - 0x30], xmm6
100009af3:	movaps	xmmword ptr [rbp - 0x20], xmm7
100009af7:	lea	rdi, [rbp - 0xc0]
100009afe:	mov	qword ptr [rdi + 0x18], rcx
100009b02:	mov	qword ptr [rdi + 0x20], r8
100009b06:	mov	qword ptr [rdi + 0x28], r9
100009b0a:	lea	rax, [rbp - 0xe0]
100009b11:	mov	qword ptr [rax + 0x10], rdi
100009b15:	lea	rcx, [rbp + 0x10]
100009b19:	mov	qword ptr [rax + 0x8], rcx
100009b1d:	movabs	rcx, 0x3000000018
100009b27:	mov	qword ptr [rax], rcx
100009b2a:	mov	edi, esi
100009b2c:	mov	rsi, rdx
100009b2f:	mov	rdx, rax
100009b32:	call	0x100009a47
100009b37:	mov	edi, ebx
100009b39:	call	0x10000a168 ## symbol stub for: _exit
100009b3e:	push	rbp
100009b3f:	mov	rbp, rsp
100009b42:	push	rbx
100009b43:	push	rax
100009b44:	xor	ecx, ecx
100009b46:	call	0x10000a204 ## symbol stub for: _readpassphrase
100009b4b:	mov	rbx, rax
100009b4e:	test	rax, rax
100009b51:	jne	0x100009b5d
100009b53:	call	0x100009e86 ## symbol stub for: ___error
100009b58:	cmp	dword ptr [rax], 0x4
100009b5b:	jne	0x100009b67
100009b5d:	mov	rax, rbx
100009b60:	add	rsp, 0x8
100009b64:	pop	rbx
100009b65:	pop	rbp
100009b66:	ret
100009b67:	call	0x100009e86 ## symbol stub for: ___error
100009b6c:	mov	esi, dword ptr [rax]
100009b6e:	lea	rdx, [rip + 0x2312] ## literal pool for: "Couldn't read passphrase"
100009b75:	mov	edi, 0x1
100009b7a:	xor	eax, eax
100009b7c:	call	0x100009ac2
100009b81:	push	rbp
100009b82:	mov	rbp, rsp
100009b85:	push	r15
100009b87:	push	r14
100009b89:	push	rbx
100009b8a:	push	rax
100009b8b:	mov	r15d, esi
100009b8e:	mov	r14, rdi
100009b91:	mov	edi, 0x1
100009b96:	mov	esi, 0x48
100009b9b:	call	0x10000a14a ## symbol stub for: _calloc
100009ba0:	test	rax, rax
100009ba3:	je	0x100009c16
100009ba5:	mov	rbx, rax
100009ba8:	mov	dword ptr [rax + 0x40], r15d
100009bac:	mov	rdi, r14
100009baf:	call	0x10000a258 ## symbol stub for: _strdup
100009bb4:	mov	qword ptr [rbx + 0x30], rax
100009bb8:	lea	rsi, [rip + 0x1248] ## literal pool for: "-"
100009bbf:	mov	rdi, r14
100009bc2:	call	0x10000a246 ## symbol stub for: _strcmp
100009bc7:	test	eax, eax
100009bc9:	je	0x100009bdc
100009bcb:	lea	rsi, [rip + 0x22dc] ## literal pool for: "r"
100009bd2:	mov	rdi, r14
100009bd5:	call	0x10000a186 ## symbol stub for: _fopen
100009bda:	jmp	0x100009be6
100009bdc:	mov	rax, qword ptr [rip + 0x2435] ## literal pool symbol address: ___stdinp
100009be3:	mov	rax, qword ptr [rax]
100009be6:	mov	qword ptr [rbx], rax
100009be9:	test	rax, rax
100009bec:	je	0x100009c29
100009bee:	mov	qword ptr [rbx + 0x38], 0x2000
100009bf6:	xor	eax, eax
100009bf8:	mov	qword ptr [rbx + 0x8], rax
100009bfc:	mov	qword ptr [rbx + 0x10], rax
100009c00:	mov	qword ptr [rbx + 0x18], rax
100009c04:	mov	qword ptr [rbx + 0x20], rax
100009c08:	mov	rax, rbx
100009c0b:	add	rsp, 0x8
100009c0f:	pop	rbx
100009c10:	pop	r14
100009c12:	pop	r15
100009c14:	pop	rbp
100009c15:	ret
100009c16:	lea	rdx, [rip + 0x2283] ## literal pool for: "Can't open %s"
100009c1d:	mov	edi, 0x1
100009c22:	mov	esi, 0xc
100009c27:	jmp	0x100009c3c
100009c29:	call	0x100009e86 ## symbol stub for: ___error
100009c2e:	mov	esi, dword ptr [rax]
100009c30:	lea	rdx, [rip + 0x2279] ## literal pool for: "Couldn't open %s"
100009c37:	mov	edi, 0x1
100009c3c:	mov	rcx, r14
100009c3f:	xor	eax, eax
100009c41:	call	0x100009ac2
100009c46:	push	rbp
100009c47:	mov	rbp, rsp
100009c4a:	push	r15
100009c4c:	push	r14
100009c4e:	push	r13
100009c50:	push	r12
100009c52:	push	rbx
100009c53:	push	rax
100009c54:	mov	rbx, rdi
100009c57:	lea	r12, [rip + 0xee7] ## literal pool for: ""
100009c5e:	xor	r13d, r13d
100009c61:	mov	rdx, qword ptr [rbx + 0x10]
100009c65:	mov	r15, qword ptr [rbx + 0x20]
100009c69:	cmp	r15, rdx
100009c6c:	jae	0x100009cb6
100009c6e:	mov	r14, qword ptr [rbx + 0x18]
100009c72:	lea	rdi, [r15 + 0x1]
100009c76:	mov	qword ptr [rbx + 0x20], rdi
100009c7a:	mov	qword ptr [rbx + 0x18], rdi
100009c7e:	cmp	dword ptr [rbx + 0x40], 0x0
100009c82:	mov	rsi, r12
100009c85:	lea	rax, [rip + 0x2257] ## literal pool for: "\015\n"
100009c8c:	cmove	rsi, rax
100009c90:	call	0x10000a252 ## symbol stub for: _strcspn
100009c95:	lea	rax, [r15 + rax + 0x1]
100009c9a:	mov	qword ptr [rbx + 0x20], rax
100009c9e:	mov	byte ptr [rax], 0x0
100009ca1:	cmp	dword ptr [rbx + 0x40], 0x0
100009ca5:	jne	0x100009de1
100009cab:	cmp	byte ptr [r14], 0x0
100009caf:	je	0x100009c61
100009cb1:	jmp	0x100009de1
100009cb6:	cmp	qword ptr [rbx], 0x0
100009cba:	mov	r14, qword ptr [rbx + 0x18]
100009cbe:	je	0x100009dd3
100009cc4:	mov	rdi, qword ptr [rbx + 0x8]
100009cc8:	cmp	r14, rdi
100009ccb:	jbe	0x100009cf4
100009ccd:	sub	rdx, r14
100009cd0:	mov	rsi, r14
100009cd3:	call	0x10000a1e0 ## symbol stub for: _memmove
100009cd8:	mov	rax, qword ptr [rbx + 0x8]
100009cdc:	mov	rcx, rax
100009cdf:	sub	rcx, qword ptr [rbx + 0x18]
100009ce3:	mov	rdi, qword ptr [rbx + 0x10]
100009ce7:	add	rdi, rcx
100009cea:	mov	qword ptr [rbx + 0x10], rdi
100009cee:	add	qword ptr [rbx + 0x20], rcx
100009cf2:	jmp	0x100009d3f
100009cf4:	mov	rax, qword ptr [rbx + 0x38]
100009cf8:	lea	rsi, [rax + rax]
100009cfc:	cmp	rsi, rax
100009cff:	jbe	0x100009df3
100009d05:	mov	qword ptr [rbx + 0x38], rsi
100009d09:	or	rsi, 0x1
100009d0d:	call	0x10000a20a ## symbol stub for: _realloc
100009d12:	test	rax, rax
100009d15:	je	0x100009df3
100009d1b:	mov	rcx, qword ptr [rbx + 0x8]
100009d1f:	mov	rdi, qword ptr [rbx + 0x10]
100009d23:	sub	rdi, rcx
100009d26:	add	rdi, rax
100009d29:	mov	qword ptr [rbx + 0x10], rdi
100009d2d:	mov	rdx, qword ptr [rbx + 0x20]
100009d31:	sub	rdx, rcx
100009d34:	add	rdx, rax
100009d37:	mov	qword ptr [rbx + 0x20], rdx
100009d3b:	mov	qword ptr [rbx + 0x8], rax
100009d3f:	mov	qword ptr [rbx + 0x18], rax
100009d43:	add	rax, qword ptr [rbx + 0x38]
100009d47:	sub	rax, rdi
100009d4a:	mov	rcx, qword ptr [rbx]
100009d4d:	mov	esi, 0x1
100009d52:	mov	rdx, rax
100009d55:	call	0x10000a19e ## symbol stub for: _fread
100009d5a:	mov	rcx, qword ptr [rbx + 0x10]
100009d5e:	lea	rdx, [rcx + rax]
100009d62:	mov	qword ptr [rbx + 0x10], rdx
100009d66:	mov	byte ptr [rcx + rax], r13b
100009d6a:	mov	r14, qword ptr [rbx + 0x20]
100009d6e:	cmp	dword ptr [rbx + 0x40], 0x0
100009d72:	mov	rsi, r12
100009d75:	lea	rax, [rip + 0x2167] ## literal pool for: "\015\n"
100009d7c:	cmove	rsi, rax
100009d80:	mov	rdi, r14
100009d83:	call	0x10000a252 ## symbol stub for: _strcspn
100009d88:	lea	rcx, [r14 + rax]
100009d8c:	mov	qword ptr [rbx + 0x20], rcx
100009d90:	mov	byte ptr [r14 + rax], r13b
100009d94:	mov	r14, qword ptr [rbx]
100009d97:	mov	rdi, r14
100009d9a:	call	0x10000a17a ## symbol stub for: _ferror
100009d9f:	test	eax, eax
100009da1:	jne	0x100009e0a
100009da3:	mov	rdi, r14
100009da6:	call	0x10000a174 ## symbol stub for: _feof
100009dab:	test	eax, eax
100009dad:	je	0x100009c61
100009db3:	mov	rdi, qword ptr [rbx]
100009db6:	mov	rax, qword ptr [rip + 0x225b] ## literal pool symbol address: ___stdinp
100009dbd:	cmp	rdi, qword ptr [rax]
100009dc0:	je	0x100009dc7
100009dc2:	call	0x10000a16e ## symbol stub for: _fclose
100009dc7:	mov	qword ptr [rbx], 0x0
100009dce:	jmp	0x100009c61
100009dd3:	cmp	r14, rdx
100009dd6:	je	0x100009dde
100009dd8:	mov	qword ptr [rbx + 0x18], rdx
100009ddc:	jmp	0x100009de1
100009dde:	xor	r14d, r14d
100009de1:	mov	rax, r14
100009de4:	add	rsp, 0x8
100009de8:	pop	rbx
100009de9:	pop	r12
100009deb:	pop	r13
100009ded:	pop	r14
100009def:	pop	r15
100009df1:	pop	rbp
100009df2:	ret
100009df3:	mov	rcx, qword ptr [rbx + 0x30]
100009df7:	lea	rdx, [rip + 0x20c3] ## literal pool for: "Line too long in %s"
100009dfe:	mov	edi, 0x1
100009e03:	mov	esi, 0xc
100009e08:	jmp	0x100009e21
100009e0a:	call	0x100009e86 ## symbol stub for: ___error
100009e0f:	mov	esi, dword ptr [rax]
100009e11:	mov	rcx, qword ptr [rbx + 0x30]
100009e15:	lea	rdx, [rip + 0x20b9] ## literal pool for: "Can't read %s"
100009e1c:	mov	edi, 0x1
100009e21:	xor	eax, eax
100009e23:	call	0x100009ac2
100009e28:	push	rbp
100009e29:	mov	rbp, rsp
100009e2c:	push	rbx
100009e2d:	push	rax
100009e2e:	mov	rbx, rdi
100009e31:	mov	rdi, qword ptr [rdi + 0x8]
100009e35:	call	0x10000a1a4 ## symbol stub for: _free
100009e3a:	mov	rdi, qword ptr [rbx + 0x30]
100009e3e:	call	0x10000a1a4 ## symbol stub for: _free
100009e43:	mov	rdi, rbx
100009e46:	add	rsp, 0x8
100009e4a:	pop	rbx
100009e4b:	pop	rbp
100009e4c:	jmp	0x10000a1a4 ## symbol stub for: _free
100009e51:	push	rbp
100009e52:	mov	rbp, rsp
100009e55:	push	rbx
100009e56:	push	rax
100009e57:	mov	rbx, rdi
100009e5a:	push	0x50
100009e5c:	pop	rcx
100009e5d:	mov	edi, esi
100009e5f:	mov	rsi, rdx
100009e62:	mov	rdx, rbx
100009e65:	call	0x10000a216 ## symbol stub for: _regerror
100009e6a:	lea	rdx, [rip + 0x1b66] ## literal pool for: "Invalid regular expression: %s"
100009e71:	push	0x1
100009e73:	pop	rdi
100009e74:	xor	esi, esi
100009e76:	mov	rcx, rbx
100009e79:	xor	eax, eax
100009e7b:	call	0x100009ac2
