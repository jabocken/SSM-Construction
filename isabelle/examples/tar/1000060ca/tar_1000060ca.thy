theory tar_1000060ca
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000060ca, blockId == 0 ##
#####################################
*)

htriple "ht_1000060ca"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 8),8) SEP (RDI_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP (0x10000c020,8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060ca: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060cb"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060cb: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060ce"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 16),8) SEP (RDI_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP (0x10000c020,8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060ce: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060d0"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 24),8) SEP (RDI_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP (0x10000c020,8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060d0: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060d2"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 32),8) SEP (RDI_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP (0x10000c020,8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060d2: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060d4"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 40),8) SEP (RDI_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP (0x10000c020,8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060d4: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060d6"
 Separations "((RSP_0 -64 48),8) SEP (bot(fun____error),4); ((RSP_0 -64 48),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 48),8) SEP (RDI_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 48),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c010,8); ((RSP_0 -64 48),8) SEP (0x10000c020,8); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 48),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060d6: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060d7: SUB RSP, 56 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060db"
 Separations "((RSP_0 -64 80),8) SEP (bot(fun____error),4); ((RSP_0 -64 80),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 80),8) SEP (RDI_0,8); ((RSP_0 -64 80),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 80),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 80),8) SEP (0x10000c010,8); ((RSP_0 -64 80),8) SEP (0x10000c020,8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060db: MOV QWORD PTR [RBP - 72], RDX 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060df"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060df: MOV R12D, ESI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060e2: MOV R13, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060e5"
 Separations "((RDI_0 +64 144),8) SEP (bot(fun____error),4); ((RDI_0 +64 144),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (0x10000c010,8); ((RDI_0 +64 144),8) SEP (0x10000c020,8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060e5: MOV RAX, QWORD PTR [RDI + 144] 7"
 Post  "RAX = [(RDI_0 +64 144),8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060ec"
 Separations "([(RDI_0 +64 144),8]_0,8) SEP (bot(fun____error),4); ([(RDI_0 +64 144),8]_0,8) SEP (bot(fun__malloc),8); ([(RDI_0 +64 144),8]_0,8) SEP (RDI_0,8); ([(RDI_0 +64 144),8]_0,8) SEP (RSP_0,8); ([(RDI_0 +64 144),8]_0,8) SEP ([0x10000c010,8]_0,8); ([(RDI_0 +64 144),8]_0,8) SEP ([0x10000c020,8]_0,8); ([(RDI_0 +64 144),8]_0,8) SEP (0x10000c010,8); ([(RDI_0 +64 144),8]_0,8) SEP (0x10000c020,8); ([(RDI_0 +64 144),8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([(RDI_0 +64 144),8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([(RDI_0 +64 144),8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 16),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 24),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 32),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 36),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 52),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 56),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 64),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 72),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 80),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 96),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 112),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 144),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 180),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RDI_0 +64 248),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 8),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 16),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 24),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 32),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 40),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 48),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 56),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 64),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 68),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 72),4); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 80),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 88),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 96),8); ([(RDI_0 +64 144),8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 144),8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060ec: MOV RSI, QWORD PTR [RAX] 3"
 Post  "RAX = [(RDI_0 +64 144),8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = [[(RDI_0 +64 144),8]_0,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 180),4] = [(RDI_0 +64 180),4]_0 ; [(RDI_0 +64 248),8] = [(RDI_0 +64 248),8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 1 ##
#####################################
*)

htriple "ht_1000060f4"
 Separations "((RDI_0 +64 248),8) SEP (bot(fun____error),4); ((RDI_0 +64 248),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 248),8) SEP (RSP_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 248),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 248),8) SEP (0x10000c010,8); ((RDI_0 +64 248),8) SEP (0x10000c020,8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060f4: MOV RDI, QWORD PTR [R13 + 248] 7"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060fb"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060fb: ExternalCall fun__archive_match_include_pattern 5"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_match_include_pattern {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006100"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006100: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006102"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006102: JNE 4294993810 6"
 Post  "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 2 ##
#####################################
*)

htriple "ht_100006120"
 Separations "((RDI_0 +64 16),8) SEP (RSP_0,8); ((RDI_0 +64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 16),8) SEP (0x10000c010,8); ((RDI_0 +64 16),8) SEP (0x10000c020,8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 16),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006120: MOV RSI, QWORD PTR [R13 + 16] 4"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006124"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006124: TEST RSI, RSI 3"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006127"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006127: JE 4294992198 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 3 ##
#####################################
*)

htriple "ht_100006108"
 Separations "((RDI_0 +64 144),8) SEP (bot(fun____error),4); ((RDI_0 +64 144),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (0x10000c010,8); ((RDI_0 +64 144),8) SEP (0x10000c020,8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006108: MOV RAX, QWORD PTR [R13 + 144] 7"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000610f"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000610f: LEA RCX, [RAX + 8] 4"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006113"
 Separations "((RDI_0 +64 144),8) SEP (bot(fun____error),4); ((RDI_0 +64 144),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 144),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (0x10000c010,8); ((RDI_0 +64 144),8) SEP (0x10000c020,8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 144),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006113: MOV QWORD PTR [R13 + 144], RCX 7"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000611a"
 Separations ""
 Assertions  "((RAX +64 8),8) SEP (RSP_0,8); ((RAX +64 8),8) SEP ((RSP_0 -64 8),8); ((RAX +64 8),8) SEP ((RSP_0 -64 16),8); ((RAX +64 8),8) SEP ((RSP_0 -64 24),8); ((RAX +64 8),8) SEP ((RSP_0 -64 32),8); ((RAX +64 8),8) SEP ((RSP_0 -64 40),8); ((RAX +64 8),8) SEP ((RSP_0 -64 48),8); ((RAX +64 8),8) SEP ((RSP_0 -64 64),8); ((RAX +64 8),8) SEP ((RSP_0 -64 68),4); ((RAX +64 8),8) SEP ((RSP_0 -64 72),4); ((RAX +64 8),8) SEP ((RSP_0 -64 80),8); ((RAX +64 8),8) SEP ((RSP_0 -64 88),8); ((RAX +64 8),8) SEP ((RSP_0 -64 96),8); ((RAX +64 8),8) SEP ((RSP_0 -64 104),8)"
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000611a: MOV RSI, QWORD PTR [RAX + 8] 4"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000611e"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000611e: JMP 4294992111 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 4 ##
#####################################
*)

htriple "ht_100006792"
 Separations "((RDI_0 +64 248),8) SEP (bot(fun____error),4); ((RDI_0 +64 248),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 248),8) SEP (RSP_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 248),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 248),8) SEP (0x10000c010,8); ((RDI_0 +64 248),8) SEP (0x10000c020,8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006792: MOV RDI, QWORD PTR [R13 + 248] 7"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006799"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006799: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000679e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000679e: LEA RDX, [RIP + 20637] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = RBX_0 ; RDX = 0x10000b842 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 5 ##
#####################################
*)

htriple "ht_1000060ef"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060ef: TEST RSI, RSI 3"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000060f2"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000060f2: JE 4294992160 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 6 ##
#####################################
*)

htriple "ht_100006129"
 Separations "((RDI_0 +64 248),8) SEP (bot(fun____error),4); ((RDI_0 +64 248),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 248),8) SEP (RSP_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 248),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 248),8) SEP (0x10000c010,8); ((RDI_0 +64 248),8) SEP (0x10000c020,8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006129: MOV RDI, QWORD PTR [R13 + 248] 7"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006130"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006130: MOV EDX, 256 5"
 Post  "RBX = RBX_0 ; RDX = 256 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006135"
 Separations "((RDI_0 +64 36),4) SEP (RSP_0,8); ((RDI_0 +64 36),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 36),4) SEP (0x10000c010,8); ((RDI_0 +64 36),4) SEP (0x10000c020,8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RDX = 256 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006135: AND EDX, DWORD PTR [R13 + 36] 4"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006139"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006139: ExternalCall fun__archive_match_include_pattern_from_file 5"
 Post  "RAX = bot(fun__archive_match_include_pattern_from_file) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_match_include_pattern_from_file {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000613e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern_from_file) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000613e: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_include_pattern_from_file) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006140"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_include_pattern_from_file) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006140: JNE 4294993810 6"
 Post  "RAX = bot(fun__archive_match_include_pattern_from_file) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 7 ##
#####################################
*)

htriple "ht_100006146"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006146: ExternalCall fun__archive_read_new 5"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_new {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000614b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000614b: MOV R14, RAX 3"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000614e"
 Separations "((RDI_0 +64 112),8) SEP (RSP_0,8); ((RDI_0 +64 112),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 112),8) SEP (0x10000c010,8); ((RDI_0 +64 112),8) SEP (0x10000c020,8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 112),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000614e: MOV RDI, QWORD PTR [R13 + 112] 4"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006152"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006152: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006155"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_new) ; RBX = RBX_0 ; RSI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006155: ExternalCall fun_0x1000043bd 5"
 Post  "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000043bd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000615a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000615a: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000615c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000615c: JNE 4294992230 2"
 Post  "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 8 ##
#####################################
*)

htriple "ht_10000615e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000615e: MOV RDI, R14 3"
 Post  "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006161"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000043bd) ; RBX = RBX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006161: ExternalCall fun__archive_read_support_filter_all 5"
 Post  "RAX = bot(fun__archive_read_support_filter_all) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_support_filter_all {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000060ca, blockId == 9 ##
#####################################
*)

htriple "ht_100006166"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006166: MOV RDI, R14 3"
 Post  "RBX = RBX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006169"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006169: ExternalCall fun__archive_read_support_format_all 5"
 Post  "RAX = bot(fun__archive_read_support_format_all) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_support_format_all {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000616e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_format_all) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000616e: LEA RDI, [RIP + 22249] 7"
 Post  "RAX = bot(fun__archive_read_support_format_all) ; RBX = RBX_0 ; RDI = 0x10000b85e ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006175"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_support_format_all) ; RBX = RBX_0 ; RDI = 0x10000b85e ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006175: ExternalCall fun__getenv 5"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__getenv {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000617a: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000617d"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 72),4) SEP (RDI_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 72),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),4) SEP (0x10000c010,8); ((RSP_0 -64 72),4) SEP (0x10000c020,8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = [(RSP_0 -64 72),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000617d: MOV DWORD PTR [RBP - 64], R12D 4"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006181"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006181: JE 4294992418 6"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 10 ##
######################################
*)

htriple "ht_100006187"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006187: MOV R15, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000618a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000618a: MOV RDI, RAX 3"
 Post  "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RDI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000618d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__getenv) ; RBX = RBX_0 ; RDI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000618d: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006192"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006192: MOV R12, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006195"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006195: LEA RDI, [RAX + 30] 4"
 Post  "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RDI = (bot(fun__strlen) +64 30) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006199"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RBX = RBX_0 ; RDI = (bot(fun__strlen) +64 30) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006199: ExternalCall fun__malloc 5"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__malloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000619e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000619e: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061a1: JE 4294993880 6"
 Post  "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 11 ##
######################################
*)

htriple "ht_100006222"
 Separations "((RDI_0 +64 96),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 96),8) SEP (RSP_0,8); ((RDI_0 +64 96),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 96),8) SEP (0x10000c010,8); ((RDI_0 +64 96),8) SEP (0x10000c020,8); ((RDI_0 +64 96),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 96),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 96),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 96),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006222: MOV RSI, QWORD PTR [R13 + 96] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006226"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006226: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006229"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006229: ExternalCall fun__archive_read_set_options 5"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_set_options {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000622e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000622e: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006230"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006230: JNE 4294993846 6"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 12 ##
######################################
*)

htriple "ht_1000061a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061a7: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061aa: INC R12 3"
 Post  "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061ad: MOVABS RAX, 3197379149687778911 10"
 Post  "RAX = 0x2c5f5f656d616e5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061b7"
 Separations "((bot(fun__malloc) +64 21),8) SEP (RDI_0,8); ((bot(fun__malloc) +64 21),8) SEP (RSP_0,8); ((bot(fun__malloc) +64 21),8) SEP ([0x10000c010,8]_0,8); ((bot(fun__malloc) +64 21),8) SEP ([0x10000c020,8]_0,8); ((bot(fun__malloc) +64 21),8) SEP ([(RDI_0 +64 144),8]_0,8); ((bot(fun__malloc) +64 21),8) SEP (0x10000c010,8); ((bot(fun__malloc) +64 21),8) SEP (0x10000c020,8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 24),4); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 32),4); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 52),4); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 56),8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 64),4); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 72),8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 80),8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 96),8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 144),8); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 180),4); ((bot(fun__malloc) +64 21),8) SEP ((RDI_0 +64 248),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 8),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 16),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 24),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 32),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 40),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 48),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 56),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 64),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 68),4); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 72),4); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 80),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 88),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 96),8); ((bot(fun__malloc) +64 21),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = 0x2c5f5f656d616e5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061b7: MOV QWORD PTR [RBX + 21], RAX 4"
 Post  "RAX = 0x2c5f5f656d616e5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061bb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x2c5f5f656d616e5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061bb: MOVABS RAX, 7020653758333150319 10"
 Post  "RAX = 0x616e5f656c75646f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061c5"
 Separations "((bot(fun__malloc) +64 16),8) SEP (RDI_0,8); ((bot(fun__malloc) +64 16),8) SEP (RSP_0,8); ((bot(fun__malloc) +64 16),8) SEP ([0x10000c010,8]_0,8); ((bot(fun__malloc) +64 16),8) SEP ([0x10000c020,8]_0,8); ((bot(fun__malloc) +64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((bot(fun__malloc) +64 16),8) SEP (0x10000c010,8); ((bot(fun__malloc) +64 16),8) SEP (0x10000c020,8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 24),4); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 32),4); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 52),4); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 56),8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 64),4); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 72),8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 80),8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 96),8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 144),8); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 180),4); ((bot(fun__malloc) +64 16),8) SEP ((RDI_0 +64 248),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 8),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 16),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 24),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 32),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 40),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 48),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 56),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 64),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 68),4); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 72),4); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 80),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 88),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 96),8); ((bot(fun__malloc) +64 16),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = 0x616e5f656c75646f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061c5: MOV QWORD PTR [RBX + 16], RAX 4"
 Post  "RAX = 0x616e5f656c75646f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x616e5f656c75646f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061c9: MOVABS RAX, 7881131596935493471 10"
 Post  "RAX = 0x6d5f676e6f72775f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061d3"
 Separations "((bot(fun__malloc) +64 8),8) SEP (RDI_0,8); ((bot(fun__malloc) +64 8),8) SEP (RSP_0,8); ((bot(fun__malloc) +64 8),8) SEP ([0x10000c010,8]_0,8); ((bot(fun__malloc) +64 8),8) SEP ([0x10000c020,8]_0,8); ((bot(fun__malloc) +64 8),8) SEP ([(RDI_0 +64 144),8]_0,8); ((bot(fun__malloc) +64 8),8) SEP (0x10000c010,8); ((bot(fun__malloc) +64 8),8) SEP (0x10000c020,8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 24),4); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 32),4); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 52),4); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 56),8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 64),4); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 72),8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 80),8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 96),8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 144),8); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 180),4); ((bot(fun__malloc) +64 8),8) SEP ((RDI_0 +64 248),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 8),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 16),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 24),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 32),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 40),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 48),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 56),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 64),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 68),4); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 72),4); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 80),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 88),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 96),8); ((bot(fun__malloc) +64 8),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = 0x6d5f676e6f72775f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061d3: MOV QWORD PTR [RBX + 8], RAX 4"
 Post  "RAX = 0x6d5f676e6f72775f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x6d5f676e6f72775f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061d7: MOVABS RAX, 7310027665147780959 10"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061e1"
 Separations "(bot(fun__malloc),8) SEP (RDI_0,8); (bot(fun__malloc),8) SEP (RSP_0,8); (bot(fun__malloc),8) SEP ([0x10000c010,8]_0,8); (bot(fun__malloc),8) SEP ([0x10000c020,8]_0,8); (bot(fun__malloc),8) SEP ([(RDI_0 +64 144),8]_0,8); (bot(fun__malloc),8) SEP (0x10000c010,8); (bot(fun__malloc),8) SEP (0x10000c020,8); (bot(fun__malloc),8) SEP ((RDI_0 +64 24),4); (bot(fun__malloc),8) SEP ((RDI_0 +64 32),4); (bot(fun__malloc),8) SEP ((RDI_0 +64 52),4); (bot(fun__malloc),8) SEP ((RDI_0 +64 56),8); (bot(fun__malloc),8) SEP ((RDI_0 +64 64),4); (bot(fun__malloc),8) SEP ((RDI_0 +64 72),8); (bot(fun__malloc),8) SEP ((RDI_0 +64 80),8); (bot(fun__malloc),8) SEP ((RDI_0 +64 96),8); (bot(fun__malloc),8) SEP ((RDI_0 +64 144),8); (bot(fun__malloc),8) SEP ((RDI_0 +64 180),4); (bot(fun__malloc),8) SEP ((RDI_0 +64 248),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 8),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 16),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 24),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 32),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 40),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 48),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 56),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 64),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 68),4); (bot(fun__malloc),8) SEP ((RSP_0 -64 72),4); (bot(fun__malloc),8) SEP ((RSP_0 -64 80),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 88),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 96),8); (bot(fun__malloc),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061e1: MOV QWORD PTR [RBX], RAX 3"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061e4"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061e4: MOV RDI, RBX 3"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061e7: ADD RDI, 29 4"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = (bot(fun__malloc) +64 29) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061eb"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = (bot(fun__malloc) +64 29) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061eb: MOV RSI, R15 3"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = (bot(fun__malloc) +64 29) ; RSI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061ee"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDI = (bot(fun__malloc) +64 29) ; RSI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061ee: MOV RDX, R12 3"
 Post  "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDX = (bot(fun__strlen) +64 1) ; RDI = (bot(fun__malloc) +64 29) ; RSI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061f1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x65726f6e67695f5f ; RBX = bot(fun__malloc) ; RDX = (bot(fun__strlen) +64 1) ; RDI = (bot(fun__malloc) +64 29) ; RSI = bot(fun__getenv) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061f1: ExternalCall fun__memcpy 5"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__memcpy {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061f6: MOV RDI, R14 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061f9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061f9: MOV RSI, RBX 3"
 Post  "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000061fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memcpy) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000061fc: ExternalCall fun__archive_read_set_options 5"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_set_options {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006201"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006201: MOV R15D, EAX 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006204"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006204: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006207"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RBX = bot(fun__malloc) ; RDI = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006207: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000620c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000620c: CMP R15D, 18446744073709551586 4"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006210"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006210: JE 4294993846 6"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 13 ##
######################################
*)

htriple "ht_1000067d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__malloc) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067d8: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067dd"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([(RDI_0 +64 144),8]_0,8); (bot(fun____error),4) SEP (0x10000c010,8); (bot(fun____error),4) SEP (0x10000c020,8); (bot(fun____error),4) SEP ((RDI_0 +64 144),8); (bot(fun____error),4) SEP ((RDI_0 +64 180),4); (bot(fun____error),4) SEP ((RDI_0 +64 248),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 68),4); (bot(fun____error),4) SEP ((RSP_0 -64 72),4); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 88),8); (bot(fun____error),4) SEP ((RSP_0 -64 96),8); (bot(fun____error),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067dd: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067df"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RBX_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067df: LEA RDX, [RIP + 17294] 7"
 Post  "RAX = bot(fun____error) ; RBX = RBX_0 ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067e6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RBX = RBX_0 ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067e6: JMP 4294993910 2"
 Post  "RAX = bot(fun____error) ; RBX = RBX_0 ; RDX = 0x10000ab74 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = bot(fun__getenv) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = bot(fun__strlen) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 14 ##
######################################
*)

htriple "ht_100006216"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006216: MOV RDI, R14 3"
 Post  "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006219"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RBX = bot(fun__malloc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006219: ExternalCall fun__archive_clear_error 5"
 Post  "RAX = bot(fun__archive_clear_error) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_clear_error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000621e"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 72),4) SEP (RDI_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 72),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),4) SEP (0x10000c010,8); ((RSP_0 -64 72),4) SEP (0x10000c020,8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_clear_error) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = (bot(fun__strlen) +64 1) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000621e: MOV R12D, DWORD PTR [RBP - 64] 4"
 Post  "RAX = bot(fun__archive_clear_error) ; RBX = bot(fun__malloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = b32(bot(fun__archive_read_set_options)) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 15 ##
######################################
*)

htriple "ht_1000067b6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067b6: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067b9"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067b9: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067be: LEA RDX, [RIP + 20652] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067c5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067c5: JMP 4294993829 2"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 16 ##
######################################
*)

htriple "ht_100006236"
 Separations "((RDI_0 +64 36),4) SEP (RSP_0,8); ((RDI_0 +64 36),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 36),4) SEP (0x10000c010,8); ((RDI_0 +64 36),4) SEP (0x10000c020,8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006236: TEST BYTE PTR [R13 + 36], 16 5"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000623b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000623b: JE 4294992468 2"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 17 ##
######################################
*)

htriple "ht_10000623d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000623d: LEA RSI, [RIP + 22064] 7"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSI = 0x10000b874 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006244"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSI = 0x10000b874 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006244: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RDI = bot(fun__archive_read_new) ; RSI = 0x10000b874 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006247"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RDI = bot(fun__archive_read_new) ; RSI = 0x10000b874 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006247: ExternalCall fun__archive_read_set_options 5"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_set_options {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000624c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000624c: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000624e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000624e: JNE 4294993846 6"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 18 ##
######################################
*)

htriple "ht_100006254"
 Separations "((RDI_0 +64 80),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 80),8) SEP (RSP_0,8); ((RDI_0 +64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 80),8) SEP (0x10000c010,8); ((RDI_0 +64 80),8) SEP (0x10000c020,8); ((RDI_0 +64 80),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 80),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 80),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 80),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006254: MOV RSI, QWORD PTR [R13 + 80] 4"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006258"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006258: TEST RSI, RSI 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000625b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000625b: JE 4294992487 2"
 Post  "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 19 ##
######################################
*)

htriple "ht_10000625d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000625d: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006260"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006260: ExternalCall fun__archive_read_add_passphrase 5"
 Post  "RAX = bot(fun__archive_read_add_passphrase) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_add_passphrase {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006265"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_add_passphrase) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006265: JMP 4294992505 2"
 Post  "RAX = bot(fun__archive_read_add_passphrase) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 20 ##
######################################
*)

htriple "ht_100006267"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006267: LEA RDX, [RIP + 6755] 7"
 Post  "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000626e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000626e: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006271"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006271: MOV RSI, R13 3"
 Post  "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006274"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_set_options) ; RDX = 0x100007cd1 ; RDI = bot(fun__archive_read_new) ; RSI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006274: ExternalCall fun__archive_read_set_passphrase_callback 5"
 Post  "RAX = bot(fun__archive_read_set_passphrase_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_set_passphrase_callback {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 21 ##
######################################
*)

htriple "ht_100006279"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006279: TEST EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000627b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000627b: JNE 4294993846 6"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 22 ##
######################################
*)

htriple "ht_100006281"
 Separations "(RDI_0,8) SEP (bot(fun__malloc),8); (RDI_0,8) SEP (RSP_0,8); (RDI_0,8) SEP ([(RDI_0 +64 144),8]_0,8); (RDI_0,8) SEP (0x10000c010,8); (RDI_0,8) SEP (0x10000c020,8); (RDI_0,8) SEP ((bot(fun__malloc) +64 8),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 16),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 21),8); (RDI_0,8) SEP ((RSP_0 -64 8),8); (RDI_0,8) SEP ((RSP_0 -64 16),8); (RDI_0,8) SEP ((RSP_0 -64 24),8); (RDI_0,8) SEP ((RSP_0 -64 32),8); (RDI_0,8) SEP ((RSP_0 -64 40),8); (RDI_0,8) SEP ((RSP_0 -64 48),8); (RDI_0,8) SEP ((RSP_0 -64 64),8); (RDI_0,8) SEP ((RSP_0 -64 68),4); (RDI_0,8) SEP ((RSP_0 -64 72),4); (RDI_0,8) SEP ((RSP_0 -64 80),8); (RDI_0,8) SEP ((RSP_0 -64 88),8); (RDI_0,8) SEP ((RSP_0 -64 96),8); (RDI_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006281: MOV RSI, QWORD PTR [R13] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006285"
 Separations "((RDI_0 +64 24),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 24),4) SEP (RSP_0,8); ((RDI_0 +64 24),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 24),4) SEP (0x10000c010,8); ((RDI_0 +64 24),4) SEP (0x10000c020,8); ((RDI_0 +64 24),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 24),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 24),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 24),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006285: MOVSXD RDX, DWORD PTR [R13 + 24] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006289"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006289: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000628c"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000628c: ExternalCall fun__archive_read_open_filename 5"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_read_open_filename {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006291"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006291: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006293"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006293: JNE 4294993863 6"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 23 ##
######################################
*)

htriple "ht_100006299"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "100006299: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000629c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "10000629c: ExternalCall fun_0x10000788f 5"
 Post  "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun_0x10000788f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062a1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000062a1: CMP R12B, 120 4"
 Post  "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000062a5: JNE 4294992659 2"
 Post  "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 24 ##
######################################
*)

htriple "ht_1000067c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067c7: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_read_open_filename) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067ca"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_open_filename) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067ca: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067cf: LEA RDX, [RIP + 20665] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b88f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b88f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067d6: JMP 4294993829 2"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = 0x10000b88f ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 25 ##
######################################
*)

htriple "ht_1000062a7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000062a7: LEA RDX, [RBP - 96] 4"
 Post  "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ab"
 Separations "((RSP_0 -64 104),8) SEP (bot(fun____error),4); ((RSP_0 -64 104),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 104),8) SEP (RDI_0,8); ((RSP_0 -64 104),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 104),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 104),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 104),8) SEP (0x10000c010,8); ((RSP_0 -64 104),8) SEP (0x10000c020,8); ((RSP_0 -64 104),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 104),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 104),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 104),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000062ab: MOV QWORD PTR [RDX], R13 3"
 Post  "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ae"
 Separations "((RSP_0 -64 96),8) SEP (bot(fun____error),4); ((RSP_0 -64 96),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 96),8) SEP (RDI_0,8); ((RSP_0 -64 96),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 96),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 96),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 96),8) SEP (0x10000c010,8); ((RSP_0 -64 96),8) SEP (0x10000c020,8); ((RSP_0 -64 96),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 96),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 96),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 96),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062ae: MOV QWORD PTR [RDX + 8], R14 4"
 Post  "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062b2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062b2: LEA RSI, [RIP + 1768] 7"
 Post  "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSI = 0x1000069a1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062b9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RSI = 0x1000069a1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062b9: MOV RDI, R14 3"
 Post  "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RDI = bot(fun__archive_read_new) ; RSI = 0x1000069a1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062bc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000788f) ; RDX = (RSP_0 -64 104) ; RDI = bot(fun__archive_read_new) ; RSI = 0x1000069a1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062bc: ExternalCall fun__archive_read_extract_set_progress_callback 5"
 Post  "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__archive_read_extract_set_progress_callback {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062c1"
 Separations "((RDI_0 +64 36),4) SEP (RSP_0,8); ((RDI_0 +64 36),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 36),4) SEP (0x10000c010,8); ((RDI_0 +64 36),4) SEP (0x10000c020,8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062c1: TEST BYTE PTR [R13 + 36], 4 5"
 Post  "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062c6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062c6: JE 4294992604 2"
 Post  "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 26 ##
######################################
*)

htriple "ht_100006313"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006313: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006315"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RDI_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP (0x10000c020,8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006315: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = 0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 27 ##
######################################
*)

htriple "ht_1000062c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062c8: LEA RDI, [RIP + 21978] 7"
 Post  "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RDI = 0x10000b8a9 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062cf"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_extract_set_progress_callback) ; RDI = 0x10000b8a9 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062cf: ExternalCall fun__chroot 5"
 Post  "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun__chroot {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062d4: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062d6: JNE 4294993896 6"
 Post  "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 28 ##
######################################
*)

htriple "ht_1000062dc"
 Separations "(RDI_0,8) SEP (bot(fun__malloc),8); (RDI_0,8) SEP (RSP_0,8); (RDI_0,8) SEP ([(RDI_0 +64 144),8]_0,8); (RDI_0,8) SEP (0x10000c010,8); (RDI_0,8) SEP (0x10000c020,8); (RDI_0,8) SEP ((bot(fun__malloc) +64 8),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 16),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 21),8); (RDI_0,8) SEP ((RSP_0 -64 8),8); (RDI_0,8) SEP ((RSP_0 -64 16),8); (RDI_0,8) SEP ((RSP_0 -64 24),8); (RDI_0,8) SEP ((RSP_0 -64 32),8); (RDI_0,8) SEP ((RSP_0 -64 40),8); (RDI_0,8) SEP ((RSP_0 -64 48),8); (RDI_0,8) SEP ((RSP_0 -64 64),8); (RDI_0,8) SEP ((RSP_0 -64 68),4); (RDI_0,8) SEP ((RSP_0 -64 72),4); (RDI_0,8) SEP ((RSP_0 -64 80),8); (RDI_0,8) SEP ((RSP_0 -64 88),8); (RDI_0,8) SEP ((RSP_0 -64 96),8); (RDI_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062dc: CMP QWORD PTR [R13], 0 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062e1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062e1: JE 4294992659 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 29 ##
######################################
*)

htriple "ht_1000067e8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__chroot) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000067e8: ExternalCall fun____error 5"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun____error {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067ed"
 Separations "(bot(fun____error),4) SEP (RSP_0,8); (bot(fun____error),4) SEP ([(RDI_0 +64 144),8]_0,8); (bot(fun____error),4) SEP (0x10000c010,8); (bot(fun____error),4) SEP (0x10000c020,8); (bot(fun____error),4) SEP ((RDI_0 +64 144),8); (bot(fun____error),4) SEP ((RDI_0 +64 180),4); (bot(fun____error),4) SEP ((RDI_0 +64 248),8); (bot(fun____error),4) SEP ((RSP_0 -64 8),8); (bot(fun____error),4) SEP ((RSP_0 -64 16),8); (bot(fun____error),4) SEP ((RSP_0 -64 24),8); (bot(fun____error),4) SEP ((RSP_0 -64 32),8); (bot(fun____error),4) SEP ((RSP_0 -64 40),8); (bot(fun____error),4) SEP ((RSP_0 -64 48),8); (bot(fun____error),4) SEP ((RSP_0 -64 64),8); (bot(fun____error),4) SEP ((RSP_0 -64 68),4); (bot(fun____error),4) SEP ((RSP_0 -64 72),4); (bot(fun____error),4) SEP ((RSP_0 -64 80),8); (bot(fun____error),4) SEP ((RSP_0 -64 88),8); (bot(fun____error),4) SEP ((RSP_0 -64 96),8); (bot(fun____error),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000067ed: MOV ESI, DWORD PTR [RAX] 2"
 Post  "RAX = bot(fun____error) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000067ef: LEA RDX, [RIP + 20661] 7"
 Post  "RAX = bot(fun____error) ; RDX = 0x10000b8ab ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 30 ##
######################################
*)

htriple "ht_1000062e3"
 Separations "((RDI_0 +64 37),1) SEP (RSP_0,8); ((RDI_0 +64 37),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 37),1) SEP (0x10000c010,8); ((RDI_0 +64 37),1) SEP (0x10000c020,8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062e3: TEST BYTE PTR [R13 + 37], 8 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062e8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062e8: JNE 4294992659 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 31 ##
######################################
*)

htriple "ht_1000062ea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062ea: ExternalCall fun___qtn_file_alloc 5"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun___qtn_file_alloc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062ef"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062ef: TEST RAX, RAX 3"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062f2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062f2: JE 4294992659 2"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 32 ##
######################################
*)

htriple "ht_1000062f4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062f4: MOV RBX, RAX 3"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062f7"
 Separations "(RDI_0,8) SEP (bot(fun__malloc),8); (RDI_0,8) SEP (RSP_0,8); (RDI_0,8) SEP ([(RDI_0 +64 144),8]_0,8); (RDI_0,8) SEP (0x10000c010,8); (RDI_0,8) SEP (0x10000c020,8); (RDI_0,8) SEP ((bot(fun__malloc) +64 8),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 16),8); (RDI_0,8) SEP ((bot(fun__malloc) +64 21),8); (RDI_0,8) SEP ((RSP_0 -64 8),8); (RDI_0,8) SEP ((RSP_0 -64 16),8); (RDI_0,8) SEP ((RSP_0 -64 24),8); (RDI_0,8) SEP ((RSP_0 -64 32),8); (RDI_0,8) SEP ((RSP_0 -64 40),8); (RDI_0,8) SEP ((RSP_0 -64 48),8); (RDI_0,8) SEP ((RSP_0 -64 64),8); (RDI_0,8) SEP ((RSP_0 -64 68),4); (RDI_0,8) SEP ((RSP_0 -64 72),4); (RDI_0,8) SEP ((RSP_0 -64 80),8); (RDI_0,8) SEP ((RSP_0 -64 88),8); (RDI_0,8) SEP ((RSP_0 -64 96),8); (RDI_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062f7: MOV RSI, QWORD PTR [R13] 4"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062fb: MOV RDI, RAX 3"
 Post  "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RDI = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000062fe"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_alloc) ; RBX = bot(fun___qtn_file_alloc) ; RDI = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000062fe: ExternalCall fun___qtn_file_init_with_path 5"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun___qtn_file_init_with_path {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006303"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "100006303: TEST EAX, EAX 2"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006305"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "100006305: JE 4294993608 6"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 33 ##
######################################
*)

htriple "ht_10000630b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "10000630b: MOV RDI, RBX 3"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RDI = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000630e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RDI = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "10000630e: ExternalCall fun___qtn_file_free 5"
 Post  "RAX = bot(fun___qtn_file_free) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 FunctionConstraints "PRESERVES fun___qtn_file_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 34 ##
######################################
*)

htriple "ht_1000066c8"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RDI_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP (0x10000c020,8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000066c8: MOV QWORD PTR [RBP - 56], RBX 4"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun___qtn_file_alloc) ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun___qtn_file_alloc) ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
 Instruction "1000066cc: JMP 4294992665 5"
 Post  "RAX = bot(fun___qtn_file_init_with_path) ; RBX = bot(fun___qtn_file_alloc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = bot(fun___qtn_file_alloc) ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = bot(fun__archive_read_new) ; [(RSP_0 -64 104),8] = RDI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 35 ##
######################################
*)

htriple "ht_100006324"
 Separations "((RDI_0 +64 248),8) SEP (bot(fun____error),4); ((RDI_0 +64 248),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 248),8) SEP (RSP_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 248),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 248),8) SEP (0x10000c010,8); ((RDI_0 +64 248),8) SEP (0x10000c020,8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006324: MOV RDI, QWORD PTR [R13 + 248] 7"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000632b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000632b: ExternalCall fun__archive_match_path_unmatched_inclusions 5"
 Post  "RAX = bot(fun__archive_match_path_unmatched_inclusions) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_match_path_unmatched_inclusions {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006330"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_path_unmatched_inclusions) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006330: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_path_unmatched_inclusions) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006332"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_path_unmatched_inclusions) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006332: JE 4294993655 6"
 Post  "RAX = bot(fun__archive_match_path_unmatched_inclusions) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 36 ##
######################################
*)

htriple "ht_100006338"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006338: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000633b"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000633b: MOV RSI, R15 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000633e"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSI = (RSP_0 -64 56) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000633e: ExternalCall fun__archive_read_next_header 5"
 Post  "RAX = bot(fun__archive_read_next_header) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_next_header {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006343"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006343: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_read_next_header) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006345"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_next_header) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006345: MOV RAX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006349"
 Separations "((RSP_0 -64 88),8) SEP (bot(fun____error),4); ((RSP_0 -64 88),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 88),8) SEP (RDI_0,8); ((RSP_0 -64 88),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 88),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 88),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 88),8) SEP (0x10000c010,8); ((RSP_0 -64 88),8) SEP (0x10000c020,8); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 88),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006349: MOV QWORD PTR [RBP - 80], RAX 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000634d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000634d: CMP EBX, 1 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006350"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006350: JE 4294993655 6"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 37 ##
######################################
*)

htriple "ht_1000066f7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066f7: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066fa"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066fa: ExternalCall fun__archive_read_close 5"
 Post  "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_close {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066ff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066ff: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006701"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006701: JE 4294993712 2"
 Post  "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 38 ##
######################################
*)

htriple "ht_100006356"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006356: TEST EBX, EBX 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006358"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006358: JNS 4294992773 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 39 ##
######################################
*)

htriple "ht_10000635a"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000635a: MOV RDI, R14 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000635d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000635d: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006362"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006362: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006364"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006364: LEA RSI, [RIP + 21766] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000636b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000636b: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000636e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000636e: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006370"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006370: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006375"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006375: CMP EBX, 18446744073709551596 3"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006378"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006378: JG 4294992773 2"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 40 ##
######################################
*)

htriple "ht_100006385"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006385: CMP EBX, 18446744073709551606 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006388"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006388: JE 4294993012 6"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 41 ##
######################################
*)

htriple "ht_10000637a"
 Separations "((RDI_0 +64 180),4) SEP (bot(fun____error),4); ((RDI_0 +64 180),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 180),4) SEP (RSP_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 180),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 180),4) SEP (0x10000c010,8); ((RDI_0 +64 180),4) SEP (0x10000c020,8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000637a: MOV DWORD PTR [R13 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 42 ##
######################################
*)

htriple "ht_10000638e"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000638e: CMP EBX, 18446744073709551586 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006391"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006391: JE 4294993655 6"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 43 ##
######################################
*)

htriple "ht_100006474"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006474: XOR EDI, EDI 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006476"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006476: LEA RSI, [RIP + 21570] 7"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8bf ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000647d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8bf ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000647d: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8bf ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000647f"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8bf ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000647f: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006484"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006484: JMP 4294992669 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 44 ##
######################################
*)

htriple "ht_100006397"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006397: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000639b"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000639b: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063a0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063a0: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063a3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063a3: JE 4294993033 6"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 45 ##
######################################
*)

htriple "ht_1000063a9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063a9: CMP BYTE PTR [RAX], 0 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063ac: JE 4294993033 6"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 46 ##
######################################
*)

htriple "ht_100006489"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006489: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000648b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000648b: LEA RSI, [RIP + 21561] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8cb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006492"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8cb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006492: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8cb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006494"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0 ; RSI = 0x10000b8cb ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006494: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006499"
 Separations "((RDI_0 +64 180),4) SEP (bot(fun____error),4); ((RDI_0 +64 180),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 180),4) SEP (RSP_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 180),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 180),4) SEP (0x10000c010,8); ((RDI_0 +64 180),4) SEP (0x10000c020,8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006499: MOV DWORD PTR [R13 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064a4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064a4: JMP 4294992669 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 47 ##
######################################
*)

htriple "ht_1000063b2"
 Separations "((RDI_0 +64 64),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 64),4) SEP (RSP_0,8); ((RDI_0 +64 64),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 64),4) SEP (0x10000c010,8); ((RDI_0 +64 64),4) SEP (0x10000c020,8); ((RDI_0 +64 64),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 64),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 64),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 64),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063b2: MOV ESI, DWORD PTR [R13 + 64] 4"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063b6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063b6: TEST ESI, ESI 2"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063b8: JS 4294992846 2"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 48 ##
######################################
*)

htriple "ht_1000063ba"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063ba: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063be"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063be: ExternalCall fun__archive_entry_set_uid 5"
 Post  "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_uid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063c3"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063c3: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063c7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063c7: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063c9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_uid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063c9: ExternalCall fun__archive_entry_set_uname 5"
 Post  "RAX = bot(fun__archive_entry_set_uname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_uname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 49 ##
######################################
*)

htriple "ht_1000063ce"
 Separations "((RDI_0 +64 52),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 52),4) SEP (RSP_0,8); ((RDI_0 +64 52),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 52),4) SEP (0x10000c010,8); ((RDI_0 +64 52),4) SEP (0x10000c020,8); ((RDI_0 +64 52),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 52),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 52),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 52),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063ce: MOV ESI, DWORD PTR [R13 + 52] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063d2"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063d2: TEST ESI, ESI 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063d4"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063d4: JS 4294992874 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 50 ##
######################################
*)

htriple "ht_1000063d6"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063d6: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063da"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063da: ExternalCall fun__archive_entry_set_gid 5"
 Post  "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_gid {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063df"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063df: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063e3: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_set_gid) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063e5: ExternalCall fun__archive_entry_set_gname 5"
 Post  "RAX = bot(fun__archive_entry_set_gname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_gname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 51 ##
######################################
*)

htriple "ht_1000063ea"
 Separations "((RDI_0 +64 72),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 72),8) SEP (RSP_0,8); ((RDI_0 +64 72),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 72),8) SEP (0x10000c010,8); ((RDI_0 +64 72),8) SEP (0x10000c020,8); ((RDI_0 +64 72),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 72),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 72),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 72),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063ea: MOV RSI, QWORD PTR [R13 + 72] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063ee"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063ee: TEST RSI, RSI 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063f1"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063f1: JE 4294992892 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 52 ##
######################################
*)

htriple "ht_1000063f3"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063f3: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000063f7"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063f7: ExternalCall fun__archive_entry_set_uname 5"
 Post  "RAX = bot(fun__archive_entry_set_uname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_uname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 53 ##
######################################
*)

htriple "ht_1000063fc"
 Separations "((RDI_0 +64 56),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 56),8) SEP (RSP_0,8); ((RDI_0 +64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 56),8) SEP (0x10000c010,8); ((RDI_0 +64 56),8) SEP (0x10000c020,8); ((RDI_0 +64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 56),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000063fc: MOV RSI, QWORD PTR [R13 + 56] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006400"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006400: TEST RSI, RSI 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006403"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006403: JE 4294992910 2"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 54 ##
######################################
*)

htriple "ht_100006405"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006405: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006409"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006409: ExternalCall fun__archive_entry_set_gname 5"
 Post  "RAX = bot(fun__archive_entry_set_gname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_set_gname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 55 ##
######################################
*)

htriple "ht_10000640e"
 Separations "((RDI_0 +64 248),8) SEP (bot(fun____error),4); ((RDI_0 +64 248),8) SEP (bot(fun__malloc),8); ((RDI_0 +64 248),8) SEP (RSP_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 248),8) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 248),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 248),8) SEP (0x10000c010,8); ((RDI_0 +64 248),8) SEP (0x10000c020,8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 248),8) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 248),8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000640e: MOV RDI, QWORD PTR [R13 + 248] 7"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006415"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006415: MOV RSI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006419"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006419: ExternalCall fun__archive_match_excluded 5"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_match_excluded {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000641e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000641e: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006420"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006420: JNE 4294992669 6"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 56 ##
######################################
*)

htriple "ht_10000631d"
 Separations "((RDI_0 +64 36),4) SEP (RSP_0,8); ((RDI_0 +64 36),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 36),4) SEP (0x10000c010,8); ((RDI_0 +64 36),4) SEP (0x10000c020,8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000631d: TEST BYTE PTR [R13 + 36], 8 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006322"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006322: JE 4294992696 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 57 ##
######################################
*)

htriple "ht_100006426"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006426: CMP R12B, 116 4"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000642a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000642a: JNE 4294993065 2"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 58 ##
######################################
*)

htriple "ht_10000642c"
 Separations "((RDI_0 +64 37),1) SEP (RSP_0,8); ((RDI_0 +64 37),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 37),1) SEP (0x10000c010,8); ((RDI_0 +64 37),1) SEP (0x10000c020,8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000642c: TEST BYTE PTR [R13 + 37], 8 5"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006431"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006431: MOV RAX, QWORD PTR [RIP + 23512] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006438"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006438: JNE 4294992961 2"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 59 ##
######################################
*)

htriple "ht_1000064a9"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064a9: MOV RSI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064ad"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064ad: MOV RDI, R13 3"
 Post  "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064b0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_match_excluded) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064b0: ExternalCall fun_0x1000078da 5"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000078da {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064b5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064b5: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064b7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064b7: JNE 4294992669 6"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 60 ##
######################################
*)

htriple "ht_10000643a"
 Separations "(0x10000c020,8) SEP (bot(fun____error),4); (0x10000c020,8) SEP (bot(fun__malloc),8); (0x10000c020,8) SEP (RDI_0,8); (0x10000c020,8) SEP (RSP_0,8); (0x10000c020,8) SEP ([0x10000c010,8]_0,8); (0x10000c020,8) SEP ([0x10000c020,8]_0,8); (0x10000c020,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c020,8) SEP ((RDI_0 +64 16),8); (0x10000c020,8) SEP ((RDI_0 +64 24),4); (0x10000c020,8) SEP ((RDI_0 +64 32),4); (0x10000c020,8) SEP ((RDI_0 +64 36),4); (0x10000c020,8) SEP ((RDI_0 +64 52),4); (0x10000c020,8) SEP ((RDI_0 +64 56),8); (0x10000c020,8) SEP ((RDI_0 +64 64),4); (0x10000c020,8) SEP ((RDI_0 +64 72),8); (0x10000c020,8) SEP ((RDI_0 +64 80),8); (0x10000c020,8) SEP ((RDI_0 +64 96),8); (0x10000c020,8) SEP ((RDI_0 +64 112),8); (0x10000c020,8) SEP ((RDI_0 +64 144),8); (0x10000c020,8) SEP ((RDI_0 +64 180),4); (0x10000c020,8) SEP ((RDI_0 +64 248),8); (0x10000c020,8) SEP ((RSP_0 -64 8),8); (0x10000c020,8) SEP ((RSP_0 -64 16),8); (0x10000c020,8) SEP ((RSP_0 -64 24),8); (0x10000c020,8) SEP ((RSP_0 -64 32),8); (0x10000c020,8) SEP ((RSP_0 -64 40),8); (0x10000c020,8) SEP ((RSP_0 -64 48),8); (0x10000c020,8) SEP ((RSP_0 -64 64),8); (0x10000c020,8) SEP ((RSP_0 -64 68),4); (0x10000c020,8) SEP ((RSP_0 -64 72),4); (0x10000c020,8) SEP ((RSP_0 -64 80),8); (0x10000c020,8) SEP ((RSP_0 -64 88),8); (0x10000c020,8) SEP ((RSP_0 -64 96),8); (0x10000c020,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000643a: MOV RAX, QWORD PTR [RIP + 23519] 7"
 Post  "RAX = [0x10000c020,8]_0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 61 ##
######################################
*)

htriple "ht_100006441"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 68),4); (RAX,8) SEP ((RSP_0 -64 72),4); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8); (RAX,8) SEP ((RSP_0 -64 96),8); (RAX,8) SEP ((RSP_0 -64 104),8)"
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006441: MOV R12, QWORD PTR [RAX] 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006444"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006444: CMP DWORD PTR [R13 + 32], 1 5"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006449"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006449: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000644d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000644d: JG 4294993183 6"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 62 ##
######################################
*)

htriple "ht_100006453"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006453: MOV RDI, RDX 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006456"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006456: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000645b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000645b: MOV RDI, R12 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000645e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000645e: LEA RSI, [RIP + 21516] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006465"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006465: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006468"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006468: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000646a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000646a: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000646f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000646f: JMP 4294993194 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 63 ##
######################################
*)

htriple "ht_10000651f"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000651f: MOV RDI, R13 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006522"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006522: MOV RSI, R12 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006525"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006525: ExternalCall fun_0x100007d57 5"
 Post  "RAX = bot(fun_0x100007d57) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x100007d57 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 64 ##
######################################
*)

htriple "ht_1000064bd"
 Separations "((RDI_0 +64 36),4) SEP (RSP_0,8); ((RDI_0 +64 36),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 36),4) SEP (0x10000c010,8); ((RDI_0 +64 36),4) SEP (0x10000c020,8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 36),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064bd: TEST BYTE PTR [R13 + 36], 32 5"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064c2: JE 4294993126 2"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 65 ##
######################################
*)

htriple "ht_1000064c4"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064c4: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064c8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000078da) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064c8: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064cd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064cd: LEA RDI, [RIP + 21556] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064d4: MOV RSI, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064d7"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064d7: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064d9"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = 0x10000b908 ; RSI = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064d9: ExternalCall fun_0x10000761c 5"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x10000761c {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064de"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000761c) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064de: TEST EAX, EAX 2"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000761c) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064e0: JE 4294992669 6"
 Post  "RAX = bot(fun_0x10000761c) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 66 ##
######################################
*)

htriple "ht_1000064e6"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064e6: MOV EAX, DWORD PTR [R13 + 32] 4"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064ea"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064ea: CMP EAX, 2 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064ed"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064ed: JL 4294993315 6"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 67 ##
######################################
*)

htriple "ht_1000064f3"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064f3: MOV RBX, QWORD PTR [RIP + 23318] 7"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064fa"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064fa: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000064fd"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000064fd: LEA RSI, [RIP + 21521] 7"
 Post  "RBX = [0x10000c010,8]_0 ; RSI = 0x10000b915 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006504"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSI = 0x10000b915 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006504: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b915 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006506"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b915 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006506: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000650b"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000650b: MOV RSI, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000650e"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000650e: MOV RDX, QWORD PTR [RBP - 48] 4"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006512"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006512: MOV RDI, R13 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006515"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDI = RDI_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006515: ExternalCall fun_0x100007d57 5"
 Post  "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x100007d57 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000651a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000651a: JMP 4294993373 5"
 Post  "RAX = bot(fun_0x100007d57) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 68 ##
######################################
*)

htriple "ht_1000065a3"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065a3: CMP EAX, 1 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065a6"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065a6: MOV RBX, QWORD PTR [RIP + 23139] 7"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065ad"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065ad: JNE 4294993381 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 69 ##
######################################
*)

htriple "ht_10000652a"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000652a: MOV RDI, R12 3"
 Post  "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000652d"
 Separations ""
 Assertions  ""
 Pre   "RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000652d: ExternalCall fun__fflush 5"
 Post  "RAX = bot(fun__fflush) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fflush {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006532"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006532: MOV RDI, R14 3"
 Post  "RAX = bot(fun__fflush) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006535"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fflush) ; RBX = b32(bot(fun__archive_read_next_header)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006535: ExternalCall fun__archive_read_data_skip 5"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_data_skip {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000653a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000653a: CMP EAX, 18446744073709551606 3"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000653d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000653d: JE 4294993222 2"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 70 ##
######################################
*)

htriple "ht_10000653f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_next_header)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000653f: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006541"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006541: CMP EAX, 18446744073709551596 3"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006544"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006544: JNE 4294993284 2"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 71 ##
######################################
*)

htriple "ht_100006546"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006546: MOV EDI, 10 5"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000654b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000654b: MOV RSI, R12 3"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000654e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000654e: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006553"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006553: MOV RDI, R14 3"
 Post  "RAX = bot(fun__fputc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006556"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006556: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000655b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000655b: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000655d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000655d: LEA RSI, [RIP + 21261] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006564"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006564: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006567"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006567: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006569"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006569: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000656e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000656e: MOV EDI, 10 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006573"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006573: MOV RSI, R12 3"
 Post  "RAX = bot(fun_0x1000099ad) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006576"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006576: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000657b"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 72),4) SEP (RDI_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 72),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),4) SEP (0x10000c010,8); ((RSP_0 -64 72),4) SEP (0x10000c020,8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000657b: MOV R12D, DWORD PTR [RBP - 64] 4"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000657f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000657f: JMP 4294992669 5"
 Post  "RAX = bot(fun__fputc) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 72 ##
######################################
*)

htriple "ht_100006584"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006584: MOV EDI, 10 5"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006589"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006589: MOV RSI, R12 3"
 Post  "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000658c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_data_skip) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000658c: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006591"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006591: CMP EBX, 18446744073709551586 3"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006594"
 Separations "((RSP_0 -64 72),4) SEP (bot(fun____error),4); ((RSP_0 -64 72),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 72),4) SEP (RDI_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 72),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 72),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),4) SEP (0x10000c010,8); ((RSP_0 -64 72),4) SEP (0x10000c020,8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 72),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 72),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006594: MOV R12D, DWORD PTR [RBP - 64] 4"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006598"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006598: JNE 4294992669 6"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 73 ##
######################################
*)

htriple "ht_10000659e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000659e: JMP 4294993617 5"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066d1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066d1: MOV RDI, R14 3"
 Post  "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066d4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066d4: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066d9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066d9: LEA RSI, [RIP + 20881] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066e0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066e0: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066e2: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066e5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066e5: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066e7"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_data_skip)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066e7: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066ec"
 Separations "((RDI_0 +64 180),4) SEP (bot(fun____error),4); ((RDI_0 +64 180),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 180),4) SEP (RSP_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 180),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 180),4) SEP (0x10000c010,8); ((RDI_0 +64 180),4) SEP (0x10000c020,8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066ec: MOV DWORD PTR [R13 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_data_skip)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 74 ##
######################################
*)

htriple "ht_1000065af"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065af: MOV RAX, QWORD PTR [RIP + 23130] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065b6"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065b6: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065b9"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065b9: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065bd"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065bd: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065c2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065c2: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065c5"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065c5: MOV RBX, QWORD PTR [RIP + 23108] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065cc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065cc: LEA RSI, [RIP + 21317] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065d3"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065d3: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065d6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065d6: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065d8"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b918 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065d8: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 75 ##
######################################
*)

htriple "ht_1000065e5"
 Separations "((RDI_0 +64 37),1) SEP (RSP_0,8); ((RDI_0 +64 37),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 37),1) SEP (0x10000c010,8); ((RDI_0 +64 37),1) SEP (0x10000c020,8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 37),1) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065e5: TEST BYTE PTR [R13 + 37], 8 5"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065ea"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065ea: JNE 4294993406 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 76 ##
######################################
*)

htriple "ht_1000065dd"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065dd: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065e0"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065e0: ExternalCall fun__fflush 5"
 Post  "RAX = bot(fun__fflush) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fflush {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 77 ##
######################################
*)

htriple "ht_1000065ec"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065ec: MOV RSI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065f0"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065f0: MOV RDI, R14 3"
 Post  "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065f3"
 Separations "((RSP_0 -64 80),8) SEP (bot(fun____error),4); ((RSP_0 -64 80),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 80),8) SEP (RDI_0,8); ((RSP_0 -64 80),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 80),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 80),8) SEP (0x10000c010,8); ((RSP_0 -64 80),8) SEP (0x10000c020,8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 80),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065f3: MOV RDX, QWORD PTR [RBP - 72] 4"
 Post  "RBX = [0x10000c010,8]_0 ; RDX = RDX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065f7"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RDX = RDX_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065f7: ExternalCall fun__archive_read_extract2 5"
 Post  "RAX = bot(fun__archive_read_extract2) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_extract2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000065fc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_extract2) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065fc: JMP 4294993419 2"
 Post  "RAX = bot(fun__archive_read_extract2) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 78 ##
######################################
*)

htriple "ht_1000065fe"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000065fe: MOV RDI, R14 3"
 Post  "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006601"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006601: MOV ESI, 1 5"
 Post  "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006606"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006606: ExternalCall fun__archive_read_data_into_fd 5"
 Post  "RAX = bot(fun__archive_read_data_into_fd) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_data_into_fd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 79 ##
######################################
*)

htriple "ht_10000660b"
 Separations "((RSP_0 -64 68),4) SEP (bot(fun____error),4); ((RSP_0 -64 68),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 68),4) SEP (RDI_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 68),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 68),4) SEP (0x10000c010,8); ((RSP_0 -64 68),4) SEP (0x10000c020,8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000660b: MOV DWORD PTR [RBP - 60], EAX 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000660e"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000660e: TEST EAX, EAX 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006610"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006610: JE 4294993550 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 80 ##
######################################
*)

htriple "ht_100006612"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006612: CMP DWORD PTR [R13 + 32], 0 5"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006617"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006617: JNE 4294993472 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 81 ##
######################################
*)

htriple "ht_10000668e"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000668e: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006692"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006692: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006697"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RDI_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP (0x10000c020,8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006697: MOV RSI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000669b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000669b: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000669e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000669e: ExternalCall fun_0x100006908 5"
 Post  "RAX = bot(fun_0x100006908) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x100006908 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 82 ##
######################################
*)

htriple "ht_100006619"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006619: MOV RAX, QWORD PTR [RIP + 23024] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006620"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006620: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006623"
 Separations "((RSP_0 -64 56),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 56),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006623: MOV RDI, QWORD PTR [RBP - 48] 4"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006627"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006627: ExternalCall fun__archive_entry_pathname 5"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_entry_pathname {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000662c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000662c: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000662f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000662f: LEA RSI, [RIP + 21051] 7"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006636"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006636: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006639"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_entry_pathname) ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006639: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000663b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__archive_entry_pathname) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000663b: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 83 ##
######################################
*)

htriple "ht_100006640"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006640: MOV RAX, QWORD PTR [RIP + 22985] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006647"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006647: MOV RBX, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000664a"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000664a: MOV RDI, R14 3"
 Post  "RAX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000664d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000664d: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006652"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006652: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006655"
 Separations "(0x10000c010,8) SEP (bot(fun____error),4); (0x10000c010,8) SEP (bot(fun__malloc),8); (0x10000c010,8) SEP (RDI_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([0x10000c020,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c010,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c010,8) SEP ((RDI_0 +64 16),8); (0x10000c010,8) SEP ((RDI_0 +64 24),4); (0x10000c010,8) SEP ((RDI_0 +64 32),4); (0x10000c010,8) SEP ((RDI_0 +64 36),4); (0x10000c010,8) SEP ((RDI_0 +64 52),4); (0x10000c010,8) SEP ((RDI_0 +64 56),8); (0x10000c010,8) SEP ((RDI_0 +64 64),4); (0x10000c010,8) SEP ((RDI_0 +64 72),8); (0x10000c010,8) SEP ((RDI_0 +64 80),8); (0x10000c010,8) SEP ((RDI_0 +64 96),8); (0x10000c010,8) SEP ((RDI_0 +64 112),8); (0x10000c010,8) SEP ((RDI_0 +64 144),8); (0x10000c010,8) SEP ((RDI_0 +64 180),4); (0x10000c010,8) SEP ((RDI_0 +64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 64),8); (0x10000c010,8) SEP ((RSP_0 -64 68),4); (0x10000c010,8) SEP ((RSP_0 -64 72),4); (0x10000c010,8) SEP ((RSP_0 -64 80),8); (0x10000c010,8) SEP ((RSP_0 -64 88),8); (0x10000c010,8) SEP ((RSP_0 -64 96),8); (0x10000c010,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006655: MOV RBX, QWORD PTR [RIP + 22964] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000665c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000665c: LEA RSI, [RIP + 21178] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006663"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006663: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006666"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006666: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006668"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = [0x10000c010,8]_0 ; RDX = bot(fun__archive_error_string) ; RSI = 0x10000b91d ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006668: ExternalCall fun_0x1000071a0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000071a0 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000666d"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000666d: CMP DWORD PTR [R13 + 32], 0 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006672"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006672: JNE 4294993537 2"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 84 ##
######################################
*)

htriple "ht_100006674"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006674: MOV RSI, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006677"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006677: MOV EDI, 10 5"
 Post  "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000667c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000071a0) ; RBX = [0x10000c010,8]_0 ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000667c: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 85 ##
######################################
*)

htriple "ht_100006681"
 Separations "((RDI_0 +64 180),4) SEP (bot(fun____error),4); ((RDI_0 +64 180),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 180),4) SEP (RSP_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 180),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 180),4) SEP (0x10000c010,8); ((RDI_0 +64 180),4) SEP (0x10000c020,8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006681: MOV DWORD PTR [R13 + 180], 1 11"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000668c"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000668c: JMP 4294993571 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 86 ##
######################################
*)

htriple "ht_1000066a3"
 Separations "((RSP_0 -64 68),4) SEP (bot(fun____error),4); ((RSP_0 -64 68),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 68),4) SEP (RDI_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 68),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 68),4) SEP (0x10000c010,8); ((RSP_0 -64 68),4) SEP (0x10000c020,8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066a3: MOV EAX, DWORD PTR [RBP - 60] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066a6"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066a6: CMP DWORD PTR [R13 + 32], 0 5"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066ab"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066ab: JE 4294993597 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 87 ##
######################################
*)

htriple "ht_1000066ad"
 Separations "([0x10000c010,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP (0x10000c020,8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c010,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066ad: MOV RSI, QWORD PTR [RBX] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066b0"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066b0: MOV EDI, 10 5"
 Post  "RBX = [0x10000c010,8]_0 ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066b5"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RDI = 10 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066b5: ExternalCall fun__fputc 5"
 Post  "RAX = bot(fun__fputc) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fputc {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066ba"
 Separations "((RSP_0 -64 68),4) SEP (bot(fun____error),4); ((RSP_0 -64 68),4) SEP (bot(fun__malloc),8); ((RSP_0 -64 68),4) SEP (RDI_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 68),4) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 68),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 68),4) SEP (0x10000c010,8); ((RSP_0 -64 68),4) SEP (0x10000c020,8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 68),4) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 68),4) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__fputc) ; RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066ba: MOV EAX, DWORD PTR [RBP - 60] 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 88 ##
######################################
*)

htriple "ht_1000066bd"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066bd: CMP EAX, 18446744073709551586 3"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000066c0"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066c0: JNE 4294992669 6"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 89 ##
######################################
*)

htriple "ht_1000066c6"
 Separations ""
 Assertions  ""
 Pre   "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "1000066c6: JMP 4294993655 2"
 Post  "RBX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 90 ##
######################################
*)

htriple "ht_100006319"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006319: LEA R15, [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 91 ##
######################################
*)

htriple "ht_100006703"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006703: MOV EBX, EAX 2"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006705"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006705: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_close)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006708"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_close) ; RBX = b32(bot(fun__archive_read_close)) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006708: ExternalCall fun__archive_error_string 5"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_error_string {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000670d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000670d: LEA RSI, [RIP + 20829] 7"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006714"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006714: XOR EDI, EDI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006716"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006716: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006719"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RBX = b32(bot(fun__archive_read_close)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006719: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = b32(bot(fun__archive_read_close)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000671b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = b32(bot(fun__archive_read_close)) ; RDX = bot(fun__archive_error_string) ; RDI = 0 ; RSI = 0x10000b871 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000671b: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006720"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006720: CMP EBX, 18446744073709551596 3"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006723"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006723: JG 4294993712 2"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 92 ##
######################################
*)

htriple "ht_100006730"
 Separations "((RDI_0 +64 32),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 32),4) SEP (RSP_0,8); ((RDI_0 +64 32),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 32),4) SEP (0x10000c010,8); ((RDI_0 +64 32),4) SEP (0x10000c020,8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 32),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 32),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006730: CMP DWORD PTR [R13 + 32], 3 5"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006735"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006735: JL 4294993773 2"
 Post  "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 93 ##
######################################
*)

htriple "ht_100006725"
 Separations "((RDI_0 +64 180),4) SEP (bot(fun____error),4); ((RDI_0 +64 180),4) SEP (bot(fun__malloc),8); ((RDI_0 +64 180),4) SEP (RSP_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 180),4) SEP ([0x10000c020,8]_0,8); ((RDI_0 +64 180),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 180),4) SEP (0x10000c010,8); ((RDI_0 +64 180),4) SEP (0x10000c020,8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 8),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 16),8); ((RDI_0 +64 180),4) SEP ((bot(fun__malloc) +64 21),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 68),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 72),4); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 88),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 96),8); ((RDI_0 +64 180),4) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006725: MOV DWORD PTR [R13 + 180], 1 11"
 Post  "RAX = bot(fun_0x1000099ad) ; RBX = b32(bot(fun__archive_read_close)) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RDI_0 +64 180),4] = 1 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 94 ##
######################################
*)

htriple "ht_100006737"
 Separations "(0x10000c020,8) SEP (bot(fun____error),4); (0x10000c020,8) SEP (bot(fun__malloc),8); (0x10000c020,8) SEP (RDI_0,8); (0x10000c020,8) SEP (RSP_0,8); (0x10000c020,8) SEP ([0x10000c010,8]_0,8); (0x10000c020,8) SEP ([0x10000c020,8]_0,8); (0x10000c020,8) SEP ([(RDI_0 +64 144),8]_0,8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 8),8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 16),8); (0x10000c020,8) SEP ((bot(fun__malloc) +64 21),8); (0x10000c020,8) SEP ((RDI_0 +64 16),8); (0x10000c020,8) SEP ((RDI_0 +64 24),4); (0x10000c020,8) SEP ((RDI_0 +64 32),4); (0x10000c020,8) SEP ((RDI_0 +64 36),4); (0x10000c020,8) SEP ((RDI_0 +64 52),4); (0x10000c020,8) SEP ((RDI_0 +64 56),8); (0x10000c020,8) SEP ((RDI_0 +64 64),4); (0x10000c020,8) SEP ((RDI_0 +64 72),8); (0x10000c020,8) SEP ((RDI_0 +64 80),8); (0x10000c020,8) SEP ((RDI_0 +64 96),8); (0x10000c020,8) SEP ((RDI_0 +64 112),8); (0x10000c020,8) SEP ((RDI_0 +64 144),8); (0x10000c020,8) SEP ((RDI_0 +64 180),4); (0x10000c020,8) SEP ((RDI_0 +64 248),8); (0x10000c020,8) SEP ((RSP_0 -64 8),8); (0x10000c020,8) SEP ((RSP_0 -64 16),8); (0x10000c020,8) SEP ((RSP_0 -64 24),8); (0x10000c020,8) SEP ((RSP_0 -64 32),8); (0x10000c020,8) SEP ((RSP_0 -64 40),8); (0x10000c020,8) SEP ((RSP_0 -64 48),8); (0x10000c020,8) SEP ((RSP_0 -64 64),8); (0x10000c020,8) SEP ((RSP_0 -64 68),4); (0x10000c020,8) SEP ((RSP_0 -64 72),4); (0x10000c020,8) SEP ((RSP_0 -64 80),8); (0x10000c020,8) SEP ((RSP_0 -64 88),8); (0x10000c020,8) SEP ((RSP_0 -64 96),8); (0x10000c020,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006737: MOV RAX, QWORD PTR [RIP + 22754] 7"
 Post  "RAX = [0x10000c020,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000673e"
 Separations "([0x10000c020,8]_0,8) SEP (bot(fun__malloc),8); ([0x10000c020,8]_0,8) SEP (RSP_0,8); ([0x10000c020,8]_0,8) SEP ([(RDI_0 +64 144),8]_0,8); ([0x10000c020,8]_0,8) SEP (0x10000c010,8); ([0x10000c020,8]_0,8) SEP (0x10000c020,8); ([0x10000c020,8]_0,8) SEP ((bot(fun__malloc) +64 8),8); ([0x10000c020,8]_0,8) SEP ((bot(fun__malloc) +64 16),8); ([0x10000c020,8]_0,8) SEP ((bot(fun__malloc) +64 21),8); ([0x10000c020,8]_0,8) SEP ((RDI_0 +64 144),8); ([0x10000c020,8]_0,8) SEP ((RDI_0 +64 180),4); ([0x10000c020,8]_0,8) SEP ((RDI_0 +64 248),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 64),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 68),4); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 72),4); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 80),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 88),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 96),8); ([0x10000c020,8]_0,8) SEP ((RSP_0 -64 104),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c020,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R15 = (RSP_0 -64 56) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000673e: MOV R15, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c020,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006741"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c020,8]_0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006741: MOV RDI, R14 3"
 Post  "RAX = [0x10000c020,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006744"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c020,8]_0 ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006744: ExternalCall fun__archive_format_name 5"
 Post  "RAX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_format_name {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006749"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006749: MOV RBX, RAX 3"
 Post  "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000674c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000674c: MOV RDI, R14 3"
 Post  "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000674f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000674f: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RDI = bot(fun__archive_read_new) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006751"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_format_name) ; RBX = bot(fun__archive_format_name) ; RDI = bot(fun__archive_read_new) ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006751: ExternalCall fun__archive_filter_name 5"
 Post  "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_filter_name {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006756"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006756: LEA RSI, [RIP + 20933] 7"
 Post  "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000675d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000675d: MOV RDI, R15 3"
 Post  "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006760"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006760: MOV RDX, RBX 3"
 Post  "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006763"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006763: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RCX = bot(fun__archive_filter_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006766"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_filter_name) ; RBX = bot(fun__archive_format_name) ; RCX = bot(fun__archive_filter_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006766: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = bot(fun__archive_format_name) ; RCX = bot(fun__archive_filter_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006768"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = bot(fun__archive_format_name) ; RCX = bot(fun__archive_filter_name) ; RDX = bot(fun__archive_format_name) ; RSI = 0x10000b922 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006768: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RBX = bot(fun__archive_format_name) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 95 ##
######################################
*)

htriple "ht_10000676d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000676d: MOV RDI, R14 3"
 Post  "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006770"
 Separations ""
 Assertions  ""
 Pre   "RDI = bot(fun__archive_read_new) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006770: ExternalCall fun__archive_read_free 5"
 Post  "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun__archive_read_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006775"
 Separations "((RSP_0 -64 64),8) SEP (bot(fun____error),4); ((RSP_0 -64 64),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 64),8) SEP (RDI_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 64),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP (0x10000c010,8); ((RSP_0 -64 64),8) SEP (0x10000c020,8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 64),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006775: MOV RDI, QWORD PTR [RBP - 56] 4"
 Post  "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006779"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006779: TEST RDI, RDI 3"
 Post  "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000677c"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000677c: JE 4294993795 2"
 Post  "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 96 ##
######################################
*)

htriple "ht_10000677e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_read_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000677e: ExternalCall fun___qtn_file_free 5"
 Post  "RAX = bot(fun___qtn_file_free) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 FunctionConstraints "PRESERVES fun___qtn_file_free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 97 ##
######################################
*)

htriple "ht_100006783"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006783: ADD RSP, 56 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006787"
 Separations "((RSP_0 -64 40),8) SEP (bot(fun____error),4); ((RSP_0 -64 40),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 40),8) SEP (RDI_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP (0x10000c020,8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 40),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006787: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006788"
 Separations "((RSP_0 -64 32),8) SEP (bot(fun____error),4); ((RSP_0 -64 32),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 32),8) SEP (RDI_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP (0x10000c020,8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 32),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = b32(RSI_0) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006788: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000678a"
 Separations "((RSP_0 -64 24),8) SEP (bot(fun____error),4); ((RSP_0 -64 24),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 24),8) SEP (RDI_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP (0x10000c020,8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 24),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000678a: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000678c"
 Separations "((RSP_0 -64 16),8) SEP (bot(fun____error),4); ((RSP_0 -64 16),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 16),8) SEP (RDI_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP (0x10000c020,8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 16),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000678c: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000678e"
 Separations "((RSP_0 -64 8),8) SEP (bot(fun____error),4); ((RSP_0 -64 8),8) SEP (bot(fun__malloc),8); ((RSP_0 -64 8),8) SEP (RDI_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c020,8]_0,8); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP (0x10000c020,8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 8),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 16),8); ((RSP_0 -64 8),8) SEP ((bot(fun__malloc) +64 21),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 16),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 24),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 32),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 36),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 52),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 56),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 64),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 72),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 80),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 96),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 112),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 180),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 248),8)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "10000678e: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006790"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006790: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006791"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
 Instruction "100006791: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 98 ##
######################################
*)

htriple "ht_1000067a5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067a5: MOV EDI, 1 5"
 Post  "RAX = bot(fun__archive_error_string) ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067aa"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067aa: XOR ESI, ESI 2"
 Post  "RAX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067ac"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067ac: MOV RCX, RAX 3"
 Post  "RAX = bot(fun__archive_error_string) ; RCX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067af"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__archive_error_string) ; RCX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067af: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RCX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RCX = bot(fun__archive_error_string) ; RDI = 1 ; RSI = 0 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 Instruction "1000067b1: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0 ; [(RSP_0 -64 96),8] = [(RSP_0 -64 96),8]_0 ; [(RSP_0 -64 104),8] = [(RSP_0 -64 104),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 1000060ca, blockId == 99 ##
######################################
*)

htriple "ht_1000067f6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000067f6: MOV EDI, 1 5"
 Post  "RAX = bot(fun____error) ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067fb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun____error) ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000067fb: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000067fd"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 1 ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "1000067fd: ExternalCall fun_0x100009ac2 5"
 Post  "RAX = bot(fun_0x100009ac2) ; RSP = (RSP_0 -64 104) ; RBP = (RSP_0 -64 8) ; R14 = bot(fun__archive_read_new) ; R13 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [0x10000c020,8] = [0x10000c020,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 68),4] = [(RSP_0 -64 68),4]_0 ; [(RSP_0 -64 72),4] = b32(RSI_0) ; [(RSP_0 -64 80),8] = RDX_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x100009ac2 {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c010,8];[0x10000c020,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 64),8];[(RSP_0 -64 68),4];[(RSP_0 -64 72),4];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8];[(RSP_0 -64 96),8];[(RSP_0 -64 104),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
