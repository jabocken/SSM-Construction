theory tar_100006d49
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100006d49, blockId == 0 ##
#####################################
*)

htriple "ht_100006d49"
 Separations "((RSP_0 -64 8),8) SEP (RDX_0,8); ((RSP_0 -64 8),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 8),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d49: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d4a"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d4a: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d4d"
 Separations "((RSP_0 -64 16),8) SEP (RDX_0,8); ((RSP_0 -64 16),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 16),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d4d: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d4f"
 Separations "((RSP_0 -64 24),8) SEP (RDX_0,8); ((RSP_0 -64 24),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 24),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d4f: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d51"
 Separations "((RSP_0 -64 32),8) SEP (RDX_0,8); ((RSP_0 -64 32),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 32),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d51: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d53"
 Separations "((RSP_0 -64 40),8) SEP (RDX_0,8); ((RSP_0 -64 40),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 40),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d53: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d55"
 Separations "((RSP_0 -64 48),8) SEP (RDX_0,8); ((RSP_0 -64 48),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 48),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 48),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 48),8) SEP (0x10000c008,8); ((RSP_0 -64 48),8) SEP (0x10000c010,8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 48),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d55: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d56"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d56: SUB RSP, 216 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d5d"
 Separations "((RSP_0 -64 228),4) SEP (RDX_0,8); ((RSP_0 -64 228),4) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 228),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 228),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 228),4) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 228),4) SEP (0x10000c008,8); ((RSP_0 -64 228),4) SEP (0x10000c010,8); ((RSP_0 -64 228),4) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 228),4) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = [(RSP_0 -64 228),4]_0 ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d5d: MOV DWORD PTR [RBP - 220], R8D 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d64"
 Separations "((RSP_0 -64 232),4) SEP (RDX_0,8); ((RSP_0 -64 232),4) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 232),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 232),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 232),4) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 232),4) SEP (0x10000c008,8); ((RSP_0 -64 232),4) SEP (0x10000c010,8); ((RSP_0 -64 232),4) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 232),4) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = [(RSP_0 -64 232),4]_0 ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d64: MOV DWORD PTR [RBP - 224], ECX 6"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d6a"
 Separations "((RSP_0 -64 240),8) SEP (RDX_0,8); ((RSP_0 -64 240),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 240),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 240),8) SEP (0x10000c008,8); ((RSP_0 -64 240),8) SEP (0x10000c010,8); ((RSP_0 -64 240),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 240),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = [(RSP_0 -64 240),8]_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d6a: MOV QWORD PTR [RBP - 232], RSI 7"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d71"
 Separations "(0x10000c008,8) SEP (RDX_0,8); (0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ([0x10000c010,8]_0,8); (0x10000c008,8) SEP ([(RDI_0 +64 280),8]_0,8); (0x10000c008,8) SEP ((RDI_0 +64 280),8); (0x10000c008,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 224),8); (0x10000c008,8) SEP ((RSP_0 -64 228),4); (0x10000c008,8) SEP ((RSP_0 -64 232),4); (0x10000c008,8) SEP ((RSP_0 -64 240),8); (0x10000c008,8) SEP ((RSP_0 -64 248),8); (0x10000c008,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d71: MOV RAX, QWORD PTR [RIP + 21136] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d78"
 Separations "([0x10000c008,8]_0,8) SEP (RDX_0,8); ([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ([0x10000c008,8]_0,8) SEP ([0x10000c010,8]_0,8); ([0x10000c008,8]_0,8) SEP ([(RDI_0 +64 280),8]_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP (0x10000c010,8); ([0x10000c008,8]_0,8) SEP ((RDI_0 +64 280),8); ([0x10000c008,8]_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 208),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 224),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 228),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 240),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 248),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d78: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d7b"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 56),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [(RSP_0 -64 56),8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d7b: MOV QWORD PTR [RBP - 48], RAX 4"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d7f"
 Separations "(RDX_0,8) SEP (RSP_0,8); (RDX_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (RDX_0,8) SEP ([0x10000c008,8]_0,8); (RDX_0,8) SEP ([0x10000c010,8]_0,8); (RDX_0,8) SEP ([(RDI_0 +64 280),8]_0,8); (RDX_0,8) SEP (0x10000c008,8); (RDX_0,8) SEP (0x10000c010,8); (RDX_0,8) SEP ((RDI_0 +64 280),8); (RDX_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (RDX_0,8) SEP ((RSP_0 -64 8),8); (RDX_0,8) SEP ((RSP_0 -64 16),8); (RDX_0,8) SEP ((RSP_0 -64 24),8); (RDX_0,8) SEP ((RSP_0 -64 32),8); (RDX_0,8) SEP ((RSP_0 -64 40),8); (RDX_0,8) SEP ((RSP_0 -64 48),8); (RDX_0,8) SEP ((RSP_0 -64 56),8); (RDX_0,8) SEP ((RSP_0 -64 208),8); (RDX_0,8) SEP ((RSP_0 -64 216),8); (RDX_0,8) SEP ((RSP_0 -64 224),8); (RDX_0,8) SEP ((RSP_0 -64 228),4); (RDX_0,8) SEP ((RSP_0 -64 232),4); (RDX_0,8) SEP ((RSP_0 -64 240),8); (RDX_0,8) SEP ((RSP_0 -64 248),8); (RDX_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = [RDX_0,8]_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d7f: MOV QWORD PTR [RDX], 0 7"
 Post  "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d86"
 Separations "((RDI_0 +64 280),8) SEP (RDX_0,8); ((RDI_0 +64 280),8) SEP (RSP_0,8); ((RDI_0 +64 280),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RDI_0 +64 280),8) SEP ([0x10000c008,8]_0,8); ((RDI_0 +64 280),8) SEP ([0x10000c010,8]_0,8); ((RDI_0 +64 280),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RDI_0 +64 280),8) SEP (0x10000c008,8); ((RDI_0 +64 280),8) SEP (0x10000c010,8); ((RDI_0 +64 280),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 56),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 208),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 216),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 224),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 228),4); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 232),4); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 240),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 248),8); ((RDI_0 +64 280),8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [[0x10000c008,8]_0,8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d86: MOV RAX, QWORD PTR [RDI + 280] 7"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d8d"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d8d: XOR EBX, EBX 2"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d8f"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d8f: TEST RAX, RAX 3"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d92"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d92: JE 4294995877 6"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 1 ##
#####################################
*)

htriple "ht_100006d98"
 Separations "([(RDI_0 +64 280),8]_0,8) SEP (RDX_0,8); ([(RDI_0 +64 280),8]_0,8) SEP (RSP_0,8); ([(RDI_0 +64 280),8]_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ([(RDI_0 +64 280),8]_0,8) SEP ([0x10000c008,8]_0,8); ([(RDI_0 +64 280),8]_0,8) SEP ([0x10000c010,8]_0,8); ([(RDI_0 +64 280),8]_0,8) SEP (0x10000c008,8); ([(RDI_0 +64 280),8]_0,8) SEP (0x10000c010,8); ([(RDI_0 +64 280),8]_0,8) SEP ((RDI_0 +64 280),8); ([(RDI_0 +64 280),8]_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 8),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 16),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 24),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 32),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 40),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 48),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 56),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 208),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 216),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 224),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 228),4); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 232),4); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 240),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 248),8); ([(RDI_0 +64 280),8]_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d98: MOV R15, QWORD PTR [RAX] 3"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d9b"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d9b: TEST R15, R15 3"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006d9e"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006d9e: JE 4294995877 6"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 2 ##
#####################################
*)

htriple "ht_100006fa5"
 Separations "(0x10000c008,8) SEP (RDX_0,8); (0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ([0x10000c010,8]_0,8); (0x10000c008,8) SEP ([(RDI_0 +64 280),8]_0,8); (0x10000c008,8) SEP ((RDI_0 +64 280),8); (0x10000c008,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 48),8); (0x10000c008,8) SEP ((RSP_0 -64 56),8); (0x10000c008,8) SEP ((RSP_0 -64 224),8); (0x10000c008,8) SEP ((RSP_0 -64 228),4); (0x10000c008,8) SEP ((RSP_0 -64 232),4); (0x10000c008,8) SEP ((RSP_0 -64 240),8); (0x10000c008,8) SEP ((RSP_0 -64 248),8); (0x10000c008,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fa5: MOV RAX, QWORD PTR [RIP + 20572] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fac"
 Separations "([0x10000c008,8]_0,8) SEP (RDX_0,8); ([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ([0x10000c008,8]_0,8) SEP ([0x10000c010,8]_0,8); ([0x10000c008,8]_0,8) SEP ([(RDI_0 +64 280),8]_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP (0x10000c010,8); ([0x10000c008,8]_0,8) SEP ((RDI_0 +64 280),8); ([0x10000c008,8]_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 208),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 216),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 224),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 228),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 232),4); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 240),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 248),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fac: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006faf"
 Separations "((RSP_0 -64 56),8) SEP (RDX_0,8); ((RSP_0 -64 56),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 56),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 56),8) SEP (0x10000c008,8); ((RSP_0 -64 56),8) SEP (0x10000c010,8); ((RSP_0 -64 56),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 56),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006faf: CMP RAX, QWORD PTR [RBP - 48] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fb3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fb3: JNE 4294995978 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 3 ##
#####################################
*)

htriple "ht_100006da4"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006da4: MOV R12, RDX 3"
 Post  "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006da7"
 Separations ""
 Assertions  ""
 Pre   "RAX = [(RDI_0 +64 280),8]_0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006da7: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006da9"
 Separations "((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 224),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 224),8) SEP (0x10000c008,8); ((RSP_0 -64 224),8) SEP (0x10000c010,8); ((RSP_0 -64 224),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 224),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = [(RSP_0 -64 224),8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006da9: MOV QWORD PTR [RBP - 216], RAX 7"
 Post  "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = 0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006db0"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = 0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006db0: XOR EBX, EBX 2"
 Post  "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = 0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006db2"
 Separations "((RSP_0 -64 240),8) SEP (RDX_0,8); ((RSP_0 -64 240),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 240),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 240),8) SEP (0x10000c008,8); ((RSP_0 -64 240),8) SEP (0x10000c010,8); ((RSP_0 -64 240),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 240),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = 0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
 Instruction "100006db2: MOV R13, QWORD PTR [RBP - 232] 7"
 Post  "RAX = 0 ; RBX = 0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R15 = [[(RDI_0 +64 280),8]_0,8]_0 ; R14 = R14_0 ; R13 = RSI_0 ; R12 = RDX_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [[(RDI_0 +64 280),8]_0,8] = [[(RDI_0 +64 280),8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RDI_0 +64 280),8] = [(RDI_0 +64 280),8]_0 ; [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1] = [([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 224),8] = 0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0 ; [(RSP_0 -64 248),8] = [(RSP_0 -64 248),8]_0 ; [(RSP_0 -64 256),8] = [(RSP_0 -64 256),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 4 ##
#####################################
*)

htriple "ht_100006dc6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dc6: TEST AL, 8 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dc8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dc8: JNE 4294995423 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 5 ##
#####################################
*)

htriple "ht_100006dcc"
 Separations "((RSP_0 -64 228),4) SEP (RDX_0,8); ((RSP_0 -64 228),4) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 228),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 228),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 228),4) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 228),4) SEP (0x10000c008,8); ((RSP_0 -64 228),4) SEP (0x10000c010,8); ((RSP_0 -64 228),4) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 228),4) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dcc: CMP DWORD PTR [RBP - 220], 0 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dd3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dd3: JE 4294995419 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 6 ##
#####################################
*)

htriple "ht_100006dca"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dca: JMP 4294995468 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 7 ##
#####################################
*)

htriple "ht_100006ddf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ddf: LEA RDI, [R15 + 8] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006de3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006de3: MOV EDX, 10 5"
 Post  "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006de8"
 Separations "((RSP_0 -64 256),8) SEP (RDX_0,8); ((RSP_0 -64 256),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 256),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP (0x10000c010,8); ((RSP_0 -64 256),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 256),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006de8: MOV QWORD PTR [RBP - 248], RDI 7"
 Post  "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006def"
 Separations ""
 Assertions  ""
 Pre   "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006def: MOV RSI, R13 3"
 Post  "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006df2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006df2: LEA RCX, [RBP - 208] 7"
 Post  "RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006df9"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006df9: XOR R8D, R8D 3"
 Post  "RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dfc"
 Separations ""
 Assertions  ""
 Pre   "RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dfc: ExternalCall fun__regexec 5"
 Post  "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__regexec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e01"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e01: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e03"
 Separations "((RSP_0 -64 248),8) SEP (RDX_0,8); ((RSP_0 -64 248),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 248),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 248),8) SEP (0x10000c008,8); ((RSP_0 -64 248),8) SEP (0x10000c010,8); ((RSP_0 -64 248),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 248),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e03: MOV QWORD PTR [RBP - 240], R15 7"
 Post  "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e0a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e0a: JE 4294995481 2"
 Post  "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 8 ##
#####################################
*)

htriple "ht_100006dd5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dd5: TEST AL, 16 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dd7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dd7: JNE 4294995423 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100006d49, blockId == 9 ##
#####################################
*)

htriple "ht_100006ddb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ddb: TEST AL, 4 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ddd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ddd: JE 4294995468 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 10 ##
######################################
*)

htriple "ht_100006dd9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dd9: JMP 4294995468 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 11 ##
######################################
*)

htriple "ht_100006e0c"
 Separations ""
 Assertions  "(R15,8) SEP (RSP_0,8); (R15,8) SEP ((RSP_0 -64 8),8); (R15,8) SEP ((RSP_0 -64 16),8); (R15,8) SEP ((RSP_0 -64 24),8); (R15,8) SEP ((RSP_0 -64 32),8); (R15,8) SEP ((RSP_0 -64 40),8); (R15,8) SEP ((RSP_0 -64 48),8); (R15,8) SEP ((RSP_0 -64 56),8); (R15,8) SEP ((RSP_0 -64 224),8); (R15,8) SEP ((RSP_0 -64 228),4); (R15,8) SEP ((RSP_0 -64 232),4); (R15,8) SEP ((RSP_0 -64 240),8); (R15,8) SEP ((RSP_0 -64 248),8); (R15,8) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e0c: MOV R15, QWORD PTR [R15] 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e0f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e0f: TEST R15, R15 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e12"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e12: JNE 4294995385 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 12 ##
######################################
*)

htriple "ht_100006e19"
 Separations "((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 224),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 224),8) SEP (0x10000c008,8); ((RSP_0 -64 224),8) SEP (0x10000c010,8); ((RSP_0 -64 224),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 224),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e19: MOV RAX, QWORD PTR [RBP - 216] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e20"
 Separations ""
 Assertions  "((R15 +64 48),4) SEP (RSP_0,8); ((R15 +64 48),4) SEP ((RSP_0 -64 8),8); ((R15 +64 48),4) SEP ((RSP_0 -64 16),8); ((R15 +64 48),4) SEP ((RSP_0 -64 24),8); ((R15 +64 48),4) SEP ((RSP_0 -64 32),8); ((R15 +64 48),4) SEP ((RSP_0 -64 40),8); ((R15 +64 48),4) SEP ((RSP_0 -64 48),8); ((R15 +64 48),4) SEP ((RSP_0 -64 56),8); ((R15 +64 48),4) SEP ((RSP_0 -64 224),8); ((R15 +64 48),4) SEP ((RSP_0 -64 228),4); ((R15 +64 48),4) SEP ((RSP_0 -64 232),4); ((R15 +64 48),4) SEP ((RSP_0 -64 240),8); ((R15 +64 48),4) SEP ((RSP_0 -64 248),8); ((R15 +64 48),4) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e20: MOV ECX, DWORD PTR [R15 + 48] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e24"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e24: SHR ECX, 1 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e26"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e26: AND ECX, 1 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e29"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e29: OR ECX, EAX 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e2b"
 Separations "((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 224),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 224),8) SEP (0x10000c008,8); ((RSP_0 -64 224),8) SEP (0x10000c010,8); ((RSP_0 -64 224),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 224),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e2b: MOV QWORD PTR [RBP - 216], RCX 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e32"
 Separations "((RSP_0 -64 216),8) SEP (RDX_0,8); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 216),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 216),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 216),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e32: MOV RDX, QWORD PTR [RBP - 208] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e39"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e39: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e3c"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e3c: MOV RSI, R13 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e3f"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e3f: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e44"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e44: XOR EBX, EBX 2"
 Post  "RAX = bot(fun_0x10000700f) ; RBX = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e46"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RBX = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e46: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RBX = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 13 ##
######################################
*)

htriple "ht_100006db9"
 Separations ""
 Assertions  "((R15 +64 48),1) SEP (RSP_0,8); ((R15 +64 48),1) SEP ((RSP_0 -64 8),8); ((R15 +64 48),1) SEP ((RSP_0 -64 16),8); ((R15 +64 48),1) SEP ((RSP_0 -64 24),8); ((R15 +64 48),1) SEP ((RSP_0 -64 32),8); ((R15 +64 48),1) SEP ((RSP_0 -64 40),8); ((R15 +64 48),1) SEP ((RSP_0 -64 48),8); ((R15 +64 48),1) SEP ((RSP_0 -64 56),8); ((R15 +64 48),1) SEP ((RSP_0 -64 224),8); ((R15 +64 48),1) SEP ((RSP_0 -64 228),4); ((R15 +64 48),1) SEP ((RSP_0 -64 232),4); ((R15 +64 48),1) SEP ((RSP_0 -64 240),8); ((R15 +64 48),1) SEP ((RSP_0 -64 248),8); ((R15 +64 48),1) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006db9: MOV AL, BYTE PTR [R15 + 48] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dbd"
 Separations "((RSP_0 -64 232),4) SEP (RDX_0,8); ((RSP_0 -64 232),4) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 232),4) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 232),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 232),4) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 232),4) SEP (0x10000c008,8); ((RSP_0 -64 232),4) SEP (0x10000c010,8); ((RSP_0 -64 232),4) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 232),4) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dbd: CMP DWORD PTR [RBP - 224], 0 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006dc4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006dc4: JE 4294995404 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 14 ##
######################################
*)

htriple "ht_100006e14"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e14: JMP 4294995913 5"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc9: TEST EBX, EBX 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fcb"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fcb: JE 4294995930 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 15 ##
######################################
*)

htriple "ht_100006e54"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e54: CMP CL, 126 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e57"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e57: JE 4294995681 6"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 16 ##
######################################
*)

htriple "ht_100006e6a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e6a: LEA R14, [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e6e"
 Separations ""
 Assertions  "((RSI +64 (RBX +64 1)),1) SEP (RSP_0,8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 8),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 16),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 24),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 32),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 40),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 48),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 56),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 224),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 228),4); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 232),4); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 240),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 248),8); ((RSI +64 (RBX +64 1)),1) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e6e: MOVSX ECX, BYTE PTR [RSI + RBX + 1] 5"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e73"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e73: LEA EDX, [RCX - 49] 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e76"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e76: CMP EDX, 9 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e79"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e79: JAE 4294995746 6"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 17 ##
######################################
*)

htriple "ht_100006e5d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e5d: TEST CL, CL 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e5f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e5f: JNE 4294995732 6"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 18 ##
######################################
*)

htriple "ht_100006ee1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ee1: ADD RSI, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ee4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ee4: MOV RDX, RBX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ee7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ee7: SUB RDX, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006eea"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006eea: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006eed"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006eed: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ef2"
 Separations "((RSP_0 -64 216),8) SEP (RDX_0,8); ((RSP_0 -64 216),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 216),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 216),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 216),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ef2: MOV RAX, QWORD PTR [RBP - 208] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ef9"
 Separations "((RSP_0 -64 208),8) SEP (RDX_0,8); ((RSP_0 -64 208),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 208),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 208),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 208),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ef9: MOV RDX, QWORD PTR [RBP - 200] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f00"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f00: LEA RSI, [R13 + RAX] 5"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f05"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f05: SUB RDX, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f08"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f08: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f0b"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f0b: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f10"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f10: LEA RAX, [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 19 ##
######################################
*)

htriple "ht_100006e65"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e65: JMP 4294995778 5"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f42"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f42: ADD RSI, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f45"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f45: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f48"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f48: ExternalCall fun_0x1000070bd 5"
 Post  "RAX = bot(fun_0x1000070bd) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x1000070bd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f4d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f4d: MOV EBX, 1 5"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f52"
 Separations "((RSP_0 -64 208),8) SEP (RDX_0,8); ((RSP_0 -64 208),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 208),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 208),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 208),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f52: ADD R13, QWORD PTR [RBP - 200] 7"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f59"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f59: TEST BYTE PTR [R15 + 48], 1 5"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f5e: JE 4294995468 6"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 20 ##
######################################
*)

htriple "ht_100006f14"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f14: MOV R14, RBX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 21 ##
######################################
*)

htriple "ht_100006e7f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e7f: MOV R15, R13 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e82"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e82: MOVSXD R13, ECX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e85"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e85: ADD RSI, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e88"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e88: MOV RDX, RBX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e8b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e8b: SUB RDX, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e8e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e8e: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e91"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e91: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e96: ADD R13, 18446744073709551568 4"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e9a"
 Separations "((RSP_0 -64 248),8) SEP (RDX_0,8); ((RSP_0 -64 248),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 248),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 248),8) SEP (0x10000c008,8); ((RSP_0 -64 248),8) SEP (0x10000c010,8); ((RSP_0 -64 248),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 248),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e9a: MOV RAX, QWORD PTR [RBP - 240] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ea1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ea1: CMP QWORD PTR [RAX + 16], R13 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ea5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ea5: JB 4294995855 6"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 22 ##
######################################
*)

htriple "ht_100006f22"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f22: CMP ECX, 126 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f25"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f25: JE 4294995756 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 23 ##
######################################
*)

htriple "ht_100006eab"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006eab: SHL R13, 4 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006eaf"
 Separations ""
 Assertions  "((RSP_0 -64 (216 -64 R13)),8) SEP (RSP_0,8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 224),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 228),4); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 232),4); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 240),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 248),8); ((RSP_0 -64 (216 -64 R13)),8) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006eaf: MOV RAX, QWORD PTR [RBP + R13 - 208] 8"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006eb7"
 Separations ""
 Assertions  "((RSP_0 -64 (208 -64 R13)),8) SEP (RSP_0,8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 8),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 16),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 24),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 32),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 40),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 48),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 56),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 224),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 228),4); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 232),4); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 240),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 248),8); ((RSP_0 -64 (208 -64 R13)),8) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006eb7: MOV RDX, QWORD PTR [RBP + R13 - 200] 8"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ebf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ebf: MOV R13, R15 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ec2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ec2: LEA RSI, [R15 + RAX] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ec6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ec6: SUB RDX, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ec9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ec9: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ecc"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ecc: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ed1"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ed1: ADD RBX, 2 4"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ed5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ed5: MOV RAX, RBX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ed8"
 Separations "((RSP_0 -64 248),8) SEP (RDX_0,8); ((RSP_0 -64 248),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 248),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 248),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 248),8) SEP (0x10000c008,8); ((RSP_0 -64 248),8) SEP (0x10000c010,8); ((RSP_0 -64 248),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 248),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ed8: MOV R15, QWORD PTR [RBP - 240] 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006edf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006edf: JMP 4294995735 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 24 ##
######################################
*)

htriple "ht_100006f8f"
 Separations "(RDX_0,8) SEP (RSP_0,8); (RDX_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (RDX_0,8) SEP ([0x10000c008,8]_0,8); (RDX_0,8) SEP ([0x10000c010,8]_0,8); (RDX_0,8) SEP ([(RDI_0 +64 280),8]_0,8); (RDX_0,8) SEP (0x10000c008,8); (RDX_0,8) SEP (0x10000c010,8); (RDX_0,8) SEP ((RDI_0 +64 280),8); (RDX_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (RDX_0,8) SEP ((RSP_0 -64 8),8); (RDX_0,8) SEP ((RSP_0 -64 16),8); (RDX_0,8) SEP ((RSP_0 -64 24),8); (RDX_0,8) SEP ((RSP_0 -64 32),8); (RDX_0,8) SEP ((RSP_0 -64 40),8); (RDX_0,8) SEP ((RSP_0 -64 48),8); (RDX_0,8) SEP ((RSP_0 -64 56),8); (RDX_0,8) SEP ((RSP_0 -64 208),8); (RDX_0,8) SEP ((RSP_0 -64 216),8); (RDX_0,8) SEP ((RSP_0 -64 224),8); (RDX_0,8) SEP ((RSP_0 -64 228),4); (RDX_0,8) SEP ((RSP_0 -64 232),4); (RDX_0,8) SEP ((RSP_0 -64 240),8); (RDX_0,8) SEP ((RSP_0 -64 248),8); (RDX_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f8f: MOV RDI, QWORD PTR [R12] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f93"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f93: ExternalCall fun__free 5"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__free {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f98"
 Separations "(RDX_0,8) SEP (RSP_0,8); (RDX_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (RDX_0,8) SEP ([0x10000c008,8]_0,8); (RDX_0,8) SEP ([0x10000c010,8]_0,8); (RDX_0,8) SEP ([(RDI_0 +64 280),8]_0,8); (RDX_0,8) SEP (0x10000c008,8); (RDX_0,8) SEP (0x10000c010,8); (RDX_0,8) SEP ((RDI_0 +64 280),8); (RDX_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (RDX_0,8) SEP ((RSP_0 -64 8),8); (RDX_0,8) SEP ((RSP_0 -64 16),8); (RDX_0,8) SEP ((RSP_0 -64 24),8); (RDX_0,8) SEP ((RSP_0 -64 32),8); (RDX_0,8) SEP ((RSP_0 -64 40),8); (RDX_0,8) SEP ((RSP_0 -64 48),8); (RDX_0,8) SEP ((RSP_0 -64 56),8); (RDX_0,8) SEP ((RSP_0 -64 208),8); (RDX_0,8) SEP ((RSP_0 -64 216),8); (RDX_0,8) SEP ((RSP_0 -64 224),8); (RDX_0,8) SEP ((RSP_0 -64 228),4); (RDX_0,8) SEP ((RSP_0 -64 232),4); (RDX_0,8) SEP ((RSP_0 -64 240),8); (RDX_0,8) SEP ((RSP_0 -64 248),8); (RDX_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f98: MOV QWORD PTR [R12], 0 8"
 Post  "RAX = bot(fun__free) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fa0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__free) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fa0: MOV EBX, 4294967295 5"
 Post  "RAX = bot(fun__free) ; RBX = 0xffffffff ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RDX_0,8] = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 25 ##
######################################
*)

htriple "ht_100006f17"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f17: INC R14 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f1a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f1a: MOV RBX, R14 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f1d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f1d: JMP 4294995528 5"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 26 ##
######################################
*)

htriple "ht_100006e48"
 Separations ""
 Assertions  "((R15 +64 40),8) SEP (RSP_0,8); ((R15 +64 40),8) SEP ((RSP_0 -64 8),8); ((R15 +64 40),8) SEP ((RSP_0 -64 16),8); ((R15 +64 40),8) SEP ((RSP_0 -64 24),8); ((R15 +64 40),8) SEP ((RSP_0 -64 32),8); ((R15 +64 40),8) SEP ((RSP_0 -64 40),8); ((R15 +64 40),8) SEP ((RSP_0 -64 48),8); ((R15 +64 40),8) SEP ((RSP_0 -64 56),8); ((R15 +64 40),8) SEP ((RSP_0 -64 224),8); ((R15 +64 40),8) SEP ((RSP_0 -64 228),4); ((R15 +64 40),8) SEP ((RSP_0 -64 232),4); ((R15 +64 40),8) SEP ((RSP_0 -64 240),8); ((R15 +64 40),8) SEP ((RSP_0 -64 248),8); ((R15 +64 40),8) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e48: MOV RSI, QWORD PTR [R15 + 40] 4"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e4c"
 Separations ""
 Assertions  "(RSI,1) SEP (RSP_0,8); (RSI,1) SEP ((RSP_0 -64 8),8); (RSI,1) SEP ((RSP_0 -64 16),8); (RSI,1) SEP ((RSP_0 -64 24),8); (RSI,1) SEP ((RSP_0 -64 32),8); (RSI,1) SEP ((RSP_0 -64 40),8); (RSI,1) SEP ((RSP_0 -64 48),8); (RSI,1) SEP ((RSP_0 -64 56),8); (RSI,1) SEP ((RSP_0 -64 224),8); (RSI,1) SEP ((RSP_0 -64 228),4); (RSI,1) SEP ((RSP_0 -64 232),4); (RSI,1) SEP ((RSP_0 -64 240),8); (RSI,1) SEP ((RSP_0 -64 248),8); (RSI,1) SEP ((RSP_0 -64 256),8); ((RSI +64 RBX),1) SEP (RSP_0,8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 8),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 16),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 24),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 32),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 40),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 48),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 56),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 224),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 228),4); ((RSI +64 RBX),1) SEP ((RSP_0 -64 232),4); ((RSI +64 RBX),1) SEP ((RSP_0 -64 240),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 248),8); ((RSI +64 RBX),1) SEP ((RSP_0 -64 256),8)"
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e4c: MOV CL, BYTE PTR [RSI + RBX] 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e4f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e4f: CMP CL, 92 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006e52"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006e52: JE 4294995562 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 27 ##
######################################
*)

htriple "ht_100006f27"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f27: CMP ECX, 92 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f2a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f2a: JNE 4294995735 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 28 ##
######################################
*)

htriple "ht_100006f2c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f2c: ADD RSI, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f2f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f2f: SUB RBX, RAX 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f32"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f32: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f35"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f35: MOV RDX, RBX 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f38"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f38: ExternalCall fun_0x10000700f 5"
 Post  "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x10000700f {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f3d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x10000700f) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f3d: MOV RAX, R14 3"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f40"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f40: JMP 4294995735 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 29 ##
######################################
*)

htriple "ht_100006f64"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f64: MOV EDX, 10 5"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f69"
 Separations "((RSP_0 -64 256),8) SEP (RDX_0,8); ((RSP_0 -64 256),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 256),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 256),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 256),8) SEP (0x10000c008,8); ((RSP_0 -64 256),8) SEP (0x10000c010,8); ((RSP_0 -64 256),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 256),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f69: MOV RDI, QWORD PTR [RBP - 248] 7"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f70"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f70: MOV RSI, R13 3"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f73"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f73: LEA RCX, [RBP - 208] 7"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f7a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f7a: XOR R8D, R8D 3"
 Post  "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f7d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RBX = 1 ; RCX = (RSP_0 -64 216) ; RDX = 10 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; R8 = 0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f7d: ExternalCall fun__regexec 5"
 Post  "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__regexec {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f82"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f82: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006f84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f84: JE 4294995481 6"
 Post  "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 30 ##
######################################
*)

htriple "ht_100006f8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006f8a: JMP 4294995468 5"
 Post  "RAX = bot(fun__regexec) ; RBX = 1 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 31 ##
######################################
*)

htriple "ht_100006fb5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fb5: MOV EAX, EBX 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fb7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fb7: ADD RSP, 216 7"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fbe"
 Separations "((RSP_0 -64 40),8) SEP (RDX_0,8); ((RSP_0 -64 40),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8); ((RSP_0 -64 40),8) SEP (0x10000c010,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 40),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fbe: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fbf"
 Separations "((RSP_0 -64 32),8) SEP (RDX_0,8); ((RSP_0 -64 32),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8); ((RSP_0 -64 32),8) SEP (0x10000c010,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 32),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fbf: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc1"
 Separations "((RSP_0 -64 24),8) SEP (RDX_0,8); ((RSP_0 -64 24),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8); ((RSP_0 -64 24),8) SEP (0x10000c010,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 24),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc1: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc3"
 Separations "((RSP_0 -64 16),8) SEP (RDX_0,8); ((RSP_0 -64 16),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8); ((RSP_0 -64 16),8) SEP (0x10000c010,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 16),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc3: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc5"
 Separations "((RSP_0 -64 8),8) SEP (RDX_0,8); ((RSP_0 -64 8),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8); ((RSP_0 -64 8),8) SEP (0x10000c010,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 8),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc5: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc7"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc7: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fc8"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fc8: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 32 ##
######################################
*)

htriple "ht_10000700a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "10000700a: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 33 ##
######################################
*)

htriple "ht_100006fcd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fcd: MOV RDI, R12 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fd0"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fd0: MOV RSI, R13 3"
 Post  "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fd3"
 Separations ""
 Assertions  ""
 Pre   "RDI = RDX_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fd3: ExternalCall fun_0x1000070bd 5"
 Post  "RAX = bot(fun_0x1000070bd) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun_0x1000070bd {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fd8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000070bd) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fd8: JMP 4294995932 2"
 Post  "RAX = bot(fun_0x1000070bd) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 34 ##
######################################
*)

htriple "ht_100006fda"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fda: XOR EBX, EBX 2"
 Post  "RBX = 0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 35 ##
######################################
*)

htriple "ht_100006fdc"
 Separations "((RSP_0 -64 224),4) SEP (RDX_0,8); ((RSP_0 -64 224),4) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 224),4) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 224),4) SEP (0x10000c008,8); ((RSP_0 -64 224),4) SEP (0x10000c010,8); ((RSP_0 -64 224),8) SEP (RDX_0,8); ((RSP_0 -64 224),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 224),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 224),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 224),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fdc: CMP DWORD PTR [RBP - 216], 0 7"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fe3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fe3: JE 4294995877 2"
 Post  "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100006d49, blockId == 36 ##
######################################
*)

htriple "ht_100006fe5"
 Separations "(0x10000c010,8) SEP (RDX_0,8); (0x10000c010,8) SEP (RSP_0,8); (0x10000c010,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (0x10000c010,8) SEP ([0x10000c008,8]_0,8); (0x10000c010,8) SEP ([0x10000c010,8]_0,8); (0x10000c010,8) SEP ([(RDI_0 +64 280),8]_0,8); (0x10000c010,8) SEP ((RDI_0 +64 280),8); (0x10000c010,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (0x10000c010,8) SEP ((RSP_0 -64 8),8); (0x10000c010,8) SEP ((RSP_0 -64 16),8); (0x10000c010,8) SEP ((RSP_0 -64 24),8); (0x10000c010,8) SEP ((RSP_0 -64 32),8); (0x10000c010,8) SEP ((RSP_0 -64 40),8); (0x10000c010,8) SEP ((RSP_0 -64 48),8); (0x10000c010,8) SEP ((RSP_0 -64 56),8); (0x10000c010,8) SEP ((RSP_0 -64 224),8); (0x10000c010,8) SEP ((RSP_0 -64 228),4); (0x10000c010,8) SEP ((RSP_0 -64 232),4); (0x10000c010,8) SEP ((RSP_0 -64 240),8); (0x10000c010,8) SEP ((RSP_0 -64 248),8); (0x10000c010,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fe5: MOV RAX, QWORD PTR [RIP + 20516] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fec"
 Separations "([0x10000c010,8]_0,8) SEP (RDX_0,8); ([0x10000c010,8]_0,8) SEP (RSP_0,8); ([0x10000c010,8]_0,8) SEP ([0x10000c008,8]_0,8); ([0x10000c010,8]_0,8) SEP ([(RDI_0 +64 280),8]_0,8); ([0x10000c010,8]_0,8) SEP (0x10000c008,8); ([0x10000c010,8]_0,8) SEP (0x10000c010,8); ([0x10000c010,8]_0,8) SEP ((RDI_0 +64 280),8); ([0x10000c010,8]_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 48),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 56),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 224),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 228),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 232),4); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 240),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 248),8); ([0x10000c010,8]_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fec: MOV RDI, QWORD PTR [RAX] 3"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006fef"
 Separations "(RDX_0,8) SEP (RSP_0,8); (RDX_0,8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); (RDX_0,8) SEP ([0x10000c008,8]_0,8); (RDX_0,8) SEP ([0x10000c010,8]_0,8); (RDX_0,8) SEP ([(RDI_0 +64 280),8]_0,8); (RDX_0,8) SEP (0x10000c008,8); (RDX_0,8) SEP (0x10000c010,8); (RDX_0,8) SEP ((RDI_0 +64 280),8); (RDX_0,8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1); (RDX_0,8) SEP ((RSP_0 -64 8),8); (RDX_0,8) SEP ((RSP_0 -64 16),8); (RDX_0,8) SEP ((RSP_0 -64 24),8); (RDX_0,8) SEP ((RSP_0 -64 32),8); (RDX_0,8) SEP ((RSP_0 -64 40),8); (RDX_0,8) SEP ((RSP_0 -64 48),8); (RDX_0,8) SEP ((RSP_0 -64 56),8); (RDX_0,8) SEP ((RSP_0 -64 208),8); (RDX_0,8) SEP ((RSP_0 -64 216),8); (RDX_0,8) SEP ((RSP_0 -64 224),8); (RDX_0,8) SEP ((RSP_0 -64 228),4); (RDX_0,8) SEP ((RSP_0 -64 232),4); (RDX_0,8) SEP ((RSP_0 -64 240),8); (RDX_0,8) SEP ((RSP_0 -64 248),8); (RDX_0,8) SEP ((RSP_0 -64 256),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006fef: MOV RCX, QWORD PTR [R12] 4"
 Post  "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ff3"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ff3: LEA RSI, [RIP + 18968] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006ffa"
 Separations "((RSP_0 -64 240),8) SEP (RDX_0,8); ((RSP_0 -64 240),8) SEP ([[(RDI_0 +64 280),8]_0,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 240),8) SEP ([0x10000c010,8]_0,8); ((RSP_0 -64 240),8) SEP ([(RDI_0 +64 280),8]_0,8); ((RSP_0 -64 240),8) SEP (0x10000c008,8); ((RSP_0 -64 240),8) SEP (0x10000c010,8); ((RSP_0 -64 240),8) SEP ((RDI_0 +64 280),8); ((RSP_0 -64 240),8) SEP (([[(RDI_0 +64 280),8]_0,8]_0 +64 48),1)"
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100006ffa: MOV RDX, QWORD PTR [RBP - 232] 7"
 Post  "RAX = [0x10000c010,8]_0 ; RDX = RSI_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007001"
 Separations ""
 Assertions  ""
 Pre   "RAX = [0x10000c010,8]_0 ; RDX = RSI_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100007001: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = RSI_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007003"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDX = RSI_0 ; RSI = 0x10000ba12 ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100007003: ExternalCall fun__fprintf 5"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 FunctionConstraints "PRESERVES fun__fprintf {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[0x10000c008,8];[0x10000c010,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 56),8];[(RSP_0 -64 224),8];[(RSP_0 -64 228),4];[(RSP_0 -64 232),4];[(RSP_0 -64 240),8];[(RSP_0 -64 248),8];[(RSP_0 -64 256),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100007008"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
 Instruction "100007008: JMP 4294995877 2"
 Post  "RAX = bot(fun__fprintf) ; RSP = (RSP_0 -64 264) ; RBP = (RSP_0 -64 8) ; R12 = RDX_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [0x10000c010,8] = [0x10000c010,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 56),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 228),4] = b32(R8_0) ; [(RSP_0 -64 232),4] = b32(RCX_0) ; [(RSP_0 -64 240),8] = RSI_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
