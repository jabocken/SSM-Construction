theory tar_1000099ad
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 1000099ad, blockId == 0 ##
#####################################
*)

htriple "ht_1000099ad"
 Separations "((RSP_0 -64 8),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 8),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099ad: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099ae"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099ae: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099b1"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099b1: SUB RSP, 208 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099b8"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099b8: TEST AL, AL 2"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099ba"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099ba: JE 4295006690 2"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000099ad, blockId == 1 ##
#####################################
*)

htriple "ht_1000099bc"
 Separations "((RSP_0 -64 168),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 168),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 168),16] = [(RSP_0 -64 168),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099bc: MOVAPS XMMWORD PTR [RBP - 160], XMM0 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099c3"
 Separations "((RSP_0 -64 152),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 152),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 152),16] = [(RSP_0 -64 152),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099c3: MOVAPS XMMWORD PTR [RBP - 144], XMM1 7"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099ca"
 Separations "((RSP_0 -64 136),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 136),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 136),16] = [(RSP_0 -64 136),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099ca: MOVAPS XMMWORD PTR [RBP - 128], XMM2 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099ce"
 Separations "((RSP_0 -64 120),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 120),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 120),16] = [(RSP_0 -64 120),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099ce: MOVAPS XMMWORD PTR [RBP - 112], XMM3 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099d2"
 Separations "((RSP_0 -64 104),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 104),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 104),16] = [(RSP_0 -64 104),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099d2: MOVAPS XMMWORD PTR [RBP - 96], XMM4 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099d6"
 Separations "((RSP_0 -64 88),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 88),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 88),16] = [(RSP_0 -64 88),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099d6: MOVAPS XMMWORD PTR [RBP - 80], XMM5 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099da"
 Separations "((RSP_0 -64 72),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 72),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 72),16] = [(RSP_0 -64 72),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099da: MOVAPS XMMWORD PTR [RBP - 64], XMM6 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099de"
 Separations "((RSP_0 -64 56),16) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 56),16) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 56),16] = [(RSP_0 -64 56),16]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099de: MOVAPS XMMWORD PTR [RBP - 48], XMM7 4"
 Post  "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000099ad, blockId == 2 ##
#####################################
*)

htriple "ht_1000099e2"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099e2: LEA RAX, [RBP - 208] 7"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099e9"
 Separations "((RSP_0 -64 200),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 200),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = [(RSP_0 -64 200),8]_0"
 Instruction "1000099e9: MOV QWORD PTR [RAX + 16], RDX 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099ed"
 Separations "((RSP_0 -64 192),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 192),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = [(RSP_0 -64 192),8]_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "1000099ed: MOV QWORD PTR [RAX + 24], RCX 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099f1"
 Separations "((RSP_0 -64 184),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 184),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = [(RSP_0 -64 184),8]_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "1000099f1: MOV QWORD PTR [RAX + 32], R8 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099f5"
 Separations "((RSP_0 -64 176),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 176),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = [(RSP_0 -64 176),8]_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "1000099f5: MOV QWORD PTR [RAX + 40], R9 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_1000099f9"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 56),16); (0x10000c008,8) SEP ((RSP_0 -64 72),16); (0x10000c008,8) SEP ((RSP_0 -64 88),16); (0x10000c008,8) SEP ((RSP_0 -64 104),16); (0x10000c008,8) SEP ((RSP_0 -64 120),16); (0x10000c008,8) SEP ((RSP_0 -64 136),16); (0x10000c008,8) SEP ((RSP_0 -64 152),16); (0x10000c008,8) SEP ((RSP_0 -64 168),16); (0x10000c008,8) SEP ((RSP_0 -64 176),8); (0x10000c008,8) SEP ((RSP_0 -64 184),8); (0x10000c008,8) SEP ((RSP_0 -64 192),8); (0x10000c008,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "1000099f9: MOV RCX, QWORD PTR [RIP + 9736] 7"
 Post  "RAX = (RSP_0 -64 216) ; RCX = [0x10000c008,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a00"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 88),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 104),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = [0x10000c008,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a00: MOV RCX, QWORD PTR [RCX] 3"
 Post  "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a03"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a03: MOV QWORD PTR [RBP - 8], RCX 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a07"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a07: LEA RDX, [RBP - 32] 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a0b"
 Separations "((RSP_0 -64 24),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 24),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a0b: MOV QWORD PTR [RDX + 16], RAX 4"
 Post  "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a0f"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 -64 216) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a0f: LEA RAX, [RBP + 16] 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a13"
 Separations "((RSP_0 -64 32),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 32),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a13: MOV QWORD PTR [RDX + 8], RAX 4"
 Post  "RAX = (RSP_0 +64 0x8) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a17"
 Separations ""
 Assertions  ""
 Pre   "RAX = (RSP_0 +64 0x8) ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a17: MOVABS RAX, 206158430224 10"
 Post  "RAX = 0x3000000010 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a21"
 Separations "((RSP_0 -64 40),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 40),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a21: MOV QWORD PTR [RDX], RAX 3"
 Post  "RAX = 0x3000000010 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a24"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x3000000010 ; RCX = [[0x10000c008,8]_0,8]_0 ; RDX = (RSP_0 -64 40) ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; XMM1 = XMM1_0 ; XMM2 = XMM2_0 ; XMM3 = XMM3_0 ; XMM4 = XMM4_0 ; XMM5 = XMM5_0 ; XMM6 = XMM6_0 ; XMM7 = XMM7_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[0x10000c008,8]_0,8] = [[0x10000c008,8]_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a24: ExternalCall fun_0x100009a47 5"
 Post  "RAX = bot(fun_0x100009a47) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 FunctionConstraints "PRESERVES fun_0x100009a47 {RSP;RBP;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 56),16];[(RSP_0 -64 72),16];[(RSP_0 -64 88),16];[(RSP_0 -64 104),16];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 176),8];[(RSP_0 -64 184),8];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a29"
 Separations "(0x10000c008,8) SEP (RSP_0,8); (0x10000c008,8) SEP ([0x10000c008,8]_0,8); (0x10000c008,8) SEP ((RSP_0 -64 8),8); (0x10000c008,8) SEP ((RSP_0 -64 16),8); (0x10000c008,8) SEP ((RSP_0 -64 24),8); (0x10000c008,8) SEP ((RSP_0 -64 32),8); (0x10000c008,8) SEP ((RSP_0 -64 40),8); (0x10000c008,8) SEP ((RSP_0 -64 56),16); (0x10000c008,8) SEP ((RSP_0 -64 72),16); (0x10000c008,8) SEP ((RSP_0 -64 88),16); (0x10000c008,8) SEP ((RSP_0 -64 104),16); (0x10000c008,8) SEP ((RSP_0 -64 120),16); (0x10000c008,8) SEP ((RSP_0 -64 136),16); (0x10000c008,8) SEP ((RSP_0 -64 152),16); (0x10000c008,8) SEP ((RSP_0 -64 168),16); (0x10000c008,8) SEP ((RSP_0 -64 176),8); (0x10000c008,8) SEP ((RSP_0 -64 184),8); (0x10000c008,8) SEP ((RSP_0 -64 192),8); (0x10000c008,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = bot(fun_0x100009a47) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a29: MOV RAX, QWORD PTR [RIP + 9688] 7"
 Post  "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a30"
 Separations "([0x10000c008,8]_0,8) SEP (RSP_0,8); ([0x10000c008,8]_0,8) SEP (0x10000c008,8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 8),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 16),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 24),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 32),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 40),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 56),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 72),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 88),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 104),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 120),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 136),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 152),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 168),16); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 176),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 184),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 192),8); ([0x10000c008,8]_0,8) SEP ((RSP_0 -64 200),8)"
 Assertions  ""
 Pre   "RAX = [0x10000c008,8]_0 ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a30: MOV RAX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a33"
 Separations "((RSP_0 -64 16),8) SEP ([0x10000c008,8]_0,8); ((RSP_0 -64 16),8) SEP (0x10000c008,8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a33: CMP RAX, QWORD PTR [RBP - 8] 4"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a37"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a37: JNE 4295006786 2"
 Post  "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000099ad, blockId == 3 ##
#####################################
*)

htriple "ht_100009a39"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a39: ADD RSP, 208 7"
 Post  "RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a40"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a40: POP RBP 1"
 Post  "RSP = RSP_0 ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100009a41"
 Separations ""
 Assertions  ""
 Pre   "RSP = RSP_0 ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a41: RET  1"
 Post  "RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 1000099ad, blockId == 4 ##
#####################################
*)

htriple "ht_100009a42"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 Instruction "100009a42: ExternalCall fun____stack_chk_fail 5"
 Post  "RAX = bot(fun____stack_chk_fail) ; RSP = (RSP_0 -64 216) ; RBP = (RSP_0 -64 8) ; [RSP_0,8] = [RSP_0,8]_0 ; [0x10000c008,8] = [0x10000c008,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [[0x10000c008,8]_0,8]_0 ; [(RSP_0 -64 24),8] = (RSP_0 -64 216) ; [(RSP_0 -64 32),8] = (RSP_0 +64 0x8) ; [(RSP_0 -64 40),8] = 0x3000000010 ; [(RSP_0 -64 176),8] = R9_0 ; [(RSP_0 -64 184),8] = R8_0 ; [(RSP_0 -64 192),8] = RCX_0 ; [(RSP_0 -64 200),8] = RDX_0"
 FunctionConstraints "PRESERVES fun____stack_chk_fail {RSP;RBP;[RSP_0,8];[0x10000c008,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 56),16];[(RSP_0 -64 72),16];[(RSP_0 -64 88),16];[(RSP_0 -64 104),16];[(RSP_0 -64 120),16];[(RSP_0 -64 136),16];[(RSP_0 -64 152),16];[(RSP_0 -64 168),16];[(RSP_0 -64 176),8];[(RSP_0 -64 184),8];[(RSP_0 -64 192),8];[(RSP_0 -64 200),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
