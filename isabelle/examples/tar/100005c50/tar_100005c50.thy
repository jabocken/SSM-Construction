theory tar_100005c50
imports "../../../isabelle/X86_Semantics/X86_Parse_Hoare_Triples"


begin


context semantics
begin

(*
#####################################
## Entry = 100005c50, blockId == 0 ##
#####################################
*)

htriple "ht_100005c50"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = [(RSP_0 -64 8),8]_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c50: PUSH RBP 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c51"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c51: MOV RBP, RSP 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c54"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = [(RSP_0 -64 16),8]_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c54: PUSH R15 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c56"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = [(RSP_0 -64 24),8]_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c56: PUSH R14 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c58"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = [(RSP_0 -64 32),8]_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c58: PUSH R13 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c5a"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = [(RSP_0 -64 40),8]_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c5a: PUSH R12 2"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c5c"
 Separations "((RSP_0 -64 48),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 48),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 48),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 48),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 48),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = [(RSP_0 -64 48),8]_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c5c: PUSH RBX 1"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c5d"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c5d: SUB RSP, 40 4"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c61"
 Separations ""
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c61: MOV R15, RDI 3"
 Post  "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c64"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = RAX_0 ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c64: MOV EAX, DWORD PTR [RDI + 120] 3"
 Post  "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c67"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c67: LEA R13, [RIP + 1042] 7"
 Post  "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c6e"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = RCX_0 ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c6e: LEA RCX, [RIP + 20870] 7"
 Post  "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = 0x10000adfb ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c75"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = 0x10000adfb ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = [(RSP_0 -64 64),8]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c75: MOV QWORD PTR [RBP - 56], RCX 4"
 Post  "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = 0x10000adfb ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c79"
 Separations ""
 Assertions  ""
 Pre   "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = 0x10000adfb ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c79: MOV R14D, 63 6"
 Post  "RAX = b32([(RDI_0 +64 120),4]_0) ; RBX = RBX_0 ; RCX = 0x10000adfb ; RDX = RDX_0 ; RDI = RDI_0 ; RSI = RSI_0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; R12 = R12_0 ; R9 = R9_0 ; R8 = R8_0 ; XMM0 = XMM0_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [[(RDI_0 +64 128),8]_0,1] = [[(RDI_0 +64 128),8]_0,1]_0 ; [[(RDI_0 +64 144),8]_0,8] = [[(RDI_0 +64 144),8]_0,8]_0 ; [(RDI_0 +64 120),4] = [(RDI_0 +64 120),4]_0 ; [(RDI_0 +64 128),8] = [(RDI_0 +64 128),8]_0 ; [(RDI_0 +64 140),4] = [(RDI_0 +64 140),4]_0 ; [(RDI_0 +64 144),8] = [(RDI_0 +64 144),8]_0 ; [(RDI_0 +64 152),8] = [(RDI_0 +64 152),8]_0 ; [([(RDI_0 +64 144),8]_0 +64 8),8] = [([(RDI_0 +64 144),8]_0 +64 8),8]_0 ; [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4] = [(0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 1 ##
#####################################
*)

htriple "ht_100005c93"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c93: MOV EAX, EAX 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c95"
 Separations ""
 Assertions  "((0x100006080 +64 (RAX *64 4)),4) SEP (RSP_0,8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 8),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 16),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 24),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 32),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 40),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 48),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 49),1); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 64),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 72),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 80),8); ((0x100006080 +64 (RAX *64 4)),4) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c95: MOVSXD RAX, DWORD PTR [R13 + RAX * 4] 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c9a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c9a: ADD RAX, R13 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c9d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c9d: JMP RAX 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 2 ##
#####################################
*)

htriple "ht_100005e39"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e39: MOV EAX, R14D 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e3c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e3c: ADD RSP, 40 4"
 Post  "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e40"
 Separations "((RSP_0 -64 40),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 40),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 40),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 40),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 40),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 48) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e40: POP RBX 1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e41"
 Separations "((RSP_0 -64 32),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 32),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 32),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 32),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 32),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 40) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e41: POP R12 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e43"
 Separations "((RSP_0 -64 24),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 24),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 24),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 24),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 24),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 32) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e43: POP R13 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e45"
 Separations "((RSP_0 -64 16),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 16),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 16),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 16),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 16),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 24) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e45: POP R14 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e47"
 Separations "((RSP_0 -64 8),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 8),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 8),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 8),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 8),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 16) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e47: POP R15 2"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e49"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = (RSP_0 -64 8) ; RBP = (RSP_0 -64 8) ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e49: POP RBP 1"
 Post  "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e4a"
 Separations ""
 Assertions  ""
 Pre   "RBX = RBX_0 ; RSP = RSP_0 ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005e4a: RET  1"
 Post  "RBX = RBX_0 ; RSP = (RSP_0 +64 8) ; RBP = RBP_0 ; R15 = R15_0 ; R14 = R14_0 ; R13 = R13_0 ; R12 = R12_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 3 ##
#####################################
*)

htriple "ht_100005c9f"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c9f: MOV RCX, QWORD PTR [R15 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ca6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ca6: LEA RAX, [RCX + 8] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005caa"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005caa: MOV QWORD PTR [R15 + 144], RAX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cb1"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cb1: MOV EAX, DWORD PTR [R15 + 140] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cb8"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cb8: LEA EDX, [RAX - 1] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cbb"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cbb: MOV DWORD PTR [R15 + 140], EDX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cc2"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 49),1); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 80),8); ((RCX +64 8),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cc2: MOV RDX, QWORD PTR [RCX + 8] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cc6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cc6: TEST RDX, RDX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cc9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cc9: JE 4294991411 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 4 ##
#####################################
*)

htriple "ht_100005cfc"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cfc: MOV RAX, QWORD PTR [R15 + 128] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d03"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d03: LEA RCX, [RAX + 1] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d07"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d07: MOV QWORD PTR [R15 + 128], RCX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d0e"
 Separations ""
 Assertions  "(RAX,1) SEP (RSP_0,8); (RAX,1) SEP ((RSP_0 -64 8),8); (RAX,1) SEP ((RSP_0 -64 16),8); (RAX,1) SEP ((RSP_0 -64 24),8); (RAX,1) SEP ((RSP_0 -64 32),8); (RAX,1) SEP ((RSP_0 -64 40),8); (RAX,1) SEP ((RSP_0 -64 48),8); (RAX,1) SEP ((RSP_0 -64 49),1); (RAX,1) SEP ((RSP_0 -64 64),8); (RAX,1) SEP ((RSP_0 -64 72),8); (RAX,1) SEP ((RSP_0 -64 80),8); (RAX,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d0e: MOVSX EBX, BYTE PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d11"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d11: TEST EBX, EBX 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d13"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d13: JNE 4294991738 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 5 ##
#####################################
*)

htriple "ht_100005d21"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d21: MOV RBX, QWORD PTR [R15 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d28"
 Separations ""
 Assertions  "(RBX,8) SEP (RSP_0,8); (RBX,8) SEP ((RSP_0 -64 8),8); (RBX,8) SEP ((RSP_0 -64 16),8); (RBX,8) SEP ((RSP_0 -64 24),8); (RBX,8) SEP ((RSP_0 -64 32),8); (RBX,8) SEP ((RSP_0 -64 40),8); (RBX,8) SEP ((RSP_0 -64 48),8); (RBX,8) SEP ((RSP_0 -64 49),1); (RBX,8) SEP ((RSP_0 -64 64),8); (RBX,8) SEP ((RSP_0 -64 72),8); (RBX,8) SEP ((RSP_0 -64 80),8); (RBX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d28: MOV RDI, QWORD PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d2b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d2b: TEST RDI, RDI 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d2e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d2e: JE 4294991411 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 6 ##
#####################################
*)

htriple "ht_100005d8b"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d8b: MOV RBX, QWORD PTR [R15 + 128] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 7 ##
#####################################
*)

htriple "ht_100005ccf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ccf: CMP BYTE PTR [RDX], 45 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cd2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cd2: JE 4294991129 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 8 ##
#####################################
*)

htriple "ht_100005e33"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e33: MOV R14D, 4294967295 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0xffffffff ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
#####################################
## Entry = 100005c50, blockId == 9 ##
#####################################
*)

htriple "ht_100005cd4"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cd4: MOV DWORD PTR [R15 + 120], 1 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cdc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cdc: LEA RDX, [RCX + 16] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ce0"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ce0: MOV QWORD PTR [R15 + 144], RDX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ce7"
 Separations ""
 Assertions  "((RCX +64 8),8) SEP (RSP_0,8); ((RCX +64 8),8) SEP ((RSP_0 -64 8),8); ((RCX +64 8),8) SEP ((RSP_0 -64 16),8); ((RCX +64 8),8) SEP ((RSP_0 -64 24),8); ((RCX +64 8),8) SEP ((RSP_0 -64 32),8); ((RCX +64 8),8) SEP ((RSP_0 -64 40),8); ((RCX +64 8),8) SEP ((RSP_0 -64 48),8); ((RCX +64 8),8) SEP ((RSP_0 -64 49),1); ((RCX +64 8),8) SEP ((RSP_0 -64 64),8); ((RCX +64 8),8) SEP ((RSP_0 -64 72),8); ((RCX +64 8),8) SEP ((RSP_0 -64 80),8); ((RCX +64 8),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ce7: MOV RCX, QWORD PTR [RCX + 8] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ceb"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ceb: MOV QWORD PTR [R15 + 128], RCX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cf2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cf2: ADD EAX, 18446744073709551614 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005cf5"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005cf5: MOV DWORD PTR [R15 + 140], EAX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 1 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 10 ##
######################################
*)

htriple "ht_100005d19"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d19: MOV DWORD PTR [R15 + 120], 2 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 11 ##
######################################
*)

htriple "ht_100005f7a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f7a: LEA RDI, [RIP + 21645] 7"
 Post  "RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f81"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f81: MOV EDX, 45 5"
 Post  "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f86"
 Separations ""
 Assertions  ""
 Pre   "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f86: MOV ESI, EBX 2"
 Post  "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f88"
 Separations ""
 Assertions  ""
 Pre   "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f88: ExternalCall fun__memchr 5"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__memchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f8d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f8d: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f90"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f90: JE 4294991417 6"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 12 ##
######################################
*)

htriple "ht_100005d34"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d34: CMP BYTE PTR [RDI], 45 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d37"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d37: JNE 4294991411 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 13 ##
######################################
*)

htriple "ht_100005d3d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d3d: LEA RSI, [RIP + 20663] 7"
 Post  "RSI = 0x10000adfb ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d44"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000adfb ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d44: ExternalCall fun__strcmp 5"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strcmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d49"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d49: LEA RCX, [RBX + 8] 4"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d4d"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d4d: MOV QWORD PTR [R15 + 144], RCX 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d54"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d54: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d56"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d56: JE 4294991404 6"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 14 ##
######################################
*)

htriple "ht_100005d5c"
 Separations ""
 Assertions  "(RBX,8) SEP (RSP_0,8); (RBX,8) SEP ((RSP_0 -64 8),8); (RBX,8) SEP ((RSP_0 -64 16),8); (RBX,8) SEP ((RSP_0 -64 24),8); (RBX,8) SEP ((RSP_0 -64 32),8); (RBX,8) SEP ((RSP_0 -64 40),8); (RBX,8) SEP ((RSP_0 -64 48),8); (RBX,8) SEP ((RSP_0 -64 49),1); (RBX,8) SEP ((RSP_0 -64 64),8); (RBX,8) SEP ((RSP_0 -64 72),8); (RBX,8) SEP ((RSP_0 -64 80),8); (RBX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d5c: MOV RBX, QWORD PTR [RBX] 3"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d5f"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d5f: MOV QWORD PTR [R15 + 128], RBX 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d66"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d66: DEC DWORD PTR [R15 + 140] 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d6d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d6d: CMP BYTE PTR [RBX + 1], 45 4"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d71"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d71: JE 4294991435 6"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 15 ##
######################################
*)

htriple "ht_100005e2c"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e2c: DEC DWORD PTR [R15 + 140] 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 16 ##
######################################
*)

htriple "ht_100005d77"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d77: INC RBX 3"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d7a"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d7a: MOV DWORD PTR [R15 + 120], 3 8"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 3 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d82"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 3 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d82: MOV QWORD PTR [R15 + 128], RBX 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 3 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d89"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 3 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d89: JMP 4294991250 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 3 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 17 ##
######################################
*)

htriple "ht_100005e4b"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e4b: MOV DWORD PTR [R15 + 120], 4 8"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e53"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e53: ADD RBX, 2 4"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e57"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e57: MOV QWORD PTR [R15 + 128], RBX 7"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e5e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e5e: JMP 4294991463 2"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e67"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e67: MOV R12, RBX 3"
 Post  "RAX = bot(fun__strcmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 18 ##
######################################
*)

htriple "ht_100005d92"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d92: LEA R12, [RBX + 1] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d96"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d96: MOV QWORD PTR [R15 + 128], R12 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005d9d"
 Separations ""
 Assertions  "(RBX,1) SEP (RSP_0,8); (RBX,1) SEP ((RSP_0 -64 8),8); (RBX,1) SEP ((RSP_0 -64 16),8); (RBX,1) SEP ((RSP_0 -64 24),8); (RBX,1) SEP ((RSP_0 -64 32),8); (RBX,1) SEP ((RSP_0 -64 40),8); (RBX,1) SEP ((RSP_0 -64 48),8); (RBX,1) SEP ((RSP_0 -64 49),1); (RBX,1) SEP ((RSP_0 -64 64),8); (RBX,1) SEP ((RSP_0 -64 72),8); (RBX,1) SEP ((RSP_0 -64 80),8); (RBX,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005d9d: MOVSX EBX, BYTE PTR [RBX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005da0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005da0: TEST EBX, EBX 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005da2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005da2: JNE 4294991286 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 19 ##
######################################
*)

htriple "ht_100005da4"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005da4: MOV DWORD PTR [R15 + 120], 2 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dac"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dac: MOV EAX, 2 5"
 Post  "RAX = 2 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005db1"
 Separations ""
 Assertions  ""
 Pre   "RAX = 2 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005db1: JMP 4294990975 5"
 Post  "RAX = 2 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 20 ##
######################################
*)

htriple "ht_100005db6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005db6: LEA RDI, [RIP + 22097] 7"
 Post  "RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dbd"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dbd: MOV EDX, 45 5"
 Post  "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dc2"
 Separations ""
 Assertions  ""
 Pre   "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dc2: MOV ESI, EBX 2"
 Post  "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dc4"
 Separations ""
 Assertions  ""
 Pre   "RDX = 45 ; RDI = 0x10000b40e ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dc4: ExternalCall fun__memchr 5"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__memchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dc9"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dc9: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dcc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dcc: JE 4294991417 2"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 21 ##
######################################
*)

htriple "ht_100005c7f"
 Separations "((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 152),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 152),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c7f: MOV QWORD PTR [R15 + 152], 0 11"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c8a"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c8a: CMP EAX, 4 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005c8d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005c8d: JA 4294991417 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = 0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 22 ##
######################################
*)

htriple "ht_100005dce"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dce: CMP BYTE PTR [RAX + 1], 58 4"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dd2"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dd2: JNE 4294991924 6"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 23 ##
######################################
*)

htriple "ht_100005dd8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dd8: CMP BYTE PTR [R12], 0 5"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ddd"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ddd: JNE 4294991371 2"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 24 ##
######################################
*)

htriple "ht_100006034"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006034: MOV R14D, EBX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006037"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006037: JMP 4294991417 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 25 ##
######################################
*)

htriple "ht_100005ddf"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ddf: MOV RAX, QWORD PTR [R15 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005de6"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005de6: MOV R12, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005de9"
 Separations "((RDI_0 +64 128),8) SEP (RSP_0,8); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 128),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 128),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 128),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 128),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005de9: MOV QWORD PTR [R15 + 128], R12 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005df0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005df0: TEST R12, R12 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005df3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005df3: JE 4294991932 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 26 ##
######################################
*)

htriple "ht_100005e0b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e0b: CMP BL, 87 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e0e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e0e: JNE 4294991909 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 27 ##
######################################
*)

htriple "ht_100005df9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005df9: ADD RAX, 8 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005dfd"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005dfd: MOV QWORD PTR [R15 + 144], RAX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e04"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e04: DEC DWORD PTR [R15 + 140] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 28 ##
######################################
*)

htriple "ht_10000603c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000603c: LEA RSI, [RIP + 21268] 7"
 Post  "RSI = 0x10000b357 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006043"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000b357 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006043: JMP 4294991948 2"
 Post  "RSI = 0x10000b357 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 29 ##
######################################
*)

htriple "ht_100005e14"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e14: MOV DWORD PTR [R15 + 120], 4 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e1c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e1c: LEA RAX, [RIP + 21844] 7"
 Post  "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e23"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e23: MOV QWORD PTR [RBP - 56], RAX 4"
 Post  "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000b377 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e27"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000b377 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e27: MOV RBX, R12 3"
 Post  "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000b377 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e2a"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000b377 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e2a: JMP 4294991466 2"
 Post  "RAX = 0x10000b377 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000b377 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 30 ##
######################################
*)

htriple "ht_100006025"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006025: MOV DWORD PTR [R15 + 120], 2 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000602d"
 Separations "((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 152),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 152),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000602d: MOV QWORD PTR [R15 + 152], R12 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 31 ##
######################################
*)

htriple "ht_100005e6a"
 Separations "((RDI_0 +64 120),4) SEP (RSP_0,8); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 120),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 120),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 120),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 120),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 4 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e6a: MOV DWORD PTR [R15 + 120], 2 8"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e72"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e72: MOV RDI, R12 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e75"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e75: MOV ESI, 61 5"
 Post  "RSI = 61 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e7a"
 Separations ""
 Assertions  ""
 Pre   "RSI = 61 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 120),4] = 2 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e7a: ExternalCall fun__strchr 5"
 Post  "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strchr {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e7f"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e7f: TEST RAX, RAX 3"
 Post  "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e82"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e82: JE 4294991517 2"
 Post  "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 32 ##
######################################
*)

htriple "ht_100005e84"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e84: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__strchr) ; RDX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e87"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RDX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e87: SUB RDX, RBX 3"
 Post  "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e8a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e8a: INC RAX 3"
 Post  "RAX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e8d"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e8d: MOV RCX, RAX 3"
 Post  "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e90"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 72),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e90: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e94"
 Separations "((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 152),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 152),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e94: MOV QWORD PTR [R15 + 152], RAX 7"
 Post  "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005e9b"
 Separations ""
 Assertions  ""
 Pre   "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e9b: JMP 4294991534 2"
 Post  "RAX = (bot(fun__strchr) +64 1) ; RCX = (bot(fun__strchr) +64 1) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RDI_0 +64 152),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = (bot(fun__strchr) +64 1) ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 33 ##
######################################
*)

htriple "ht_100005e9d"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005e9d: MOV RDI, R12 3"
 Post  "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ea0"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ea0: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ea5"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ea5: MOV RDX, RAX 3"
 Post  "RAX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ea8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ea8: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eaa"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 72),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = 0 ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005eaa: MOV QWORD PTR [RBP - 64], RAX 4"
 Post  "RAX = 0 ; RDX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 72),8] = 0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 34 ##
######################################
*)

htriple "ht_100005eae"
 Separations ""
 Assertions  "(R12,1) SEP (RSP_0,8); (R12,1) SEP ((RSP_0 -64 8),8); (R12,1) SEP ((RSP_0 -64 16),8); (R12,1) SEP ((RSP_0 -64 24),8); (R12,1) SEP ((RSP_0 -64 32),8); (R12,1) SEP ((RSP_0 -64 40),8); (R12,1) SEP ((RSP_0 -64 48),8); (R12,1) SEP ((RSP_0 -64 49),1); (R12,1) SEP ((RSP_0 -64 64),8); (R12,1) SEP ((RSP_0 -64 72),8); (R12,1) SEP ((RSP_0 -64 80),8); (R12,1) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005eae: MOV AL, BYTE PTR [R12] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eb2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005eb2: LEA R14, [RIP + 25495] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eb9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005eb9: LEA RBX, [RIP + 21883] 7"
 Post  "RBX = 0x10000b43b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ec0"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000b43b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ec0: XOR ECX, ECX 2"
 Post  "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ec2"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ec2: MOV QWORD PTR [RBP - 72], RCX 4"
 Post  "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ec6"
 Separations ""
 Assertions  ""
 Pre   "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ec6: XOR ECX, ECX 2"
 Post  "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ec8"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 88),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005ec8: MOV QWORD PTR [RBP - 80], R12 4"
 Post  "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ecc"
 Separations "((RSP_0 -64 49),1) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 49),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 49),1) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 80),8] = 0"
 Instruction "100005ecc: MOV BYTE PTR [RBP - 41], AL 3"
 Post  "RBX = 0x10000b43b ; RCX = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 0x10000c250 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 80),8] = 0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 35 ##
######################################
*)

htriple "ht_100005ed6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ed6: MOV RDI, R12 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ed9"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ed9: MOV RSI, RBX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005edc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005edc: MOV R12, RDX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005edf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005edf: ExternalCall fun__strncmp 5"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strncmp {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ee4"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ee4: TEST EAX, EAX 2"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ee6"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ee6: JE 4294991612 2"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 36 ##
######################################
*)

htriple "ht_100005ef7"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ef7: MOV RCX, R13 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005efa"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005efa: JMP 4294991646 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 37 ##
######################################
*)

htriple "ht_100005ee8"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ee8: MOV RCX, R13 3"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eeb"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005eeb: MOV RDX, R12 3"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eee"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 88),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005eee: MOV R12, QWORD PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ef2"
 Separations "((RSP_0 -64 49),1) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 49),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 49),1) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ef2: MOV AL, BYTE PTR [RBP - 41] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ef5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ef5: JMP 4294991646 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 38 ##
######################################
*)

htriple "ht_100005efc"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005efc: MOV RDI, RBX 3"
 Post  "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005eff"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strncmp) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005eff: ExternalCall fun__strlen 5"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun__strlen {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f04"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f04: MOV RCX, R14 3"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f07"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f07: MOV QWORD PTR [RBP - 72], R13 4"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f0b"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f0b: CMP RAX, R12 3"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f0e"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f0e: MOV RDX, R12 3"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f11"
 Separations "((RSP_0 -64 88),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 88),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 88),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 88),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 88),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f11: MOV R12, QWORD PTR [RBP - 80] 4"
 Post  "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f15"
 Separations "((RSP_0 -64 49),1) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 49),1) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 49),1) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 49),1) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 49),1) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RAX = bot(fun__strlen) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f15: MOV AL, BYTE PTR [RBP - 41] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f18"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f18: JE 4294991825 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 39 ##
######################################
*)

htriple "ht_100005f1e"
 Separations ""
 Assertions  "((R14 +64 16),8) SEP (RSP_0,8); ((R14 +64 16),8) SEP ((RSP_0 -64 8),8); ((R14 +64 16),8) SEP ((RSP_0 -64 16),8); ((R14 +64 16),8) SEP ((RSP_0 -64 24),8); ((R14 +64 16),8) SEP ((RSP_0 -64 32),8); ((R14 +64 16),8) SEP ((RSP_0 -64 40),8); ((R14 +64 16),8) SEP ((RSP_0 -64 48),8); ((R14 +64 16),8) SEP ((RSP_0 -64 49),1); ((R14 +64 16),8) SEP ((RSP_0 -64 64),8); ((R14 +64 16),8) SEP ((RSP_0 -64 72),8); ((R14 +64 16),8) SEP ((RSP_0 -64 80),8); ((R14 +64 16),8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f1e: MOV RBX, QWORD PTR [R14 + 16] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f22"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f22: ADD R14, 16 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f26"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f26: TEST RBX, RBX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f29"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f29: JNE 4294991567 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 40 ##
######################################
*)

htriple "ht_100005fd1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fd1: CMP DWORD PTR [R14 + 8], 0 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fd6"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fd6: JE 4294991881 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 41 ##
######################################
*)

htriple "ht_100005ecf"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ecf: MOV R13, RCX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ed2"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ed2: CMP BYTE PTR [RBX], AL 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ed4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ed4: JNE 4294991607 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 42 ##
######################################
*)

htriple "ht_100005f2b"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f2b: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f2e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f2e: JE 4294991717 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 43 ##
######################################
*)

htriple "ht_100005f30"
 Separations "((RSP_0 -64 80),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 80),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 80),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 80),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 80),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f30: MOV RAX, QWORD PTR [RBP - 72] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f34"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f34: TEST RAX, RAX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f37"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f37: MOV R14D, 63 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f3d"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f3d: JE 4294991822 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 44 ##
######################################
*)

htriple "ht_100005f65"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f65: LEA RSI, [RIP + 21519] 7"
 Post  "RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f6c"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f6c: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f6e"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f6e: MOV RDX, QWORD PTR [RBP - 56] 4"
 Post  "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f72"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f72: MOV RCX, R12 3"
 Post  "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f75"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f75: JMP 4294991980 5"
 Post  "RDI = 0 ; RSI = 0x10000b37b ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 45 ##
######################################
*)

htriple "ht_100005f43"
 Separations ""
 Assertions  "(RCX,8) SEP (RSP_0,8); (RCX,8) SEP ((RSP_0 -64 8),8); (RCX,8) SEP ((RSP_0 -64 16),8); (RCX,8) SEP ((RSP_0 -64 24),8); (RCX,8) SEP ((RSP_0 -64 32),8); (RCX,8) SEP ((RSP_0 -64 40),8); (RCX,8) SEP ((RSP_0 -64 48),8); (RCX,8) SEP ((RSP_0 -64 49),1); (RCX,8) SEP ((RSP_0 -64 64),8); (RCX,8) SEP ((RSP_0 -64 72),8); (RCX,8) SEP ((RSP_0 -64 80),8); (RCX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f43: MOV R8, QWORD PTR [RCX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f46"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f46: MOV R9, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f49"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f49: LEA RSI, [RIP + 21576] 7"
 Post  "RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f50"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f50: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f52"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f52: MOV RDX, QWORD PTR [RBP - 56] 4"
 Post  "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f56"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f56: MOV RCX, R12 3"
 Post  "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f59"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f59: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f5b"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSI = 0x10000b398 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f5b: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f60"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005f60: JMP 4294991417 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 46 ##
######################################
*)

htriple "ht_100005fce"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fce: MOV R14, RCX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 47 ##
######################################
*)

htriple "ht_100005f96"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f96: CMP BYTE PTR [RAX + 1], 58 4"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005f9a"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005f9a: JNE 4294991924 6"
 Post  "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 48 ##
######################################
*)

htriple "ht_100005fa0"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RAX = bot(fun__memchr) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fa0: MOV RAX, QWORD PTR [R15 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fa7"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fa7: MOV RCX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005faa"
 Separations "((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 152),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 152),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005faa: MOV QWORD PTR [R15 + 152], RCX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb1"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fb1: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fb4"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fb4: JE 4294991941 6"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 49 ##
######################################
*)

htriple "ht_100005fba"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fba: ADD RAX, 8 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fbe"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fbe: MOV QWORD PTR [R15 + 144], RAX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fc5"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fc5: DEC DWORD PTR [R15 + 140] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fcc"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100005fcc: JMP 4294991924 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 50 ##
######################################
*)

htriple "ht_100006045"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006045: LEA RSI, [RIP + 21228] 7"
 Post  "RSI = 0x10000b338 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 51 ##
######################################
*)

htriple "ht_100005fd8"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 72),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fd8: CMP QWORD PTR [RBP - 64], 0 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fdd"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fdd: JNE 4294991900 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 52 ##
######################################
*)

htriple "ht_100006009"
 Separations "((RSP_0 -64 72),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 72),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 72),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 72),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 72),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006009: CMP QWORD PTR [RBP - 64], 0 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000600e"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000600e: JE 4294991900 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 53 ##
######################################
*)

htriple "ht_100005fdf"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fdf: MOV RAX, QWORD PTR [R15 + 144] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fe6"
 Separations ""
 Assertions  "(RAX,8) SEP (RSP_0,8); (RAX,8) SEP ((RSP_0 -64 8),8); (RAX,8) SEP ((RSP_0 -64 16),8); (RAX,8) SEP ((RSP_0 -64 24),8); (RAX,8) SEP ((RSP_0 -64 32),8); (RAX,8) SEP ((RSP_0 -64 40),8); (RAX,8) SEP ((RSP_0 -64 48),8); (RAX,8) SEP ((RSP_0 -64 49),1); (RAX,8) SEP ((RSP_0 -64 64),8); (RAX,8) SEP ((RSP_0 -64 72),8); (RAX,8) SEP ((RSP_0 -64 80),8); (RAX,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fe6: MOV RCX, QWORD PTR [RAX] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005fe9"
 Separations "((RDI_0 +64 152),8) SEP (RSP_0,8); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 152),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 152),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 152),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 152),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005fe9: MOV QWORD PTR [R15 + 152], RCX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ff0"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ff0: TEST RCX, RCX 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ff3"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ff3: JE 4294991964 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 54 ##
######################################
*)

htriple "ht_10000601c"
 Separations ""
 Assertions  "((R14 +64 12),4) SEP (RSP_0,8); ((R14 +64 12),4) SEP ((RSP_0 -64 8),8); ((R14 +64 12),4) SEP ((RSP_0 -64 16),8); ((R14 +64 12),4) SEP ((RSP_0 -64 24),8); ((R14 +64 12),4) SEP ((RSP_0 -64 32),8); ((R14 +64 12),4) SEP ((RSP_0 -64 40),8); ((R14 +64 12),4) SEP ((RSP_0 -64 48),8); ((R14 +64 12),4) SEP ((RSP_0 -64 49),1); ((R14 +64 12),4) SEP ((RSP_0 -64 64),8); ((R14 +64 12),4) SEP ((RSP_0 -64 72),8); ((R14 +64 12),4) SEP ((RSP_0 -64 80),8); ((R14 +64 12),4) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000601c: MOV R14D, DWORD PTR [R14 + 12] 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006020"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006020: JMP 4294991417 5"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 55 ##
######################################
*)

htriple "ht_100005ff5"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ff5: ADD RAX, 8 4"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100005ff9"
 Separations "((RDI_0 +64 144),8) SEP (RSP_0,8); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 144),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 144),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 144),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 144),8) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100005ff9: MOV QWORD PTR [R15 + 144], RAX 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006000"
 Separations "((RDI_0 +64 140),4) SEP (RSP_0,8); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 128),8]_0,1); ((RDI_0 +64 140),4) SEP ([(RDI_0 +64 144),8]_0,8); ((RDI_0 +64 140),4) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RDI_0 +64 140),4) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 8),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 16),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 24),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 32),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 40),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 48),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 49),1); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 64),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 72),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 80),8); ((RDI_0 +64 140),4) SEP ((RSP_0 -64 88),8)"
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006000: DEC DWORD PTR [R15 + 140] 7"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006007"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006007: JMP 4294991900 2"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 56 ##
######################################
*)

htriple "ht_10000605c"
 Separations ""
 Assertions  "(R14,8) SEP (RSP_0,8); (R14,8) SEP ((RSP_0 -64 8),8); (R14,8) SEP ((RSP_0 -64 16),8); (R14,8) SEP ((RSP_0 -64 24),8); (R14,8) SEP ((RSP_0 -64 32),8); (R14,8) SEP ((RSP_0 -64 40),8); (R14,8) SEP ((RSP_0 -64 48),8); (R14,8) SEP ((RSP_0 -64 49),1); (R14,8) SEP ((RSP_0 -64 64),8); (R14,8) SEP ((RSP_0 -64 72),8); (R14,8) SEP ((RSP_0 -64 80),8); (R14,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000605c: MOV RCX, QWORD PTR [R14] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000605f"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000605f: LEA RSI, [RIP + 21344] 7"
 Post  "RSI = 0x10000b3c6 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 57 ##
######################################
*)

htriple "ht_100006010"
 Separations ""
 Assertions  "(R14,8) SEP (RSP_0,8); (R14,8) SEP ((RSP_0 -64 8),8); (R14,8) SEP ((RSP_0 -64 16),8); (R14,8) SEP ((RSP_0 -64 24),8); (R14,8) SEP ((RSP_0 -64 32),8); (R14,8) SEP ((RSP_0 -64 40),8); (R14,8) SEP ((RSP_0 -64 48),8); (R14,8) SEP ((RSP_0 -64 49),1); (R14,8) SEP ((RSP_0 -64 64),8); (R14,8) SEP ((RSP_0 -64 72),8); (R14,8) SEP ((RSP_0 -64 80),8); (R14,8) SEP ((RSP_0 -64 88),8)"
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006010: MOV RCX, QWORD PTR [R14] 3"
 Post  "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006013"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006013: LEA RSI, [RIP + 21453] 7"
 Post  "RSI = 0x10000b3e7 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000601a"
 Separations ""
 Assertions  ""
 Pre   "RSI = 0x10000b3e7 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000601a: JMP 4294991974 2"
 Post  "RSI = 0x10000b3e7 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 58 ##
######################################
*)

htriple "ht_10000604c"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000604c: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000604e"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "10000604e: MOV EDX, EBX 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006050"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006050: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006052"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006052: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006057"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
 Instruction "100006057: JMP 4294991417 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; R13 = 0x100006080 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0 ; [(RSP_0 -64 49),1] = [(RSP_0 -64 49),1]_0 ; [(RSP_0 -64 64),8] = 0x10000adfb ; [(RSP_0 -64 72),8] = [(RSP_0 -64 72),8]_0 ; [(RSP_0 -64 80),8] = [(RSP_0 -64 80),8]_0 ; [(RSP_0 -64 88),8] = [(RSP_0 -64 88),8]_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 59 ##
######################################
*)

htriple "ht_100006066"
 Separations ""
 Assertions  ""
 Pre   "RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006066: XOR EDI, EDI 2"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006068"
 Separations "((RSP_0 -64 64),8) SEP ([(RDI_0 +64 128),8]_0,1); ((RSP_0 -64 64),8) SEP ([(RDI_0 +64 144),8]_0,8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 120),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 128),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 140),4); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 144),8); ((RSP_0 -64 64),8) SEP ((RDI_0 +64 152),8); ((RSP_0 -64 64),8) SEP (([(RDI_0 +64 144),8]_0 +64 8),8); ((RSP_0 -64 64),8) SEP ((0x100006080 +64 (b32([(RDI_0 +64 120),4]_0) *64 4)),4)"
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006068: MOV RDX, QWORD PTR [RBP - 56] 4"
 Post  "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




(*
######################################
## Entry = 100005c50, blockId == 60 ##
######################################
*)

htriple "ht_10000606c"
 Separations ""
 Assertions  ""
 Pre   "RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000606c: XOR EAX, EAX 2"
 Post  "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_10000606e"
 Separations ""
 Assertions  ""
 Pre   "RAX = 0 ; RDI = 0 ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "10000606e: ExternalCall fun_0x1000099ad 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 FunctionConstraints "PRESERVES fun_0x1000099ad {RBX;RSP;RBP;R15;R14;R13;R12;[RSP_0,8];[(RSP_0 -64 8),8];[(RSP_0 -64 16),8];[(RSP_0 -64 24),8];[(RSP_0 -64 32),8];[(RSP_0 -64 40),8];[(RSP_0 -64 48),8];[(RSP_0 -64 49),1];[(RSP_0 -64 64),8];[(RSP_0 -64 72),8];[(RSP_0 -64 80),8];[(RSP_0 -64 88),8]}"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006073"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006073: MOV R14D, 63 6"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)


htriple "ht_100006079"
 Separations ""
 Assertions  ""
 Pre   "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
 Instruction "100006079: JMP 4294991417 5"
 Post  "RAX = bot(fun_0x1000099ad) ; RSP = (RSP_0 -64 88) ; RBP = (RSP_0 -64 8) ; R15 = RDI_0 ; R14 = 63 ; [RSP_0,8] = [RSP_0,8]_0 ; [(RSP_0 -64 8),8] = RBP_0 ; [(RSP_0 -64 16),8] = R15_0 ; [(RSP_0 -64 24),8] = R14_0 ; [(RSP_0 -64 32),8] = R13_0 ; [(RSP_0 -64 40),8] = R12_0 ; [(RSP_0 -64 48),8] = RBX_0"
  by (htriple_solver seps: conjI[OF seps asserts,simplified] assms: assms)




end
end
